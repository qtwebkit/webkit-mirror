diff --git a/src/lib/ecore/ecore_pipe.c b/src/lib/ecore/ecore_pipe.c
index 705673b..44af8ad 100644
--- a/src/lib/ecore/ecore_pipe.c
+++ b/src/lib/ecore/ecore_pipe.c
@@ -586,12 +586,21 @@ _ecore_pipe_handler_call(Ecore_Pipe *p,
                          size_t len)
 {
    void *data = (void*) p->data;
+   
+   // clear all values of pipe first.
+   p->passed_data = NULL;
+   p->already_read = 0;
+   p->len = 0;
+   p->message++;
+
    if (!p->delete_me)
      {
         _ecore_unlock();
         p->handler(data, buf, len);
         _ecore_lock();
      }
+   // free p->passed_data
+   free(buf);
 }
 
 static Eina_Bool
@@ -634,11 +643,6 @@ _ecore_pipe_read(void             *data,
                       {
      /* no data on first try through means an error */
                           _ecore_pipe_handler_call(p, NULL, 0);
-                          if (p->passed_data) free(p->passed_data);
-                          p->passed_data = NULL;
-                          p->already_read = 0;
-                          p->len = 0;
-                          p->message++;
                           pipe_close(p->fd_read);
                           p->fd_read = PIPE_FD_INVALID;
                           p->fd_handler = NULL;
@@ -673,11 +677,6 @@ _ecore_pipe_read(void             *data,
                    if (WSAGetLastError() != WSAEWOULDBLOCK)
                      {
                         _ecore_pipe_handler_call(p, NULL, 0);
-                        if (p->passed_data) free(p->passed_data);
-                        p->passed_data = NULL;
-                        p->already_read = 0;
-                        p->len = 0;
-                        p->message++;
                         pipe_close(p->fd_read);
                         p->fd_read = PIPE_FD_INVALID;
                         p->fd_handler = NULL;
@@ -694,12 +693,6 @@ _ecore_pipe_read(void             *data,
         if (p->len == 0)
           {
              _ecore_pipe_handler_call(p, NULL, 0);
-             /* reset all values to 0 */
-             if (p->passed_data) free(p->passed_data);
-             p->passed_data = NULL;
-             p->already_read = 0;
-             p->len = 0;
-             p->message++;
              _ecore_pipe_unhandle(p);
              return ECORE_CALLBACK_RENEW;
           }
@@ -713,9 +706,6 @@ _ecore_pipe_read(void             *data,
                {
                   _ecore_pipe_handler_call(p, NULL, 0);
      /* close the pipe */
-                  p->already_read = 0;
-                  p->len = 0;
-                  p->message++;
                   pipe_close(p->fd_read);
                   p->fd_read = PIPE_FD_INVALID;
                   p->fd_handler = NULL;
@@ -732,15 +722,7 @@ _ecore_pipe_read(void             *data,
         /* catch the non error case first */
         /* if we read enough data to finish the message/buffer */
         if (ret == (ssize_t)(p->len - p->already_read))
-          {
-             _ecore_pipe_handler_call(p, p->passed_data, p->len);
-             free(p->passed_data);
-             /* reset all values to 0 */
-             p->passed_data = NULL;
-             p->already_read = 0;
-             p->len = 0;
-             p->message++;
-          }
+           _ecore_pipe_handler_call(p, p->passed_data, p->len);
         else if (ret > 0)
           {
              /* more data left to read */
@@ -775,11 +757,6 @@ _ecore_pipe_read(void             *data,
              if (WSAGetLastError() != WSAEWOULDBLOCK)
                {
                   _ecore_pipe_handler_call(p, NULL, 0);
-                  if (p->passed_data) free(p->passed_data);
-                  p->passed_data = NULL;
-                  p->already_read = 0;
-                  p->len = 0;
-                  p->message++;
                   pipe_close(p->fd_read);
                   p->fd_read = PIPE_FD_INVALID;
                   p->fd_handler = NULL;
