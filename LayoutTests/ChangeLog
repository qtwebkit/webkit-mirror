2019-08-27  Ryan Haddad  <ryanhaddad@apple.com>

        Revert r249166. rdar://problem/53829560

2019-08-27  Alan Coon  <alancoon@apple.com>

        Revert r249147. rdar://problem/54751753

2019-08-27  Ryan Haddad  <ryanhaddad@apple.com>

        Cherry-pick r249157. rdar://problem/53829560

    Unreviewed test gardening, remove failure expectations for tests that are now passing.
    
    * platform/ios-12/TestExpectations:
    * platform/ios/TestExpectations:
    
    git-svn-id: http://svn.webkit.org/repository/webkit/trunk@249157 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-08-27  Ryan Haddad  <ryanhaddad@apple.com>

            Unreviewed test gardening, remove failure expectations for tests that are now passing.

            * platform/ios-12/TestExpectations:
            * platform/ios/TestExpectations:

2019-08-27  Ryan Haddad  <ryanhaddad@apple.com>

        Cherry-pick r249099. rdar://problem/51857070

    rdar://51857070 (iPad: Many fast/text-autosizing layout tests are consistently failing)
    
    Unreviewed Test Gardening.
    Tests are no longer failing. Removing test expectations.
    
    * platform/ipad/TestExpectations:
    
    git-svn-id: http://svn.webkit.org/repository/webkit/trunk@249099 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-08-26  Russell Epstein  <repstein@apple.com>

            rdar://51857070 (iPad: Many fast/text-autosizing layout tests are consistently failing)

            Unreviewed Test Gardening.
            Tests are no longer failing. Removing test expectations.

            * platform/ipad/TestExpectations:

2019-08-27  Alan Coon  <alancoon@apple.com>

        Cherry-pick r249147. rdar://problem/54751753

    Removing fullscreen element in rAF() callback after requestFullscreen() can leave fullscreen in inconsistent state.
    https://bugs.webkit.org/show_bug.cgi?id=201101
    <rdar://problem/54164587>
    
    Reviewed by Eric Carlson.
    
    Source/WebCore:
    
    Test: fullscreen/full-screen-request-removed-with-raf.html
    
    Add a new state variable, m_pendingFullscreenElement, to track which element is about to
    become the fullscreen element, so that when elements are removed or cancelFullscreen() is
    called, the state machine inside the fullscreen algorithm can cancel effectively.
    
    * dom/FullscreenManager.cpp:
    (WebCore::FullscreenManager::requestFullscreenForElement):
    (WebCore::FullscreenManager::cancelFullscreen):
    (WebCore::FullscreenManager::exitFullscreen):
    (WebCore::FullscreenManager::willEnterFullscreen):
    (WebCore::FullscreenManager::willExitFullscreen):
    (WebCore::FullscreenManager::didExitFullscreen):
    (WebCore::FullscreenManager::adjustFullscreenElementOnNodeRemoval):
    (WebCore::FullscreenManager::clear):
    (WebCore::FullscreenManager::fullscreenElementRemoved): Deleted.
    * dom/FullscreenManager.h:
    
    Source/WebKit:
    
    Add more state to track in which direction the animation is flowing to allow in-process
    animations to be cancelled more gracefully.
    
    * UIProcess/ios/fullscreen/WKFullScreenWindowControllerIOS.mm:
    (-[WKFullScreenWindowController enterFullScreen]):
    (-[WKFullScreenWindowController beganEnterFullScreenWithInitialFrame:finalFrame:]):
    (-[WKFullScreenWindowController requestExitFullScreen]):
    (-[WKFullScreenWindowController exitFullScreen]):
    * WebProcess/cocoa/VideoFullscreenManager.h:
    (WebKit::VideoFullscreenInterfaceContext::animationState const):
    (WebKit::VideoFullscreenInterfaceContext::setAnimationState):
    (WebKit::VideoFullscreenInterfaceContext::isAnimating const): Deleted.
    (WebKit::VideoFullscreenInterfaceContext::setIsAnimating): Deleted.
    * WebProcess/cocoa/VideoFullscreenManager.mm:
    (WebKit::VideoFullscreenManager::enterVideoFullscreenForVideoElement):
    (WebKit::VideoFullscreenManager::exitVideoFullscreenForVideoElement):
    (WebKit::VideoFullscreenManager::didEnterFullscreen):
    (WebKit::VideoFullscreenManager::didCleanupFullscreen):
    
    LayoutTests:
    
    * fullscreen/full-screen-request-removed-with-raf-expected.txt: Added.
    * fullscreen/full-screen-request-removed-with-raf.html: Added.
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@249147 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-08-26  Jer Noble  <jer.noble@apple.com>

            Removing fullscreen element in rAF() callback after requestFullscreen() can leave fullscreen in inconsistent state.
            https://bugs.webkit.org/show_bug.cgi?id=201101
            <rdar://problem/54164587>

            Reviewed by Eric Carlson.

            * fullscreen/full-screen-request-removed-with-raf-expected.txt: Added.
            * fullscreen/full-screen-request-removed-with-raf.html: Added.

2019-08-27  Alan Coon  <alancoon@apple.com>

        Cherry-pick r249074. rdar://problem/54735492

    [iOS] [WebKit2] Tapping on the “I’m” text suggestion after typing “i’” does nothing
    https://bugs.webkit.org/show_bug.cgi?id=201085
    <rdar://problem/53056118>
    
    Reviewed by Tim Horton.
    
    Source/WebCore:
    
    Exposes an existing quote folding function as a helper on TextIterator, and also adjusts foldQuoteMarks to take
    a const String& rather than a String. See WebKit ChangeLog for more details.
    
    * editing/TextIterator.cpp:
    (WebCore::foldQuoteMarks):
    (WebCore::SearchBuffer::SearchBuffer):
    * editing/TextIterator.h:
    
    Source/WebKit:
    
    Currently, logic in applyAutocorrectionInternal only selects the range to autocorrect if the text of the range
    matches the string to replace (delivered to us from UIKit). In the case of changing "I’" to "I’m", the string to
    replace is "I'" (with a straight quote rather than an apostrophe), even though the DOM contains an apostrophe.
    
    This is because kbd believes that the document context contains straight quotes (rather than apostrophes). For
    native text views, this works out because UIKit uses relative UITextPositions to determine the replacement
    range rather than by checking against the contents of the document. However, WKWebView does not have the ability
    to synchronously compute and reason about arbitrary UITextPositions relative to the selection, so we instead
    search for the string near the current selection when applying autocorrections.
    
    Of course, this doesn't work in this scenario because the replacement string contains a straight quote, yet the
    text node contains an apostrophe, so we bail and don't end up replacing any text. To address this, we repurpose
    TextIterator helpers currently used to allow find-in-page to match straight quotes against apostrophes; instead
    of matching the replacement string exactly, we instead match the quote-folded versions of these strings when
    finding the range to replace.
    
    Test: fast/events/ios/autocorrect-with-apostrophe.html
    
    * WebProcess/WebPage/ios/WebPageIOS.mm:
    (WebKit::WebPage::applyAutocorrectionInternal):
    
    LayoutTests:
    
    Add a new layout test to verify that "I’" can be autocorrected to "I’m".
    
    * fast/events/ios/autocorrect-with-apostrophe-expected.txt: Added.
    * fast/events/ios/autocorrect-with-apostrophe.html: Added.
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@249074 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-08-23  Wenson Hsieh  <wenson_hsieh@apple.com>

            [iOS] [WebKit2] Tapping on the “I’m” text suggestion after typing “i’” does nothing
            https://bugs.webkit.org/show_bug.cgi?id=201085
            <rdar://problem/53056118>

            Reviewed by Tim Horton.

            Add a new layout test to verify that "I’" can be autocorrected to "I’m".

            * fast/events/ios/autocorrect-with-apostrophe-expected.txt: Added.
            * fast/events/ios/autocorrect-with-apostrophe.html: Added.

2019-08-23  Ryan Haddad  <ryanhaddad@apple.com>

        Cherry-pick r249042. rdar://problem/54622280

    Revert delete-in-input-in-iframe.html and typing-in-input-in-iframe.html to original behaviour after r248977 and make associated test autoscroll-input-when-very-zoomed.html more stable
    https://bugs.webkit.org/show_bug.cgi?id=201058
    
    Reviewed by Simon Fraser.
    
    delete-in-input-in-iframe and typing-in-input-in-iframe were changed when scrolling was made to work differently in r244141.
    They actually did find a bug, and that bug was fixed in r248977, so we put the tests back to test that scolls do not happen.
    Also update autoscroll-input-when-very-zoomed which was added to test r248977 to be more robust.
    
    * fast/forms/ios/delete-in-input-in-iframe-expected.txt:
    * fast/forms/ios/delete-in-input-in-iframe.html:
    * fast/forms/ios/typing-in-input-in-iframe-expected.txt:
    * fast/forms/ios/typing-in-input-in-iframe.html:
    * fast/scrolling/ios/autoscroll-input-when-very-zoomed.html:
    
    
    git-svn-id: http://svn.webkit.org/repository/webkit/trunk@249042 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-08-23  Megan Gardner  <megan_gardner@apple.com>

            Revert delete-in-input-in-iframe.html and typing-in-input-in-iframe.html to original behaviour after r248977 and make associated test autoscroll-input-when-very-zoomed.html more stable
            https://bugs.webkit.org/show_bug.cgi?id=201058

            Reviewed by Simon Fraser.

            delete-in-input-in-iframe and typing-in-input-in-iframe were changed when scrolling was made to work differently in r244141.
            They actually did find a bug, and that bug was fixed in r248977, so we put the tests back to test that scolls do not happen.
            Also update autoscroll-input-when-very-zoomed which was added to test r248977 to be more robust.

            * fast/forms/ios/delete-in-input-in-iframe-expected.txt:
            * fast/forms/ios/delete-in-input-in-iframe.html:
            * fast/forms/ios/typing-in-input-in-iframe-expected.txt:
            * fast/forms/ios/typing-in-input-in-iframe.html:
            * fast/scrolling/ios/autoscroll-input-when-very-zoomed.html:

2019-08-23  Ryan Haddad  <ryanhaddad@apple.com>

        Cherry-pick r249028. rdar://problem/54614691

    REGRESSION (r248974): fast/events/ios/select-all-with-existing-selection.html fails
    https://bugs.webkit.org/show_bug.cgi?id=201050
    
    Reviewed by Wenson Hsieh.
    
    * fast/events/ios/select-all-with-existing-selection.html:
    The test as-written doesn't actually wait for the tap to complete before
    continuing on with the test - it starts immediately when the focus event
    fires. This results in the selection being changed by the single click
    handler *after* focusing the field.
    
    Rewrite the test to await completion of the tap before moving forward
    instead of waiting for focus.
    
    
    git-svn-id: http://svn.webkit.org/repository/webkit/trunk@249028 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-08-22  Tim Horton  <timothy_horton@apple.com>

            REGRESSION (r248974): fast/events/ios/select-all-with-existing-selection.html fails
            https://bugs.webkit.org/show_bug.cgi?id=201050

            Reviewed by Wenson Hsieh.

            * fast/events/ios/select-all-with-existing-selection.html:
            The test as-written doesn't actually wait for the tap to complete before
            continuing on with the test - it starts immediately when the focus event
            fires. This results in the selection being changed by the single click
            handler *after* focusing the field.

            Rewrite the test to await completion of the tap before moving forward
            instead of waiting for focus.

2019-08-23  Ryan Haddad  <ryanhaddad@apple.com>

        Cherry-pick r249017. rdar://problem/54564878

    Rebaseline some editing tests after r248974
    https://bugs.webkit.org/show_bug.cgi?id=200999
    <rdar://problem/54564878>
    
    * platform/ios/editing/deleting/smart-delete-003-expected.txt:
    * platform/ios/editing/deleting/smart-delete-004-expected.txt:
    * platform/ios/editing/pasteboard/smart-paste-008-expected.txt:
    
    
    git-svn-id: http://svn.webkit.org/repository/webkit/trunk@249017 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-08-22  Tim Horton  <timothy_horton@apple.com>

            Rebaseline some editing tests after r248974
            https://bugs.webkit.org/show_bug.cgi?id=200999
            <rdar://problem/54564878>

            * platform/ios/editing/deleting/smart-delete-003-expected.txt:
            * platform/ios/editing/deleting/smart-delete-004-expected.txt:
            * platform/ios/editing/pasteboard/smart-paste-008-expected.txt:

2019-08-22  Kocsen Chung  <kocsen_chung@apple.com>

        Cherry-pick r249006. rdar://problem/54600921

    Typing Korean in title field after typing in the body inserts extraneous characters on blog.naver.com
    https://bugs.webkit.org/show_bug.cgi?id=201023
    <rdar://problem/54294794>
    
    Reviewed by Ryosuke Niwa.
    
    Source/WebCore:
    
    Ensures that we recognize the blog editor on blog.naver.com to be a hidden editable area. This website places
    focus inside an editable body element of a subframe that is completely empty (width: 0 and border: 0). See the
    WebKit ChangeLog for more details.
    
    Test: editing/selection/ios/do-not-show-selection-in-empty-borderless-subframe.html
    
    * rendering/RenderLayer.cpp:
    (WebCore::RenderLayer::calculateClipRects const):
    
    Source/WebKit:
    
    After r242833, we began to avoid sending redundant ElementDidFocus updates in the case where a focused element
    was blurred and refocused within the same runloop. This was done to prevent the input view from flickering due
    to input view reloading, as well as scrolling to reveal the focused element, when tapping to change selection on
    Microsoft Word online.
    
    However, on blog.naver.com, these ElementDidFocus messages were necessary in order to ensure that the platform
    input context changes when moving between the title and body fields, or when tapping to change selection. This
    is because blog.naver.com uses a hidden contenteditable area under a subframe (see WebCore ChangeLog for more
    detail here). While text is never directly inserted into this hidden contenteditable, the events are observed
    and used to "play back" editing in the main visible content area.
    
    Thus, when moving between the title and body fields (or when changing selection within either), the only hint we
    get is that the hidden editable element is blurred and immediately refocused. Since we no longer send
    ElementDidFocus updates in this scenario, UIKeyboardImpl and kbd are not aware that the page has effectively
    changed input contexts.
    
    Combined with the fact that Korean IME on iOS may insert additional text given the document context (i.e. text
    that the input manager, kbd, thinks we've previously inserted), this means that when typing several characters
    into the body field on naver and then switching to edit the title, initial keystrokes may insert unexpected
    text in the title field.
    
    To fix this, we add some hooks to notify the UI process when an element that was blurred has been immediately
    refocused. Upon receiving this message, the UI process then tells UIKeyboardImpl to re-retrieve its input
    context, which calls into -requestAutocorrectionContextWithCompletionHandler: in WKContentView. While notorious
    for being synchronous IPC, this is mitigated by (1) being limiting to only instances where we have a hidden
    editable area, and (2) being limited by a batching mechanism in the web process, such that if the focused
    element is blurred, refocused, re-blurred, and refocused many times in the same runloop, we'll only send a
    single UpdateInputContextAfterBlurringAndRefocusingElement message (as opposed to the many ElementDidFocus
    messages we would've sent in previous releases).
    
    * Platform/spi/ios/UIKitSPI.h:
    * UIProcess/PageClient.h:
    * UIProcess/WebPageProxy.h:
    * UIProcess/WebPageProxy.messages.in:
    
    Add a new mechanism to update the platform input context (on iOS, UIKeyboardImpl's document state) when focus
    moves away from and immediately returns to a hidden editable element.
    
    * UIProcess/ios/PageClientImplIOS.h:
    * UIProcess/ios/PageClientImplIOS.mm:
    (WebKit::PageClientImpl::updateInputContextAfterBlurringAndRefocusingElement):
    * UIProcess/ios/WKContentViewInteraction.h:
    * UIProcess/ios/WKContentViewInteraction.mm:
    (-[WKContentView _updateInputContextAfterBlurringAndRefocusingElement]):
    
    Tell the active UIKeyboardImpl to refetch document state from the WKContentView. While this does result in a new
    autocorrection context request (which, unfortunately, triggers synchronous IPC to the web process), this request
    would've still happened anyways in the case where we would previously have sent an ElementDidFocus message.
    
    * UIProcess/ios/WebPageProxyIOS.mm:
    (WebKit::WebPageProxy::updateInputContextAfterBlurringAndRefocusingElement):
    * WebProcess/WebPage/WebPage.cpp:
    (WebKit::WebPage::elementDidFocus):
    
    In the case where we avoid sending a full ElementDidFocus message to the UI process due to refocusing the same
    element, we should still notify the UI process so that it can synchronize state between the application process
    and kbd. See above for more details.
    
    (WebKit::WebPage::elementDidBlur):
    (WebKit::WebPage::updateInputContextAfterBlurringAndRefocusingElementIfNeeded):
    * WebProcess/WebPage/WebPage.h:
    * WebProcess/WebPage/ios/WebPageIOS.mm:
    (WebKit::WebPage::updateInputContextAfterBlurringAndRefocusingElementIfNeeded):
    
    LayoutTests:
    
    Add a new layout test to verify that we suppress text interactions when focusing an editable element inside an
    empty, borderless subframe.
    
    * editing/selection/ios/do-not-show-selection-in-empty-borderless-subframe-expected.txt: Added.
    * editing/selection/ios/do-not-show-selection-in-empty-borderless-subframe.html: Added.
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@249006 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-08-22  Wenson Hsieh  <wenson_hsieh@apple.com>

            Typing Korean in title field after typing in the body inserts extraneous characters on blog.naver.com
            https://bugs.webkit.org/show_bug.cgi?id=201023
            <rdar://problem/54294794>

            Reviewed by Ryosuke Niwa.

            Add a new layout test to verify that we suppress text interactions when focusing an editable element inside an
            empty, borderless subframe.

            * editing/selection/ios/do-not-show-selection-in-empty-borderless-subframe-expected.txt: Added.
            * editing/selection/ios/do-not-show-selection-in-empty-borderless-subframe.html: Added.

2019-08-22  Kocsen Chung  <kocsen_chung@apple.com>

        Cherry-pick r248977. rdar://problem/54599960

    Do not adjust viewport if editing selection is already visible
    https://bugs.webkit.org/show_bug.cgi?id=200907
    <rdar://problem/53903417>
    
    Reviewed by Simon Fraser.
    
    Source/WebCore:
    
    Test: fast/scrolling/ios/autoscroll-input-when-very-zoomed.html
    
    Currently due to scrolling being mostly handled by integers, we are getting
    issues with rounding errors when trying to adjust the viewport while
    editing text when we are significantly zoomed in. The real fix would be to
    start dealing with scrolling with floats/doubles, but until such time,
    we should early out of adjusting selections that we are certain are currently
    visible.
    
    * rendering/RenderLayer.cpp:
    (WebCore::RenderLayer::scrollRectToVisible):
    
    LayoutTests:
    
    * fast/scrolling/ios/autoscroll-input-when-very-zoomed-expected.txt: Added.
    * fast/scrolling/ios/autoscroll-input-when-very-zoomed.html: Added.
    * resources/ui-helper.js:
    (window.UIHelper.immediateZoomToScale):
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@248977 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-08-21  Megan Gardner  <megan_gardner@apple.com>

            Do not adjust viewport if editing selection is already visible
            https://bugs.webkit.org/show_bug.cgi?id=200907
            <rdar://problem/53903417>

            Reviewed by Simon Fraser.

            * fast/scrolling/ios/autoscroll-input-when-very-zoomed-expected.txt: Added.
            * fast/scrolling/ios/autoscroll-input-when-very-zoomed.html: Added.
            * resources/ui-helper.js:
            (window.UIHelper.immediateZoomToScale):

2019-08-21  Kocsen Chung  <kocsen_chung@apple.com>

        Cherry-pick r248974. rdar://problem/54579634

    [Mail] Tapping top of message scrolls back to copied text instead of top of the message
    https://bugs.webkit.org/show_bug.cgi?id=200999
    <rdar://problem/54564878>
    
    Reviewed by Wenson Hsieh.
    
    Source/WebCore:
    
    Test: editing/selection/ios/change-selection-by-tapping-with-existing-selection.html
    
    * page/EditorClient.h:
    (WebCore::EditorClient::shouldAllowSingleClickToChangeSelection const):
    * page/EventHandler.cpp:
    (WebCore::EventHandler::handleMousePressEventSingleClick):
    Instead of encoding platform behaviors in EventHandler, defer to EditorClient.
    
    Source/WebKit:
    
    In the case where you have a WebCore selection but are not first responder,
    when you tap the WKWebView to become first responder, EventHandler would
    bail from setting the selection, assuming UIKit was going to do it. This
    behavior was introduced in r233311.
    
    However, since we are not first responder, UIKit does not change the
    selection, since it considers the view to not be editable.
    
    Fix this by letting WebCore set the selection in this case, as it used to.
    
    * WebProcess/WebCoreSupport/WebEditorClient.h:
    * WebProcess/WebCoreSupport/ios/WebEditorClientIOS.mm:
    (WebKit::WebEditorClient::shouldAllowSingleClickToChangeSelection const):
    * WebProcess/WebPage/WebPage.h:
    (WebKit::WebPage::isShowingInputViewForFocusedElement const):
    Copy the logic from EventHandler, with the added caveat (which fixes the
    aforementioned behavior) that we will allow EventHandler to change the
    selection if we don't have a focused node in the UIKit sense, because
    we know that the platform text interaction code will *not* change the
    selection if that is the case, so it's up to us.
    
    Source/WebKitLegacy/mac:
    
    * WebCoreSupport/WebEditorClient.h:
    * WebCoreSupport/WebEditorClient.mm:
    (WebEditorClient::shouldAllowSingleClickToChangeSelection const):
    Copy the existing behavior from EventHandler.
    We do not fix the bug in WebKitLegacy for a multitude of reasons, primarily
    because we do not know of any user impact.
    
    LayoutTests:
    
    * editing/selection/ios/change-selection-by-tapping-with-existing-selection-expected.txt: Added.
    * editing/selection/ios/change-selection-by-tapping-with-existing-selection.html: Added.
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@248974 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-08-21  Tim Horton  <timothy_horton@apple.com>

            [Mail] Tapping top of message scrolls back to copied text instead of top of the message
            https://bugs.webkit.org/show_bug.cgi?id=200999
            <rdar://problem/54564878>

            Reviewed by Wenson Hsieh.

            * editing/selection/ios/change-selection-by-tapping-with-existing-selection-expected.txt: Added.
            * editing/selection/ios/change-selection-by-tapping-with-existing-selection.html: Added.

2019-08-21  Ryan Haddad  <ryanhaddad@apple.com>

        Cherry-pick r248964. rdar://problem/54561673

    Unreviewed test gardening, land test expectations for rdar://54561673.
    
    * platform/ios/TestExpectations:
    * platform/ios-12/TestExpectations:
    
    git-svn-id: http://svn.webkit.org/repository/webkit/trunk@248964 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-08-21  Ryan Haddad  <ryanhaddad@apple.com>

            Unreviewed test gardening, land test expectations for rdar://54561673.

            * platform/ios/TestExpectations:
            * platform/ios-12/TestExpectations:

2019-08-21  Ryan Haddad  <ryanhaddad@apple.com>

        Cherry-pick r248917. rdar://problem/53829560

    Updating Expectations for Multiple Newly Passing Tests.
    
    Unreviewed Test Gardening.
    
    * platform/ios-12/TestExpectations:
    * platform/ios-wk1/TestExpectations:
    * platform/ios/TestExpectations:
    
    git-svn-id: http://svn.webkit.org/repository/webkit/trunk@248917 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-08-20  Russell Epstein  <repstein@apple.com>

            Updating Expectations for Multiple Newly Passing Tests.

            Unreviewed Test Gardening.

            * platform/ios-12/TestExpectations:
            * platform/ios-wk1/TestExpectations:
            * platform/ios/TestExpectations:

2019-08-20  Babak Shafiei  <bshafiei@apple.com>

        Cherry-pick r248909. rdar://problem/54543354

    Clicking the search icon on ae.com hangs the web content process
    https://bugs.webkit.org/show_bug.cgi?id=200889
    <rdar://problem/54359330>
    
    Reviewed by Ryosuke Niwa.
    
    Source/WebCore:
    
    The hang occurs under FrameSelection::selectionAtSentenceStart, while computing an EditorState to send to the UI
    process. This act of determining whether the given positon is at the start of sentence entails moving backwards
    from the start of the current visible selection until the start of a paragraph or sentence is found, using
    VisiblePosition::previous to iterate backwards through VisiblePositions.
    
    However, on this website, VisiblePosition::previous ends up just returning the current position, and we loop
    infinitely as a result because we never actually move backwards. This happens because VisiblePosition::previous
    first uses previousVisuallyDistinctCandidate to find a candidate Position before the current position, but when
    the position is canonicalized to create a VisiblePosition, it is moved back to its original Position as the deep
    equivalent.
    
    In the attached test case (which is representative of the relevant part of the DOM on ae.com), we try to find
    the previous VisiblePosition from (#c, 0). The previous visually distinct candidate we initially find is
    (#b, 0), since:
    
    1. The enclosing renderer is a RenderBlock with a non-zero height.
    2. The enclosing renderer has no rendered children.
    3. The position is at the first editing position in the node (i.e. the span element).
    
    However, when canonicalizing the position, we find that neither the upstream nor the downstream position is a
    candidate because both the upstream and downstream nodes end up well outside of the span (the upstream node ends
    up being at the start of the body element, and the downstream position ends up right before the start of #c's
    container). The downstream position is at the end of a text node with a leading newline, it's not a candidate
    because its last caret offset is less than the length of the text node.
    
    As a result, even though the given position (#b, 0) is a candidate itself, its downstream and upstream positions
    are not. Thus, VisiblePosition::canonicalPosition expands the scope of its candidate positions to the next
    closest candidate positions; the next candidate position is (#c, 0). Both of these candidates are outside of the
    containing block, so we (somewhat arbitrarily) break the tie by choosing the next visible position, bringing us
    back to (#c, 0).
    
    There are several ways to fix this, one of which involves fixing the downstream/upstream positions of (#b, 0) so
    that they no longer jump out of the containing block of #b and cause (#b, 0) to be an invalid visible position
    despite being a candidate position. This can be achieved by adjusting the heuristic in
    endsOfNodeAreVisuallyDistinctPositions (used when moving upstream or downstream). Currently, this helper
    function returns false for #b because they contain a single (non-rendered) whitespace character. Removing this
    extraneous whitespace character actually causes the problem to stop reproducing, since #b and #c no longer
    contain any child nodes. This is important because the heuristic in Position::downstream attempts to keep the
    downstream position within the confines of the enclosing visual boundary, which (currently) ends up being the
    entire body element because endsOfNodeAreVisuallyDistinctPositions returns false for #b.
    
    To avoid this scenario, we teach endsOfNodeAreVisuallyDistinctPositions to treat inline-block containers that
    are empty (that is, contain no rendered content) but may have children for editing in the same way as inline-
    block containers that don't have any children; in both scenarios, they may contain a candidate position, so we
    should treat the ends of the container node as being visually distinct.
    
    Doing so causes the downstream position of (#b, 0) to be kept within the immediate containing span element,
    which then allows (#b, 0) to be a canonical VisiblePosition.
    
    Tests:  fast/events/focus-anchor-with-tabindex-hang.html
            editing/selection/modify-backward-inline-block-containers.html
    
    * editing/VisiblePosition.cpp:
    (WebCore::VisiblePosition::previous const):
    
    LayoutTests:
    
    * editing/selection/modify-backward-inline-block-containers-expected.txt: Added.
    * editing/selection/modify-backward-inline-block-containers.html: Added.
    
    Add a layout test to ensure that the selection may be moved through empty inline-block containers that span the
    width of the page.
    
    * fast/events/focus-anchor-with-tabindex-hang-expected.txt: Added.
    * fast/events/focus-anchor-with-tabindex-hang.html: Added.
    
    Add a layout test to ensure that clicking an empty span under a focusable anchor element moves focus to the
    anchor element instead of hanging the web content process or hitting a debug assertion.
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@248909 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-08-20  Wenson Hsieh  <wenson_hsieh@apple.com>

            Clicking the search icon on ae.com hangs the web content process
            https://bugs.webkit.org/show_bug.cgi?id=200889
            <rdar://problem/54359330>

            Reviewed by Ryosuke Niwa.

            * editing/selection/modify-backward-inline-block-containers-expected.txt: Added.
            * editing/selection/modify-backward-inline-block-containers.html: Added.

            Add a layout test to ensure that the selection may be moved through empty inline-block containers that span the
            width of the page.

            * fast/events/focus-anchor-with-tabindex-hang-expected.txt: Added.
            * fast/events/focus-anchor-with-tabindex-hang.html: Added.

            Add a layout test to ensure that clicking an empty span under a focusable anchor element moves focus to the
            anchor element instead of hanging the web content process or hitting a debug assertion.

2019-08-19  Ryan Haddad  <ryanhaddad@apple.com>

        Cherry-pick r248875. rdar://problem/52961406

    rdar://52961406 (scrollingcoordinator/ios/scroll-position-after-reattach.html is a flaky image failure on iOS)
    
    Unreviewed Test Gardening.
    
    * platform/ios/TestExpectations: Updated test expectations to [ Pass Failure ]
    
    git-svn-id: http://svn.webkit.org/repository/webkit/trunk@248875 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-08-19  Russell Epstein  <repstein@apple.com>

            rdar://52961406 (scrollingcoordinator/ios/scroll-position-after-reattach.html is a flaky image failure on iOS)

            Unreviewed Test Gardening.

            * platform/ios/TestExpectations: Updated test expectations to [ Pass Failure ]

2019-08-19  Ryan Haddad  <ryanhaddad@apple.com>

        Cherry-pick r248863. rdar://problem/54481698

    rdar://54481698 (Layout Test platform/ios/ios/fast/text/opticalFont.html is Failing)
    
    Unreviewed Test Gardening.
    
    * platform/ios-12/platform/ios/ios/fast/text/opticalFont-expected.txt: Copied from LayoutTests/platform/ios/platform/ios/ios/fast/text/opticalFont-expected.txt.
    * platform/ios/platform/ios/ios/fast/text/opticalFont-expected.txt: Rebaseline.
    
    git-svn-id: http://svn.webkit.org/repository/webkit/trunk@248863 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-08-19  Russell Epstein  <repstein@apple.com>

            rdar://54481698 (Layout Test platform/ios/ios/fast/text/opticalFont.html is Failing)

            Unreviewed Test Gardening.

            * platform/ios-12/platform/ios/ios/fast/text/opticalFont-expected.txt: Copied from LayoutTests/platform/ios/platform/ios/ios/fast/text/opticalFont-expected.txt.
            * platform/ios/platform/ios/ios/fast/text/opticalFont-expected.txt: Rebaseline.

2019-08-18  Babak Shafiei  <bshafiei@apple.com>

        Cherry-pick r248819. rdar://problem/54455005

    Content in <iframe> should override "touch-action" set in embedding document
    https://bugs.webkit.org/show_bug.cgi?id=200204
    <rdar://problem/54355249>
    
    Reviewed by Antoine Quint.
    
    Source/WebKit:
    
    Subframes where content doesn't use any touch-action properties won't generate event region for their main layer.
    As a result the touch-action property gets computed in UI process to the parent frames touch-action (instead of 'auto').
    
    * UIProcess/RemoteLayerTree/ios/RemoteLayerTreeViews.mm:
    (WebKit::touchActionsForPoint):
    
    If the topmost layer hit is a WKChildScrollView we know its content layer didn't have an event region.
    This means we should return the default value 'auto'.
    
    LayoutTests:
    
    * pointerevents/ios/touch-action-none-with-frame-inside-expected.txt: Added.
    * pointerevents/ios/touch-action-none-with-frame-inside.html: Added.
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@248819 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-08-17  Antti Koivisto  <antti@apple.com>

            Content in <iframe> should override "touch-action" set in embedding document
            https://bugs.webkit.org/show_bug.cgi?id=200204
            <rdar://problem/54355249>

            Reviewed by Antoine Quint.

            * pointerevents/ios/touch-action-none-with-frame-inside-expected.txt: Added.
            * pointerevents/ios/touch-action-none-with-frame-inside.html: Added.

2019-08-18  Babak Shafiei  <bshafiei@apple.com>

        Cherry-pick r248815. rdar://problem/54454993

    [macOS] Emoji with variation selectors are rendered in text style, not emoji style
    https://bugs.webkit.org/show_bug.cgi?id=200830
    <rdar://problem/53076002>
    
    Reviewed by Simon Fraser.
    
    Source/WebCore:
    
    When mapping characters to glyphs, Core Text is giving us the deleted glyph ID, which is unexpected.
    We were treating it as a valid glyph ID, but it rather should be treated as an invalid glyph ID.
    
    Test: fast/text/emoji-variation-selector.html
    
    * platform/graphics/mac/GlyphPageMac.cpp:
    (WebCore::GlyphPage::fill):
    
    LayoutTests:
    
    * fast/text/emoji-variation-selector-expected-mismatch.html: Added.
    * fast/text/emoji-variation-selector.html: Added.
    * platform/win/TestExpectations: Mark as failing on Windows, because it doesn't support variation selectors.
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@248815 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-08-16  Myles C. Maxfield  <mmaxfield@apple.com>

            [macOS] Emoji with variation selectors are rendered in text style, not emoji style
            https://bugs.webkit.org/show_bug.cgi?id=200830
            <rdar://problem/53076002>

            Reviewed by Simon Fraser.

            * fast/text/emoji-variation-selector-expected-mismatch.html: Added.
            * fast/text/emoji-variation-selector.html: Added.
            * platform/win/TestExpectations: Mark as failing on Windows, because it doesn't support variation selectors.

2019-08-18  Babak Shafiei  <bshafiei@apple.com>

        Cherry-pick r248733. rdar://problem/54454989

    Occasional hang under -[UIKeyboardTaskQueue lockWhenReadyForMainThread] when long-pressing non-editable text
    https://bugs.webkit.org/show_bug.cgi?id=200731
    <rdar://problem/54315371>
    
    Reviewed by Tim Horton.
    
    Source/WebKit:
    
    When handling a single tap in non-editable content, keyboards logic in UIKit may attempt to wait for all
    pending tasks in UIKeyboardTaskQueue to finish executing (e.g. by calling -waitUntilAllTasksAreFinished]). If
    the task queue has a pending task at this moment - for example, a text selection update that is waiting for a
    response from the web process - this will result in a permanent deadlock, since the main thread will be blocked,
    and therefore cannot receive any IPC communication from the web process.
    
    One way to trigger this is to activate both the loupe gesture and non-editable text tap gesture simultaneously,
    by tapping in a non-editable part of the web page, while an ongoing loupe gesture is driving selection updates
    (see the layout test for more details).
    
    To avoid getting into this scenario, prevent the text tap gesture recognizer from firing in a few edge cases
    that could lead to hangs under keyboard code in UIKit. See comments below.
    
    Test: editing/selection/ios/tap-during-loupe-gesture.html
    
    * UIProcess/ios/WKContentViewInteraction.h:
    * UIProcess/ios/WKContentViewInteraction.mm:
    (-[WKContentView textInteractionGesture:shouldBeginAtPoint:]):
    
    Don't allow the text tap gesture recognizer to fire if the user is actively modifying the text selection using
    the loupe gesture, or if there's other pending selection change updates that are pending responses from the web
    content process.
    
    (-[WKContentView selectTextWithGranularity:atPoint:completionHandler:]):
    (-[WKContentView updateSelectionWithExtentPoint:withBoundary:completionHandler:]):
    
    Increment and decrement _suppressNonEditableSingleTapTextInteractionCount while handling these selection
    updates.
    
    LayoutTests:
    
    Add a layout test to verify that tapping the page while handling a text loupe gesture doesn't cause the UI
    process to hang indefinitely.
    
    * editing/selection/ios/tap-during-loupe-gesture-expected.txt: Added.
    * editing/selection/ios/tap-during-loupe-gesture.html: Added.
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@248733 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-08-15  Wenson Hsieh  <wenson_hsieh@apple.com>

            Occasional hang under -[UIKeyboardTaskQueue lockWhenReadyForMainThread] when long-pressing non-editable text
            https://bugs.webkit.org/show_bug.cgi?id=200731
            <rdar://problem/54315371>

            Reviewed by Tim Horton.

            Add a layout test to verify that tapping the page while handling a text loupe gesture doesn't cause the UI
            process to hang indefinitely.

            * editing/selection/ios/tap-during-loupe-gesture-expected.txt: Added.
            * editing/selection/ios/tap-during-loupe-gesture.html: Added.

2019-08-16  Russell Epstein  <repstein@apple.com>

        Landing TestExpectation Changes for rdar://52594556 and rdar://52557916.

        Unreviewed Test Gardening.

        * platform/mac/TestExpectations:

2019-08-15  Alan Coon  <alancoon@apple.com>

        Cherry-pick r248722. rdar://problem/54360866

    Negative size box with border radius causes hang under WebCore::approximateAsRegion
    https://bugs.webkit.org/show_bug.cgi?id=200769
    <rdar://problem/53380674>
    
    Reviewed by Alex Christensen.
    
    Source/WebCore:
    
    If a box's width or height computes negative the rounded border rect will also be negative.
    This caused near-infinite loop during rounded border region approximation.
    
    Test: fast/css/border-radius-negative-size.html
    
    * platform/graphics/RoundedRect.cpp:
    (WebCore::approximateAsRegion):
    
    Bail out if the region is empty (which includes negative sizes).
    For safety also limit the number of rectangles we generate for corner arc approximation.
    
    LayoutTests:
    
    * fast/css/border-radius-negative-size-expected.txt: Added.
    * fast/css/border-radius-negative-size.html: Added.
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@248722 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-08-15  Antti Koivisto  <antti@apple.com>

            Negative size box with border radius causes hang under WebCore::approximateAsRegion
            https://bugs.webkit.org/show_bug.cgi?id=200769
            <rdar://problem/53380674>

            Reviewed by Alex Christensen.

            * fast/css/border-radius-negative-size-expected.txt: Added.
            * fast/css/border-radius-negative-size.html: Added.

2019-08-15  Alan Coon  <alancoon@apple.com>

        Cherry-pick r248662. rdar://problem/54333792

    [iPadOS] slides.google.com: Cannot dismiss the context menu by tapping on the canvas
    https://bugs.webkit.org/show_bug.cgi?id=200219
    <rdar://problem/53650423>
    
    Reviewed by Zalan Bujtas.
    
    While the code change for this bug is all in code private to Safari, we add tests that check that removing implicit pointer capture
    or removing the original target element while the pointer is active correctly fires the "pointerup" event at the element that hit tests
    at the touch release point.
    
    * pointerevents/ios/pointer-events-implicit-capture-element-removed-while-pointer-active-expected.txt: Added.
    * pointerevents/ios/pointer-events-implicit-capture-element-removed-while-pointer-active.html: Added.
    * pointerevents/ios/pointer-events-implicit-capture-released-while-pointer-active-expected.txt: Added.
    * pointerevents/ios/pointer-events-implicit-capture-released-while-pointer-active.html: Added.
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@248662 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-08-13  Antoine Quint  <graouts@apple.com>

            [iPadOS] slides.google.com: Cannot dismiss the context menu by tapping on the canvas
            https://bugs.webkit.org/show_bug.cgi?id=200219
            <rdar://problem/53650423>

            Reviewed by Zalan Bujtas.

            While the code change for this bug is all in code private to Safari, we add tests that check that removing implicit pointer capture
            or removing the original target element while the pointer is active correctly fires the "pointerup" event at the element that hit tests
            at the touch release point.

            * pointerevents/ios/pointer-events-implicit-capture-element-removed-while-pointer-active-expected.txt: Added.
            * pointerevents/ios/pointer-events-implicit-capture-element-removed-while-pointer-active.html: Added.
            * pointerevents/ios/pointer-events-implicit-capture-released-while-pointer-active-expected.txt: Added.
            * pointerevents/ios/pointer-events-implicit-capture-released-while-pointer-active.html: Added.

2019-08-13  Alan Coon  <alancoon@apple.com>

        Cherry-pick r248604. rdar://problem/54282801

    Source/WebCore:
    Event region collection should take clipping into account
    https://bugs.webkit.org/show_bug.cgi?id=200668
    <rdar://problem/53826561>
    
    Reviewed by Simon Fraser.
    
    Test: pointerevents/ios/touch-action-region-clip-and-transform.html
    
    * rendering/EventRegion.cpp:
    (WebCore::EventRegionContext::pushClip):
    (WebCore::EventRegionContext::popClip):
    
    Maintain clip rect stack.
    
    (WebCore::EventRegionContext::unite):
    
    Apply both transforms and clipping.
    
    * rendering/EventRegion.h:
    * rendering/RenderBlock.cpp:
    * rendering/RenderBox.cpp:
    (WebCore::RenderBox::pushContentsClip):
    (WebCore::RenderBox::popContentsClip):
    
    Update clip for non-self-painting layers.
    
    * rendering/RenderLayer.cpp:
    (WebCore::RenderLayer::clipToRect):
    (WebCore::RenderLayer::restoreClip):
    
    Update clip for self-painting layers.
    
    LayoutTests:
    Event regions collection should take clipping into account
    https://bugs.webkit.org/show_bug.cgi?id=200668
    <rdar://problem/53826561>
    
    Reviewed by Simon Fraser.
    
    * pointerevents/ios/touch-action-region-clip-and-transform-expected.txt: Added.
    * pointerevents/ios/touch-action-region-clip-and-transform.html: Added.
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@248604 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-08-13  Antti Koivisto  <antti@apple.com>

            Event regions collection should take clipping into account
            https://bugs.webkit.org/show_bug.cgi?id=200668
            <rdar://problem/53826561>

            Reviewed by Simon Fraser.

            * pointerevents/ios/touch-action-region-clip-and-transform-expected.txt: Added.
            * pointerevents/ios/touch-action-region-clip-and-transform.html: Added.

2019-08-13  Ryan Haddad  <ryanhaddad@apple.com>

        Cherry-pick r248600. rdar://problem/53779679

    Reverting change in r248379
    rdar://53779679
    
    Unreviewed Test Gardening.
    Removed previously set TestExpectations.
    
    * platform/ios-12/TestExpectations:
    * platform/ios/TestExpectations:
    
    git-svn-id: http://svn.webkit.org/repository/webkit/trunk@248600 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-08-13  Russell Epstein  <repstein@apple.com>

            Reverting change in r248379
            rdar://53779679

            Unreviewed Test Gardening.
            Removed previously set TestExpectations.

            * platform/ios-12/TestExpectations:
            * platform/ios/TestExpectations:

2019-08-13  Ryan Haddad  <ryanhaddad@apple.com>

        Cherry-pick r248468. rdar://problem/54049321

    Correcting Expectation Typo from r248388.
    rdar://54049321
    
    Unreviewed Test Gardening.
    
    * platform/ios-12/TestExpectations:
    * platform/ios/TestExpectations:
    
    git-svn-id: http://svn.webkit.org/repository/webkit/trunk@248468 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-08-09  Russell Epstein  <repstein@apple.com>

            Correcting Expectation Typo from r248388.
            rdar://54049321

            Unreviewed Test Gardening.

            * platform/ios-12/TestExpectations:
            * platform/ios/TestExpectations:

2019-08-13  Ryan Haddad  <ryanhaddad@apple.com>

        Cherry-pick r248424. rdar://problem/53836015

    Add Catalina Baselines for Font-related Tests.
    rdar://53836015
    
    Unreviewed Test Gardening.
    
    * platform/mac-mojave/css1/basic/inheritance-expected.txt: Copied from LayoutTests/platform/mac/css1/basic/inheritance-expected.txt.
    * platform/mac-mojave/css2.1/t0602-c13-inh-underlin-00-e-expected.txt: Copied from LayoutTests/platform/mac/css2.1/t0602-c13-inh-underlin-00-e-expected.txt.
    * platform/mac-mojave/css2.1/t0805-c5522-brdr-02-e-expected.txt: Copied from LayoutTests/platform/mac/css2.1/t0805-c5522-brdr-02-e-expected.txt.
    * platform/mac-mojave/css3/selectors3/html/css3-modsel-18-expected.txt: Copied from LayoutTests/platform/mac/css3/selectors3/html/css3-modsel-18-expected.txt.
    * platform/mac-mojave/css3/selectors3/xhtml/css3-modsel-18-expected.txt: Copied from LayoutTests/platform/mac/css3/selectors3/xhtml/css3-modsel-18-expected.txt.
    * platform/mac-mojave/css3/selectors3/xml/css3-modsel-18-expected.txt: Copied from LayoutTests/platform/mac/css3/selectors3/xml/css3-modsel-18-expected.txt.
    * platform/mac-mojave/fast/block/basic/001-expected.txt: Copied from LayoutTests/platform/mac/fast/block/basic/001-expected.txt.
    * platform/mac-mojave/fast/css/css3-nth-child-expected.txt: Copied from LayoutTests/platform/mac/fast/css/css3-nth-child-expected.txt.
    * platform/mac-mojave/fast/dom/34176-expected.txt: Copied from LayoutTests/platform/mac/fast/dom/34176-expected.txt.
    * platform/mac-mojave/fast/dom/clone-node-dynamic-style-expected.txt: Copied from LayoutTests/platform/mac/fast/dom/clone-node-dynamic-style-expected.txt.
    * platform/mac-mojave/fast/forms/plaintext-mode-2-expected.txt: Copied from LayoutTests/platform/mac/fast/forms/plaintext-mode-2-expected.txt.
    * platform/mac-mojave/fast/invalid/003-expected.txt: Copied from LayoutTests/platform/mac/fast/invalid/003-expected.txt.
    * platform/mac-mojave/fast/invalid/004-expected.txt: Copied from LayoutTests/platform/mac/fast/invalid/004-expected.txt.
    * platform/mac-mojave/fast/invalid/nestedh3s-expected.txt: Copied from LayoutTests/platform/mac/fast/invalid/nestedh3s-expected.txt.
    * platform/mac-mojave/fast/selectors/018-expected.txt: Copied from LayoutTests/platform/mac/fast/selectors/018-expected.txt.
    * platform/mac-mojave/fast/table/frame-and-rules-expected.txt: Copied from LayoutTests/platform/mac/fast/table/frame-and-rules-expected.txt.
    * platform/mac-mojave/fast/text/atsui-multiple-renderers-expected.txt: Copied from LayoutTests/platform/mac/fast/text/atsui-multiple-renderers-expected.txt.
    * platform/mac-mojave/fast/text/bidi-embedding-pop-and-push-same-expected.txt: Copied from LayoutTests/platform/mac/fast/text/bidi-embedding-pop-and-push-same-expected.txt.
    * platform/mac-mojave/fast/text/font-weights-expected.txt: Copied from LayoutTests/platform/mac/fast/text/font-weights-expected.txt.
    * platform/mac-mojave/fast/text/font-weights-zh-expected.txt: Copied from LayoutTests/platform/mac/fast/text/font-weights-zh-expected.txt.
    * platform/mac-mojave/svg/W3C-SVG-1.1/animate-elem-46-t-expected.txt: Copied from LayoutTests/platform/mac/svg/W3C-SVG-1.1/animate-elem-46-t-expected.txt.
    * platform/mac-mojave/svg/W3C-SVG-1.1/struct-use-01-t-expected.txt: Copied from LayoutTests/platform/mac/svg/W3C-SVG-1.1/struct-use-01-t-expected.txt.
    * platform/mac-mojave/svg/batik/text/textStyles-expected.txt: Copied from LayoutTests/platform/mac/svg/batik/text/textStyles-expected.txt.
    * platform/mac-mojave/tables/mozilla/other/wa_table_thtd_rowspan-expected.txt: Copied from LayoutTests/platform/mac/tables/mozilla/other/wa_table_thtd_rowspan-expected.txt.
    * platform/mac-mojave/tables/mozilla/other/wa_table_tr_align-expected.txt: Copied from LayoutTests/platform/mac/tables/mozilla/other/wa_table_tr_align-expected.txt.
    * platform/mac/css1/basic/inheritance-expected.txt:
    * platform/mac/css2.1/t0602-c13-inh-underlin-00-e-expected.txt:
    * platform/mac/css2.1/t0805-c5522-brdr-02-e-expected.txt:
    * platform/mac/css3/selectors3/html/css3-modsel-18-expected.txt:
    * platform/mac/css3/selectors3/xhtml/css3-modsel-18-expected.txt:
    * platform/mac/css3/selectors3/xml/css3-modsel-18-expected.txt:
    * platform/mac/fast/block/basic/001-expected.txt:
    * platform/mac/fast/css/css3-nth-child-expected.txt:
    * platform/mac/fast/dom/34176-expected.txt:
    * platform/mac/fast/dom/clone-node-dynamic-style-expected.txt:
    * platform/mac/fast/forms/plaintext-mode-2-expected.txt:
    * platform/mac/fast/invalid/003-expected.txt:
    * platform/mac/fast/invalid/004-expected.txt:
    * platform/mac/fast/invalid/nestedh3s-expected.txt:
    * platform/mac/fast/selectors/018-expected.txt:
    * platform/mac/fast/table/frame-and-rules-expected.txt:
    * platform/mac/fast/text/atsui-multiple-renderers-expected.txt:
    * platform/mac/fast/text/bidi-embedding-pop-and-push-same-expected.txt:
    * platform/mac/fast/text/font-weights-expected.txt:
    * platform/mac/fast/text/font-weights-zh-expected.txt:
    * platform/mac/svg/W3C-SVG-1.1/animate-elem-46-t-expected.txt:
    * platform/mac/svg/W3C-SVG-1.1/struct-use-01-t-expected.txt:
    * platform/mac/svg/batik/text/textStyles-expected.txt:
    * platform/mac/tables/mozilla/other/wa_table_thtd_rowspan-expected.txt:
    * platform/mac/tables/mozilla/other/wa_table_tr_align-expected.txt:
    
    git-svn-id: http://svn.webkit.org/repository/webkit/trunk@248424 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-08-08  Russell Epstein  <repstein@apple.com>

            Add Catalina Baselines for Font-related Tests.
            rdar://53836015

            Unreviewed Test Gardening.

            * platform/mac-mojave/css1/basic/inheritance-expected.txt: Copied from LayoutTests/platform/mac/css1/basic/inheritance-expected.txt.
            * platform/mac-mojave/css2.1/t0602-c13-inh-underlin-00-e-expected.txt: Copied from LayoutTests/platform/mac/css2.1/t0602-c13-inh-underlin-00-e-expected.txt.
            * platform/mac-mojave/css2.1/t0805-c5522-brdr-02-e-expected.txt: Copied from LayoutTests/platform/mac/css2.1/t0805-c5522-brdr-02-e-expected.txt.
            * platform/mac-mojave/css3/selectors3/html/css3-modsel-18-expected.txt: Copied from LayoutTests/platform/mac/css3/selectors3/html/css3-modsel-18-expected.txt.
            * platform/mac-mojave/css3/selectors3/xhtml/css3-modsel-18-expected.txt: Copied from LayoutTests/platform/mac/css3/selectors3/xhtml/css3-modsel-18-expected.txt.
            * platform/mac-mojave/css3/selectors3/xml/css3-modsel-18-expected.txt: Copied from LayoutTests/platform/mac/css3/selectors3/xml/css3-modsel-18-expected.txt.
            * platform/mac-mojave/fast/block/basic/001-expected.txt: Copied from LayoutTests/platform/mac/fast/block/basic/001-expected.txt.
            * platform/mac-mojave/fast/css/css3-nth-child-expected.txt: Copied from LayoutTests/platform/mac/fast/css/css3-nth-child-expected.txt.
            * platform/mac-mojave/fast/dom/34176-expected.txt: Copied from LayoutTests/platform/mac/fast/dom/34176-expected.txt.
            * platform/mac-mojave/fast/dom/clone-node-dynamic-style-expected.txt: Copied from LayoutTests/platform/mac/fast/dom/clone-node-dynamic-style-expected.txt.
            * platform/mac-mojave/fast/forms/plaintext-mode-2-expected.txt: Copied from LayoutTests/platform/mac/fast/forms/plaintext-mode-2-expected.txt.
            * platform/mac-mojave/fast/invalid/003-expected.txt: Copied from LayoutTests/platform/mac/fast/invalid/003-expected.txt.
            * platform/mac-mojave/fast/invalid/004-expected.txt: Copied from LayoutTests/platform/mac/fast/invalid/004-expected.txt.
            * platform/mac-mojave/fast/invalid/nestedh3s-expected.txt: Copied from LayoutTests/platform/mac/fast/invalid/nestedh3s-expected.txt.
            * platform/mac-mojave/fast/selectors/018-expected.txt: Copied from LayoutTests/platform/mac/fast/selectors/018-expected.txt.
            * platform/mac-mojave/fast/table/frame-and-rules-expected.txt: Copied from LayoutTests/platform/mac/fast/table/frame-and-rules-expected.txt.
            * platform/mac-mojave/fast/text/atsui-multiple-renderers-expected.txt: Copied from LayoutTests/platform/mac/fast/text/atsui-multiple-renderers-expected.txt.
            * platform/mac-mojave/fast/text/bidi-embedding-pop-and-push-same-expected.txt: Copied from LayoutTests/platform/mac/fast/text/bidi-embedding-pop-and-push-same-expected.txt.
            * platform/mac-mojave/fast/text/font-weights-expected.txt: Copied from LayoutTests/platform/mac/fast/text/font-weights-expected.txt.
            * platform/mac-mojave/fast/text/font-weights-zh-expected.txt: Copied from LayoutTests/platform/mac/fast/text/font-weights-zh-expected.txt.
            * platform/mac-mojave/svg/W3C-SVG-1.1/animate-elem-46-t-expected.txt: Copied from LayoutTests/platform/mac/svg/W3C-SVG-1.1/animate-elem-46-t-expected.txt.
            * platform/mac-mojave/svg/W3C-SVG-1.1/struct-use-01-t-expected.txt: Copied from LayoutTests/platform/mac/svg/W3C-SVG-1.1/struct-use-01-t-expected.txt.
            * platform/mac-mojave/svg/batik/text/textStyles-expected.txt: Copied from LayoutTests/platform/mac/svg/batik/text/textStyles-expected.txt.
            * platform/mac-mojave/tables/mozilla/other/wa_table_thtd_rowspan-expected.txt: Copied from LayoutTests/platform/mac/tables/mozilla/other/wa_table_thtd_rowspan-expected.txt.
            * platform/mac-mojave/tables/mozilla/other/wa_table_tr_align-expected.txt: Copied from LayoutTests/platform/mac/tables/mozilla/other/wa_table_tr_align-expected.txt.
            * platform/mac/css1/basic/inheritance-expected.txt:
            * platform/mac/css2.1/t0602-c13-inh-underlin-00-e-expected.txt:
            * platform/mac/css2.1/t0805-c5522-brdr-02-e-expected.txt:
            * platform/mac/css3/selectors3/html/css3-modsel-18-expected.txt:
            * platform/mac/css3/selectors3/xhtml/css3-modsel-18-expected.txt:
            * platform/mac/css3/selectors3/xml/css3-modsel-18-expected.txt:
            * platform/mac/fast/block/basic/001-expected.txt:
            * platform/mac/fast/css/css3-nth-child-expected.txt:
            * platform/mac/fast/dom/34176-expected.txt:
            * platform/mac/fast/dom/clone-node-dynamic-style-expected.txt:
            * platform/mac/fast/forms/plaintext-mode-2-expected.txt:
            * platform/mac/fast/invalid/003-expected.txt:
            * platform/mac/fast/invalid/004-expected.txt:
            * platform/mac/fast/invalid/nestedh3s-expected.txt:
            * platform/mac/fast/selectors/018-expected.txt:
            * platform/mac/fast/table/frame-and-rules-expected.txt:
            * platform/mac/fast/text/atsui-multiple-renderers-expected.txt:
            * platform/mac/fast/text/bidi-embedding-pop-and-push-same-expected.txt:
            * platform/mac/fast/text/font-weights-expected.txt:
            * platform/mac/fast/text/font-weights-zh-expected.txt:
            * platform/mac/svg/W3C-SVG-1.1/animate-elem-46-t-expected.txt:
            * platform/mac/svg/W3C-SVG-1.1/struct-use-01-t-expected.txt:
            * platform/mac/svg/batik/text/textStyles-expected.txt:
            * platform/mac/tables/mozilla/other/wa_table_thtd_rowspan-expected.txt:
            * platform/mac/tables/mozilla/other/wa_table_tr_align-expected.txt:

2019-08-13  Alan Coon  <alancoon@apple.com>

        Cherry-pick r248513. rdar://problem/54237806

    Accessibility client cannot navigate to internal links targets on iOS.
    https://bugs.webkit.org/show_bug.cgi?id=200559
    <rdar://problem/45242534>
    
    Patch by Andres Gonzalez <andresg_22@apple.com> on 2019-08-10
    Reviewed by Zalan Bujtas.
    
    Source/WebCore:
    
    The cause of the problem on iOS is that AccessibilityObject::firstAccessibleObjectFromNode
    used in AccessibilityRenderObject::linkedUIElements may return an object
    that is ignored by accessibility clients on iOS, and thus the client
    would not track the target of an internal link. This change ensures that
    accessibilityLinkedElement will return a valid accessibility element to
    the client, if it is exists.
    * accessibility/AccessibilityObject.cpp:
    (WebCore::AccessibilityObject::firstAccessibleObjectFromNode):
    (WebCore::firstAccessibleObjectFromNode):
    * accessibility/AccessibilityObject.h:
    * accessibility/ios/WebAccessibilityObjectWrapperIOS.mm:
    (-[WebAccessibilityObjectWrapper accessibilityLinkedElement]):
    
    LayoutTests:
    
    Extneded this test to not only check that internal links expose their
    target, but also that the target is an accessible element. Added a
    second test case where the target is contained in a grouping element.
    * accessibility/ios-simulator/internal-link-expected.txt:
    * accessibility/ios-simulator/internal-link.html:
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@248513 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-08-10  Andres Gonzalez  <andresg_22@apple.com>

            Accessibility client cannot navigate to internal links targets on iOS.
            https://bugs.webkit.org/show_bug.cgi?id=200559
            <rdar://problem/45242534>

            Reviewed by Zalan Bujtas.

            Extneded this test to not only check that internal links expose their
            target, but also that the target is an accessible element. Added a
            second test case where the target is contained in a grouping element.
            * accessibility/ios-simulator/internal-link-expected.txt:
            * accessibility/ios-simulator/internal-link.html:

2019-08-13  Alan Coon  <alancoon@apple.com>

        Cherry-pick r248514. rdar://problem/54236213

    REGRESSION (r245974): Missing content on habitburger.com, amazon.com
    https://bugs.webkit.org/show_bug.cgi?id=200618
    rdar://problem/53920224
    
    Reviewed by Zalan Bujtas.
    
    Source/WebCore:
    
    In r245974 TileController::adjustTileCoverageRect() started to intersect the coverage
    rect with the bounds of the layer, which is wrong because this coverage rect is passed down
    to descendant layers, and they may project outside the bounds of this tiled layer.
    
    This caused missing dropdowns on amazon.com, and a missing menu on habitburger.com on iPhone.
    
    The fix is to just not do the intersection with the bounds. TileGrid::getTileIndexRangeForRect()
    already ensures that we never make tiles outside the bounds of a TileController.
    
    Test: compositing/backing/layer-outside-tiled-parent.html
    
    * platform/graphics/ca/TileController.cpp:
    (WebCore::TileController::adjustTileCoverageRect):
    * platform/graphics/ca/TileGrid.cpp:
    (WebCore::TileGrid::ensureTilesForRect):
    
    LayoutTests:
    
    * compositing/backing/layer-outside-tiled-parent-expected.txt: Added.
    * compositing/backing/layer-outside-tiled-parent.html: Added.
    * platform/ios-wk2/compositing/backing/layer-outside-tiled-parent-expected.txt: Added.
    * tiled-drawing/tile-coverage-iframe-to-zero-coverage-expected.txt:
    * tiled-drawing/tiled-backing-in-window-expected.txt:
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@248514 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-08-10  Simon Fraser  <simon.fraser@apple.com>

            REGRESSION (r245974): Missing content on habitburger.com, amazon.com
            https://bugs.webkit.org/show_bug.cgi?id=200618
            rdar://problem/53920224

            Reviewed by Zalan Bujtas.

            * compositing/backing/layer-outside-tiled-parent-expected.txt: Added.
            * compositing/backing/layer-outside-tiled-parent.html: Added.
            * platform/ios-wk2/compositing/backing/layer-outside-tiled-parent-expected.txt: Added.
            * tiled-drawing/tile-coverage-iframe-to-zero-coverage-expected.txt:
            * tiled-drawing/tiled-backing-in-window-expected.txt:

2019-08-13  Alan Coon  <alancoon@apple.com>

        Cherry-pick r248433. rdar://problem/54237689

    [iOS 13] Taps that interrupt momentum scrolling are recognized as clicks
    https://bugs.webkit.org/show_bug.cgi?id=200516
    <rdar://problem/53889373>
    
    Reviewed by Tim Horton.
    
    Source/WebKit:
    
    After <https://trac.webkit.org/r247656>, the -tracksImmediatelyWhileDecelerating property of WKScrollView and
    WKChildScrollView is set to NO. This means that if a user interacts with the page while the scroll view is
    decelerating (e.g. after momentum scrolling), the pan gesture recognizer will not be immediately recognized.
    This gives other gesture recognizers, such as the synthetic click (single tap) gesture a chance to instead
    recognize first. In this particular bug, this causes taps on the web view that are intended to only stop
    momentum scrolling to instead activate clickable elements beneath the touch, such as links and buttons.
    
    To mitigate this, we add some logic to prevent the click gesture recognizer from firing in the case where the
    tap also causes the scroll view to decelerate. This heuristic is similar to the one introduced in r219310, which
    has the same purpose of hiding gestures that stop momentum scrolling from the page, and also consults
    -[UIScrollView _isInterruptingDeceleration].
    
    Tests:  fast/scrolling/ios/click-events-during-momentum-scroll-in-main-frame.html
            fast/scrolling/ios/click-events-during-momentum-scroll-in-overflow-after-tap-on-body.html
            fast/scrolling/ios/click-events-during-momentum-scroll-in-overflow.html
    
    * UIProcess/ios/WKContentViewInteraction.mm:
    (-[WKContentView gestureRecognizerShouldBegin:]):
    
    Return NO in the case of the single tap gesture if the UIScrollView most recently touched by the single tap
    gesture (or one of its enclosing scroll views, up to the main WKScrollView) is being interrupted while
    decelerating.
    
    * UIProcess/ios/WKSyntheticTapGestureRecognizer.h:
    * UIProcess/ios/WKSyntheticTapGestureRecognizer.mm:
    (-[WKSyntheticTapGestureRecognizer reset]):
    (-[WKSyntheticTapGestureRecognizer touchesBegan:withEvent:]):
    
    Teach WKSyntheticTapGestureRecognizer to keep track of the last WKScrollView that was touched, for later use in
    -gestureRecognizerShouldBegin:. To do this, we keep a weak reference to the first UIScrollView we find in the
    set of touches.
    
    (-[WKSyntheticTapGestureRecognizer lastTouchedScrollView]):
    
    LayoutTests:
    
    Add new layout tests. See below for details.
    
    * fast/scrolling/ios/click-events-during-momentum-scroll-in-main-frame-expected.txt: Added.
    * fast/scrolling/ios/click-events-during-momentum-scroll-in-main-frame.html: Added.
    
    Add a test to verify that interrupting scrolling in the main frame using a tap doesn't fire a click event.
    
    * fast/scrolling/ios/click-events-during-momentum-scroll-in-overflow-after-tap-on-body-expected.txt: Added.
    * fast/scrolling/ios/click-events-during-momentum-scroll-in-overflow-after-tap-on-body.html: Added.
    
    Add a test to verify that after triggering momentum scrolling in a fast subscrollable region, tapping outside of
    the scroller will still fire a click event.
    
    * fast/scrolling/ios/click-events-during-momentum-scroll-in-overflow-expected.txt: Added.
    * fast/scrolling/ios/click-events-during-momentum-scroll-in-overflow.html: Added.
    
    Add a test to verify that interrupting scrolling in a fast subscrollable region using a tap doesn't fire a
    click event.
    
    * resources/ui-helper.js:
    (window.UIHelper.dragFromPointToPoint):
    (window.UIHelper):
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@248433 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-08-08  Wenson Hsieh  <wenson_hsieh@apple.com>

            [iOS 13] Taps that interrupt momentum scrolling are recognized as clicks
            https://bugs.webkit.org/show_bug.cgi?id=200516
            <rdar://problem/53889373>

            Reviewed by Tim Horton.

            Add new layout tests. See below for details.

            * fast/scrolling/ios/click-events-during-momentum-scroll-in-main-frame-expected.txt: Added.
            * fast/scrolling/ios/click-events-during-momentum-scroll-in-main-frame.html: Added.

            Add a test to verify that interrupting scrolling in the main frame using a tap doesn't fire a click event.

            * fast/scrolling/ios/click-events-during-momentum-scroll-in-overflow-after-tap-on-body-expected.txt: Added.
            * fast/scrolling/ios/click-events-during-momentum-scroll-in-overflow-after-tap-on-body.html: Added.

            Add a test to verify that after triggering momentum scrolling in a fast subscrollable region, tapping outside of
            the scroller will still fire a click event.

            * fast/scrolling/ios/click-events-during-momentum-scroll-in-overflow-expected.txt: Added.
            * fast/scrolling/ios/click-events-during-momentum-scroll-in-overflow.html: Added.

            Add a test to verify that interrupting scrolling in a fast subscrollable region using a tap doesn't fire a
            click event.

            * resources/ui-helper.js:
            (window.UIHelper.dragFromPointToPoint):
            (window.UIHelper):

2019-08-13  Alan Coon  <alancoon@apple.com>

        Cherry-pick r248338. rdar://problem/54237654

    [iPadOS] slides.google.com: tapping near cursor in a slide title focuses the speaker notes
    https://bugs.webkit.org/show_bug.cgi?id=200216
    
    Reviewed by Wenson Hsieh.
    
    Source/WebKit:
    
    The bug was caused by a race condition between Google slides removing inputmode="none" from the hidden
    content editable and updating the focused region upon receiving a pointerup event, which happens after
    the Google slides had already updated its page layout & coordinates based on new visual viewport with
    the software keyboard's boudning rect taken into account.
    
    Delay bringing up the software keyboard for a inputmode change until all touches are released.
    
    In the future, we could consider also delaying the software keyboard to be brought in general until
    touchend / pointerup events are dispatched but this is rather risky since that could affact random
    other websites while Google suites is the only major site to make use of inputmode="none".
    
    This patch also reverts r243044, which was added for Google slides, since it's no longer needed and
    interferes with this patch by adding another way to bring up the software keyboard.
    
    Note: Adjusting touchend / pointerup coordinates while the keyboard is being brought up doesn't work
    because the page had already updated the layout by then based on new visual viewport size.
    
    Test: fast/forms/ios/inputmode-change-update-keyboard-after-pointerup.html
    
    * UIProcess/WebPageProxy.cpp:
    (WebKit::WebPageProxy::handleTouchEventSynchronously): Call didReleaseAllTouchPoints when all
    touches are released.
    (WebKit::WebPageProxy::handleTouchEventAsynchronously): Ditto.
    (WebKit::WebPageProxy::handleTouchEvent): Ditto.
    * UIProcess/WebPageProxy.h:
    (WebKit::WebPageProxy::didReleaseAllTouchPoints): Added for non-iOS platforms.
    (WebKit::WebPageProxy::m_pendingInputModeChange): Added. Used when inputmode is changed while
    there is an on-going touch interaction.
    * UIProcess/ios/WebPageProxyIOS.mm:
    (WebKit::WebPageProxy::elementDidFocus): Clear m_pendingInputModeChange when a new element is focused.
    (WebKit::WebPageProxy::elementDidBlur): Ditto for bluring.
    (WebKit::WebPageProxy::focusedElementDidChangeInputMode): Don't bring up the software keyboard now if
    there are on-going touches by exiting early after setting m_pendingInputModeChange.
    (WebKit::WebPageProxy::didReleaseAllTouchPoints): Bring up the software keyboard if inputmode
    had changed from "none" to something else.
    * WebProcess/WebPage/WebPage.cpp:
    (WebKit::WebPage::dispatchTouchEvent): Removed the code added by r243044.
    
    LayoutTests:
    
    Added a new regression test and removed the one added for r243044.
    
    * fast/events/touch/ios/show-keyboard-after-preventing-touchstart-expected.txt: Removed.
    * fast/events/touch/ios/show-keyboard-after-preventing-touchstart.html: Removed.
    * fast/forms/ios/inputmode-change-update-keyboard-after-pointerup-expected.txt: Added.
    * fast/forms/ios/inputmode-change-update-keyboard-after-pointerup.html: Added.
    * fast/forms/ios/inputmode-change-update-keyboard.html: Fixed the test for manual testing.
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@248338 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-08-06  Ryosuke Niwa  <rniwa@webkit.org>

            [iPadOS] slides.google.com: tapping near cursor in a slide title focuses the speaker notes
            https://bugs.webkit.org/show_bug.cgi?id=200216

            Reviewed by Wenson Hsieh.

            Added a new regression test and removed the one added for r243044.

            * fast/events/touch/ios/show-keyboard-after-preventing-touchstart-expected.txt: Removed.
            * fast/events/touch/ios/show-keyboard-after-preventing-touchstart.html: Removed.
            * fast/forms/ios/inputmode-change-update-keyboard-after-pointerup-expected.txt: Added.
            * fast/forms/ios/inputmode-change-update-keyboard-after-pointerup.html: Added.
            * fast/forms/ios/inputmode-change-update-keyboard.html: Fixed the test for manual testing.

2019-08-13  Alan Coon  <alancoon@apple.com>

        Cherry-pick r248301. rdar://problem/54237793

    Adopt -expectMinimumUpcomingSampleBufferPresentationTime:
    https://bugs.webkit.org/show_bug.cgi?id=200457
    <rdar://problem/53961130>
    
    Reviewed by Eric Carlson.
    
    Source/WebCore:
    
    Test: media/media-source/media-source-minimumupcomingpresentationtime.html
    
    Adopt a new API vended by AVSampleBufferDisplayLayer, piped from SourceBuffer down
    through SourceBufferPrivate to SourceBufferPrivateAVFObjC. This value should be
    reset and updated when new samples are appended.
    
    * Modules/mediasource/SourceBuffer.cpp:
    (WebCore::SourceBuffer::sourceBufferPrivateDidReceiveSample):
    (WebCore::SourceBuffer::provideMediaData):
    (WebCore::SourceBuffer::updateMinimumUpcomingPresentationTime):
    (WebCore::SourceBuffer::resetMinimumUpcomingPresentationTime):
    (WebCore::SourceBuffer::minimumUpcomingPresentationTimeForTrackID):
    (WebCore::SourceBuffer::setMaximumQueueDepthForTrackID):
    * Modules/mediasource/SourceBuffer.h:
    * platform/graphics/SourceBufferPrivate.h:
    (WebCore::SourceBufferPrivate::canSetMinimumUpcomingPresentationTime const):
    (WebCore::SourceBufferPrivate::setMinimumUpcomingPresentationTime):
    (WebCore::SourceBufferPrivate::clearMinimumUpcomingPresentationTime):
    (WebCore::SourceBufferPrivate::enqueuedSamplesForTrackID):
    (WebCore::SourceBufferPrivate::minimumUpcomingPresentationTimeForTrackID):
    (WebCore::SourceBufferPrivate::setMaximumQueueDepthForTrackID):
    * platform/graphics/avfoundation/objc/SourceBufferPrivateAVFObjC.h:
    * platform/graphics/avfoundation/objc/SourceBufferPrivateAVFObjC.mm:
    (WebCore::SourceBufferPrivateAVFObjC::canSetMinimumUpcomingPresentationTime const):
    (WebCore::SourceBufferPrivateAVFObjC::setMinimumUpcomingPresentationTime):
    (WebCore::SourceBufferPrivateAVFObjC::clearMinimumUpcomingPresentationTime):
    * platform/mock/mediasource/MockSourceBufferPrivate.cpp:
    (WebCore::MockSourceBufferPrivate::minimumUpcomingPresentationTimeForTrackID):
    (WebCore::MockSourceBufferPrivate::setMaximumQueueDepthForTrackID):
    (WebCore::MockSourceBufferPrivate::canSetMinimumUpcomingPresentationTime const):
    (WebCore::MockSourceBufferPrivate::setMinimumUpcomingPresentationTime):
    (WebCore::MockSourceBufferPrivate::clearMinimumUpcomingPresentationTime):
    * platform/mock/mediasource/MockSourceBufferPrivate.h:
    * testing/Internals.cpp:
    (WebCore::Internals::minimumUpcomingPresentationTimeForTrackID):
    (WebCore::Internals::setMaximumQueueDepthForTrackID):
    * testing/Internals.h:
    * testing/Internals.idl:
    
    LayoutTests:
    
    * media/media-source/media-source-minimumupcomingpresentationtime-expected.txt: Added.
    * media/media-source/media-source-minimumupcomingpresentationtime.html: Added.
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@248301 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-08-06  Jer Noble  <jer.noble@apple.com>

            Adopt -expectMinimumUpcomingSampleBufferPresentationTime:
            https://bugs.webkit.org/show_bug.cgi?id=200457
            <rdar://problem/53961130>

            Reviewed by Eric Carlson.

            * media/media-source/media-source-minimumupcomingpresentationtime-expected.txt: Added.
            * media/media-source/media-source-minimumupcomingpresentationtime.html: Added.

2019-08-13  Alan Coon  <alancoon@apple.com>

        Cherry-pick r248292. rdar://problem/54236220

    [iPadOS] Unable to increase zoom level on Google using the Aa menu
    https://bugs.webkit.org/show_bug.cgi?id=200453
    <rdar://problem/52278579>
    
    Reviewed by Tim Horton.
    
    Source/WebCore:
    
    Makes a couple of minor adjustments to how layout size scale factor is handled in ViewportConfiguration, to
    address some scenarios in which adjusting WKWebView's _viewScale does not have any apparent effect on the page.
    See changes below for more detail.
    
    Tests: fast/viewport/ios/non-responsive-viewport-after-changing-view-scale.html
           fast/viewport/ios/responsive-viewport-with-minimum-width-after-changing-view-scale.html
    
    * page/ViewportConfiguration.cpp:
    (WebCore::ViewportConfiguration::initialScaleFromSize const):
    
    When the page is either zoomed in or zoomed out using _viewScale, let the specified initial scale take
    precedence over the scale computed by fitting the content width to the view width, or the scale computed by
    fitting the content height to the view height.
    
    This avoids a scenario in which nothing happens when increasing view scale in a responsively designed web page
    that has a fixed minimum width. Before this change, when computing the initial scale at a view scale that would
    not allow the entire content width of the page to fit within the viewport, the new initial scale would remain
    unchanged if the initial scale in the meta viewport is not also set to 1, because a new initial scale would be
    computed in ViewportConfiguration::initialScaleFromSize to accomodate for the entire content width.
    
    Our new behavior allows us to zoom into the page, even if doing so would cause horizontal scrolling.
    
    (WebCore::ViewportConfiguration::updateConfiguration):
    
    When the page is either zoomed in or zoomed out using _viewScale and the default viewport configuration has a
    fixed width (e.g. on iPhone), then adjust the width of the default viewport configuration to account for the
    _viewScale. For example, the default width of a viewport-less web page is 980px on iPhone; at a view scale of 2,
    this would become 490px instead, and at 0.5 view scale, it would become 1960px.
    
    This ensures that on iPhone, for web pages without a meta viewport, changing the view scale still changes the
    layout and initial scale of the web page.
    
    * page/ViewportConfiguration.h:
    (WebCore::ViewportConfiguration::layoutSizeIsExplicitlyScaled const):
    
    LayoutTests:
    
    Adds a couple of layout tests (with device-specific expectations) to verify that the two scenarios targeted by
    this change are fixed.
    
    * fast/viewport/ios/non-responsive-viewport-after-changing-view-scale-expected.txt: Added.
    * fast/viewport/ios/non-responsive-viewport-after-changing-view-scale.html: Added.
    
    Verifies that, for a page with no viewport meta tag (where we fall back to a fixed 980px viewport on iPhone),
    changing view scale still changes page scale and window size.
    
    * fast/viewport/ios/responsive-viewport-with-minimum-width-after-changing-view-scale-expected.txt: Added.
    * fast/viewport/ios/responsive-viewport-with-minimum-width-after-changing-view-scale.html: Added.
    
    Verifies that, for a page with a responsive meta viewport tag containing a fixed-width element that forces a
    minimum width for the page, setting the view scale such that the page scrolls horizontally (2.5) doesn't result
    in the initial scale being adjusted back to the maximum scale that would accomodate the full contents of the
    page (2).
    
    * platform/ipad/fast/viewport/ios/non-responsive-viewport-after-changing-view-scale-expected.txt: Added.
    * platform/ipad/fast/viewport/ios/responsive-viewport-with-minimum-width-after-changing-view-scale-expected.txt: Added.
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@248292 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-08-06  Wenson Hsieh  <wenson_hsieh@apple.com>

            [iPadOS] Unable to increase zoom level on Google using the Aa menu
            https://bugs.webkit.org/show_bug.cgi?id=200453
            <rdar://problem/52278579>

            Reviewed by Tim Horton.

            Adds a couple of layout tests (with device-specific expectations) to verify that the two scenarios targeted by
            this change are fixed.

            * fast/viewport/ios/non-responsive-viewport-after-changing-view-scale-expected.txt: Added.
            * fast/viewport/ios/non-responsive-viewport-after-changing-view-scale.html: Added.

            Verifies that, for a page with no viewport meta tag (where we fall back to a fixed 980px viewport on iPhone),
            changing view scale still changes page scale and window size.

            * fast/viewport/ios/responsive-viewport-with-minimum-width-after-changing-view-scale-expected.txt: Added.
            * fast/viewport/ios/responsive-viewport-with-minimum-width-after-changing-view-scale.html: Added.

            Verifies that, for a page with a responsive meta viewport tag containing a fixed-width element that forces a
            minimum width for the page, setting the view scale such that the page scrolls horizontally (2.5) doesn't result
            in the initial scale being adjusted back to the maximum scale that would accomodate the full contents of the
            page (2).

            * platform/ipad/fast/viewport/ios/non-responsive-viewport-after-changing-view-scale-expected.txt: Added.
            * platform/ipad/fast/viewport/ios/responsive-viewport-with-minimum-width-after-changing-view-scale-expected.txt: Added.

2019-08-13  Alan Coon  <alancoon@apple.com>

        Cherry-pick r248189. rdar://problem/54237682

    [ Mac ] Layout Test accessibility/mac/press-not-work-for-disabled-menu-list.html is a flaky failure
    https://bugs.webkit.org/show_bug.cgi?id=196505
    <rdar://problem/49532620>
    
    Patch by Andres Gonzalez <andresg_22@apple.com> on 2019-08-02
    Reviewed by Chris Fleizach.
    
    Re-wrote test in a timing independent way. This should fix the intermittent failures.
    * accessibility/mac/press-not-work-for-disabled-menu-list.html:
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@248189 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-08-02  Andres Gonzalez  <andresg_22@apple.com>

            [ Mac ] Layout Test accessibility/mac/press-not-work-for-disabled-menu-list.html is a flaky failure
            https://bugs.webkit.org/show_bug.cgi?id=196505
            <rdar://problem/49532620>

            Reviewed by Chris Fleizach.

            Re-wrote test in a timing independent way. This should fix the intermittent failures.
            * accessibility/mac/press-not-work-for-disabled-menu-list.html:

2019-08-13  Alan Coon  <alancoon@apple.com>

        Cherry-pick r248169. rdar://problem/54237663

    Add accessibility object method to determine whether an element is inside a table cell. Needed for iOS accessibility client.
    https://bugs.webkit.org/show_bug.cgi?id=200394
    <rdar://problem/52914964>
    
    Patch by Andres Gonzalez <andresg_22@apple.com> on 2019-08-02
    Reviewed by Chris Fleizach.
    
    Source/WebCore:
    
    Test: accessibility/ios-simulator/element-in-table-cell.html
    
    Added _accessibilityIsInTableCell needed for iOS accessibility client.
    * accessibility/ios/WebAccessibilityObjectWrapperIOS.mm:
    (-[WebAccessibilityObjectWrapper _accessibilityIsInTableCell]):
    
    Tools:
    
    Glue code to exercise new method [WebAccessibilityObjectWrapper _accessibilityIsInTableCell].
    
    * WebKitTestRunner/InjectedBundle/AccessibilityUIElement.cpp:
    (WTR::AccessibilityUIElement::isInTableCell const):
    * WebKitTestRunner/InjectedBundle/AccessibilityUIElement.h:
    * WebKitTestRunner/InjectedBundle/Bindings/AccessibilityUIElement.idl:
    * WebKitTestRunner/InjectedBundle/ios/AccessibilityUIElementIOS.mm:
    (WTR::AccessibilityUIElement::isInTableCell const):
    
    LayoutTests:
    
    New test that exercises [WebAccessibilityObjectWrapper _accessibilityIsInTableCell].
    
    * accessibility/ios-simulator/element-in-table-cell-expected.txt: Added.
    * accessibility/ios-simulator/element-in-table-cell.html: Added.
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@248169 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-08-02  Andres Gonzalez  <andresg_22@apple.com>

            Add accessibility object method to determine whether an element is inside a table cell. Needed for iOS accessibility client.
            https://bugs.webkit.org/show_bug.cgi?id=200394
            <rdar://problem/52914964>

            Reviewed by Chris Fleizach.

            New test that exercises [WebAccessibilityObjectWrapper _accessibilityIsInTableCell].

            * accessibility/ios-simulator/element-in-table-cell-expected.txt: Added.
            * accessibility/ios-simulator/element-in-table-cell.html: Added.

2019-08-12  Alan Coon  <alancoon@apple.com>

        Cherry-pick r248494. rdar://problem/54171876

    Universal XSS in JSObject::putInlineSlow and JSValue::putToPrimitive
    https://bugs.webkit.org/show_bug.cgi?id=199864
    
    Reviewed by Saam Barati.
    
    Source/JavaScriptCore:
    
    Our JSObject::put implementation is not correct in term of the spec. Our [[Put]] implementation is something like this.
    
        JSObject::put(object):
            if (can-do-fast-path(object))
                return fast-path(object);
            // slow-path
            do {
                object-put-check-and-setter-calls(object); // (1)
                object = object->prototype;
            } while (is-object(object));
            return do-put(object);
    
    Since JSObject::put is registered in the methodTable, the derived classes can override it. Some of classes are adding
    extra checks to this put.
    
        Derived::put(object):
            if (do-extra-check(object))
                fail
            return JSObject::put(object)
    
    The problem is that Derived::put is only called when the |this| object is the Derived class. When traversing [[Prototype]] in
    JSObject::put, at (1), we do not perform the extra checks added in Derived::put even if `object` is Derived one. This means that
    we skip the check.
    
    Currently, JSObject::put and WebCore checking mechanism are broken. JSObject::put should call getOwnPropertySlot at (1) to
    perform the additional checks. This behavior is matching against the spec. However, currently, our JSObject::getOwnPropertySlot
    does not propagate setter information. This is required to cache cacheable [[Put]] at (1) for CustomValue, CustomAccessor, and
    Accessors. We also need to reconsider how to integrate static property setters to this mechanism. So, basically, this involves
    large refactoring to renew our JSObject::put and JSObject::getOwnPropertySlot.
    
    To work-around for now, we add a new TypeInfo flag, HasPutPropertySecurityCheck . And adding this flag to DOM objects
    that implements the addition checks. We also add doPutPropertySecurityCheck method hook to perform the check in JSObject.
    When we found this flag at (1), we perform doPutPropertySecurityCheck to properly perform the checks.
    
    Since our JSObject::put code is old and it does not match against the spec now, we should refactor it largely. This is tracked separately in [1].
    
    [1]: https://bugs.webkit.org/show_bug.cgi?id=200562
    
    * runtime/ClassInfo.h:
    * runtime/JSCJSValue.cpp:
    (JSC::JSValue::putToPrimitive):
    * runtime/JSCell.cpp:
    (JSC::JSCell::doPutPropertySecurityCheck):
    * runtime/JSCell.h:
    * runtime/JSObject.cpp:
    (JSC::JSObject::putInlineSlow):
    (JSC::JSObject::getOwnPropertyDescriptor):
    * runtime/JSObject.h:
    (JSC::JSObject::doPutPropertySecurityCheck):
    * runtime/JSTypeInfo.h:
    (JSC::TypeInfo::hasPutPropertySecurityCheck const):
    
    Source/WebCore:
    
    Test: http/tests/security/cross-frame-access-object-put-optimization.html
    
    * bindings/js/JSDOMWindowCustom.cpp:
    (WebCore::JSDOMWindow::doPutPropertySecurityCheck):
    * bindings/js/JSLocationCustom.cpp:
    (WebCore::JSLocation::doPutPropertySecurityCheck):
    * bindings/scripts/CodeGeneratorJS.pm:
    (GenerateHeader):
    * bindings/scripts/test/JS/JSTestActiveDOMObject.h:
    
    LayoutTests:
    
    * http/tests/security/cross-frame-access-object-put-optimization-expected.txt: Added.
    * http/tests/security/cross-frame-access-object-put-optimization.html: Added.
    * http/tests/security/resources/cross-frame-iframe-for-object-put-optimization-test.html: Added.
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@248494 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-08-09  Yusuke Suzuki  <ysuzuki@apple.com>

            Universal XSS in JSObject::putInlineSlow and JSValue::putToPrimitive
            https://bugs.webkit.org/show_bug.cgi?id=199864

            Reviewed by Saam Barati.

            * http/tests/security/cross-frame-access-object-put-optimization-expected.txt: Added.
            * http/tests/security/cross-frame-access-object-put-optimization.html: Added.
            * http/tests/security/resources/cross-frame-iframe-for-object-put-optimization-test.html: Added.

2019-08-12  Alan Coon  <alancoon@apple.com>

        Cherry-pick r248491. rdar://problem/54130636

    Don't allow cross-origin iframes to autofocus
    https://bugs.webkit.org/show_bug.cgi?id=200515
    <rdar://problem/54092988>
    
    Reviewed by Ryosuke Niwa.
    
    Source/WebCore:
    
    According to Step 6 in the WhatWG Spec (https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofocusing-a-form-control:-the-autofocus-attribute),
    the 'autofocus' attribute shouldn't work for cross-origin iframes.
    
    This change is based on the Blink change (patch by <mustaq@chromium.org>):
    <https://chromium-review.googlesource.com/c/chromium/src/+/1593026>
    
    Also disallow cross-origin iframes from focusing programmatically without ever having
    had any user interaction.
    
    * dom/Element.cpp: Check if an invalid frame is trying to grab the focus.
    (WebCore::Element::focus):
    * html/HTMLFormControlElement.cpp: Check if the focus is moving to an invalid frame.
    (WebCore::shouldAutofocus):
    * page/DOMWindow.cpp: Check if an invalid frame is trying to grab the focus.
    (WebCore::DOMWindow::focus):
    
    Tools:
    
    Make WebKit.FocusedFrameAfterCrash use same-origin iframes instead
    of cross-origin iframes, since it depends on focusing one of the
    frames.
    
    * TestWebKitAPI/TestWebKitAPI.xcodeproj/project.pbxproj:
    * TestWebKitAPI/Tests/WebKit/ReloadPageAfterCrash.cpp:
    (TestWebKitAPI::TEST):
    * TestWebKitAPI/Tests/WebKit/many-same-origin-iframes.html: Added.
    
    LayoutTests:
    
    Add test coverage, and simulate user interaction in existing tests
    that require focusing a cross-origin frame.
    
    * http/tests/security/clipboard/resources/copy-html.html:
    * http/tests/security/clipboard/resources/copy-mso-list.html:
    * http/tests/security/clipboard/resources/copy-url.html:
    * http/wpt/html/interaction/focus/no-cross-origin-element-focus-expected.txt: Added.
    * http/wpt/html/interaction/focus/no-cross-origin-element-focus.html: Added.
    * http/wpt/html/interaction/focus/no-cross-origin-window-focus-expected.txt: Added.
    * http/wpt/html/interaction/focus/no-cross-origin-window-focus.html: Added.
    * http/wpt/html/interaction/focus/resources/child-focus-element.html: Added.
    * http/wpt/html/interaction/focus/resources/child-focus-window.html: Added.
    * http/wpt/html/semantics/forms/autofocus/no-cross-origin-autofocus.sub-expected.txt: Added.
    * http/wpt/html/semantics/forms/autofocus/no-cross-origin-autofocus.sub.html: Added.
    * http/wpt/html/semantics/forms/autofocus/resources/child-autofocus.html: Added.
    * http/wpt/webauthn/resources/last-layer-frame.https.html:
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@248491 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-08-09  Ali Juma  <ajuma@chromium.org>

            Don't allow cross-origin iframes to autofocus
            https://bugs.webkit.org/show_bug.cgi?id=200515
            <rdar://problem/54092988>

            Reviewed by Ryosuke Niwa.

            Add test coverage, and simulate user interaction in existing tests
            that require focusing a cross-origin frame.

            * http/tests/security/clipboard/resources/copy-html.html:
            * http/tests/security/clipboard/resources/copy-mso-list.html:
            * http/tests/security/clipboard/resources/copy-url.html:
            * http/wpt/html/interaction/focus/no-cross-origin-element-focus-expected.txt: Added.
            * http/wpt/html/interaction/focus/no-cross-origin-element-focus.html: Added.
            * http/wpt/html/interaction/focus/no-cross-origin-window-focus-expected.txt: Added.
            * http/wpt/html/interaction/focus/no-cross-origin-window-focus.html: Added.
            * http/wpt/html/interaction/focus/resources/child-focus-element.html: Added.
            * http/wpt/html/interaction/focus/resources/child-focus-window.html: Added.
            * http/wpt/html/semantics/forms/autofocus/no-cross-origin-autofocus.sub-expected.txt: Added.
            * http/wpt/html/semantics/forms/autofocus/no-cross-origin-autofocus.sub.html: Added.
            * http/wpt/html/semantics/forms/autofocus/resources/child-autofocus.html: Added.
            * http/wpt/webauthn/resources/last-layer-frame.https.html:

2019-08-12  Alan Coon  <alancoon@apple.com>

        Cherry-pick r248368. rdar://problem/54037153

    Extra space inserted at start of line when inserting a newline in Mail compose
    https://bugs.webkit.org/show_bug.cgi?id=200490
    <rdar://problem/53501354>
    
    Reviewed by Antti Koivisto.
    
    Source/WebCore:
    
    This started happening after r244494, which deferred editor state computation until the next layer tree flush
    when changing selection. After inserting a paragraph, the act of computing an editor state ensured that the text
    node containing the caret drops out of simple line layout, while grabbing the characters near the selection
    (i.e., calling charactersAroundPosition). This meant that when we subsequently ask positionAfterSplit whether it
    isRenderedCharacter() at the end of the command, we are guaranteed to have line boxes, so we get a meaningful
    answer and avoid inserting an extra non-breaking space.
    
    However, after r244494, we defer the editor state computation until the end of the edit command; this means that
    we may not have line boxes for positionAfterSplit's text node renderer, due to remaining in simple line layout.
    In turn, this means that we end up hitting the assertion in containsRenderedCharacterOffset in debug builds; on
    release builds, we simply return false from containsRenderedCharacterOffset, which causes us to insert an extra
    space.
    
    To fix this, we educate RenderText::containsRenderedCharacterOffset about simple line layout.
    
    Test: editing/inserting/insert-paragraph-in-designmode-document.html
    
    * rendering/RenderText.cpp:
    (WebCore::RenderText::containsRenderedCharacterOffset const):
    (WebCore::RenderText::containsCaretOffset const):
    
    Changed to use SimpleLineLayout::containsOffset.
    
    * rendering/SimpleLineLayoutFunctions.h:
    (WebCore::SimpleLineLayout::containsOffset):
    
    I first contrasted the behavior of RenderTextLineBoxes::containsOffset in the cases where the OffsetType is
    CaretOffset or CharacterOffset, and found that the only interesting differences were:
    
    1. The caret offset type case has special handling for line breaks.
    2. Both offset types have handling for reversed text.
    3. The end offset of a line box contains a caret offset, but not a character offset.
    
    For the purposes of OffsetType CharacterOffset, (1) is irrelevant; furthermore, (2) is already not handled by
    logic in containsCaretOffset(). Thus, the only major difference in the CharacterOffset case should be (3), which
    we handle by only allowing the case where the given offset is equal to the very end of a text run for caret
    offsets, and not character offsets.
    
    (WebCore::SimpleLineLayout::containsCaretOffset): Deleted.
    
    Renamed to just containsOffset.
    
    LayoutTests:
    
    Add a new test to verify that inserting a newline in the middle of text in a document with designMode "on"
    doesn't insert an extra space at the beginning of the newly inserted line.
    
    * editing/inserting/insert-paragraph-in-designmode-document-expected.txt: Added.
    * editing/inserting/insert-paragraph-in-designmode-document.html: Added.
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@248368 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-08-07  Wenson Hsieh  <wenson_hsieh@apple.com>

            Extra space inserted at start of line when inserting a newline in Mail compose
            https://bugs.webkit.org/show_bug.cgi?id=200490
            <rdar://problem/53501354>

            Reviewed by Antti Koivisto.

            Add a new test to verify that inserting a newline in the middle of text in a document with designMode "on"
            doesn't insert an extra space at the beginning of the newly inserted line.

            * editing/inserting/insert-paragraph-in-designmode-document-expected.txt: Added.
            * editing/inserting/insert-paragraph-in-designmode-document.html: Added.

2019-08-12  Alan Coon  <alancoon@apple.com>

        Cherry-pick r248265. rdar://problem/54017842

    Ping loads should not prevent page caching
    https://bugs.webkit.org/show_bug.cgi?id=200418
    <rdar://problem/53901632>
    
    Reviewed by Darin Adler.
    
    Source/WebCore:
    
    We normally prevent page caching if there were any pending subresource loads when navigating,
    to avoid caching partial / broken content. However, this should not apply to Ping / Beacon
    loads since those do not impact page rendering and can outlive the page.
    
    Tests: http/tests/navigation/page-cache-pending-ping-load-cross-origin.html
           http/tests/navigation/page-cache-pending-ping-load-same-origin.html
    
    * history/PageCache.cpp:
    (WebCore::PageCache::addIfCacheable):
    After we've fired the 'pagehide' event in each frame, stop all the loads again. This is needed
    since pages are allowed to start ping / beacon loads in their 'pagehide' handlers. If we do not
    stop those loads, then the next call to canCachePage() would fail because the DocumentLoader is
    still loading. Note that we're not actually preventing these ping loads from hitting the server
    since we never cancel page loads and those can outlive their page.
    
    * loader/DocumentLoader.cpp:
    (WebCore::shouldPendingCachedResourceLoadPreventPageCache):
    (WebCore::areAllLoadersPageCacheAcceptable):
    Make sure that Ping / Beacon / Prefetches / Icon loads do not prevent page caching.
    
    (WebCore::DocumentLoader::addSubresourceLoader):
    Tweak assertion that was incorrect since we actually allow ping / beacon loads when the
    document is about to enter PageCache (while firing pagehide event).
    
    Tools:
    
    Add TestOption to enable PageCache at UIProcess-level so that we can test
    page caching when navigating cross-origin with PSON enabled.
    
    * WebKitTestRunner/TestController.cpp:
    (WTR::TestController::resetPreferencesToConsistentValues):
    (WTR::updateTestOptionsFromTestHeader):
    * WebKitTestRunner/TestOptions.h:
    (WTR::TestOptions::hasSameInitializationOptions const):
    
    LayoutTests:
    
    Add layout test coverage.
    
    * http/tests/navigation/page-cache-pending-ping-load-cross-origin-expected.txt: Added.
    * http/tests/navigation/page-cache-pending-ping-load-cross-origin.html: Added.
    * http/tests/navigation/page-cache-pending-ping-load-same-origin-expected.txt: Added.
    * http/tests/navigation/page-cache-pending-ping-load-same-origin.html: Added.
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@248265 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-08-04  Chris Dumez  <cdumez@apple.com>

            Ping loads should not prevent page caching
            https://bugs.webkit.org/show_bug.cgi?id=200418
            <rdar://problem/53901632>

            Reviewed by Darin Adler.

            Add layout test coverage.

            * http/tests/navigation/page-cache-pending-ping-load-cross-origin-expected.txt: Added.
            * http/tests/navigation/page-cache-pending-ping-load-cross-origin.html: Added.
            * http/tests/navigation/page-cache-pending-ping-load-same-origin-expected.txt: Added.
            * http/tests/navigation/page-cache-pending-ping-load-same-origin.html: Added.

2019-08-12  Alan Coon  <alancoon@apple.com>

        Cherry-pick r248148. rdar://problem/54017840

    Pages using MessagePorts should be PageCacheable
    https://bugs.webkit.org/show_bug.cgi?id=200366
    <rdar://problem/53837882>
    
    Reviewed by Geoffrey Garen.
    
    Source/WebCore:
    
    Allow a page to enter PageCache, even if it has MessagePorts (potentially with
    pending messages). If there are pending messages on the MessagePorts when
    entering PageCache, those will get dispatched upon restoring from PageCache.
    
    Test: fast/history/page-cache-MessagePort-pending-message.html
    
    * dom/MessagePort.cpp:
    (WebCore::MessagePort::messageAvailable):
    (WebCore::MessagePort::dispatchMessages):
    Do not dispatch messages while in PageCache.
    
    (WebCore::MessagePort::canSuspendForDocumentSuspension const):
    Allow pages with MessagePort objects to enter PageCache.
    
    * dom/ScriptExecutionContext.cpp:
    (WebCore::ScriptExecutionContext::resumeActiveDOMObjects):
    Make sure pending messages on MessagePorts get dispatched asynchronously after restoring
    from PageCache.
    
    * loader/DocumentLoader.cpp:
    (WebCore::areAllLoadersPageCacheAcceptable):
    Make sure only CachedResources that are still loading upon load cancelation prevent
    entering PageCache.
    
    LayoutTests:
    
    Add layout test coverage.
    
    * fast/history/page-cache-MessagePort-pending-message-expected.txt: Added.
    * fast/history/page-cache-MessagePort-pending-message.html: Added.
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@248148 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-08-01  Chris Dumez  <cdumez@apple.com>

            Pages using MessagePorts should be PageCacheable
            https://bugs.webkit.org/show_bug.cgi?id=200366
            <rdar://problem/53837882>

            Reviewed by Geoffrey Garen.

            Add layout test coverage.

            * fast/history/page-cache-MessagePort-pending-message-expected.txt: Added.
            * fast/history/page-cache-MessagePort-pending-message.html: Added.

2019-08-12  Alan Coon  <alancoon@apple.com>

        Cherry-pick r248112. rdar://problem/53836593

    [Text autosizing] [iPadOS] Add targeted hacks to address some remaining text autosizing issues
    https://bugs.webkit.org/show_bug.cgi?id=200271
    <rdar://problem/51734741>
    
    Reviewed by Zalan Bujtas.
    
    Source/WebCore:
    
    Makes some targeted adjustments to the text autosizing heuristic, to ensure compatibility with several high-
    profile websites. See changes below for more detail.
    
    Tests:  fast/text-autosizing/ios/idempotentmode/idempotent-autosizing-candidate-special-cases.html
            fast/text-autosizing/ios/idempotentmode/line-height-boosting.html
    
    * css/StyleResolver.cpp:
    (WebCore::StyleResolver::adjustRenderStyleForTextAutosizing):
    
    Avoid clipped sidebar links on sohu.com by not performing line-height boosting in the case where the element
    probably has a small, fixed number of lines. See below for more detail. Additionally, don't attempt to adjust
    the line height using the boosted font size, in the case where the element is not a candidate for idempotent
    text autosizing.
    
    * rendering/style/RenderStyle.cpp:
    (WebCore::RenderStyle::isIdempotentTextAutosizingCandidate const):
    
    Make various targeted hacks to fix a few websites:
    
    -   Add a special case for top navigation bar links on yandex.ru, where line height greatly exceeds the
        specified font size.
    
    -   Avoid boosting some related video links on v.youku.com by considering the line-clamp CSS property when
        determining the maximum number of lines of text an element is expected to contain.
    
    -   Avoid boosting some front page links on asahi.com, which have non-repeating background images.
    
    -   Add several other adjustments to more aggressively boost pieces of text on Google search results, such as
        taking the `word-break` CSS property into account.
    
    The bottom few pixels of sidebar links on naver.com are also no longer clipped after these changes.
    
    * rendering/style/TextSizeAdjustment.cpp:
    (WebCore::AutosizeStatus::probablyContainsASmallFixedNumberOfLines):
    
    Pulls out a piece of the heuristic added to fix sephora.com in r247467 out into a separate helper method. To
    recap, this heuristic identifies elements with both a fixed height and fixed line height, for which the fixed
    height is close to an integer multiple of the line height.
    
    Also makes several small tweaks in the process: (1) change the max difference between fixed line height and
    font size from 6 to 5 to ensure that some multiline caption text on Google search results is boosted, and (2)
    replace usages of `lineHeight()` with `specifiedLineHeight()`, which current prevents this function from being
    truly idempotent.
    
    (WebCore::AutosizeStatus::updateStatus):
    * rendering/style/TextSizeAdjustment.h:
    
    LayoutTests:
    
    Add tests to cover some changes to line height boosting and the idempotent text autosizing candidate heuristic.
    
    * fast/text-autosizing/ios/idempotentmode/idempotent-autosizing-candidate-special-cases-expected.txt: Added.
    * fast/text-autosizing/ios/idempotentmode/idempotent-autosizing-candidate-special-cases.html: Added.
    * fast/text-autosizing/ios/idempotentmode/line-height-boosting-expected.txt:
    * fast/text-autosizing/ios/idempotentmode/line-height-boosting.html:
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@248112 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-08-01  Wenson Hsieh  <wenson_hsieh@apple.com>

            [Text autosizing] [iPadOS] Add targeted hacks to address some remaining text autosizing issues
            https://bugs.webkit.org/show_bug.cgi?id=200271
            <rdar://problem/51734741>

            Reviewed by Zalan Bujtas.

            Add tests to cover some changes to line height boosting and the idempotent text autosizing candidate heuristic.

            * fast/text-autosizing/ios/idempotentmode/idempotent-autosizing-candidate-special-cases-expected.txt: Added.
            * fast/text-autosizing/ios/idempotentmode/idempotent-autosizing-candidate-special-cases.html: Added.
            * fast/text-autosizing/ios/idempotentmode/line-height-boosting-expected.txt:
            * fast/text-autosizing/ios/idempotentmode/line-height-boosting.html:

2019-08-12  Alan Coon  <alancoon@apple.com>

        Cherry-pick r248104. rdar://problem/53836566

    UserMediaPermissionRequestManagerProxy should not use audio+video denied requests to deny audio-only or video-only requests
    https://bugs.webkit.org/show_bug.cgi?id=200317
    
    Reviewed by Eric Carlson.
    
    Source/WebKit:
    
    Only match audio+video denied requests with new audio+video requests.
    That will ensure that audio can still be captured if user denied access to the camera through preferences
    and website started with a getUserMedia({audio: true, video: true}) call.
    Covered by added API test.
    
    * UIProcess/UserMediaPermissionRequestManagerProxy.cpp:
    (WebKit::UserMediaPermissionRequestManagerProxy::wasRequestDenied):
    
    Tools:
    
    * TestWebKitAPI/Tests/WebKit/getUserMediaAudioVideoCapture.html: Added
    * TestWebKitAPI/TestWebKitAPI.xcodeproj/project.pbxproj:
    * TestWebKitAPI/Tests/WebKit/GetUserMediaReprompt.mm:
    (-[GetUserMediaOnlyAudioUIDelegate _webView:requestMediaCaptureAuthorization:decisionHandler:]):
    (-[GetUserMediaOnlyAudioUIDelegate _webView:checkUserMediaPermissionForURL:mainFrameURL:frameIdentifier:decisionHandler:]):
    (TestWebKitAPI::TEST):
    
    LayoutTests:
    
    Update existing test with new behavior.
    Added new test for the case where video is blocked but not audio.
    
    * fast/mediastream/getUserMedia-deny-persistency3-expected.txt:
    * fast/mediastream/getUserMedia-deny-persistency3.html:
    * fast/mediastream/getUserMedia-deny-persistency4-expected.txt: Added.
    * fast/mediastream/getUserMedia-deny-persistency4.html: Added.
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@248104 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-08-01  Youenn Fablet  <youenn@apple.com>

            UserMediaPermissionRequestManagerProxy should not use audio+video denied requests to deny audio-only or video-only requests
            https://bugs.webkit.org/show_bug.cgi?id=200317

            Reviewed by Eric Carlson.

            Update existing test with new behavior.
            Added new test for the case where video is blocked but not audio.

            * fast/mediastream/getUserMedia-deny-persistency3-expected.txt:
            * fast/mediastream/getUserMedia-deny-persistency3.html:
            * fast/mediastream/getUserMedia-deny-persistency4-expected.txt: Added.
            * fast/mediastream/getUserMedia-deny-persistency4.html: Added.

2019-08-08  Ryan Haddad  <ryanhaddad@apple.com>

        Cherry-pick r248388. rdar://problem/54049321

    Updating TestExpectations for editing/pasteboard/paste-does-not-fire-promises-while-sanitizing-web-content.html.
    rdar://54049321
    
    Unreviewed Test Gardening.
    
    * platform/ios-12/TestExpectations:
    * platform/ios/TestExpectations:
    
    git-svn-id: http://svn.webkit.org/repository/webkit/trunk@248388 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-08-07  Russell Epstein  <repstein@apple.com>

            Updating TestExpectations for editing/pasteboard/paste-does-not-fire-promises-while-sanitizing-web-content.html.
            rdar://54049321

            Unreviewed Test Gardening.

            * platform/ios-12/TestExpectations:
            * platform/ios/TestExpectations:

2019-08-07  Ryan Haddad  <ryanhaddad@apple.com>

        Cherry-pick r248379. rdar://problem/53779679

    Updating TestExpectations for Two Failing Layout Tests.
    rdar://53779679
    
    Unreviewed Test Gardening.
    
    * platform/ios-12/TestExpectations:
    * platform/ios/TestExpectations:
    
    git-svn-id: http://svn.webkit.org/repository/webkit/trunk@248379 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-08-07  Russell Epstein  <repstein@apple.com>

            Updating TestExpectations for Two Failing Layout Tests.
            rdar://53779679

            Unreviewed Test Gardening.

            * platform/ios-12/TestExpectations:
            * platform/ios/TestExpectations:

2019-08-07  Ryan Haddad  <ryanhaddad@apple.com>

        Cherry-pick r248312. rdar://problem/53829560

    Updating Test Expectations for <rdar://53957264>, <rdar://53946482>, <rdar://53866783>
    
    Unreviewed Test Gardening.
    
    * platform/ios-12/TestExpectations:
    * platform/ios/TestExpectations:
    
    git-svn-id: http://svn.webkit.org/repository/webkit/trunk@248312 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-08-06  Russell Epstein  <repstein@apple.com>

            Updating Test Expectations for <rdar://53957264>, <rdar://53946482>, <rdar://53866783>

            Unreviewed Test Gardening.

            * platform/ios-12/TestExpectations:
            * platform/ios/TestExpectations:

2019-08-07  Ryan Haddad  <ryanhaddad@apple.com>

        Cherry-pick r247833. rdar://problem/53551736

    rdar://53551736 (Layout Test editing/pasteboard/paste-and-sanitize.html is a Flaky Failure on iOS 13).
    
    Unreviewed Test Gardening.
    
    * platform/ios-12/TestExpectations: Test is passing on iOS 12
    * platform/ios/TestExpectations: Marking test as flaky on iOS 13
    
    git-svn-id: http://svn.webkit.org/repository/webkit/trunk@247833 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-07-25  Russell Epstein  <repstein@apple.com>

            rdar://53551736 (Layout Test editing/pasteboard/paste-and-sanitize.html is a Flaky Failure on iOS 13).

            Unreviewed Test Gardening.

            * platform/ios-12/TestExpectations: Test is passing on iOS 12
            * platform/ios/TestExpectations: Marking test as flaky on iOS 13

2019-08-07  Ryan Haddad  <ryanhaddad@apple.com>

        Cherry-pick r248300. rdar://problem/53468934

    [iPad] editing/selection/character-granularity-rect.html is now passing.
    <rdar://53468934>
    
    Unreviewed Test Gardening.
    
    * platform/ipad/TestExpectations: Removed expectation for passing test, editing/selection/character-granularity-rect.html
    
    git-svn-id: http://svn.webkit.org/repository/webkit/trunk@248300 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-08-06  Russell Epstein  <repstein@apple.com>

            [iPad] editing/selection/character-granularity-rect.html is now passing.
            <rdar://53468934>

            Unreviewed Test Gardening.

            * platform/ipad/TestExpectations: Removed expectation for passing test, editing/selection/character-granularity-rect.html

2019-08-01  Alan Coon  <alancoon@apple.com>

        Apply patch. rdar://problem/53764238

    2019-08-01  Sergei Glazunov  <glazunov@google.com>

            The maximum subframe count check should not be skipped for empty URLs.
            https://bugs.webkit.org/show_bug.cgi?id=200032

            Reviewed by Ryosuke Niwa.

            * fast/dom/connected-subframe-counter-overflow-expected.txt: Added.
            * fast/dom/connected-subframe-counter-overflow.html: Added.
            * fast/frames/lots-of-iframes-expected.txt:

2019-08-01  Ryan Haddad  <ryanhaddad@apple.com>

        Cherry-pick r248111. rdar://problem/53829560

    Removing expectations for tests that are now consistently passing
    
    Unreviewed test gardening.
    
    * platform/mac-wk1/TestExpectations:
    * platform/mac/TestExpectations:
    
    git-svn-id: http://svn.webkit.org/repository/webkit/trunk@248111 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-08-01  Truitt Savell  <tsavell@apple.com>

            Removing expectations for tests that are now consistently passing

            Unreviewed test gardening.

            * platform/mac-wk1/TestExpectations:
            * platform/mac/TestExpectations:

2019-08-01  Ryan Haddad  <ryanhaddad@apple.com>

        Cherry-pick r247919. rdar://problem/48616298

    Unreviewed test gardening, update expectations for rdar://problem/48616298.
    
    * platform/ios-wk2/TestExpectations:
    The fast/viewport/ios directory is marked as passing in this file, which was overriding the entries in the 'ios' file.
    * platform/ios/TestExpectations:
    
    git-svn-id: http://svn.webkit.org/repository/webkit/trunk@247919 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-07-29  Ryan Haddad  <ryanhaddad@apple.com>

            Unreviewed test gardening, update expectations for rdar://problem/48616298.

            * platform/ios-wk2/TestExpectations:
            The fast/viewport/ios directory is marked as passing in this file, which was overriding the entries in the 'ios' file.
            * platform/ios/TestExpectations:

2019-08-01  Ryan Haddad  <ryanhaddad@apple.com>

        Cherry-pick r248017. rdar://problem/52956165

    Add test expectations and baselines for iPad
    https://bugs.webkit.org/show_bug.cgi?id=199711
    
    Unreviewed test gardening.
    
    
    * platform/ipad-12/TestExpectations: Added.
    * platform/ipad-12/fast/scrolling/ios/overflow-scrolling-ancestor-clip-expected.txt: Copied from LayoutTests/platform/ipad/fast/scrolling/ios/overflow-scrolling-ancestor-clip-expected.txt.
    * platform/ipad-12/fast/scrolling/ios/overflow-scrolling-ancestor-clip-size-expected.txt: Copied from LayoutTests/platform/ipad/fast/scrolling/ios/overflow-scrolling-ancestor-clip-size-expected.txt.
    * platform/ipad-12/fast/scrolling/ios/subpixel-overflow-scrolling-with-ancestor-expected.txt: Copied from LayoutTests/platform/ipad/fast/scrolling/ios/subpixel-overflow-scrolling-with-ancestor-expected.txt.
    * platform/ipad-12/fast/viewport/ios/width-is-device-width-overflowing-body-overflow-hidden-tall-expected.txt: Copied from LayoutTests/platform/ipad/fast/viewport/ios/width-is-device-width-overflowing-body-overflow-hidden-tall-expected.txt.
    * platform/ipad-12/platform/ios/ios/fast/text/opticalFontWithTextStyle-expected.txt: Copied from LayoutTests/platform/ipad/platform/ios/ios/fast/text/opticalFontWithTextStyle-expected.txt.
    * platform/ipad-12/scrollingcoordinator/ios/ui-scrolling-tree-expected.txt: Copied from LayoutTests/platform/ipad/scrollingcoordinator/ios/ui-scrolling-tree-expected.txt.
    * platform/ipad/compositing/overflow/scrolling-content-clip-to-viewport-expected.txt: Added.
    * platform/ipad/compositing/rtl/rtl-scrolling-with-transformed-descendants-expected.txt: Added.
    * platform/ipad/editing/caret/ios/fixed-caret-position-after-scroll-expected.txt: Added.
    * platform/ipad/editing/selection/ios/do-not-hide-selection-in-visible-container-expected.txt: Added.
    * platform/ipad/fast/dom/navigator-iOS-userAgent-expected.txt: Added.
    * platform/ipad/fast/scrolling/ios/change-scrollability-on-content-resize-nested-expected.txt: Added.
    * platform/ipad/fast/scrolling/ios/overflow-scrolling-ancestor-clip-expected.txt:
    * platform/ipad/fast/scrolling/ios/overflow-scrolling-ancestor-clip-size-expected.txt:
    * platform/ipad/fast/scrolling/ios/reconcile-layer-position-recursive-expected.txt: Added.
    * platform/ipad/fast/scrolling/ios/subpixel-overflow-scrolling-with-ancestor-expected.txt:
    * platform/ipad/fast/viewport/ios/shrink-to-fit-for-page-without-viewport-meta-expected.txt: Added.
    * platform/ipad/fast/viewport/ios/width-is-device-width-overflowing-body-overflow-hidden-tall-expected.txt:
    * platform/ipad/imported/w3c/web-platform-tests/html/browsers/the-window-object/apis-for-creating-and-navigating-browsing-contexts-by-name/open-features-non-integer-height-expected.txt: Added.
    * platform/ipad/imported/w3c/web-platform-tests/html/browsers/the-window-object/apis-for-creating-and-navigating-browsing-contexts-by-name/open-features-non-integer-innerheight-expected.txt: Added.
    * platform/ipad/imported/w3c/web-platform-tests/html/browsers/the-window-object/apis-for-creating-and-navigating-browsing-contexts-by-name/open-features-non-integer-innerwidth-expected.txt: Added.
    * platform/ipad/imported/w3c/web-platform-tests/html/browsers/the-window-object/apis-for-creating-and-navigating-browsing-contexts-by-name/open-features-non-integer-width-expected.txt: Added.
    * platform/ipad/imported/w3c/web-platform-tests/html/browsers/the-window-object/apis-for-creating-and-navigating-browsing-contexts-by-name/open-features-tokenization-innerheight-innerwidth-expected.txt: Added.
    * platform/ipad/imported/w3c/web-platform-tests/html/browsers/the-window-object/apis-for-creating-and-navigating-browsing-contexts-by-name/open-features-tokenization-width-height-expected.txt: Added.
    * platform/ipad/imported/w3c/web-platform-tests/workers/WorkerNavigator_platform-expected.txt: Added.
    * platform/ipad/imported/w3c/web-platform-tests/workers/interfaces/WorkerUtils/navigator/004-expected.txt: Added.
    * platform/ipad/platform/ios/ios/fast/text/opticalFontWithTextStyle-expected.txt:
    * platform/ipad/scrollingcoordinator/ios/fixed-in-frame-layer-reconcile-layer-position-expected.txt: Added.
    * platform/ipad/scrollingcoordinator/ios/fixed-in-overflow-scroll-scrolling-tree-expected.txt: Added.
    * platform/ipad/scrollingcoordinator/ios/fixed-scrolling-with-keyboard-expected.txt: Copied from LayoutTests/platform/ipad/scrollingcoordinator/ios/ui-scrolling-tree-expected.txt.
    * platform/ipad/scrollingcoordinator/ios/non-stable-viewport-scroll-expected.txt: Added.
    * platform/ipad/scrollingcoordinator/ios/ui-scrolling-tree-expected.txt:
    
    
    git-svn-id: http://svn.webkit.org/repository/webkit/trunk@248017 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-07-30  Ryan Haddad  <ryanhaddad@apple.com>

            Add test expectations and baselines for iPad
            https://bugs.webkit.org/show_bug.cgi?id=199711

            Unreviewed test gardening.

            * platform/ipad-12/TestExpectations: Added.
            * platform/ipad-12/fast/scrolling/ios/overflow-scrolling-ancestor-clip-expected.txt: Copied from LayoutTests/platform/ipad/fast/scrolling/ios/overflow-scrolling-ancestor-clip-expected.txt.
            * platform/ipad-12/fast/scrolling/ios/overflow-scrolling-ancestor-clip-size-expected.txt: Copied from LayoutTests/platform/ipad/fast/scrolling/ios/overflow-scrolling-ancestor-clip-size-expected.txt.
            * platform/ipad-12/fast/scrolling/ios/subpixel-overflow-scrolling-with-ancestor-expected.txt: Copied from LayoutTests/platform/ipad/fast/scrolling/ios/subpixel-overflow-scrolling-with-ancestor-expected.txt.
            * platform/ipad-12/fast/viewport/ios/width-is-device-width-overflowing-body-overflow-hidden-tall-expected.txt: Copied from LayoutTests/platform/ipad/fast/viewport/ios/width-is-device-width-overflowing-body-overflow-hidden-tall-expected.txt.
            * platform/ipad-12/platform/ios/ios/fast/text/opticalFontWithTextStyle-expected.txt: Copied from LayoutTests/platform/ipad/platform/ios/ios/fast/text/opticalFontWithTextStyle-expected.txt.
            * platform/ipad-12/scrollingcoordinator/ios/ui-scrolling-tree-expected.txt: Copied from LayoutTests/platform/ipad/scrollingcoordinator/ios/ui-scrolling-tree-expected.txt.
            * platform/ipad/compositing/overflow/scrolling-content-clip-to-viewport-expected.txt: Added.
            * platform/ipad/compositing/rtl/rtl-scrolling-with-transformed-descendants-expected.txt: Added.
            * platform/ipad/editing/caret/ios/fixed-caret-position-after-scroll-expected.txt: Added.
            * platform/ipad/editing/selection/ios/do-not-hide-selection-in-visible-container-expected.txt: Added.
            * platform/ipad/fast/dom/navigator-iOS-userAgent-expected.txt: Added.
            * platform/ipad/fast/scrolling/ios/change-scrollability-on-content-resize-nested-expected.txt: Added.
            * platform/ipad/fast/scrolling/ios/overflow-scrolling-ancestor-clip-expected.txt:
            * platform/ipad/fast/scrolling/ios/overflow-scrolling-ancestor-clip-size-expected.txt:
            * platform/ipad/fast/scrolling/ios/reconcile-layer-position-recursive-expected.txt: Added.
            * platform/ipad/fast/scrolling/ios/subpixel-overflow-scrolling-with-ancestor-expected.txt:
            * platform/ipad/fast/viewport/ios/shrink-to-fit-for-page-without-viewport-meta-expected.txt: Added.
            * platform/ipad/fast/viewport/ios/width-is-device-width-overflowing-body-overflow-hidden-tall-expected.txt:
            * platform/ipad/imported/w3c/web-platform-tests/html/browsers/the-window-object/apis-for-creating-and-navigating-browsing-contexts-by-name/open-features-non-integer-height-expected.txt: Added.
            * platform/ipad/imported/w3c/web-platform-tests/html/browsers/the-window-object/apis-for-creating-and-navigating-browsing-contexts-by-name/open-features-non-integer-innerheight-expected.txt: Added.
            * platform/ipad/imported/w3c/web-platform-tests/html/browsers/the-window-object/apis-for-creating-and-navigating-browsing-contexts-by-name/open-features-non-integer-innerwidth-expected.txt: Added.
            * platform/ipad/imported/w3c/web-platform-tests/html/browsers/the-window-object/apis-for-creating-and-navigating-browsing-contexts-by-name/open-features-non-integer-width-expected.txt: Added.
            * platform/ipad/imported/w3c/web-platform-tests/html/browsers/the-window-object/apis-for-creating-and-navigating-browsing-contexts-by-name/open-features-tokenization-innerheight-innerwidth-expected.txt: Added.
            * platform/ipad/imported/w3c/web-platform-tests/html/browsers/the-window-object/apis-for-creating-and-navigating-browsing-contexts-by-name/open-features-tokenization-width-height-expected.txt: Added.
            * platform/ipad/imported/w3c/web-platform-tests/workers/WorkerNavigator_platform-expected.txt: Added.
            * platform/ipad/imported/w3c/web-platform-tests/workers/interfaces/WorkerUtils/navigator/004-expected.txt: Added.
            * platform/ipad/platform/ios/ios/fast/text/opticalFontWithTextStyle-expected.txt:
            * platform/ipad/scrollingcoordinator/ios/fixed-in-frame-layer-reconcile-layer-position-expected.txt: Added.
            * platform/ipad/scrollingcoordinator/ios/fixed-in-overflow-scroll-scrolling-tree-expected.txt: Added.
            * platform/ipad/scrollingcoordinator/ios/fixed-scrolling-with-keyboard-expected.txt: Copied from LayoutTests/platform/ipad/scrollingcoordinator/ios/ui-scrolling-tree-expected.txt.
            * platform/ipad/scrollingcoordinator/ios/non-stable-viewport-scroll-expected.txt: Added.
            * platform/ipad/scrollingcoordinator/ios/ui-scrolling-tree-expected.txt:

2019-07-26  Ryan Haddad  <ryanhaddad@apple.com>

        Cherry-pick layout test changes for r247866. rdar://problem/53648067

    Unable to tap/double tap to open files/folders in Google Drive in Safari
    https://bugs.webkit.org/show_bug.cgi?id=200096
    <rdar://problem/52748552>

    Reviewed by Wenson Hsieh.

    1. Rebaseline (progression).
    2. Payment request tests activate elements by tapping on them at a high speed, triggering double clicks instead. Let's slow them down a bit.

    * fast/events/touch/ios/double-tap-for-double-click3-expected.txt:
    * http/tests/adClickAttribution/anchor-tag-attributes-validation.html:
    * http/tests/resources/payment-request.js:
    (activateThen):
    * resources/ui-helper.js:
    (window.UIHelper.activateElementAtHumanSpeed.return.new.Promise):
    (window.UIHelper.activateElementAtHumanSpeed):
    * tests-options.json:

2019-07-31  Alan Coon  <alancoon@apple.com>

        Cherry-pick r248080. rdar://problem/53788956

    [ContentChangeObserver] twitch.tv video controls do not always respond to taps in fullscreen
    https://bugs.webkit.org/show_bug.cgi?id=200309
    <rdar://problem/52964977>
    
    Reviewed by Simon Fraser.
    
    Source/WebCore:
    
    Do not consider an element visible if it is not a descendant of the active fullscreen element.
    
    This patch fixes the cases when the user taps on a button in fullscreen mode while the non-fullscreen content is being mutated and
    the ContentChangeObserver mistakenly registers it as a valid, actionable change and as a result we don't fire the click event (stay at hover).
    
    Test: fast/events/touch/ios/content-observation/non-visible-content-change-in-fullscreen-mode.html
    
    * page/ios/ContentChangeObserver.cpp:
    (WebCore::fullscreenElement):
    (WebCore::ContentChangeObserver::isVisuallyHidden):
    
    LayoutTests:
    
    * fast/events/touch/ios/content-observation/non-visible-content-change-in-fullscreen-mode-expected.txt: Added.
    * fast/events/touch/ios/content-observation/non-visible-content-change-in-fullscreen-mode.html: Added.
    * platform/ios/TestExpectations: Fullscreen API is not yet enabled on iOS.
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@248080 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-07-31  Zalan Bujtas  <zalan@apple.com>

            [ContentChangeObserver] twitch.tv video controls do not always respond to taps in fullscreen
            https://bugs.webkit.org/show_bug.cgi?id=200309
            <rdar://problem/52964977>

            Reviewed by Simon Fraser.

            * fast/events/touch/ios/content-observation/non-visible-content-change-in-fullscreen-mode-expected.txt: Added.
            * fast/events/touch/ios/content-observation/non-visible-content-change-in-fullscreen-mode.html: Added.
            * platform/ios/TestExpectations: Fullscreen API is not yet enabled on iOS.

2019-07-31  Alan Coon  <alancoon@apple.com>

        Cherry-pick r248071. rdar://problem/53789003

    Use CTFontCreateForCharactersWithLanguageAndOption if available instead of CTFontCreateForCharactersWithLanguage
    https://bugs.webkit.org/show_bug.cgi?id=200241
    
    Source/WebCore:
    
    Reviewed by Myles C. Maxfield.
    
    We can use CTFontCreateForCharactersWithLanguageAndOption instead of CTFontCreateForCharactersWithLanguage
    as it allows setting more easily the fallback option.
    This allows us to never fallback to user installed fonts.
    In such a case, we no longer need to wrap the fonts to change the fallback option.
    We also prewarm the fonts with the same SPI and use system fallback as the default value.
    
    Covered by existing tests.
    
    * platform/graphics/cocoa/FontCacheCoreText.cpp:
    (WebCore::preparePlatformFont):
    (WebCore::lookupFallbackFont):
    (WebCore::FontCache::systemFallbackForCharacters):
    (WebCore::FontCache::prewarm):
    (WebCore::fontFamiliesForPrewarming):
    
    Source/WebCore/PAL:
    
    Reviewed by Myles C. Maxfield.
    
    Add new SPI.
    
    * pal/spi/cocoa/CoreTextSPI.h:
    
    Source/WTF:
    
    Reviewed by Myles C. Maxfield.
    
    * wtf/Platform.h: Add macro to enable/disable new SPI.
    
    LayoutTests:
    
    We update the tests to flush font caches as otherwise some debug asserts would be hit.
    This is due to changing the user installed font runtime flag while browsing which is not a typical situation.
    
    Reviewed by Myles C. Maxfield.
    
    * fast/text/user-installed-fonts/extended-character-with-user-font.html:
    * fast/text/user-installed-fonts/extended-character.html:
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@248071 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-07-31  Youenn Fablet  <youenn@apple.com>

            Use CTFontCreateForCharactersWithLanguageAndOption if available instead of CTFontCreateForCharactersWithLanguage
            https://bugs.webkit.org/show_bug.cgi?id=200241

            We update the tests to flush font caches as otherwise some debug asserts would be hit.
            This is due to changing the user installed font runtime flag while browsing which is not a typical situation.

            Reviewed by Myles C. Maxfield.

            * fast/text/user-installed-fonts/extended-character-with-user-font.html:
            * fast/text/user-installed-fonts/extended-character.html:

2019-07-31  Alan Coon  <alancoon@apple.com>

        Cherry-pick r248046. rdar://problem/53788952

    Owners of MultiChannelResampler should make sure that the output bus given to it has the same number of channels
    https://bugs.webkit.org/show_bug.cgi?id=200248
    <rdar://problem/53411051>
    
    Reviewed by Eric Carlson.
    
    Source/WebCore:
    
    When a track's number of channels changes, MediaStreamAudioSourceNode is expected
    to update its MultiChannelResampler and its output number of channels.
    MultiChannelResampler expects to have the same number of channels as the output
    but it is not always the case since the channel numbers are changed in different threads
    and locks do not help there.
    
    Instead, whenever detecting that the number of channels do not match, render silence
    and wait for the next rendering where the number of channels should again match.
    
    Add internals API to change the number of channels from 2 to 1 or 1 to 2
    to allow testing that code path (iOS only as MacOS audio capture is in UIProcess).
    Covered by updated test.
    
    * Modules/webaudio/MediaElementAudioSourceNode.cpp:
    (WebCore::MediaElementAudioSourceNode::process):
    * Modules/webaudio/MediaStreamAudioSourceNode.cpp:
    (WebCore::MediaStreamAudioSourceNode::process):
    * platform/audio/MultiChannelResampler.cpp:
    (WebCore::MultiChannelResampler::process):
    * platform/mediastream/RealtimeMediaSource.h:
    * platform/mediastream/mac/MockRealtimeAudioSourceMac.mm:
    (WebCore::MockRealtimeAudioSourceMac::reconfigure):
    * platform/mock/MockRealtimeAudioSource.cpp:
    (WebCore::MockRealtimeAudioSource::setChannelCount):
    * platform/mock/MockRealtimeAudioSource.h:
    (isType):
    * platform/mock/MockRealtimeVideoSource.h:
    * testing/Internals.cpp:
    (WebCore::Internals::setMockAudioTrackChannelNumber):
    * testing/Internals.h:
    * testing/Internals.idl:
    
    LayoutTests:
    
    * fast/mediastream/getUserMedia-webaudio-expected.txt:
    * fast/mediastream/getUserMedia-webaudio.html:
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@248046 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-07-31  Youenn Fablet  <youenn@apple.com>

            Owners of MultiChannelResampler should make sure that the output bus given to it has the same number of channels
            https://bugs.webkit.org/show_bug.cgi?id=200248
            <rdar://problem/53411051>

            Reviewed by Eric Carlson.

            * fast/mediastream/getUserMedia-webaudio-expected.txt:
            * fast/mediastream/getUserMedia-webaudio.html:

2019-07-31  Alan Coon  <alancoon@apple.com>

        Cherry-pick r248037. rdar://problem/53764079

    AX: Re-enable accessibility/set-selected-text-range-after-newline.html test.
    https://bugs.webkit.org/show_bug.cgi?id=199431
    <rdar://problem/52563340>
    
    Patch by Andres Gonzalez <andresg_22@apple.com> on 2019-07-31
    Reviewed by Chris Fleizach.
    
    Source/WebCore:
    
    - Re-enabled LayoutTests/accessibility/set-selected-text-range-after-newline.html.
    - Put back workaround in visiblePositionForIndexUsingCharacterIterator
    that is needed for several accessibility issues.
    - This workaround was rolled back because it was thought the cause of:
    https://bugs.webkit.org/show_bug.cgi?id=199434
    It turned out that the actual cause of that hang was unrelated and was
    fixed in:
    https://bugs.webkit.org/show_bug.cgi?id=199845
    
    * editing/Editing.cpp:
    (WebCore::visiblePositionForIndexUsingCharacterIterator):
    
    LayoutTests:
    
    * TestExpectations:
    * accessibility/ios-simulator/set-selected-text-range-after-newline.html: Removed because it was the same as the one in the parent accessibility directory, so enabling it for iOS in ios-wk2/TestExpectations.
    * platform/ios-wk2/TestExpectations:
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@248037 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-07-31  Andres Gonzalez  <andresg_22@apple.com>

            AX: Re-enable accessibility/set-selected-text-range-after-newline.html test.
            https://bugs.webkit.org/show_bug.cgi?id=199431
            <rdar://problem/52563340>

            Reviewed by Chris Fleizach.

            * TestExpectations:
            * accessibility/ios-simulator/set-selected-text-range-after-newline.html: Removed because it was the same as the one in the parent accessibility directory, so enabling it for iOS in ios-wk2/TestExpectations.
            * platform/ios-wk2/TestExpectations:

2019-07-31  Alan Coon  <alancoon@apple.com>

        Cherry-pick r248015. rdar://problem/53764191

    Can't scroll on yummly.co.uk recipe (scale(0) div covers the content and hit-tests)
    https://bugs.webkit.org/show_bug.cgi?id=200263
    rdar://problem/53679408
    
    Reviewed by Antti Koivisto.
    
    Source/WebKit:
    
    The content on this page had a scale(0) div overlaying an overflow:scroll element,
    and our UI-side hit-testing code would find this scale(0) element, because apparently
    -[UIView convertPoint:fromView:] will happily work with non-invertible matrices, and
    -[UIView pointInside:withEvent:] just compares the point with the view bounds.
    
    Since the view frame takes the transform into account, we can look for an empty frame
    to detect these non-invertible transforms.
    
    * UIProcess/RemoteLayerTree/ios/RemoteLayerTreeViews.mm:
    (WebKit::collectDescendantViewsAtPoint):
    
    LayoutTests:
    
    * fast/scrolling/ios/non-invertible-transformed-over-scroller-expected.txt: Added.
    * fast/scrolling/ios/non-invertible-transformed-over-scroller.html: Added.
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@248015 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-07-29  Simon Fraser  <simon.fraser@apple.com>

            Can't scroll on yummly.co.uk recipe (scale(0) div covers the content and hit-tests)
            https://bugs.webkit.org/show_bug.cgi?id=200263
            rdar://problem/53679408

            Reviewed by Antti Koivisto.

            * fast/scrolling/ios/non-invertible-transformed-over-scroller-expected.txt: Added.
            * fast/scrolling/ios/non-invertible-transformed-over-scroller.html: Added.

2019-07-31  Alan Coon  <alancoon@apple.com>

        Cherry-pick r247936. rdar://problem/53764217

    YouTube search field shows RTL text outside its border on iPadOS
    https://bugs.webkit.org/show_bug.cgi?id=200253
    <rdar://problem/53680603>
    
    Reviewed by Beth Dakin.
    
    Source/WebKit:
    
    Limits code added in r238939 to respect the current keyboard's writing mode to only editable web views. This
    behavior was only intended for Mail, and isn't generally compatible with web content.
    
    While the call to -setInitialDirection is correctly gated on an web view editability check, it appears that
    other changes in iOS 13 now cause -setBaseWritingDirection:forRange: to be invoked directly from keyboards code.
    This means that -setBaseWritingDirection:forRange: should additionally be guarded with the same check.
    
    * UIProcess/ios/WKContentViewInteraction.mm:
    (-[WKContentView setBaseWritingDirection:forRange:]):
    
    LayoutTests:
    
    * editing/input/ios/rtl-keyboard-input-on-focus-in-editable-page-expected.txt: Renamed from LayoutTests/editing/input/ios/rtl-keyboard-input-on-focus-expected.txt.
    * editing/input/ios/rtl-keyboard-input-on-focus-in-editable-page.html: Renamed from LayoutTests/editing/input/ios/rtl-keyboard-input-on-focus.html.
    
    Rename an existing test, rtl-keyboard-input-on-focus.html, to rtl-keyboard-input-on-focus-in-editable-page.html
    to emphasize the fact that it requires an editable web view.
    
    * editing/input/ios/rtl-keyboard-input-on-focus-in-non-editable-page-expected.txt: Added.
    * editing/input/ios/rtl-keyboard-input-on-focus-in-non-editable-page.html: Added.
    
    Add a new layout test to ensure that we don't automatically apply an RTL attribute when focusing fields in a
    non-editable web view.
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@247936 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-07-29  Wenson Hsieh  <wenson_hsieh@apple.com>

            YouTube search field shows RTL text outside its border on iPadOS
            https://bugs.webkit.org/show_bug.cgi?id=200253
            <rdar://problem/53680603>

            Reviewed by Beth Dakin.

            * editing/input/ios/rtl-keyboard-input-on-focus-in-editable-page-expected.txt: Renamed from LayoutTests/editing/input/ios/rtl-keyboard-input-on-focus-expected.txt.
            * editing/input/ios/rtl-keyboard-input-on-focus-in-editable-page.html: Renamed from LayoutTests/editing/input/ios/rtl-keyboard-input-on-focus.html.

            Rename an existing test, rtl-keyboard-input-on-focus.html, to rtl-keyboard-input-on-focus-in-editable-page.html
            to emphasize the fact that it requires an editable web view.

            * editing/input/ios/rtl-keyboard-input-on-focus-in-non-editable-page-expected.txt: Added.
            * editing/input/ios/rtl-keyboard-input-on-focus-in-non-editable-page.html: Added.

            Add a new layout test to ensure that we don't automatically apply an RTL attribute when focusing fields in a
            non-editable web view.

2019-07-31  Alan Coon  <alancoon@apple.com>

        Cherry-pick r247923. rdar://problem/53764209

    REGRESSION: WebSockets no longer work in Service Workers
    https://bugs.webkit.org/show_bug.cgi?id=199906
    <rdar://problem/53516732>
    
    Reviewed by Geoffrey Garen.
    
    Source/WebKit:
    
    Use WebSocketProvider so that network calls are done in the network process.
    
    * WebProcess/Storage/WebSWContextManagerConnection.cpp:
    (WebKit::WebSWContextManagerConnection::installServiceWorker):
    
    LayoutTests:
    
    Fix test and make sure messages are exchanged for the test to succeed.
    
    * http/tests/workers/service/resources/serviceworker-websocket-worker.js:
    (async.doTest):
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@247923 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-07-29  Youenn Fablet  <youenn@apple.com>

            REGRESSION: WebSockets no longer work in Service Workers
            https://bugs.webkit.org/show_bug.cgi?id=199906
            <rdar://problem/53516732>

            Reviewed by Geoffrey Garen.

            Fix test and make sure messages are exchanged for the test to succeed.

            * http/tests/workers/service/resources/serviceworker-websocket-worker.js:
            (async.doTest):

2019-07-31  Alan Coon  <alancoon@apple.com>

        Cherry-pick r247916. rdar://problem/53764235

    REGRESSION (r247891): Layout Test accessibility/ios-simulator/video-elements-ios.html is failing
    https://bugs.webkit.org/show_bug.cgi?id=200231
    <rdar://problem/53666599>
    
    Patch by Andres Gonzalez <andresg_22@apple.com> on 2019-07-29
    Reviewed by Chris Fleizach.
    
    We now expose <video> elements when they have controls.
    * accessibility/ios-simulator/video-elements-ios-expected.txt:
    * accessibility/ios-simulator/video-elements-ios.html:
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@247916 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-07-29  Andres Gonzalez  <andresg_22@apple.com>

            REGRESSION (r247891): Layout Test accessibility/ios-simulator/video-elements-ios.html is failing
            https://bugs.webkit.org/show_bug.cgi?id=200231
            <rdar://problem/53666599>

            Reviewed by Chris Fleizach.

            We now expose <video> elements when they have controls.
            * accessibility/ios-simulator/video-elements-ios-expected.txt:
            * accessibility/ios-simulator/video-elements-ios.html:

2019-07-31  Alan Coon  <alancoon@apple.com>

        Cherry-pick r247912. rdar://problem/53764200

    REGRESSION (r246899): Subtitles show twice when controls show/hide on hulu.com
    https://bugs.webkit.org/show_bug.cgi?id=200187
    rdar://problem/53511121
    
    Reviewed by Zalan Bujtas.
    
    Source/WebCore:
    
    When a layer that painted into shared backing moved, we'd fail to repaint its old position
    because the RenderLayer's repaint rects are cleared via BackingSharingState::updateBeforeDescendantTraversal().
    
    Recomputing repaint rects is expensive, so we only want to do it when necessary, which is for
    layers that start and stop sharing (going into and out of compositing already recomputes them).
    So add logic to RenderLayerBacking::setBackingSharingLayers() that recomputes repaint rects
    on layers that will no longer use shared backing, and those that are newly using shared
    backing.
    
    Test: compositing/shared-backing/backing-sharing-repaint.html
    
    * rendering/RenderLayer.cpp:
    (WebCore::RenderLayer::setBackingProviderLayer):
    * rendering/RenderLayerBacking.cpp:
    (WebCore::RenderLayerBacking::setBackingSharingLayers):
    * rendering/RenderLayerCompositor.cpp:
    (WebCore::RenderLayerCompositor::BackingSharingState::appendSharingLayer):
    (WebCore::RenderLayerCompositor::updateBacking):
    
    LayoutTests:
    
    * compositing/shared-backing/backing-sharing-repaint-expected.html: Added.
    * compositing/shared-backing/backing-sharing-repaint.html: Added.
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@247912 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-07-29  Simon Fraser  <simon.fraser@apple.com>

            REGRESSION (r246899): Subtitles show twice when controls show/hide on hulu.com
            https://bugs.webkit.org/show_bug.cgi?id=200187
            rdar://problem/53511121

            Reviewed by Zalan Bujtas.

            * compositing/shared-backing/backing-sharing-repaint-expected.html: Added.
            * compositing/shared-backing/backing-sharing-repaint.html: Added.

2019-07-31  Alan Coon  <alancoon@apple.com>

        Cherry-pick r247909. rdar://problem/53764231

    The touch-action property was ignored on replaced elements (canvas, img etc)
    https://bugs.webkit.org/show_bug.cgi?id=200205
    rdar://problem/53331224
    
    Reviewed by Antti Koivisto.
    
    Source/WebCore:
    
    The event region painting code didn't handle replaced elements correctly,
    causing touch-action to get ignored for <canvas>, <img> etc. Fix by handling
    region painting in RenderReplaced.
    
    This still doesn't fix <iframe> but I'm not sure what the correct behavior is there
    (webkit.org/b/200204).
    
    Test: pointerevents/ios/touch-action-region-replaced-elements.html
    
    * rendering/RenderReplaced.cpp:
    (WebCore::RenderReplaced::paint):
    (WebCore::RenderReplaced::shouldPaint):
    
    LayoutTests:
    
    * pointerevents/ios/touch-action-region-replaced-elements-expected.txt: Added.
    * pointerevents/ios/touch-action-region-replaced-elements.html: Added.
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@247909 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-07-29  Simon Fraser  <simon.fraser@apple.com>

            The touch-action property was ignored on replaced elements (canvas, img etc)
            https://bugs.webkit.org/show_bug.cgi?id=200205
            rdar://problem/53331224

            Reviewed by Antti Koivisto.

            * pointerevents/ios/touch-action-region-replaced-elements-expected.txt: Added.
            * pointerevents/ios/touch-action-region-replaced-elements.html: Added.

2019-07-31  Alan Coon  <alancoon@apple.com>

        Cherry-pick r247891. rdar://problem/53764053

    Expose the aria-label attribute for <video> elements.
    https://bugs.webkit.org/show_bug.cgi?id=200169
    <rdar://problem/51754558>
    
    Patch by Andres Gonzalez <andresg_22@apple.com> on 2019-07-27
    Reviewed by Chris Fleizach.
    
    Source/WebCore:
    
    Tests: accessibility/ios-simulator/media-with-aria-label.html
           accessibility/media-with-aria-label.html
    
    We now expose the <video> element to accessibility clients as long as auto-play is not enabled.
    * accessibility/ios/WebAccessibilityObjectWrapperIOS.mm:
    (-[WebAccessibilityObjectWrapper accessibilityIsWebInteractiveVideo]):
    
    LayoutTests:
    
    * accessibility/ios-simulator/media-with-aria-label-expected.txt: Added.
    * accessibility/ios-simulator/media-with-aria-label.html: Added.
    * accessibility/media-with-aria-label-expected.txt: Added.
    * accessibility/media-with-aria-label.html: Added.
    * platform/win/TestExpectations:
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@247891 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-07-27  Andres Gonzalez  <andresg_22@apple.com>

            Expose the aria-label attribute for <video> elements.
            https://bugs.webkit.org/show_bug.cgi?id=200169
            <rdar://problem/51754558>

            Reviewed by Chris Fleizach.

            * accessibility/ios-simulator/media-with-aria-label-expected.txt: Added.
            * accessibility/ios-simulator/media-with-aria-label.html: Added.
            * accessibility/media-with-aria-label-expected.txt: Added.
            * accessibility/media-with-aria-label.html: Added.
            * platform/win/TestExpectations:

2019-07-29  Alan Coon  <alancoon@apple.com>

        Cherry-pick r247880. rdar://problem/53647903

    Do not fire readystatechange events at documents about to get replaced by javascript URLs.
    <rdar://problem/51665406> and https://bugs.webkit.org/show_bug.cgi?id=198786
    
    Reviewed by Ryosuke Niwa.
    
    Source/WebCore:
    
    Test: http/tests/dom/ready-state-on-javascript-replace.html
    
    We were firing too many readystatechange events, more than other browsers.
    Our behavior on this test with this patch now matches Chrome.
    
    (There was even an ancient FIXME alluding to this referencing a spec issue, and that issues has long been resolvedv)
    
    * loader/FrameLoader.cpp:
    (WebCore::FrameLoader::stopLoading):
    
    LayoutTests:
    
    * http/tests/dom/ready-state-on-javascript-replace-expected.txt: Added.
    * http/tests/dom/ready-state-on-javascript-replace.html: Added.
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@247880 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-07-26  Brady Eidson  <beidson@apple.com>

            Do not fire readystatechange events at documents about to get replaced by javascript URLs.
            <rdar://problem/51665406> and https://bugs.webkit.org/show_bug.cgi?id=198786

            Reviewed by Ryosuke Niwa.

            * http/tests/dom/ready-state-on-javascript-replace-expected.txt: Added.
            * http/tests/dom/ready-state-on-javascript-replace.html: Added.

2019-07-29  Alan Coon  <alancoon@apple.com>

        Cherry-pick r247868. rdar://problem/53648207

    [iOS] WebPage::TouchEventSync() & WebPage::GetPositionInformation() sync IPC causes UIProcess hangs
    https://bugs.webkit.org/show_bug.cgi?id=200138
    <rdar://problem/52698157>
    
    Reviewed by Geoffrey Garen.
    
    Source/WebKit:
    
    Revert most of r247822 and use an alternative approach to address hangs. In this patch, the proposal
    is to add a SendSyncOption::ForceDispatchWhenDestinationIsWaitingForUnboundedSyncReply flag on the
    WebPage::TouchEventSync() & WebPage::GetPositionInformation() sendSync() calls in the UIProcess.
    Those will cause this IPCs to get dispatched right away in the WebContent process, even if the
    WebContent process is itself currently stuck on unbounded (i.e. potentially slow) synchronous IPC
    (JS alerts / prompts & sync XHR). Because re-entering WebCore on sync IPC is generally unsafe, this
    patch also updates the WebPage::getPositionInformation() & WebPage::touchEventSync() to return early
    (i.e. cancelled) if they get called while the WebContent process is stuck on a slow sendSync.
    
    This approach should address the UIProcess hangs caused by the WebPage::TouchEventSync() and
    WebPage::GetPositionInformation() sync IPC messages when the WebContent process is busy on a slow XHR
    or a JS prompt / alert. It should be safe because we do not re-enter WebCore. The only drawback is that
    those IPCs will be cancelled (early return with default value) when the WebContent process is busy.
    However, I am being told that this is likely acceptable in practice.
    
    * Platform/IPC/Connection.cpp:
    (IPC::Connection::SyncMessageState::processIncomingMessage):
    (IPC::Connection::sendMessage):
    (IPC::Connection::sendSyncMessage):
    (IPC::Connection::dispatchMessage):
    * Platform/IPC/Connection.h:
    (IPC::UnboundedSynchronousIPCScope::UnboundedSynchronousIPCScope):
    (IPC::UnboundedSynchronousIPCScope::~UnboundedSynchronousIPCScope):
    (IPC::UnboundedSynchronousIPCScope::hasOngoingUnboundedSyncIPC):
    * Platform/IPC/Decoder.cpp:
    (IPC::Decoder::shouldDispatchMessageWhenWaitingForSyncReply const):
    * Platform/IPC/Decoder.h:
    * Platform/IPC/Encoder.cpp:
    (IPC::Encoder::shouldDispatchMessageWhenWaitingForSyncReply const):
    (IPC::Encoder::setShouldDispatchMessageWhenWaitingForSyncReply):
    (IPC::Encoder::wrapForTesting):
    * Platform/IPC/Encoder.h:
    * Platform/IPC/MessageFlags.h:
    * UIProcess/Network/NetworkProcessProxy.cpp:
    (WebKit::NetworkProcessProxy::testProcessIncomingSyncMessagesWhenWaitingForSyncReply):
    * UIProcess/WebPageProxy.cpp:
    (WebKit::WebPageProxy::handleTouchEventSynchronously):
    * UIProcess/ios/WKContentViewInteraction.mm:
    (-[WKContentView ensurePositionInformationIsUpToDate:]):
    * WebProcess/Network/WebLoaderStrategy.cpp:
    (WebKit::WebLoaderStrategy::loadResourceSynchronously):
    * WebProcess/WebCoreSupport/WebChromeClient.cpp:
    (WebKit::WebChromeClient::testProcessIncomingSyncMessagesWhenWaitingForSyncReply):
    (WebKit::WebChromeClient::runJavaScriptAlert):
    (WebKit::WebChromeClient::runJavaScriptConfirm):
    (WebKit::WebChromeClient::runJavaScriptPrompt):
    * WebProcess/WebPage/WebPage.cpp:
    (WebKit::WebPage::layerVolatilityTimerFired):
    (WebKit::WebPage::markLayersVolatile):
    (WebKit::WebPage::cancelMarkLayersVolatile):
    (WebKit::WebPage::touchEventSync):
    (WebKit::WebPage::didCompletePageTransition):
    (WebKit::WebPage::updatePreferences):
    (WebKit::WebPage::testProcessIncomingSyncMessagesWhenWaitingForSyncReply):
    * WebProcess/WebPage/WebPage.h:
    (WebKit::WebPage::sendSyncWithDelayedReply):
    * WebProcess/WebPage/ios/WebPageIOS.mm:
    (WebKit::WebPage::getPositionInformation):
    
    LayoutTests:
    
    Update existing layout test accordingly.
    
    * fast/misc/{testProcessIncomingSyncMessagesWhenWaitingForUnboundedReply-expected.txt: Renamed from LayoutTests/fast/misc/testProcessIncomingSyncMessagesWhenWaitingForSyncReply-expected.txt.
    * fast/misc/{testProcessIncomingSyncMessagesWhenWaitingForUnboundedReply.html: Renamed from LayoutTests/fast/misc/testProcessIncomingSyncMessagesWhenWaitingForSyncReply.html.
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@247868 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-07-26  Chris Dumez  <cdumez@apple.com>

            [iOS] WebPage::TouchEventSync() & WebPage::GetPositionInformation() sync IPC causes UIProcess hangs
            https://bugs.webkit.org/show_bug.cgi?id=200138
            <rdar://problem/52698157>

            Reviewed by Geoffrey Garen.

            Update existing layout test accordingly.

            * fast/misc/{testProcessIncomingSyncMessagesWhenWaitingForUnboundedReply-expected.txt: Renamed from LayoutTests/fast/misc/testProcessIncomingSyncMessagesWhenWaitingForSyncReply-expected.txt.
            * fast/misc/{testProcessIncomingSyncMessagesWhenWaitingForUnboundedReply.html: Renamed from LayoutTests/fast/misc/testProcessIncomingSyncMessagesWhenWaitingForSyncReply.html.

2019-07-29  Alan Coon  <alancoon@apple.com>

        Cherry-pick r247839. rdar://problem/53647896

    [iOS WK2] A top fixed bar can flicker when scrolling with the keyboard up
    https://bugs.webkit.org/show_bug.cgi?id=200105
    rdar://problem/52871975
    
    Reviewed by Wenson Hsieh.
    
    Source/WebCore:
    
    ScrollingTreeFrameScrollingNode::layoutViewportForScrollPosition() computes a visual viewport
    from the current scroll position and scrollableAreaSize(). This doesn't know anything about
    the impact of keyboards on the visual viewport, so it computes a too-large visual viewport
    when the keyboard is up, triggering incorrect manipulations of the layout viewport. This
    leads to the top bar flashing to position 0 when it should be hidden off the top.
    
    Fix by feeding into the scrolling tree the height of the visual viewport which takes
    FrameView::visualViewportOverrideRect() into account. This is stored on ScrollingStateFrameScrollingNode/
    ScrollingTreeFrameScrollingNode.
    
    Test: scrollingcoordinator/ios/fixed-scrolling-with-keyboard.html
    
    * page/FrameView.h:
    * page/scrolling/AsyncScrollingCoordinator.cpp:
    (WebCore::AsyncScrollingCoordinator::setFrameScrollingNodeState):
    * page/scrolling/ScrollingStateFrameScrollingNode.cpp:
    (WebCore::ScrollingStateFrameScrollingNode::ScrollingStateFrameScrollingNode):
    (WebCore::ScrollingStateFrameScrollingNode::setPropertyChangedBitsAfterReattach):
    (WebCore::ScrollingStateFrameScrollingNode::setOverrideVisualViewportSize):
    (WebCore::ScrollingStateFrameScrollingNode::dumpProperties const):
    * page/scrolling/ScrollingStateFrameScrollingNode.h:
    * page/scrolling/ScrollingTree.cpp:
    (WebCore::ScrollingTree::commitTreeState): LOG_WITH_STREAM() doesn't evaluate scrollingTreeAsText()
    every time.
    * page/scrolling/ScrollingTreeFrameScrollingNode.cpp:
    (WebCore::ScrollingTreeFrameScrollingNode::commitStateBeforeChildren):
    (WebCore::ScrollingTreeFrameScrollingNode::layoutViewportForScrollPosition const):
    (WebCore::ScrollingTreeFrameScrollingNode::dumpProperties const):
    * page/scrolling/ScrollingTreeFrameScrollingNode.h:
    
    Source/WebKit:
    
    ScrollingTreeFrameScrollingNode::layoutViewportForScrollPosition() computes a visual viewport
    from the current scroll position and scrollableAreaSize(). This doesn't know anything about
    the impact of keyboards on the visual viewport, so it computes a too-large visual viewport
    when the keyboard is up, triggering incorrect manipulations of the layout viewport. This
    leads to the top bar flashing to position 0 when it should be hidden off the top.
    
    Fix by feeding into the scrolling tree the height of the visual viewport which takes
    FrameView::visualViewportOverrideRect() into account. This is stored on ScrollingStateFrameScrollingNode/
    ScrollingTreeFrameScrollingNode.
    
    * Shared/RemoteLayerTree/RemoteScrollingCoordinatorTransaction.cpp:
    (ArgumentCoder<ScrollingStateFrameScrollingNode>::encode):
    (ArgumentCoder<ScrollingStateFrameScrollingNode>::decode):
    
    LayoutTests:
    
    * resources/ui-helper.js:
    (window.UIHelper.ensureStablePresentationUpdate.return.new.Promise):
    (window.UIHelper.ensureStablePresentationUpdate):
    * scrollingcoordinator/ios/fixed-scrolling-with-keyboard-expected.txt: Added.
    * scrollingcoordinator/ios/fixed-scrolling-with-keyboard.html: Added.
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@247839 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-07-29  Alan Coon  <alancoon@apple.com>

            Cherry-pick r247824. rdar://problem/53647626

        Adding iOS-specific expectations for fast/text-indicator/text-indicator-with-low-contrast-text.html.
        https://bugs.webkit.org/show_bug.cgi?id=200064

        Unreviewed Test Gardening.

        * platform/ios/fast/text-indicator/text-indicator-with-low-contrast-text-expected.txt: Added.

        git-svn-id: https://svn.webkit.org/repository/webkit/trunk@247824 268f45cc-cd09-0410-ab3c-d52691b4dbfc

        2019-07-25  Russell Epstein  <repstein@apple.com>

                Adding iOS-specific expectations for fast/text-indicator/text-indicator-with-low-contrast-text.html.
                https://bugs.webkit.org/show_bug.cgi?id=200064

                Unreviewed Test Gardening.

                * platform/ios/fast/text-indicator/text-indicator-with-low-contrast-text-expected.txt: Added.

2019-07-29  Alan Coon  <alancoon@apple.com>

        Cherry-pick r247822. rdar://problem/53648211

    Avoid UI Process hangs when the WebContent process is showing JS prompts / alerts
    https://bugs.webkit.org/show_bug.cgi?id=200107
    <rdar://problem/53034592>
    
    Reviewed by Geoffrey Garen.
    
    Source/WebCore:
    
    Add testing infrastructure for SendSyncOption::ProcessIncomingSyncMessagesWhenWaitingForSyncReply.
    
    Test: fast/misc/testProcessIncomingSyncMessagesWhenWaitingForSyncReply.html
    
    * page/ChromeClient.h:
    * testing/Internals.cpp:
    (WebCore::Internals::testProcessIncomingSyncMessagesWhenWaitingForSyncReply):
    * testing/Internals.h:
    * testing/Internals.idl:
    
    Source/WebKit:
    
    * Platform/IPC/Connection.cpp:
    (IPC::Connection::SyncMessageState::incrementProcessIncomingSyncMessagesWhenWaitingForSyncReplyCount):
    (IPC::Connection::SyncMessageState::decrementProcessIncomingSyncMessagesWhenWaitingForSyncReplyCount):
    (IPC::Connection::SyncMessageState::processIncomingMessage):
    (IPC::Connection::sendSyncMessage):
    * Platform/IPC/Connection.h:
    Add support for new SendSyncOption::ProcessIncomingSyncMessagesWhenWaitingForSyncReply flag
    to allow processing incoming sync messages while sending a particular sync IPC. This is the
    default behavior in all processes except in the WebContent process, where we try to avoid
    re-entering to prevent bugs. This flag allows the WebContent process to change its default
    behavior for some specific IPCs, where we know it is safe to re-enter and where it benefits
    performance to re-renter.
    
    * NetworkProcess/NetworkConnectionToWebProcess.cpp:
    (WebKit::NetworkConnectionToWebProcess::testProcessIncomingSyncMessagesWhenWaitingForSyncReply):
    * NetworkProcess/NetworkConnectionToWebProcess.h:
    * NetworkProcess/NetworkConnectionToWebProcess.messages.in:
    * UIProcess/Network/NetworkProcessProxy.cpp:
    (WebKit::NetworkProcessProxy::didReceiveSyncMessage):
    (WebKit::NetworkProcessProxy::testProcessIncomingSyncMessagesWhenWaitingForSyncReply):
    * UIProcess/Network/NetworkProcessProxy.h:
    * UIProcess/Network/NetworkProcessProxy.messages.in:
    * WebProcess/WebCoreSupport/WebChromeClient.cpp:
    (WebKit::WebChromeClient::testProcessIncomingSyncMessagesWhenWaitingForSyncReply):
    * WebProcess/WebCoreSupport/WebChromeClient.h:
    * WebProcess/WebPage/WebPage.cpp:
    (WebKit::WebPage::testProcessIncomingSyncMessagesWhenWaitingForSyncReply):
    * WebProcess/WebPage/WebPage.h:
    (WebKit::WebPage::sendSyncWithDelayedReply):
    * WebProcess/WebPage/WebPage.messages.in:
    SendSyncOption::ProcessIncomingSyncMessagesWhenWaitingForSyncReply
    Add testing infrastructure for SendSyncOption::ProcessIncomingSyncMessagesWhenWaitingForSyncReply
    flag.
    
    * WebProcess/WebCoreSupport/WebChromeClient.cpp:
    (WebKit::WebChromeClient::runJavaScriptAlert):
    (WebKit::WebChromeClient::runJavaScriptConfirm):
    (WebKit::WebChromeClient::runJavaScriptPrompt):
    Use new SendSyncOption::ProcessIncomingSyncMessagesWhenWaitingForSyncReply flag when sending
    the synchronous IPC for JS alerts / prompt / confirm. This allows the WebProcess to process
    incoming synchronous IPC for other processes (in particular the UIProcess) while it is blocked
    on those synchronous IPCs. It is safe to re-enter the WebContent process on these sync IPCs
    since they are triggered by JS and we return to JS right after. This should avoid UIProcess
    hangs when the UIProcess is sending a sync IPC to the WebContent process, which is itself
    stuck on the sync IPC to show a JS alert.
    
    LayoutTests:
    
    Add layout test coverage for SendSyncOption::ProcessIncomingSyncMessagesWhenWaitingForSyncReply.
    Without the flag on the sendSync from the WebContent process of the
    NetworkConnectionToWebProcess::TestProcessIncomingSyncMessagesWhenWaitingForSyncReply IPC, the
    test would hang. This is because the WebContent process sends a sync IPC to the network process,
    which in turns sends one to the UIProcess, which itself sends one back to the WebContent process.
    This would attempt to re-enter the WebContent process which is currently sending a sync IPC, which
    is not allowed by default.
    
    * fast/misc/testProcessIncomingSyncMessagesWhenWaitingForSyncReply-expected.txt: Added.
    * fast/misc/testProcessIncomingSyncMessagesWhenWaitingForSyncReply.html: Added.
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@247822 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-07-25  Chris Dumez  <cdumez@apple.com>

            Avoid UI Process hangs when the WebContent process is showing JS prompts / alerts
            https://bugs.webkit.org/show_bug.cgi?id=200107
            <rdar://problem/53034592>

            Reviewed by Geoffrey Garen.

            Add layout test coverage for SendSyncOption::ProcessIncomingSyncMessagesWhenWaitingForSyncReply.
            Without the flag on the sendSync from the WebContent process of the
            NetworkConnectionToWebProcess::TestProcessIncomingSyncMessagesWhenWaitingForSyncReply IPC, the
            test would hang. This is because the WebContent process sends a sync IPC to the network process,
            which in turns sends one to the UIProcess, which itself sends one back to the WebContent process.
            This would attempt to re-enter the WebContent process which is currently sending a sync IPC, which
            is not allowed by default.

            * fast/misc/testProcessIncomingSyncMessagesWhenWaitingForSyncReply-expected.txt: Added.
            * fast/misc/testProcessIncomingSyncMessagesWhenWaitingForSyncReply.html: Added.

2019-07-29  Alan Coon  <alancoon@apple.com>

        Cherry-pick r247817. rdar://problem/53648067

    Unable to tap/double tap to open files/folders in Google Drive in Safari
    https://bugs.webkit.org/show_bug.cgi?id=200096
    <rdar://problem/52748552>
    
    Reviewed by Wenson Hsieh.
    
    Source/WebKit:
    
    This patch reverts to the original double-tap-for-double-click implementation (see r244775 and r246347 for more information).
    
    * Shared/WebPageCreationParameters.cpp:
    (WebKit::WebPageCreationParameters::encode const):
    (WebKit::WebPageCreationParameters::decode):
    * Shared/WebPageCreationParameters.h:
    * UIProcess/PageClient.h:
    * UIProcess/WebPageProxy.cpp:
    (WebKit::WebPageProxy::creationParameters):
    * UIProcess/WebPageProxy.h:
    * UIProcess/ios/PageClientImplIOS.h:
    * UIProcess/ios/PageClientImplIOS.mm:
    (WebKit::PageClientImpl::doubleTapForDoubleClickDelay): Deleted.
    (WebKit::PageClientImpl::doubleTapForDoubleClickRadius): Deleted.
    * UIProcess/ios/WKContentViewInteraction.h:
    * UIProcess/ios/WKContentViewInteraction.mm:
    (-[WKContentView setupInteraction]):
    (-[WKContentView cleanupInteraction]):
    (-[WKContentView _removeDefaultGestureRecognizers]):
    (-[WKContentView _addDefaultGestureRecognizers]):
    (-[WKContentView gestureRecognizer:shouldRecognizeSimultaneouslyWithGestureRecognizer:]): Do not recognize the single and double gestures the same time.
    (-[WKContentView gestureRecognizerShouldBegin:]):
    (-[WKContentView _doubleTapRecognizedForDoubleClick:]):
    (-[WKContentView _didStartProvisionalLoadForMainFrame]):
    (-[WKContentView _ensureNonBlockingDoubleTapGestureRecognizer]): Deleted.
    (-[WKContentView _doubleTapForDoubleClickDelay]): Deleted.
    (-[WKContentView _doubleTapForDoubleClickRadius]): Deleted.
    * UIProcess/ios/WebPageProxyIOS.mm:
    (WebKit::WebPageProxy::handleDoubleTapForDoubleClickAtPoint):
    * WebProcess/WebPage/WebPage.cpp:
    * WebProcess/WebPage/WebPage.h:
    * WebProcess/WebPage/WebPage.messages.in:
    * WebProcess/WebPage/ios/WebPageIOS.mm:
    (WebKit::WebPage::handleDoubleTapForDoubleClickAtPoint):
    (WebKit::WebPage::commitPotentialTap):
    (WebKit::WebPage::handlePotentialDoubleTapForDoubleClickAtPoint): Deleted.
    
    LayoutTests:
    
    Rebaseline.
    
    * fast/events/touch/ios/double-tap-for-double-click3-expected.txt:
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@247817 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-07-24  Zalan Bujtas  <zalan@apple.com>

            Unable to tap/double tap to open files/folders in Google Drive in Safari
            https://bugs.webkit.org/show_bug.cgi?id=200096
            <rdar://problem/52748552>

            Reviewed by Wenson Hsieh.

            Rebaseline.

            * fast/events/touch/ios/double-tap-for-double-click3-expected.txt:

2019-07-29  Alan Coon  <alancoon@apple.com>

        Cherry-pick r247792. rdar://problem/53647626

    Daring Fireball long press highlights are unnecessarily inflated due to false illegibility
    https://bugs.webkit.org/show_bug.cgi?id=200064
    
    Reviewed by Geoff Garen.
    
    Source/WebCore:
    
    If we consider text illegible on the given estimated background color,
    we bail from doing a tightly fitted selection-only TextIndicator and
    instead just paint the page without modification into the indicator,
    causing ugly overlap and an excessively inflated indicator.
    
    Change the mechanism we use to determine illegibility to be based on
    a standard, instead of a constant chosen by hand 13 years ago.
    
    Test: fast/text-indicator/text-indicator-with-low-contrast-text.html
    
    * platform/graphics/ColorUtilities.cpp:
    (WebCore::luminance):
    Fix a typo.
    
    (WebCore::contrastRatio):
    Add a function that computes the contrast ratio given two colors using
    the formula from WCAG.
    
    * platform/graphics/ColorUtilities.h:
    * rendering/TextPaintStyle.cpp:
    (WebCore::textColorIsLegibleAgainstBackgroundColor):
    Make use of WCAG's minimum legible contrast ratio instead of an
    arbitrary color difference cutoff for determining whether we consider
    text legible. It seems sensible and also considers the text on DF readable
2019-07-24  Simon Fraser  <simon.fraser@apple.com>

        [iOS WK2] A top fixed bar can flicker when scrolling with the keyboard up
        https://bugs.webkit.org/show_bug.cgi?id=200105
        rdar://problem/52871975

        Reviewed by Wenson Hsieh.

        * resources/ui-helper.js:
        (window.UIHelper.ensureStablePresentationUpdate.return.new.Promise):
        (window.UIHelper.ensureStablePresentationUpdate):
        * scrollingcoordinator/ios/fixed-scrolling-with-keyboard-expected.txt: Added.
        * scrollingcoordinator/ios/fixed-scrolling-with-keyboard.html: Added.

    (which it seems to be to me!).
    
    * testing/Internals.cpp:
    (WebCore::Internals::TextIndicatorInfo::TextIndicatorInfo):
    * testing/Internals.h:
    * testing/Internals.idl:
    Expose all of the text rects to Internals, not just the bounding rect.
    Expose some more TextIndicator options to Internals so that we can
    turn on the legibility mechanism.
    
    LayoutTests:
    
    * fast/text-indicator/text-indicator-with-low-contrast-text-expected.txt: Added.
    * fast/text-indicator/text-indicator-with-low-contrast-text.html: Added.
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@247792 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-07-24  Tim Horton  <timothy_horton@apple.com>

            Daring Fireball long press highlights are unnecessarily inflated due to false illegibility
            https://bugs.webkit.org/show_bug.cgi?id=200064

            Reviewed by Geoff Garen.

            * fast/text-indicator/text-indicator-with-low-contrast-text-expected.txt: Added.
            * fast/text-indicator/text-indicator-with-low-contrast-text.html: Added.

2019-07-29  Alan Coon  <alancoon@apple.com>

        Cherry-pick r247730. rdar://problem/53647886

    Long press hint of AirPods buy buttons are tall and narrow during animation
    https://bugs.webkit.org/show_bug.cgi?id=200036
    <rdar://problem/53145697>
    
    Reviewed by Wenson Hsieh.
    
    Source/WebCore:
    
    New test: fast/text-indicator/text-indicator-with-tiny-child.html
    
    * dom/Range.cpp:
    (WebCore::Range::borderAndTextRects const):
    * dom/Range.h:
    Add a BoundingRectBehavior that ignores 1x1 and smaller rects.
    
    * page/TextIndicator.cpp:
    (WebCore::absoluteBoundingRectForRange):
    Enable IgnoreTinyRects.
    
    LayoutTests:
    
    * fast/text-indicator/text-indicator-with-tiny-child-expected.txt: Added.
    * fast/text-indicator/text-indicator-with-tiny-child.html: Added.
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@247730 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-07-23  Tim Horton  <timothy_horton@apple.com>

            Long press hint of AirPods buy buttons are tall and narrow during animation
            https://bugs.webkit.org/show_bug.cgi?id=200036
            <rdar://problem/53145697>

            Reviewed by Wenson Hsieh.

            * fast/text-indicator/text-indicator-with-tiny-child-expected.txt: Added.
            * fast/text-indicator/text-indicator-with-tiny-child.html: Added.

2019-07-29  Alan Coon  <alancoon@apple.com>

        Cherry-pick r247722. rdar://problem/53647293

    [macOS 10.15] Web process crashes when attempting to show the font panel via Font > Show Fonts
    https://bugs.webkit.org/show_bug.cgi?id=200021
    <rdar://problem/53301325>
    
    Reviewed by Ryosuke Niwa.
    
    Source/WebCore:
    
    In macOS 10.15, attempting to access ~/Library/FontCollections/ from the web process causes a Sandbox violation
    and a subsequent crash. This can be triggered by trying to show the font panel via Font > Show Fonts in the
    context menu after right clicking.
    
    In the (near) future, we should fix this by moving logic to show the font panel, color panel and styles panel
    from the Editor in the web process to the UI process in WebKit2. However, for the time being, we can just work
    around this by adding a new EditorClient hook to determine whether to allow the font panel to show; this returns
    true in the legacy macOS WebKit port, and false everywhere else.
    
    Test: editing/mac/style/do-not-crash-when-showing-font-panel.html
    
    * editing/mac/EditorMac.mm:
    (WebCore::Editor::showFontPanel):
    * loader/EmptyClients.cpp:
    * page/EditorClient.h:
    
    Source/WebKit:
    
    Always return false from canShowFontPanel in WebKit2.
    
    * WebProcess/WebCoreSupport/WebEditorClient.h:
    
    Source/WebKitLegacy/mac:
    
    Implement a new editing client hook. In WebKit1, this always returns true on macOS and false on iOS.
    
    * WebCoreSupport/WebEditorClient.h:
    
    Source/WebKitLegacy/win:
    
    Implement a new editing client hook.
    
    * WebCoreSupport/WebEditorClient.h:
    
    Tools:
    
    Add support for grabbing the child menu items of a context menu item.
    
    * WebKitTestRunner/InjectedBundle/EventSendingController.cpp:
    (WTR::getMenuItemChildrenCallback):
    
    LayoutTests:
    
    Add a new layout test to verify that attempting to show the font panel doesn't crash the web process in WebKit2.
    This test is skipped in WebKit1, since EventSender::contextClick() in WebKit1 only returns an array of strings
    corresponding to the titles of each menu item.
    
    * editing/mac/style/do-not-crash-when-showing-font-panel-expected.txt: Added.
    * editing/mac/style/do-not-crash-when-showing-font-panel.html: Added.
    * platform/mac-wk1/TestExpectations:
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@247722 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-07-23  Wenson Hsieh  <wenson_hsieh@apple.com>

            [macOS 10.15] Web process crashes when attempting to show the font panel via Font > Show Fonts
            https://bugs.webkit.org/show_bug.cgi?id=200021
            <rdar://problem/53301325>

            Reviewed by Ryosuke Niwa.

            Add a new layout test to verify that attempting to show the font panel doesn't crash the web process in WebKit2.
            This test is skipped in WebKit1, since EventSender::contextClick() in WebKit1 only returns an array of strings
            corresponding to the titles of each menu item.

            * editing/mac/style/do-not-crash-when-showing-font-panel-expected.txt: Added.
            * editing/mac/style/do-not-crash-when-showing-font-panel.html: Added.
            * platform/mac-wk1/TestExpectations:

2019-07-29  Alan Coon  <alancoon@apple.com>

        Cherry-pick r247720. rdar://problem/53647897

    WebKit should strip away system font names from the pasted content
    https://bugs.webkit.org/show_bug.cgi?id=199975
    <rdar://problem/53336353>
    
    Reviewed by Darin Adler.
    
    Source/WebCore:
    
    Cocoa HTML Writer sometimes generate system font names such as ".AppleSystemUIFont", ".SFUI-Regular", and ".SF UI Mono".
    We need to strip away these font names upon paste to avoid these font names falling back to Times New Roman.
    
    Added the code to strip these font names away in EditingStyle::mergeStyleFromRulesForSerialization, which is used by
    StylizedMarkupAccumulator to generate HTML during copy. This works because WebContentReader::readWebArchive invokes
    sanitizeMarkupWithArchive which inserts the pasteboard content into a temporary document then re-serializes back to HTML
    using StylizedMarkupAccumulator before the actual pasting happens.
    
    This approach has a few benefits over stripping away these font names in ReplaceSelectionCommand:
    
    1. It would only affect clients that opts-in to copy & paste sanitization. e.g. it won't affect legacy WebKit clients
    and those that opt out of pasteboard content sanitization.
    
    2. It preserves font names such as ".SF Blah" that a website may insert as some kind of house keeping purposes if ever.
    While we don't have any evidence that there is any such a website but it's a real risk nonetheless. The copy side fix would
    only affect cross-site and cross-app pasting, which is rare and less likely to affect real user scenarios.
    
    3. It avoids exposing bogus .Apple* or .SF* font names to websites that directly use event.clipboardData.getData.
    Indeed stripping away bogus markup like this is one of the key features / benefit of using copy & paste sanitization.
    
    Test: editing/pasteboard/paste-cocoa-writer-markup-with-system-fonts.html
    
    * editing/EditingStyle.cpp:
    (WebCore::usesForbiddenSystemFontAsOnlyFontFamilyName): Added.
    (WebCore::EditingStyle::mergeStyleFromRulesForSerialization): Added the code to remove font-family property when needed.
    * platform/graphics/FontCache.h:
    * platform/graphics/cocoa/FontCacheCoreText.cpp:
    (WebCore::isSystemFont): Moved.
    (WebCore::FontCache::isSystemFontForbiddenForEditing): Added.
    * platform/graphics/freetype/FontCacheFreeType.cpp:
    (WebCore::FontCache::isSystemFontForbiddenForEditing): Added. Always returns false.
    * platform/graphics/win/FontCacheWin.cpp:
    (WebCore::FontCache::isSystemFontForbiddenForEditing): Ditto.
    
    Tools:
    
    Added a test to strip away system font names such as ".AppleSystemUIFont", ".SFUI-Regular", and ".SF UI Mono".
    
    * TestWebKitAPI/TestWebKitAPI.xcodeproj/project.pbxproj:
    * TestWebKitAPI/Tests/WebKitCocoa/PasteHTML.mm:
    * TestWebKitAPI/Tests/WebKitCocoa/cocoa-writer-markup-with-system-fonts.html: Added.
    
    LayoutTests:
    
    Added a test for ClipboardData.getData returning the original markup and execCommand('insertHTML', ~)
    not stripping away system font names.
    
    * editing/pasteboard/paste-cocoa-writer-markup-with-system-fonts-expected.txt: Added.
    * editing/pasteboard/paste-cocoa-writer-markup-with-system-fonts.html: Added.
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@247720 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-07-23  Ryosuke Niwa  <rniwa@webkit.org>

            WebKit should strip away system font names from the pasted content
            https://bugs.webkit.org/show_bug.cgi?id=199975
            <rdar://problem/53336353>

            Reviewed by Darin Adler.

            Added a test for ClipboardData.getData returning the original markup and execCommand('insertHTML', ~)
            not stripping away system font names.

            * editing/pasteboard/paste-cocoa-writer-markup-with-system-fonts-expected.txt: Added.
            * editing/pasteboard/paste-cocoa-writer-markup-with-system-fonts.html: Added.

2019-07-29  Alan Coon  <alancoon@apple.com>

        Cherry-pick r247712. rdar://problem/53647280

    Fix WebView iframe rendering in macOS Catalina
    https://bugs.webkit.org/show_bug.cgi?id=200022
    rdar://problem/49102040
    
    Reviewed by Darin Adler.
    Source/WebKitLegacy/mac:
    
    Adapt to internal NSView method renames in Catalina.
    
    * WebView/WebHTMLView.mm:
    (-[WebHTMLView _recursive:displayRectIgnoringOpacity:inContext:stopAtLayerBackedViews:_recursive:displayRectIgnoringOpacity:inContext:shouldChangeFontReferenceColor:stopAtLayerBackedViews:_recursive:displayRectIgnoringOpacity:inContext:shouldChangeFontReferenceColor:_recursive:displayRectIgnoringOpacity:inContext:topView:]):
    (-[WebHTMLView _recursive:displayRectIgnoringOpacity:inContext:shouldChangeFontReferenceColor:stopAtLayerBackedViews:_recursive:displayRectIgnoringOpacity:inContext:shouldChangeFontReferenceColor:_recursive:displayRectIgnoringOpacity:inContext:topView:]): Deleted.
    
    LayoutTests:
    
    New test for rendering of overlapping iframes, defects when we fail to setAsideSubviews
    in WebView.
    
    * fast/frames/frames-not-double-painted-expected.html: Added.
    * fast/frames/frames-not-double-painted.html: Added.
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@247712 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-07-22  Simon Fraser  <simon.fraser@apple.com>

            Fix WebView iframe rendering in macOS Catalina
            https://bugs.webkit.org/show_bug.cgi?id=200022
            rdar://problem/49102040

            Reviewed by Darin Adler.

            New test for rendering of overlapping iframes, defects when we fail to setAsideSubviews
            in WebView.

            * fast/frames/frames-not-double-painted-expected.html: Added.
            * fast/frames/frames-not-double-painted.html: Added.

2019-07-29  Alan Coon  <alancoon@apple.com>

        Cherry-pick r247698. rdar://problem/53647459

    Make sure the player underlying volume is correctly set after creating a new player
    https://bugs.webkit.org/show_bug.cgi?id=199974
    <rdar://problem/52762559>
    
    Reviewed by Eric Carlson.
    
    Source/WebCore:
    
    When creating a player before starting to play, the volume might not be correctly initialized.
    Fix that by updating the volume like done for rate and muted state.
    A future refactoring should probably move that code in MediaPlayer.
    
    Add an internal API to query the volume value from the underlying player.
    
    Test: http/tests/media/audio-volume-zero.html
    
    * html/HTMLMediaElement.cpp:
    (WebCore::HTMLMediaElement::updateVolume):
    (WebCore::HTMLMediaElement::updatePlayState):
    (WebCore::HTMLMediaElement::effectiveVolume const):
    (WebCore::HTMLMediaElement::effectiveMuted const):
    * html/HTMLMediaElement.h:
    * testing/Internals.cpp:
    (WebCore::Internals::privatePlayerVolume):
    * testing/Internals.h:
    * testing/Internals.idl:
    * testing/Internals.mm:
    (WebCore::Internals::privatePlayerVolume):
    
    LayoutTests:
    
    * http/tests/media/128kbps-44khz.mp3: Added.
    * http/tests/media/audio-volume-zero-expected.txt: Added.
    * http/tests/media/audio-volume-zero.html: Added.
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@247698 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-07-22  Youenn Fablet  <youenn@apple.com>

            Make sure the player underlying volume is correctly set after creating a new player
            https://bugs.webkit.org/show_bug.cgi?id=199974
            <rdar://problem/52762559>

            Reviewed by Eric Carlson.

            * http/tests/media/128kbps-44khz.mp3: Added.
            * http/tests/media/audio-volume-zero-expected.txt: Added.
            * http/tests/media/audio-volume-zero.html: Added.

2019-07-29  Alan Coon  <alancoon@apple.com>

        Cherry-pick r247651. rdar://problem/53648007

    [iOS] Entering 2FA code on idmsa.apple.com causes unexpected scrolling
    https://bugs.webkit.org/show_bug.cgi?id=199949
    <rdar://problem/49944428>
    
    Reviewed by Tim Horton and Megan Gardner.
    
    Source/WebKit:
    
    Since at least iOS 11, -[UIScrollView _adjustForAutomaticKeyboardInfo:animated:lastAdjustment:] adjusts the
    scroll view's content offset to account for updated keyboard bottom insets. In WebKit, we call this method
    whenever keyboard geometry changes (based on system notifications, such as UIKeyboardWillHideNotification).
    
    When switching between focused form fields, we hide the keyboard for the previous focused element prior to
    showing the keyboard for the newly focused element. This means that we will actually dismiss the keyboard in the
    process of changing the focused element, which posts keyboard geometry notifications, which causes us to scroll
    WKScrollView.
    
    On iOS 12, this would be immediately followed by re-presenting the keyboard for the new focused element, which
    causes us to adjust the scroll view back to its original position right away; this means that the scrolling that
    happens as a result of adjusting for the keyboard insets after dismissal doesn't result in any visible change.
    
    However, on iOS 13, after r239441 and r244546, we now defer scrolling and zooming to reveal the focused element
    until later; this means the scrolling that happens as a result of initially dismissing the keyboard now causes a
    consistent jump in the scroll view's scroll position (whereas on iOS 12, this only happens rarely, and the jump
    is also less noticeable).
    
    To mitigate this, we detect the case where we're moving focus from one element to another; if we're about to
    show a keyboard for the newly focused element, then we should avoid scrolling as a result of the impending
    "keyboard will hide" notification.
    
    Test: fast/forms/ios/no-scrolling-when-moving-focus-between-adjacent-fields.html
    
    * UIProcess/API/Cocoa/WKWebView.mm:
    (-[WKWebView _keyboardChangedWithInfo:adjustScrollView:]):
    (-[WKWebView _keyboardWillHide:]):
    * UIProcess/ios/WKContentViewInteraction.h:
    * UIProcess/ios/WKContentViewInteraction.mm:
    (shouldShowKeyboardForElement):
    
    Add a helper to determine whether we're focusing an element which presents a "keyboard" (i.e. a UIKit input
    view, as opposed to modal select pickers, modal date pickers, or fields with inputmode="none", for which we
    don't show an input view).
    
    (-[WKContentView _elementDidFocus:userIsInteracting:blurPreviousNode:activityStateChanges:userObject:]):
    (-[WKContentView shouldIgnoreKeyboardWillHideNotification]):
    
    LayoutTests:
    
    Add a new layout test to verify that moving focus between horizontally adjacent form controls doesn't induce
    vertical scrolling.
    
    * fast/forms/ios/no-scrolling-when-moving-focus-between-adjacent-fields-expected.txt: Added.
    * fast/forms/ios/no-scrolling-when-moving-focus-between-adjacent-fields.html: Added.
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@247651 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-07-19  Wenson Hsieh  <wenson_hsieh@apple.com>

            [iOS] Entering 2FA code on idmsa.apple.com causes unexpected scrolling
            https://bugs.webkit.org/show_bug.cgi?id=199949
            <rdar://problem/49944428>

            Reviewed by Tim Horton and Megan Gardner.

            Add a new layout test to verify that moving focus between horizontally adjacent form controls doesn't induce
            vertical scrolling.

            * fast/forms/ios/no-scrolling-when-moving-focus-between-adjacent-fields-expected.txt: Added.
            * fast/forms/ios/no-scrolling-when-moving-focus-between-adjacent-fields.html: Added.

2019-07-24  Kocsen Chung  <kocsen_chung@apple.com>

        Cherry-pick r247671. rdar://problem/53501836

    Add accessibilityInsertText for text insertion in edit fields.
    https://bugs.webkit.org/show_bug.cgi?id=199973
    
    Patch by Andres Gonzalez <andresg_22@apple.com> on 2019-07-20
    Reviewed by Chris Fleizach.
    
    Source/WebCore:
    
    Tests: accessibility/insert-newline.html
           accessibility/ios-simulator/insert-newline.html
    
    Accessibility clients like VoiceOver and Voice Control were entering
    text in text fields by replacing the entire content of the field
    (SetValue) and then setting the insertion point to the appropriate
    offset (SetSelectedTextRange). accessibilityInsertText gives a simpler
    interface to clients to insert text at the insertion point location.
    In addition, this provides a workaround for the issue encountered with
    the previous method when inserting a linebreak.
    
    * accessibility/AccessibilityObject.cpp:
    (WebCore::AccessibilityObject::insertText):
    * accessibility/AccessibilityObject.h:
    * accessibility/ios/WebAccessibilityObjectWrapperIOS.mm:
    (-[WebAccessibilityObjectWrapper accessibilityInsertText:]):
    * accessibility/mac/WebAccessibilityObjectWrapperMac.mm:
    (-[WebAccessibilityObjectWrapper accessibilityInsertText:]):
    
    Tools:
    
    Glue code to run new LayoutTests.
    * WebKitTestRunner/InjectedBundle/AccessibilityUIElement.h:
    * WebKitTestRunner/InjectedBundle/Bindings/AccessibilityUIElement.idl:
    * WebKitTestRunner/InjectedBundle/atk/AccessibilityUIElementAtk.cpp:
    (WTR::AccessibilityUIElement::insertText):
    * WebKitTestRunner/InjectedBundle/ios/AccessibilityUIElementIOS.mm:
    (WTR::AccessibilityUIElement::insertText):
    * WebKitTestRunner/InjectedBundle/mac/AccessibilityUIElementMac.mm:
    (WTR::AccessibilityUIElement::insertText):
    * WebKitTestRunner/InjectedBundle/win/AccessibilityUIElementWin.cpp:
    (WTR::AccessibilityUIElement::insertText):
    
    LayoutTests:
    
    Tests for inserting a newline in the middle of a text line and checking
    that the insertion point and text ranges are correct.
    * accessibility/insert-newline-expected.txt: Added.
    * accessibility/insert-newline.html: Added.
    * accessibility/ios-simulator/insert-newline-expected.txt: Added.
    * accessibility/ios-simulator/insert-newline.html: Added.
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@247671 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-07-20  Andres Gonzalez  <andresg_22@apple.com>

            Add accessibilityInsertText for text insertion in edit fields.
            https://bugs.webkit.org/show_bug.cgi?id=199973

            Reviewed by Chris Fleizach.

            Tests for inserting a newline in the middle of a text line and checking
            that the insertion point and text ranges are correct.
            * accessibility/insert-newline-expected.txt: Added.
            * accessibility/insert-newline.html: Added.
            * accessibility/ios-simulator/insert-newline-expected.txt: Added.
            * accessibility/ios-simulator/insert-newline.html: Added.

2019-07-24  Alan Coon  <alancoon@apple.com>

        Cherry-pick r247674. rdar://problem/53483189

    [iOS] Fast and complex text codepaths disagree about how to lay out bopomofo with tone marks
    https://bugs.webkit.org/show_bug.cgi?id=199912
    <rdar://problem/52182454>
    
    Reviewed by Simon Fraser.
    
    Source/WebCore:
    
    This is because CoreText has special composition rules for CJK languages, which we don't have in our simple
    text codepath. Rather than implementing the composition rules in WebKit, we can simply disable them in
    CoreText.
    
    Test: fast/text/international/system-language/composition.html
    
    * platform/graphics/mac/SimpleFontDataCoreText.cpp:
    (WebCore::Font::getCFStringAttributes const):
    
    Source/WebCore/PAL:
    
    * pal/spi/cocoa/CoreTextSPI.h:
    
    LayoutTests:
    
    * css3/font-feature-font-face-local-expected.html:
    * css3/font-feature-font-face-local.html:
    * editing/mac/selection/word-thai-expected.txt:
    * editing/mac/selection/word-thai.html:
    * fast/text/international/system-language/composition-expected.txt: Added.
    * fast/text/international/system-language/composition.html: Added.
    * platform/ios/fast/text/crash-complex-text-surrogate-expected.txt:
    * svg/custom/glyph-selection-arabic-forms-expected.txt:
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@247674 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-07-21  Myles C. Maxfield  <mmaxfield@apple.com>

            [iOS] Fast and complex text codepaths disagree about how to lay out bopomofo with tone marks
            https://bugs.webkit.org/show_bug.cgi?id=199912
            <rdar://problem/52182454>

            Reviewed by Simon Fraser.

            * css3/font-feature-font-face-local-expected.html:
            * css3/font-feature-font-face-local.html:
            * editing/mac/selection/word-thai-expected.txt:
            * editing/mac/selection/word-thai.html:
            * fast/text/international/system-language/composition-expected.txt: Added.
            * fast/text/international/system-language/composition.html: Added.
            * platform/ios/fast/text/crash-complex-text-surrogate-expected.txt:
            * svg/custom/glyph-selection-arabic-forms-expected.txt:

2019-07-23  Alan Coon  <alancoon@apple.com>

        Cherry-pick r247650. rdar://problem/53449730

    Links stop working after long-pressing a link (WK1)
    https://bugs.webkit.org/show_bug.cgi?id=199952
    <rdar://problem/52291860>
    
    Patch by Antoine Quint <graouts@apple.com> on 2019-07-19
    Reviewed by Wenson Hsieh.
    
    Source/WebCore:
    
    Test: fast/events/touch/ios/click-after-long-press.html
    
    When EventHandler::tryToBeginDragAtPoint() is called, we must reset m_mousePressed to false so that
    WebChromeClientIOS::observedContentChange() is called by EventHandler::mousePressed() when we would
    process the next tap after a drag interaction.
    
    * page/ios/EventHandlerIOS.mm:
    (WebCore::EventHandler::tryToBeginDragAtPoint):
    
    LayoutTests:
    
    * fast/events/touch/ios/click-after-long-press-expected.txt: Added.
    * fast/events/touch/ios/click-after-long-press.html: Added.
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@247650 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-07-19  Antoine Quint  <graouts@apple.com>

            Links stop working after long-pressing a link (WK1)
            https://bugs.webkit.org/show_bug.cgi?id=199952
            <rdar://problem/52291860>

            Reviewed by Wenson Hsieh.

            * fast/events/touch/ios/click-after-long-press-expected.txt: Added.
            * fast/events/touch/ios/click-after-long-press.html: Added.

2019-07-19  Kocsen Chung  <kocsen_chung@apple.com>

        Cherry-pick r247648. rdar://problem/53279094

    Rebase fast/forms/ios/typing-in-input-in-iframe.html after r244141
    https://bugs.webkit.org/show_bug.cgi?id=199875
    <rdar://problem/50060561>
    
    Patch by Alex Christensen <achristensen@webkit.org> on 2019-07-19
    Reviewed by Megan Gardner.
    
    With r247571 and its justification, we need to rebase another test.
    
    * fast/forms/ios/typing-in-input-in-iframe-expected.txt:
    * fast/forms/ios/typing-in-input-in-iframe.html:
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@247648 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-07-19  Alex Christensen  <achristensen@webkit.org>

            Rebase fast/forms/ios/typing-in-input-in-iframe.html after r244141
            https://bugs.webkit.org/show_bug.cgi?id=199875
            <rdar://problem/50060561>

            Reviewed by Megan Gardner.

            With r247571 and its justification, we need to rebase another test.

            * fast/forms/ios/typing-in-input-in-iframe-expected.txt:
            * fast/forms/ios/typing-in-input-in-iframe.html:

2019-07-19  Kocsen Chung  <kocsen_chung@apple.com>

        Cherry-pick r247571. rdar://problem/53279094

    Rebase fast/forms/ios/delete-in-input-in-iframe.html after r244141
    https://bugs.webkit.org/show_bug.cgi?id=199875
    <rdar://problem/50060561>
    
    Patch by Alex Christensen <achristensen@webkit.org> on 2019-07-18
    Reviewed by Megan Gardner.
    
    In r202295, we added an ios-specific quirk to prevent scrolling on iOS because of UIKit/WebKit scrolling discrepancies.
    In r244141, we changed the scrolling behavior to be more like macOS, and the test was broken.  Since this was an intentional
    change and the bugs reported in rdar://problem/26805722 (initially fixed by r202295) and rdar://problem/49225507 (fixed by r244141)
    are both behaving as desired, the intentional change in r244141 should be reflected by new test expectations.
    We do want typing in an input field in an iframe to scroll as we type.
    
    * fast/forms/ios/delete-in-input-in-iframe-expected.txt:
    * fast/forms/ios/delete-in-input-in-iframe.html:
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@247571 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-07-18  Alex Christensen  <achristensen@webkit.org>

            Rebase fast/forms/ios/delete-in-input-in-iframe.html after r244141
            https://bugs.webkit.org/show_bug.cgi?id=199875
            <rdar://problem/50060561>

            Reviewed by Megan Gardner.

            In r202295, we added an ios-specific quirk to prevent scrolling on iOS because of UIKit/WebKit scrolling discrepancies.
            In r244141, we changed the scrolling behavior to be more like macOS, and the test was broken.  Since this was an intentional
            change and the bugs reported in rdar://problem/26805722 (initially fixed by r202295) and rdar://problem/49225507 (fixed by r244141)
            are both behaving as desired, the intentional change in r244141 should be reflected by new test expectations.
            We do want typing in an input field in an iframe to scroll as we type.

            * fast/forms/ios/delete-in-input-in-iframe-expected.txt:
            * fast/forms/ios/delete-in-input-in-iframe.html:

2019-07-18  Alan Coon  <alancoon@apple.com>

        Cherry-pick r247619. rdar://problem/53279090

    [iOS Sim] Multiple quicklook tests are failing
    https://bugs.webkit.org/show_bug.cgi?id=191711
    
    Patch by Said Abou-Hallawa <sabouhallawa@apple.com> on 2019-07-18
    Reviewed by Simon Fraser.
    
    Rebaseline expected results for quicklook layout tests.
    
    * platform/ios/TestExpectations:
    * platform/ios/quicklook/powerpoint-expected.txt:
    * platform/ios/quicklook/powerpoint-legacy-expected.txt:
    * platform/ios/quicklook/resources/numbers-expected.pdf:
    * quicklook/resources/keynote-expected.pdf:
    * quicklook/resources/pages-expected.pdf:
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@247619 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-07-18  Said Abou-Hallawa  <sabouhallawa@apple.com>

            [iOS Sim] Multiple quicklook tests are failing
            https://bugs.webkit.org/show_bug.cgi?id=191711

            Reviewed by Simon Fraser.

            Rebaseline expected results for quicklook layout tests.

            * platform/ios/TestExpectations:
            * platform/ios/quicklook/powerpoint-expected.txt:
            * platform/ios/quicklook/powerpoint-legacy-expected.txt:
            * platform/ios/quicklook/resources/numbers-expected.pdf:
            * quicklook/resources/keynote-expected.pdf:
            * quicklook/resources/pages-expected.pdf:

2019-07-18  Alan Coon  <alancoon@apple.com>

        Cherry-pick r247566. rdar://problem/53279081

    Make sure to set kCTFontFallbackOptionAttribute to kCTFontFallbackOptionSystem for system fonts
    https://bugs.webkit.org/show_bug.cgi?id=199769
    <rdar://problem/49390297>
    
    Reviewed by Myles C. Maxfield.
    
    Source/WebCore:
    
    When getting a system font, set the appropriate attribute so that it
    does not fallback to a user initiated font.
    Add an ASSERT that checks that the font in use is not a user font if
    policy is to not use user installed fonts.
    
    Tests: fast/text/user-installed-fonts/extended-character-with-user-font.html
           fast/text/user-installed-fonts/extended-character.html
    
    * platform/graphics/Font.h:
    * platform/graphics/FontCascadeFonts.cpp:
    (WebCore::FontCascadeFonts::glyphDataForSystemFallback):
    * platform/graphics/cocoa/FontCacheCoreText.cpp:
    (WebCore::preparePlatformFont):
    (WebCore::FontDatabase::singletonAllowingUserInstalledFonts):
    (WebCore::FontDatabase::singletonDisallowingUserInstalledFonts):
    (WebCore::addAttributesForInstalledFonts):
    (WebCore::addAttributesForWebFonts):
    (WebCore::installedFontMandatoryAttributes):
    * platform/graphics/mac/SimpleFontDataCoreText.cpp:
    (WebCore::Font::isUserInstalledFont const):
    
    Source/WTF:
    
    * wtf/Platform.h:
    
    Tools:
    
    Add a font containing one extended character not found in system fonts.
    
    * WebKitTestRunner/WebKitTestRunner.xcodeproj/project.pbxproj:
    * WebKitTestRunner/fonts/FakeHelvetica-SingleExtendedCharacter.ttf: Added.
    
    LayoutTests:
    
    Tests require WTR and recent MacOS, hence why they are disabled elsewhere.
    
    * TestExpectations:
    * platform/mac-wk2/TestExpectations:
    * fast/text/user-installed-fonts/extended-character-expected.html: Added.
    * fast/text/user-installed-fonts/extended-character-with-user-font-expected-mismatch.html: Added.
    * fast/text/user-installed-fonts/extended-character-with-user-font.html: Added.
    * fast/text/user-installed-fonts/extended-character.html: Added.
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@247566 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-07-18  Youenn Fablet  <youenn@apple.com>

            Make sure to set kCTFontFallbackOptionAttribute to kCTFontFallbackOptionSystem for system fonts
            https://bugs.webkit.org/show_bug.cgi?id=199769
            <rdar://problem/49390297>

            Reviewed by Myles C. Maxfield.

            Tests require WTR and recent MacOS, hence why they are disabled elsewhere.

            * TestExpectations:
            * platform/mac-wk2/TestExpectations:
            * fast/text/user-installed-fonts/extended-character-expected.html: Added.
            * fast/text/user-installed-fonts/extended-character-with-user-font-expected-mismatch.html: Added.
            * fast/text/user-installed-fonts/extended-character-with-user-font.html: Added.
            * fast/text/user-installed-fonts/extended-character.html: Added.

2019-07-17  Kocsen Chung  <kocsen_chung@apple.com>

        Cherry-pick r247544. rdar://problem/53230040

    Unable to bring up custom media controls on iOS for video.sina.cn
    https://bugs.webkit.org/show_bug.cgi?id=199889
    <rdar://problem/51883919>
    
    Reviewed by Dean Jackson.
    
    Source/WebCore:
    
    Videos on video.sina.cn by default have the "controls" attribute and are set not to autoplay. This means that the original state
    of the media controls are set to show the built-in media controls and also show the prominent play button to begin playback. The
    display of the play button also requires a tap gesture recognizer, which calls preventDefault() when the "touchend" is received
    to prevent double-tap-to-zoom, but also has the side-effect of preventing a "click" event from being dispatched for a tap.
    
    The video.sina.cn code would eventually remove the "controls" attribute, which would make the built-in media controls not visible,
    but still participate in hit-testing because we keep the shadow DOM around in order to potentially show the Airplay or picture-in-picture
    placards. Additionally, we wouldn't disable the tap gesture recognizer when the "controls" attribute was removed.
    
    We now ensure that both gesture recognizers used by iOS inline media controls are only enabled when media controls are visible.
    
    Test: media/modern-media-controls/media-controller/ios/media-controller-allows-click-over-video-with-no-controls.html
    
    * Modules/modern-media-controls/controls/ios-inline-media-controls.js:
    (IOSInlineMediaControls.prototype.set showsStartButton):
    (IOSInlineMediaControls.prototype.get visible):
    (IOSInlineMediaControls.prototype.set visible):
    (IOSInlineMediaControls.prototype._updateGestureRecognizers):
    (IOSInlineMediaControls.prototype._tapGestureRecognizerStateDidChange):
    (IOSInlineMediaControls.prototype._pinchGestureRecognizerStateDidChange):
    
    LayoutTests:
    
    This test replicates the scenario found on video.sina.cn that caused the issue: a <video> element originally has the "controls"
    attribute and is not set to autoplay. This means the tap gesture recognizer is created to track a tap for the video to play. Then
    the "controls" attribute is removed and we dispatch a tap on the video which would previously have *not* caused a "click" event to
    eventually be dispatched on the <video> element since the tap gesture recognizer would call preventDefault(). With this patch applied,
    we get the "click" event because the tap gesture recognizer is disabled once the controls are no longer visible.
    
    * media/modern-media-controls/media-controller/ios/media-controller-allows-click-over-video-with-no-controls-expected.txt: Added.
    * media/modern-media-controls/media-controller/ios/media-controller-allows-click-over-video-with-no-controls.html: Added.
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@247544 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-07-17  Antoine Quint  <graouts@apple.com>

            Unable to bring up custom media controls on iOS for video.sina.cn
            https://bugs.webkit.org/show_bug.cgi?id=199889
            <rdar://problem/51883919>

            Reviewed by Dean Jackson.

            This test replicates the scenario found on video.sina.cn that caused the issue: a <video> element originally has the "controls"
            attribute and is not set to autoplay. This means the tap gesture recognizer is created to track a tap for the video to play. Then
            the "controls" attribute is removed and we dispatch a tap on the video which would previously have *not* caused a "click" event to
            eventually be dispatched on the <video> element since the tap gesture recognizer would call preventDefault(). With this patch applied,
            we get the "click" event because the tap gesture recognizer is disabled once the controls are no longer visible.

            * media/modern-media-controls/media-controller/ios/media-controller-allows-click-over-video-with-no-controls-expected.txt: Added.
            * media/modern-media-controls/media-controller/ios/media-controller-allows-click-over-video-with-no-controls.html: Added.

2019-07-17  Kocsen Chung  <kocsen_chung@apple.com>

        Cherry-pick r247540. rdar://problem/53230036

    [iOS WK2] Avoid lots of compositing backing store for offscreen position:fixed descendants
    https://bugs.webkit.org/show_bug.cgi?id=199819
    rdar://problem/51977416
    
    Reviewed by Zalan Bujtas.
    
    Source/WebCore:
    
    There was code to ensure that position:fixed layers and their descendants don't have their
    backing store detached (thrown away to save memory when offscreen), since that can trigger
    flashing when async scrolling moves layers in and out of the visual viewport.
    
    However, some pages have many descendant layers of positon:fixed which entrain backing
    store, because, for example, they have a stack of translated-offscreen menu elements inside
    a fixed header, and those elements may composite because of overflow:scroll.
    
    To avoid using too much memory on such pages, allow backing store detachment for fixed
    layers that are outside the layout viewport. Add a flag to RenderLayer that's set for layers
    which are fixed, or descendants of fixed, and consult that flag in
    updateAllowsBackingStoreDetaching(). The logic there is similar to
    RenderLayerCompositor::requiresCompositingForPosition().
    
    I considered allowing all position:fixed to composite (since this patch would keep most of
    the memory saving), but historically we've avoided compositing out-of-viewport
    position:fixed because it's quite common to have them with negative z-index, and compositing
    those has significant compositing knock-on effects.
    
    GraphicsLayer flushing no longer needs to track the viewport-constrained status of layers,
    so remove that code.
    
    This patch removes backing-store pinning for sticky layers.
    scrolling/ios/reconcile-layer-position-recursive.html then revealed a bug in
    ScrollingStateStickyNode::reconcileLayerPositionForViewportRect(), which was assuming that
    the sticky element was scrolled by the page, causing a bad layer position to get sync'd onto
    the layer. Fixed by copying code from ScrollingTreeStickyNode that is smarter about
    computing layer positions.
    
    This patch fixes jetsams on kmart.com.au in iOS 13 beta.
    
    Test: compositing/layer-creation/fixed-position-descendants-out-of-view.html
    
    * page/scrolling/ScrollingStateStickyNode.cpp:
    (WebCore::ScrollingStateStickyNode::computeLayerPosition const):
    (WebCore::ScrollingStateStickyNode::reconcileLayerPositionForViewportRect):
    * page/scrolling/ScrollingStateStickyNode.h:
    * platform/graphics/GraphicsLayer.h:
    (WebCore::GraphicsLayer::setAllowsBackingStoreDetaching):
    (WebCore::GraphicsLayer::allowsBackingStoreDetaching const):
    (WebCore::GraphicsLayer::setIsViewportConstrained): Deleted.
    (WebCore::GraphicsLayer::isViewportConstrained const): Deleted.
    (WebCore::GraphicsLayer::setCanDetachBackingStore): Deleted.
    (WebCore::GraphicsLayer::canDetachBackingStore const): Deleted.
    * platform/graphics/ca/GraphicsLayerCA.cpp:
    (WebCore::GraphicsLayerCA::GraphicsLayerCA):
    (WebCore::GraphicsLayerCA::recursiveVisibleRectChangeRequiresFlush const):
    (WebCore::GraphicsLayerCA::setVisibleAndCoverageRects):
    (WebCore::GraphicsLayerCA::recursiveCommitChanges):
    (WebCore::GraphicsLayerCA::updateCoverage):
    (WebCore::GraphicsLayerCA::createTransformAnimationsFromKeyframes):
    * platform/graphics/ca/GraphicsLayerCA.h:
    * rendering/RenderLayer.cpp:
    (WebCore::RenderLayer::RenderLayer):
    (WebCore::RenderLayer::updateLayerPositions):
    (WebCore::outputPaintOrderTreeLegend):
    (WebCore::outputPaintOrderTreeRecursive):
    * rendering/RenderLayer.h:
    * rendering/RenderLayerBacking.cpp:
    (WebCore::RenderLayerBacking::updateAllowsBackingStoreDetaching):
    (WebCore::RenderLayerBacking::updateOverflowControlsLayers):
    (WebCore::RenderLayerBacking::setIsScrollCoordinatedWithViewportConstrainedRole): Deleted.
    * rendering/RenderLayerBacking.h:
    * rendering/RenderLayerCompositor.cpp:
    (WebCore::RenderLayerCompositor::computeCompositingRequirements):
    (WebCore::RenderLayerCompositor::requiresCompositingForPosition const):
    (WebCore::RenderLayerCompositor::updateOverflowControlsLayers):
    (WebCore::RenderLayerCompositor::updateScrollCoordinationForLayer):
    
    LayoutTests:
    
    * compositing/layer-creation/fixed-position-change-out-of-view-in-view.html:
    * compositing/layer-creation/fixed-position-descendants-out-of-view-expected.txt: Added.
    * compositing/layer-creation/fixed-position-descendants-out-of-view.html: Added.
    * compositing/layer-creation/fixed-position-out-of-view.html:
    * platform/ios-wk2/fast/scrolling/ios/reconcile-layer-position-recursive-expected.txt: Added.
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@247540 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-07-17  Simon Fraser  <simon.fraser@apple.com>

            [iOS WK2] Avoid lots of compositing backing store for offscreen position:fixed descendants
            https://bugs.webkit.org/show_bug.cgi?id=199819
            rdar://problem/51977416

            Reviewed by Zalan Bujtas.

            * compositing/layer-creation/fixed-position-change-out-of-view-in-view.html:
            * compositing/layer-creation/fixed-position-descendants-out-of-view-expected.txt: Added.
            * compositing/layer-creation/fixed-position-descendants-out-of-view.html: Added.
            * compositing/layer-creation/fixed-position-out-of-view.html:
            * platform/ios-wk2/fast/scrolling/ios/reconcile-layer-position-recursive-expected.txt: Added.

2019-07-17  Kocsen Chung  <kocsen_chung@apple.com>

        Cherry-pick r247530. rdar://problem/53229569

    Typing into a cell in a Google Sheet lags behind by one character
    https://bugs.webkit.org/show_bug.cgi?id=199587
    <rdar://problem/51616845>
    
    Reviewed by Brent Fulgham.
    
    Source/WebCore:
    
    Add a Google Sheets quirk. Put all DOM timers scheduled from keydown and keypress event listeners
    into a holding tank. The timers continue to tick, but are barred from executing their action until
    the next text insertion or deletion or 32 ms (on device) have elapsed, whichever is sooner. We only
    allocate a holding tank once per document, only if the quirk is active, and this allocation is done
    when the document schedules a timer on keydown or keypress. The holding tank lives for the lifetime
    of the document.
    
    The story behind the quirk:
    
    On keypress Google Sheets schedules timers and expects that a DOM update will occur (i.e. text
    will be inserted or deleted) within the same event loop iteration as the dispatched keypress. The
    UI Events spec. [1] makes no such guarantee of when a DOM update must occur in relation to the keypress
    event. It could happen in the same event loop iteration as the key press (as Google expects), the
    next iteration, 500ms later, 2 minutes later, etc. What the spec does guarantee is that by the time
    a DOM input event is dispatched that the DOM will be updated. And this is the solution to the problem
    Google Sheets is trying to solve, but is doing so using pre-IE 9 technology (though similar
    functionality was available via onpropertychange in IE < 9).
    
    See also <https://github.com/w3c/uievents/issues/238>, which is tracking a spec. text update for
    this quirk.
    
    Test: fast/events/ios/dom-update-on-keydown-quirk.html
    
    [1] <https://w3c.github.io/uievents/> (Editor's Draft, 14 October 2018)
    
    * SourcesCocoa.txt:
    * WebCore.xcodeproj/project.pbxproj:
    Add some files to the project.
    
    * dom/Document.cpp:
    (WebCore::Document::domTimerHoldingTank): Added.
    * dom/Document.h:
    (WebCore::Document::domTimerHoldingTankIfExists): Added.
    
    * page/DOMTimer.cpp:
    (WebCore::DOMTimer::install): Put the newly instantiated timer into the holding tank.
    (WebCore::DOMTimer::removeById): Remove the timer from the holding tank.
    (WebCore::DOMTimer::fired): Check if the timer is in the holding tank. If it is and it is a one-
    shot timer then schedule it for the next event loop iteration. If it's a repeating timer just
    let it continue ticking. Otherwise, do what we no now and execute the timer's action. The reason
    we do not suspend timers in the holding tank is because:
        1. Far out timers (Google Sheets registers timers as far out as 5 minutes!) are not penalized.
        Though smart supension logic could avoid this. See (3).
    
        2. Empirical observations indicate that the keyboard will perform the insertion or deletion
        reasonably quickly (not the same event loop iteration as the keydown, but within two iterations out).
        So, the timers in the holding tank are short-lived.
    
        3. Simplifies the code. There is no need to keep additional bookkeeping to track multiple timer
        suspension reasons (timers currently can only have one suspension reason) or alternatively defer
        scheduling a timer until a later time and computing a new "fair" firing time when scheduled.
    * page/EventHandler.cpp:
    (WebCore::EventHandler::internalKeyEvent): Place a token on the stack to put all DOM timers
    scheduled on keydown and keypress into the holding tank if the quirk is enabled.
    * page/Quirks.cpp:
    (WebCore::Quirks::needsDeferKeyDownAndKeyPressTimersUntilNextEditingCommand const): Added.
    * page/Quirks.h:
    * page/Settings.yaml: Added setting so that this quirk can be enabled from a layout test. This setting
    also lets us enable the quirk for all sites or for certain third-party apps if desired.
    * page/ios/DOMTimerHoldingTank.cpp: Added.
    (WebCore::DOMTimerHoldingTank::DOMTimerHoldingTank):
    (WebCore::DOMTimerHoldingTank::add):
    (WebCore::DOMTimerHoldingTank::remove):
    (WebCore::DOMTimerHoldingTank::contains):
    (WebCore::DOMTimerHoldingTank::removeAll):
    (WebCore::DOMTimerHoldingTank::stopExceededMaximumHoldTimer):
    * page/ios/DOMTimerHoldingTank.h: Added.
    (WebCore::DeferDOMTimersForScope::DeferDOMTimersForScope):
    (WebCore::DeferDOMTimersForScope::~DeferDOMTimersForScope):
    (WebCore::DeferDOMTimersForScope::isDeferring):
    
    Source/WebKit:
    
    Remove all timers from the holding tank on text insertion or deletion (represented as an
    editing command). Timers that were in the holding tank never stopped ticking and will now
    be able to execute their action.
    
    * WebProcess/WebPage/WebPage.cpp:
    (WebKit::WebPage::executeEditingCommand):
    (WebKit::WebPage::insertTextAsync):
    (WebKit::WebPage::setCompositionAsync):
    (WebKit::WebPage::confirmCompositionAsync):
    Call platformWillPerformEditingCommand().
    
    * WebProcess/WebPage/WebPage.h:
    (WebKit::WebPage::platformWillPerformEditingCommand): Added.
    * WebProcess/WebPage/ios/WebPageIOS.mm:
    (WebKit::WebPage::platformWillPerformEditingCommand): Remove all the timers from the holding
    tank if we have a holding tank.
    
    LayoutTests:
    
    Add a test that enables the quirk and ensures that the DOM is up-to-date on expiration of a
    zero timer scheduled from keydown, keypress, keyup, and input.
    
    * fast/events/ios/dom-update-on-keydown-quirk-expected.txt: Added.
    * fast/events/ios/dom-update-on-keydown-quirk.html: Added.
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@247530 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-07-17  Daniel Bates  <dabates@apple.com>

            Typing into a cell in a Google Sheet lags behind by one character
            https://bugs.webkit.org/show_bug.cgi?id=199587
            <rdar://problem/51616845>

            Reviewed by Brent Fulgham.

            Add a test that enables the quirk and ensures that the DOM is up-to-date on expiration of a
            zero timer scheduled from keydown, keypress, keyup, and input.

            * fast/events/ios/dom-update-on-keydown-quirk-expected.txt: Added.
            * fast/events/ios/dom-update-on-keydown-quirk.html: Added.

2019-07-17  Kocsen Chung  <kocsen_chung@apple.com>

        Cherry-pick r247484. rdar://problem/53229757

    [Text autosizing] [iPadOS] Paragraph text on the front page of LinkedIn.com is not boosted
    https://bugs.webkit.org/show_bug.cgi?id=199827
    <rdar://problem/53152660>
    
    Reviewed by Zalan Bujtas.
    
    Source/WebCore:
    
    After r247467, we try to avoid boosting some text that might cause vertical overflow due to line height
    increasing inside a container that expects a fixed integer number of lines. However, in the case of
    linkedin.com, the line height specified is a fixed value of 26px, which greatly exceeds the specified font size
    of 14px. In this case, it's safe to boost font size, since doing so would not affect the line height at all.
    
    To handle this case, don't avoid text autosizing due to the "fixed number of lines" heuristic if the line height
    is fixed, and is much larger than the font size.
    
    Test: fast/text-autosizing/ios/idempotentmode/idempotent-autosizing-candidates.html
    
    * rendering/style/TextSizeAdjustment.cpp:
    (WebCore::AutosizeStatus::updateStatus):
    
    LayoutTests:
    
    Add a new test case, inspired by paragraph text in a post on linkedin.com. This text should get autosized.
    
    * fast/text-autosizing/ios/idempotentmode/idempotent-autosizing-candidates-expected.txt:
    * fast/text-autosizing/ios/idempotentmode/idempotent-autosizing-candidates.html:
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@247484 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-07-16  Wenson Hsieh  <wenson_hsieh@apple.com>

            [Text autosizing] [iPadOS] Paragraph text on the front page of LinkedIn.com is not boosted
            https://bugs.webkit.org/show_bug.cgi?id=199827
            <rdar://problem/53152660>

            Reviewed by Zalan Bujtas.

            Add a new test case, inspired by paragraph text in a post on linkedin.com. This text should get autosized.

            * fast/text-autosizing/ios/idempotentmode/idempotent-autosizing-candidates-expected.txt:
            * fast/text-autosizing/ios/idempotentmode/idempotent-autosizing-candidates.html:

2019-07-17  Kocsen Chung  <kocsen_chung@apple.com>

        Cherry-pick r247474. rdar://problem/53229615

    JSGlobalObject type macros should support feature flags and WeakRef should have one
    https://bugs.webkit.org/show_bug.cgi?id=199601
    
    Reviewed by Mark Lam.
    
    Source/JavaScriptCore:
    
    This patch refactors the various builtin type macros to have a
    parameter, which is the feature flag enabling it.  Since most
    builtin types are enabled by default this patch adds a new global
    bool typeExposedByDefault for clarity. Note, because static hash
    tables have no concept of feature flags we can't use feature flags
    with lazy properties. This is probably not a big deal as features
    that are off by default won't be allocated anywhere we care about
    memory usage anyway.
    
    * runtime/CommonIdentifiers.h:
    * runtime/JSGlobalObject.cpp:
    (JSC::JSGlobalObject::init):
    (JSC::JSGlobalObject::visitChildren):
    * runtime/JSGlobalObject.h:
    (JSC::JSGlobalObject::stringObjectStructure const):
    (JSC::JSGlobalObject::bigIntObjectStructure const): Deleted.
    * runtime/Options.h:
    * wasm/js/JSWebAssembly.cpp:
    
    Tools:
    
    JSC options need to be set before the window is created for the test.
    
    * DumpRenderTree/mac/DumpRenderTree.mm:
    (resetWebViewToConsistentStateBeforeTesting):
    * DumpRenderTree/win/DumpRenderTree.cpp:
    (setJSCOptions):
    (resetWebViewToConsistentStateBeforeTesting):
    
    LayoutTests:
    
    Add JSC option requirements for WeakRef tests.
    
    * js/script-tests/weakref-async-is-collected.js:
    * js/script-tests/weakref-eventually-collects-values.js:
    * js/script-tests/weakref-microtasks-dont-collect.js:
    * js/script-tests/weakref-weakset-consistency.js:
    * js/weakref-async-is-collected.html:
    * js/weakref-eventually-collects-values.html:
    * js/weakref-microtasks-dont-collect.html:
    * js/weakref-weakset-consistency.html:
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@247474 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-07-15  Keith Miller  <keith_miller@apple.com>

            JSGlobalObject type macros should support feature flags and WeakRef should have one
            https://bugs.webkit.org/show_bug.cgi?id=199601

            Reviewed by Mark Lam.

            Add JSC option requirements for WeakRef tests.

            * js/script-tests/weakref-async-is-collected.js:
            * js/script-tests/weakref-eventually-collects-values.js:
            * js/script-tests/weakref-microtasks-dont-collect.js:
            * js/script-tests/weakref-weakset-consistency.js:
            * js/weakref-async-is-collected.html:
            * js/weakref-eventually-collects-values.html:
            * js/weakref-microtasks-dont-collect.html:
            * js/weakref-weakset-consistency.html:

2019-07-17  Kocsen Chung  <kocsen_chung@apple.com>

        Cherry-pick r247467. rdar://problem/53229768

    [Text autosizing] [iPadOS] Product label text is clipped in portrait mode on the front page of sephora.com
    https://bugs.webkit.org/show_bug.cgi?id=199806
    <rdar://problem/52902482>
    
    Reviewed by Zalan Bujtas.
    
    Source/WebCore:
    
    On sephora.com, some product label text is currently boosted by idempotent text autosizing, which causes the
    labels be vertically clipped. This patch augments the idempotent text autosizing heuristic to avoid this case by
    checking if the element to be boosted has a fixed height or max height, whose value is very close to a small
    integer multiple of the line height. In this case, it's likely that the website expects the text to be no more
    than a few lines' worth of height, so boosting the text is likely to break the page.
    
    Test: fast/text-autosizing/ios/idempotentmode/idempotent-autosizing-candidates.html
    
    * rendering/style/RenderStyle.cpp:
    (WebCore::RenderStyle::isIdempotentTextAutosizingCandidate const):
    * rendering/style/TextSizeAdjustment.cpp:
    (WebCore::AutosizeStatus::updateStatus):
    * rendering/style/TextSizeAdjustment.h:
    
    Rename Fields::DisplayNone to Fields::AvoidSubtree to avoid introducing another bit in RenderStyle's inherited
    flags.
    
    LayoutTests:
    
    Add a new test case to an existing layout test, which mimics the product label text on sephora.com's front page.
    
    * fast/text-autosizing/ios/idempotentmode/idempotent-autosizing-candidates-expected.txt:
    * fast/text-autosizing/ios/idempotentmode/idempotent-autosizing-candidates.html:
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@247467 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-07-15  Wenson Hsieh  <wenson_hsieh@apple.com>

            [Text autosizing] [iPadOS] Product label text is clipped in portrait mode on the front page of sephora.com
            https://bugs.webkit.org/show_bug.cgi?id=199806
            <rdar://problem/52902482>

            Reviewed by Zalan Bujtas.

            Add a new test case to an existing layout test, which mimics the product label text on sephora.com's front page.

            * fast/text-autosizing/ios/idempotentmode/idempotent-autosizing-candidates-expected.txt:
            * fast/text-autosizing/ios/idempotentmode/idempotent-autosizing-candidates.html:

2019-07-17  Kocsen Chung  <kocsen_chung@apple.com>

        Cherry-pick r247377. rdar://problem/53229731

    New York font erroneously gets synthetic bold
    https://bugs.webkit.org/show_bug.cgi?id=199653
    <rdar://problem/51692592>
    
    Reviewed by Simon Fraser.
    
    Source/WebCore:
    
    This patch adds support for -apple-system-ui-serif, -apple-system-ui-monospaced,
    and -apple-system-ui-rounded, behind an SPI that is off-by-default. We don't want
    to expose these fonts to the web because we don't a standardization story for them
    yet, but we do want some apps to be able to use them.
    
    WebKit clients who want to use these fonts can set
    -[WKPreferences _shouldAllowDesignSystemUIFonts] = YES.
    
    The patch generalizes our existing system-ui infrastructure to handle these three
    additional fonts. It also explicitly disables the unsupported dot-prefixed names
    so they don't leak out into Web content.
    
    Tests: fast/text/design-system-ui-10.html
           fast/text/design-system-ui-11.html
           fast/text/design-system-ui-12.html
           fast/text/design-system-ui-13.html
           fast/text/design-system-ui-14.html
           fast/text/design-system-ui-15.html
           fast/text/design-system-ui-16.html
           fast/text/design-system-ui-2.html
           fast/text/design-system-ui-3.html
           fast/text/design-system-ui-4.html
           fast/text/design-system-ui-5.html
           fast/text/design-system-ui-6.html
           fast/text/design-system-ui-7.html
           fast/text/design-system-ui-8.html
           fast/text/design-system-ui-9.html
           fast/text/design-system-ui.html
    
    * css/CSSFontFace.cpp:
    (WebCore::CSSFontFace::shouldAllowDesignSystemUIFonts const):
    * css/CSSFontFace.h:
    * css/CSSFontFaceSource.cpp:
    (WebCore::CSSFontFaceSource::load):
    * css/StyleResolver.cpp:
    (WebCore::StyleResolver::initializeFontStyle):
    * page/Settings.yaml:
    * platform/graphics/FontDescription.cpp:
    (WebCore::m_shouldAllowDesignSystemUIFonts):
    (WebCore::m_shouldAllowUserInstalledFonts): Deleted.
    * platform/graphics/FontDescription.h:
    (WebCore::FontDescription::shouldAllowDesignSystemUIFonts const):
    (WebCore::FontDescription::setShouldAllowDesignSystemUIFonts):
    (WebCore::FontDescription::operator== const):
    * platform/graphics/cocoa/FontCacheCoreText.cpp:
    (WebCore::platformFontLookupWithFamily):
    (WebCore::fontWithFamily):
    * platform/graphics/cocoa/FontCacheCoreText.h:
    * platform/graphics/cocoa/FontDescriptionCocoa.cpp:
    (WebCore::systemFontUse):
    (WebCore::systemFontCascadeList):
    (WebCore::FontCascadeDescription::effectiveFamilyCount const):
    (WebCore::FontCascadeDescription::effectiveFamilyAt const):
    (WebCore::isSystemFontString): Deleted.
    (WebCore::isUIFontTextStyle): Deleted.
    * platform/graphics/cocoa/FontPlatformDataCocoa.mm:
    (WebCore::FontPlatformData::ctFont const):
    * platform/graphics/cocoa/SystemFontDatabaseCoreText.cpp:
    (WebCore::SystemFontDatabaseCoreText::createSystemUI):
    (WebCore::SystemFontDatabaseCoreText::createDesignSystemUI):
    (WebCore::SystemFontDatabaseCoreText::createTextStyle):
    (WebCore::SystemFontDatabaseCoreText::cascadeList):
    (WebCore::SystemFontDatabaseCoreText::applyWeightItalicsAndFallbackBehavior):
    (WebCore::SystemFontDatabaseCoreText::systemFontParameters):
    * platform/graphics/cocoa/SystemFontDatabaseCoreText.h:
    * platform/graphics/ios/FontCacheIOS.mm:
    (WebCore::platformFontWithFamilySpecialCase):
    * platform/graphics/mac/FontCacheMac.mm:
    (WebCore::platformFontWithFamilySpecialCase):
    * style/StyleResolveForDocument.cpp:
    (WebCore::Style::resolveForDocument):
    * svg/graphics/SVGImage.cpp:
    (WebCore::SVGImage::dataChanged):
    * testing/InternalSettings.cpp:
    (WebCore::InternalSettings::Backup::Backup):
    (WebCore::InternalSettings::Backup::restoreTo):
    (WebCore::InternalSettings::setShouldAllowDesignSystemUIFonts):
    * testing/InternalSettings.h:
    * testing/InternalSettings.idl:
    
    Source/WebCore/PAL:
    
    * pal/spi/cocoa/CoreTextSPI.h:
    
    Source/WebKit:
    
    Add the SPI to enable the new fonts.
    
    * Shared/WebPreferences.yaml:
    * UIProcess/API/C/WKPreferences.cpp:
    (WKPreferencesSetShouldAllowDesignSystemUIFonts):
    (WKPreferencesGetShouldAllowDesignSystemUIFonts):
    * UIProcess/API/C/WKPreferencesRefPrivate.h:
    * UIProcess/API/Cocoa/WKPreferences.mm:
    (-[WKPreferences _shouldAllowDesignSystemUIFonts]):
    (-[WKPreferences _setShouldAllowDesignSystemUIFonts:]):
    * UIProcess/API/Cocoa/WKPreferencesPrivate.h:
    
    Source/WTF:
    
    * wtf/Platform.h:
    
    LayoutTests:
    
    * TestExpectations:
    * fast/text/design-system-ui-10-expected-mismatch.html: Added.
    * fast/text/design-system-ui-10.html: Added.
    * fast/text/design-system-ui-11-expected-mismatch.html: Added.
    * fast/text/design-system-ui-11.html: Added.
    * fast/text/design-system-ui-12-expected-mismatch.html: Added.
    * fast/text/design-system-ui-12.html: Added.
    * fast/text/design-system-ui-13-expected-mismatch.html: Added.
    * fast/text/design-system-ui-13.html: Added.
    * fast/text/design-system-ui-14-expected-mismatch.html: Added.
    * fast/text/design-system-ui-14.html: Added.
    * fast/text/design-system-ui-15-expected-mismatch.html: Added.
    * fast/text/design-system-ui-15.html: Added.
    * fast/text/design-system-ui-16-expected-mismatch.html: Added.
    * fast/text/design-system-ui-16.html: Added.
    * fast/text/design-system-ui-2-expected.html: Added.
    * fast/text/design-system-ui-2.html: Added.
    * fast/text/design-system-ui-3-expected-mismatch.html: Added.
    * fast/text/design-system-ui-3.html: Added.
    * fast/text/design-system-ui-4-expected-mismatch.html: Added.
    * fast/text/design-system-ui-4.html: Added.
    * fast/text/design-system-ui-5-expected-mismatch.html: Added.
    * fast/text/design-system-ui-5.html: Added.
    * fast/text/design-system-ui-6-expected.html: Added.
    * fast/text/design-system-ui-6.html: Added.
    * fast/text/design-system-ui-7-expected.html: Added.
    * fast/text/design-system-ui-7.html: Added.
    * fast/text/design-system-ui-8-expected-mismatch.html: Added.
    * fast/text/design-system-ui-8.html: Added.
    * fast/text/design-system-ui-9-expected-mismatch.html: Added.
    * fast/text/design-system-ui-9.html: Added.
    * fast/text/design-system-ui-expected.html: Added.
    * fast/text/design-system-ui.html: Added.
    * platform/mac/TestExpectations:
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@247377 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-07-11  Myles C. Maxfield  <mmaxfield@apple.com>

            New York font erroneously gets synthetic bold
            https://bugs.webkit.org/show_bug.cgi?id=199653
            <rdar://problem/51692592>

            Reviewed by Simon Fraser.

            * TestExpectations:
            * fast/text/design-system-ui-10-expected-mismatch.html: Added.
            * fast/text/design-system-ui-10.html: Added.
            * fast/text/design-system-ui-11-expected-mismatch.html: Added.
            * fast/text/design-system-ui-11.html: Added.
            * fast/text/design-system-ui-12-expected-mismatch.html: Added.
            * fast/text/design-system-ui-12.html: Added.
            * fast/text/design-system-ui-13-expected-mismatch.html: Added.
            * fast/text/design-system-ui-13.html: Added.
            * fast/text/design-system-ui-14-expected-mismatch.html: Added.
            * fast/text/design-system-ui-14.html: Added.
            * fast/text/design-system-ui-15-expected-mismatch.html: Added.
            * fast/text/design-system-ui-15.html: Added.
            * fast/text/design-system-ui-16-expected-mismatch.html: Added.
            * fast/text/design-system-ui-16.html: Added.
            * fast/text/design-system-ui-2-expected.html: Added.
            * fast/text/design-system-ui-2.html: Added.
            * fast/text/design-system-ui-3-expected-mismatch.html: Added.
            * fast/text/design-system-ui-3.html: Added.
            * fast/text/design-system-ui-4-expected-mismatch.html: Added.
            * fast/text/design-system-ui-4.html: Added.
            * fast/text/design-system-ui-5-expected-mismatch.html: Added.
            * fast/text/design-system-ui-5.html: Added.
            * fast/text/design-system-ui-6-expected.html: Added.
            * fast/text/design-system-ui-6.html: Added.
            * fast/text/design-system-ui-7-expected.html: Added.
            * fast/text/design-system-ui-7.html: Added.
            * fast/text/design-system-ui-8-expected-mismatch.html: Added.
            * fast/text/design-system-ui-8.html: Added.
            * fast/text/design-system-ui-9-expected-mismatch.html: Added.
            * fast/text/design-system-ui-9.html: Added.
            * fast/text/design-system-ui-expected.html: Added.
            * fast/text/design-system-ui.html: Added.
            * platform/mac/TestExpectations:

2019-07-15  Alan Coon  <alancoon@apple.com>

        Revert r247377. rdar://problem/53125241

2019-07-15  Alan Coon  <alancoon@apple.com>

        Revert r247366. rdar://problem/53118665

2019-07-15  Youenn Fablet  <youenn@apple.com>

        Filter SDP c lines
        https://bugs.webkit.org/show_bug.cgi?id=199791

        Reviewed by Eric Carlson.

        * webrtc/datachannel/filter-ice-candidate.html:

2019-07-14  Dean Jackson  <dino@apple.com>

        WebGL not supported on WKWebView on UIKit for Mac
        https://bugs.webkit.org/show_bug.cgi?id=199785
        <rdar://problem/52911449>

        Reviewed by Antoine Quint.

        Even though we don't yet run tests on UIKit for Mac, we
        should have the most simple "is WebGL working?" ref test.

        * webgl/smell-test-expected.html: Added.
        * webgl/smell-test.html: Added.

2019-07-13  Wenson Hsieh  <wenson_hsieh@apple.com>

        [Text autosizing] [iPadOS] Further adjust our heuristics to determine text autosizing candidates
        https://bugs.webkit.org/show_bug.cgi?id=199780
        <rdar://problem/52289088>

        Reviewed by Simon Fraser.

        Rebaseline an existing idempotent text autosizing test, and add an additional test case.

        * fast/text-autosizing/ios/idempotentmode/idempotent-autosizing-candidates-expected.txt:
        * fast/text-autosizing/ios/idempotentmode/idempotent-autosizing-candidates.html:

2019-07-13  Simon Fraser  <simon.fraser@apple.com>

        Don't do async overflow scrolling for visibility:hidden scrollers
        https://bugs.webkit.org/show_bug.cgi?id=199779

        Reviewed by Dean Jackson.

        * compositing/scrolling/async-overflow-scrolling/visibility-hidden-scrollers-expected.txt: Added.
        * compositing/scrolling/async-overflow-scrolling/visibility-hidden-scrollers.html: Added.
        * platform/ios-wk2/compositing/scrolling/async-overflow-scrolling/visibility-hidden-scrollers-expected.txt: Added.

2019-07-13  Zalan Bujtas  <zalan@apple.com>

        Cannot bring up custom media controls at all on v.youku.com
        https://bugs.webkit.org/show_bug.cgi?id=199699
        <rdar://problem/51835327>

        Reviewed by Simon Fraser.

        * fast/events/touch/ios/visibility-hidden-iframe-click-expected.txt: Added.
        * fast/events/touch/ios/visibility-hidden-iframe-click.html: Added.
        * fast/events/touch/ios/visibility-hidden-nested-iframe-click-expected.txt: Added.
        * fast/events/touch/ios/visibility-hidden-nested-iframe-click.html: Added.

2019-07-12  Youenn Fablet  <youenn@apple.com>

        Stopping a cloned MediaStream video track should not stop any other video track
        https://bugs.webkit.org/show_bug.cgi?id=199635

        Reviewed by Eric Carlson.

        * fast/mediastream/mediastreamtrack-video-clone-expected.txt:
        * fast/mediastream/mediastreamtrack-video-clone.html:

2019-07-12  Timothy Hatcher  <timothy@apple.com>

        Drop DarkModeCSSEnabled as an experimental feature and always enable it.
        https://bugs.webkit.org/show_bug.cgi?id=199725
        rdar://problem/52970972

        Reviewed by Megan Gardner.

        Removed <!-- webkit-test-runner [ experimental:DarkModeCSSEnabled=true ] -->
        from all dark mode tests.

        * css-dark-mode/color-scheme-css-parse.html:
        * css-dark-mode/color-scheme-css.html:
        * css-dark-mode/color-scheme-meta.html:
        * css-dark-mode/color-scheme-priority.html:
        * css-dark-mode/color-scheme-scrollbar.html:
        * css-dark-mode/default-colors.html:
        * css-dark-mode/older-syntax/supported-color-schemes-css.html:
        * css-dark-mode/older-syntax/supported-color-schemes-meta.html:
        * css-dark-mode/older-systems/color-scheme-css.html:
        * css-dark-mode/older-systems/color-scheme-meta.html:
        * css-dark-mode/older-systems/prefers-color-scheme.html:
        * css-dark-mode/prefers-color-scheme-picture-element.html:
        * css-dark-mode/prefers-color-scheme.html:

2019-07-11  Myles C. Maxfield  <mmaxfield@apple.com>

        New York font erroneously gets synthetic bold
        https://bugs.webkit.org/show_bug.cgi?id=199653
        <rdar://problem/51692592>

        Reviewed by Simon Fraser.

        * TestExpectations:
        * fast/text/design-system-ui-10-expected-mismatch.html: Added.
        * fast/text/design-system-ui-10.html: Added.
        * fast/text/design-system-ui-11-expected-mismatch.html: Added.
        * fast/text/design-system-ui-11.html: Added.
        * fast/text/design-system-ui-12-expected-mismatch.html: Added.
        * fast/text/design-system-ui-12.html: Added.
        * fast/text/design-system-ui-13-expected-mismatch.html: Added.
        * fast/text/design-system-ui-13.html: Added.
        * fast/text/design-system-ui-14-expected-mismatch.html: Added.
        * fast/text/design-system-ui-14.html: Added.
        * fast/text/design-system-ui-15-expected-mismatch.html: Added.
        * fast/text/design-system-ui-15.html: Added.
        * fast/text/design-system-ui-16-expected-mismatch.html: Added.
        * fast/text/design-system-ui-16.html: Added.
        * fast/text/design-system-ui-2-expected.html: Added.
        * fast/text/design-system-ui-2.html: Added.
        * fast/text/design-system-ui-3-expected-mismatch.html: Added.
        * fast/text/design-system-ui-3.html: Added.
        * fast/text/design-system-ui-4-expected-mismatch.html: Added.
        * fast/text/design-system-ui-4.html: Added.
        * fast/text/design-system-ui-5-expected-mismatch.html: Added.
        * fast/text/design-system-ui-5.html: Added.
        * fast/text/design-system-ui-6-expected.html: Added.
        * fast/text/design-system-ui-6.html: Added.
        * fast/text/design-system-ui-7-expected.html: Added.
        * fast/text/design-system-ui-7.html: Added.
        * fast/text/design-system-ui-8-expected-mismatch.html: Added.
        * fast/text/design-system-ui-8.html: Added.
        * fast/text/design-system-ui-9-expected-mismatch.html: Added.
        * fast/text/design-system-ui-9.html: Added.
        * fast/text/design-system-ui-expected.html: Added.
        * fast/text/design-system-ui.html: Added.
        * platform/mac/TestExpectations:

2019-07-11  Carlos Alberto Lopez Perez  <clopez@igalia.com>

        [GTK][WPE] Rebaseline css3/blending tests with an empty homedir.

        It seems this tests are sensible to some configuration of some
        library as they produce different output (the layers with more left
        margin) depending on that. The test pass on both cases, but the
        check with the expected result fails, so it is flagged as failing.

        This rebaselines the results to those that happen when running with
        an empty/temporal homedir on Debian 10 to match what happens on the
        bots. For more info see bugs 169916 and 199738.

        Unreviewed gardening commit.

        * platform/gtk/css3/blending/svg-blend-layer-blend-expected.png:
        * platform/gtk/css3/blending/svg-blend-layer-blend-expected.txt:
        * platform/gtk/css3/blending/svg-blend-layer-clip-path-expected.png:
        * platform/gtk/css3/blending/svg-blend-layer-clip-path-expected.txt:
        * platform/gtk/css3/blending/svg-blend-layer-filter-expected.png:
        * platform/gtk/css3/blending/svg-blend-layer-filter-expected.txt:
        * platform/gtk/css3/blending/svg-blend-layer-mask-expected.png:
        * platform/gtk/css3/blending/svg-blend-layer-mask-expected.txt:
        * platform/gtk/css3/blending/svg-blend-layer-opacity-expected.png:
        * platform/gtk/css3/blending/svg-blend-layer-opacity-expected.txt:
        * platform/wpe/TestExpectations: css3/blending/svg-isolation-isolated-group.html passes with an empty homedir.
        * platform/wpe/css3/blending/svg-blend-layer-blend-expected.png:
        * platform/wpe/css3/blending/svg-blend-layer-blend-expected.txt:
        * platform/wpe/css3/blending/svg-blend-layer-clip-path-expected.png:
        * platform/wpe/css3/blending/svg-blend-layer-clip-path-expected.txt:
        * platform/wpe/css3/blending/svg-blend-layer-filter-expected.png:
        * platform/wpe/css3/blending/svg-blend-layer-filter-expected.txt:
        * platform/wpe/css3/blending/svg-blend-layer-mask-expected.png:
        * platform/wpe/css3/blending/svg-blend-layer-mask-expected.txt:
        * platform/wpe/css3/blending/svg-blend-layer-opacity-expected.png:
        * platform/wpe/css3/blending/svg-blend-layer-opacity-expected.txt:

2019-07-11  Chris Dumez  <cdumez@apple.com>

        [iOS] fast/events/ios/rotation/orientationchange-event-listener-on.body.html is flaky
        https://bugs.webkit.org/show_bug.cgi?id=199732
        <rdar://problem/52693087>

        Reviewed by Alex Christensen.

        Stop logging in each event listener to not be reliant on the order in which listener are called.
        Instead, simply make sure all event listeners that should be called were actually called.

        * fast/events/ios/rotation/orientationchange-event-listener-on.body-expected.txt:
        * fast/events/ios/rotation/orientationchange-event-listener-on.body.html:

2019-07-11  Ryosuke Niwa  <rniwa@webkit.org>

        Make the test added in r247327 more reliable.

        * editing/selection/ios/autoscroll-with-top-content-inset-2.html:

2019-07-11  Russell Epstein  <russell_e@apple.com>

        Layout Test fast/viewport/ios/viewport-shrink-to-fit-on-new-navigation.html is Failing Consistently on iOS-WK2.
        https://bugs.webkit.org/show_bug.cgi?id=199731

        Unreviewed Test Gardening

        * platform/ios-wk2/TestExpectations:

2019-07-11  Justin Fan  <justin_fan@apple.com>

        [WebGPU] Implement GPUError and error scopes
        https://bugs.webkit.org/show_bug.cgi?id=199655

        Reviewed by Myles C. Maxfield.

        Add a test to cover the cases outlined in the WebGPU error handling design doc.

        * webgpu/error-scopes-test-expected.txt: Added.
        * webgpu/error-scopes-test.html: Added.

2019-07-11  Commit Queue  <commit-queue@webkit.org>

        Unreviewed, rolling out r247314.
        https://bugs.webkit.org/show_bug.cgi?id=199721

        Caused performance regression. (Requested by deanj on
        #webkit).

        Reverted changeset:

        "Disable speculative loading if cache is not to be used for
        the load"
        https://bugs.webkit.org/show_bug.cgi?id=199644
        https://trac.webkit.org/changeset/247314

2019-07-11  Simon Fraser  <simon.fraser@apple.com>

        [iOS WK2] Can't place caret or select in content that overflows a contenteditable element
        https://bugs.webkit.org/show_bug.cgi?id=199741
        rdar://problem/50545233

        Reviewed by Wenson Hsieh.
        
        Re-enable editing/caret/ios, fixing the result of emoji.html which for some reason was
        checked in as an html file (the test still fails).

        * editing/caret/ios/caret-in-overflow-area-expected.txt: Added.
        * editing/caret/ios/caret-in-overflow-area.html: Added.
        * editing/caret/ios/emoji-expected.txt: Renamed from LayoutTests/editing/caret/ios/emoji-expected.html.
        * editing/caret/ios/fixed-caret-position-after-scroll-expected.txt:
        * editing/caret/ios/fixed-caret-position-after-scroll.html:
        * editing/selection/ios/place-selection-in-overflow-area-expected.txt: Added.
        * editing/selection/ios/place-selection-in-overflow-area.html: Added.
        * editing/selection/ios/selection-extends-into-overflow-area-expected.txt: Added.
        * editing/selection/ios/selection-extends-into-overflow-area.html: Added.
        * platform/ios-wk2/TestExpectations:

2019-07-11  Ryan Haddad  <ryanhaddad@apple.com>

        Add test expectations and baselines for iOS 13
        https://bugs.webkit.org/show_bug.cgi?id=199329

        Reviewed by Jonathan Bedard.

        * platform/ios-12/*: Move iOS 12 specific baselines to their own directory.
        * platform/ios/*: Add iOS 13 baselines and test expectations.

2019-07-11  Miguel Gomez  <magomez@igalia.com>

        Unreviewed GTK+ gardening. Update expectations after r247346.

        * platform/gtk/TestExpectations:

2019-07-11  Joanmarie Diggs  <jdiggs@igalia.com>

        AX: Implement support for ARIA roles insertion, deletion, subscript, superscript, and time
        https://bugs.webkit.org/show_bug.cgi?id=199692

        Reviewed by Chris Fleizach.

        Add the new roles to the existing role-exposure tests and update expectations accordingly.

        * accessibility/gtk/object-attributes-expected.txt:
        * accessibility/gtk/object-attributes.html:
        * accessibility/gtk/xml-roles-exposed-expected.txt:
        * accessibility/gtk/xml-roles-exposed.html:
        * accessibility/roles-computedRoleString.html:
        * accessibility/roles-exposed.html:
        * platform/gtk/accessibility/roles-computedRoleString-expected.txt:
        * platform/gtk/accessibility/roles-exposed-expected.txt:
        * platform/mac-wk2/accessibility/roles-exposed-expected.txt:
        * platform/mac/accessibility/roles-computedRoleString-expected.txt:
        * platform/mac/accessibility/roles-exposed-expected.txt:
        * platform/wpe/accessibility/roles-computedRoleString-expected.txt:
        * platform/wpe/accessibility/roles-exposed-expected.txt:

2019-07-10  Saam Barati  <sbarati@apple.com>

        [WHLSL] Import all tests that pass without compiler changes from the JS reference test suite
        https://bugs.webkit.org/show_bug.cgi?id=199595

        Rubber stamped by Robin Morisset.

        * webgpu/whlsl-argument-evaluation-order-expected.txt: Added.
        * webgpu/whlsl-argument-evaluation-order.html: Added.
        * webgpu/whlsl-array-length-spec-tests-expected.txt: Added.
        * webgpu/whlsl-array-length-spec-tests.html: Added.
        * webgpu/whlsl-array-spec-tests-expected.txt:
        * webgpu/whlsl-array-spec-tests.html:
        * webgpu/whlsl-bad-add-expected.txt: Added.
        * webgpu/whlsl-bad-add.html: Added.
        * webgpu/whlsl-bools-expected.txt: Added.
        * webgpu/whlsl-bools.html: Added.
        * webgpu/whlsl-casts-expected.txt: Added.
        * webgpu/whlsl-casts.html: Added.
        * webgpu/whlsl-comment-parsing-expected.txt: Added.
        * webgpu/whlsl-comment-parsing.html: Added.
        * webgpu/whlsl-copy-expected.txt: Added.
        * webgpu/whlsl-copy.html: Added.
        * webgpu/whlsl-dereference-ordering-expected.txt: Added.
        * webgpu/whlsl-dereference-ordering.html: Added.
        * webgpu/whlsl-double-not-expected.txt: Added.
        * webgpu/whlsl-double-not.html: Added.
        * webgpu/whlsl-duplicates-expected.txt: Added.
        * webgpu/whlsl-duplicates.html: Added.
        * webgpu/whlsl-increment-decrement-expected.txt: Added.
        * webgpu/whlsl-increment-decrement.html: Added.
        * webgpu/whlsl-index-ander-expected.txt: Added.
        * webgpu/whlsl-index-ander.html: Added.
        * webgpu/whlsl-index-setter-getter-expected.txt: Added.
        * webgpu/whlsl-index-setter-getter.html: Added.
        * webgpu/whlsl-logical-negation-expected.txt: Added.
        * webgpu/whlsl-logical-negation.html: Added.
        * webgpu/whlsl-lots-of-local-variables-expected.txt: Added.
        * webgpu/whlsl-lots-of-local-variables.html: Added.
        * webgpu/whlsl-lvalues-expected.txt: Added.
        * webgpu/whlsl-lvalues.html: Added.
        * webgpu/whlsl-null-arg-expected.txt: Added.
        * webgpu/whlsl-null-arg.html: Added.
        * webgpu/whlsl-operator-overload-expected.txt: Added.
        * webgpu/whlsl-operator-overload.html: Added.
        * webgpu/whlsl-overload-expected.txt: Added.
        * webgpu/whlsl-overload.html: Added.
        * webgpu/whlsl-setter-spec-tests-expected.txt: Added.
        * webgpu/whlsl-setter-spec-tests.html: Added.
        * webgpu/whlsl-store-null-expected.txt: Added.
        * webgpu/whlsl-store-null.html: Added.
        * webgpu/whlsl-struct-expected.txt: Added.
        * webgpu/whlsl-struct.html: Added.
        * webgpu/whlsl-switch-expected.txt: Added.
        * webgpu/whlsl-switch.html: Added.
        * webgpu/whlsl-variable-shadowing-expected.txt: Added.
        * webgpu/whlsl-variable-shadowing.html: Added.
        * webgpu/whlsl-vector-syntax-expected.txt: Added.
        * webgpu/whlsl-vector-syntax.html: Added.

2019-07-10  Truitt Savell  <tsavell@apple.com>

        Marking webgpu/whlsl-builtin-vectors-2.html as Slow after https://trac.webkit.org/changeset/247319/webkit
        https://bugs.webkit.org/show_bug.cgi?id=199651

        Unreviewed test gardening.

        * platform/mac-wk2/TestExpectations:

2019-07-10  Chris Fleizach  <cfleizach@apple.com>

        AX: VoiceOver ignored role="presentation" on <table> HTML elements
        https://bugs.webkit.org/show_bug.cgi?id=199659

        Reviewed by Zalan Bujtas.

        * accessibility/ios-simulator/tables-lists-expected.txt:
        * accessibility/ios-simulator/tables-lists.html:

2019-07-10  Ryosuke Niwa  <rniwa@webkit.org>

        [iOS] REGRESSION(r244851): Revealing caret sometimes fails when content inset is used
        https://bugs.webkit.org/show_bug.cgi?id=199662

        Reviewed by Simon Fraser.

        Added a regression test.

        * editing/selection/ios/autoscroll-with-top-content-inset-2-expected.txt: Added.
        * editing/selection/ios/autoscroll-with-top-content-inset-2.html: Added.

2019-07-10  Saam Barati  <sbarati@apple.com>

        [WHLSL Import more JS reference spec tests
        https://bugs.webkit.org/show_bug.cgi?id=199651

        Rubber stamped by Robin Morisset.

        * webgpu/whlsl-builtin-vectors-2-expected.txt: Added.
        * webgpu/whlsl-builtin-vectors-2.html: Added.
        * webgpu/whlsl-builtin-vectors-expected.txt: Added.
        * webgpu/whlsl-builtin-vectors.html: Added.
        * webgpu/whlsl-getter-setter-type-expected.txt: Added.
        * webgpu/whlsl-getter-setter-type.html: Added.
        * webgpu/whlsl-loops-spec-tests-expected.txt: Added.
        * webgpu/whlsl-loops-spec-tests.html: Added.
        * webgpu/whlsl-null-array-ref.html: Added.
        * webgpu/whlsl-override-subscript-expected.txt: Added.
        * webgpu/whlsl-override-subscript.html: Added.
        * webgpu/whlsl-plus-equals-expected.txt: Added.
        * webgpu/whlsl-plus-equals.html: Added.
        * webgpu/whlsl-recursive-structs-expected.txt: Added.
        * webgpu/whlsl-recursive-structs.html: Added.
        * webgpu/whlsl-ternary-spec-test-expected.txt: Added.
        * webgpu/whlsl-ternary-spec-test.html: Added.
        * webgpu/whlsl-wrong-argument-length-expected.txt: Added.
        * webgpu/whlsl-wrong-argument-length.html: Added.
        * webgpu/whlsl-wrong-types-expected.txt: Added.
        * webgpu/whlsl-wrong-types.html: Added.

2019-07-10  Commit Queue  <commit-queue@webkit.org>

        Unreviewed, rolling out r247223.
        https://bugs.webkit.org/show_bug.cgi?id=199679

        Caused perf regression. (Requested by deanj on #webkit).

        Reverted changeset:

        "[iPadOS] Viewport pops while loading sohu.com, xinhuanet.com,
        and various other websites"
        https://bugs.webkit.org/show_bug.cgi?id=199575
        https://trac.webkit.org/changeset/247223

2019-07-10  Youenn Fablet  <youenn@apple.com>

        Disable speculative loading if cache is not to be used for the load
        https://bugs.webkit.org/show_bug.cgi?id=199644

        Reviewed by Chris Dumez.

        * http/wpt/fetch/disable-speculative-for-reload-expected.txt: Added.
        * http/wpt/fetch/disable-speculative-for-reload.html: Added.
        * http/wpt/fetch/resources/iframe-with-image.py: Added.
        (main):
        * http/wpt/fetch/resources/image-load-count.py: Added.
        (main):
        * http/wpt/fetch/resources/image-load.py: Added.
        (main):

2019-07-10  Youenn Fablet  <youenn@apple.com>

        openDatabase property should not be enumerable on DOMWindow
        https://bugs.webkit.org/show_bug.cgi?id=199672
        <rdar://problem/52809000>

        Reviewed by Chris Dumez.

        * storage/websql/openDatabase-deprecation-expected.txt: Added.
        * storage/websql/openDatabase-deprecation.html: Added.

2019-07-10  Carlos Alberto Lopez Perez  <clopez@igalia.com>

        [GTK][WPE] Enable support for CSS_COMPOSITING
        https://bugs.webkit.org/show_bug.cgi?id=199513

        Reviewed by Michael Catanzaro.

        Rebaseline the tests that pass after enabling CSS_COMPOSITING.
        The feature works is most of the cases, but there are still some tests/cases not working.

        There are also some new failures marked related to SVG blending (css3/blending/svg*), but those were already failing before.
        So its unrelated to this change.

        * platform/gtk/TestExpectations:
        * platform/gtk/css3/blending/background-blend-mode-default-value-expected.png:
        * platform/gtk/css3/blending/background-blend-mode-different-image-formats-expected.png:
        * platform/gtk/css3/blending/background-blend-mode-image-color-expected.png:
        * platform/gtk/css3/blending/background-blend-mode-image-image-expected.png:
        * platform/gtk/css3/blending/background-blend-mode-single-layer-no-blending-expected.png:
        * platform/gtk/css3/blending/blend-mode-background-expected.png:
        * platform/gtk/css3/blending/blend-mode-background-expected.txt:
        * platform/gtk/css3/blending/blend-mode-isolation-flags-append-non-stacking-context-blending-expected.png: Added.
        * platform/gtk/css3/blending/blend-mode-isolation-flags-append-non-stacking-context-blending-expected.txt: Added.
        * platform/gtk/css3/blending/blend-mode-isolation-flags-append-stacking-context-blending-expected.png: Added.
        * platform/gtk/css3/blending/blend-mode-isolation-flags-append-stacking-context-blending-expected.txt: Added.
        * platform/gtk/css3/blending/blend-mode-isolation-flags-turn-off-blending-expected.png: Added.
        * platform/gtk/css3/blending/blend-mode-isolation-flags-turn-off-blending-expected.txt: Added.
        * platform/gtk/css3/blending/blend-mode-isolation-flags-turn-off-blending-no-isolation-expected.png: Added.
        * platform/gtk/css3/blending/blend-mode-isolation-flags-turn-off-blending-no-isolation-expected.txt: Added.
        * platform/gtk/css3/blending/blend-mode-isolation-flags-turn-off-stacking-context-expected.png: Added.
        * platform/gtk/css3/blending/blend-mode-isolation-flags-turn-off-stacking-context-expected.txt: Added.
        * platform/gtk/css3/blending/blend-mode-isolation-flags-turn-on-blending-expected.png: Added.
        * platform/gtk/css3/blending/blend-mode-isolation-flags-turn-on-blending-expected.txt: Added.
        * platform/gtk/css3/blending/blend-mode-isolation-flags-turn-on-stacking-context-expected.png: Added.
        * platform/gtk/css3/blending/blend-mode-isolation-flags-turn-on-stacking-context-expected.txt: Added.
        * platform/gtk/css3/blending/blend-mode-overflow-expected.png: Added.
        * platform/gtk/css3/blending/blend-mode-overflow-expected.txt: Added.
        * platform/gtk/css3/blending/blend-mode-simple-expected.png: Added.
        * platform/gtk/css3/blending/blend-mode-simple-expected.txt: Added.
        * platform/gtk/css3/blending/repaint/blend-mode-turn-off-isolation-no-effect-expected.txt: Added.
        * platform/gtk/css3/blending/svg-blend-layer-blend-expected.png:
        * platform/gtk/css3/blending/svg-blend-layer-blend-expected.txt:
        * platform/gtk/css3/blending/svg-blend-layer-clip-path-expected.png: Added.
        * platform/gtk/css3/blending/svg-blend-layer-clip-path-expected.txt: Added.
        * platform/gtk/css3/blending/svg-blend-layer-filter-expected.png:
        * platform/gtk/css3/blending/svg-blend-layer-filter-expected.txt:
        * platform/gtk/css3/blending/svg-blend-layer-mask-expected.png:
        * platform/gtk/css3/blending/svg-blend-layer-mask-expected.txt:
        * platform/gtk/css3/blending/svg-blend-layer-opacity-expected.png:
        * platform/gtk/css3/blending/svg-blend-layer-opacity-expected.txt:
        * platform/wpe/TestExpectations:
        * platform/wpe/css3/blending/background-blend-mode-default-value-expected.png: Added.
        * platform/wpe/css3/blending/background-blend-mode-default-value-expected.txt: Added.
        * platform/wpe/css3/blending/background-blend-mode-different-image-formats-expected.png: Added.
        * platform/wpe/css3/blending/background-blend-mode-different-image-formats-expected.txt: Added.
        * platform/wpe/css3/blending/background-blend-mode-gif-color-2-expected.png: Added.
        * platform/wpe/css3/blending/background-blend-mode-gif-color-2-expected.txt: Added.
        * platform/wpe/css3/blending/background-blend-mode-gif-color-expected.png: Added.
        * platform/wpe/css3/blending/background-blend-mode-gif-color-expected.txt: Added.
        * platform/wpe/css3/blending/background-blend-mode-image-color-expected.png: Added.
        * platform/wpe/css3/blending/background-blend-mode-image-color-expected.txt: Added.
        * platform/wpe/css3/blending/background-blend-mode-image-image-expected.png: Added.
        * platform/wpe/css3/blending/background-blend-mode-image-image-expected.txt: Added.
        * platform/wpe/css3/blending/background-blend-mode-single-layer-no-blending-expected.png: Added.
        * platform/wpe/css3/blending/background-blend-mode-single-layer-no-blending-expected.txt: Added.
        * platform/wpe/css3/blending/blend-mode-background-expected.png: Added.
        * platform/wpe/css3/blending/blend-mode-background-expected.txt: Copied from LayoutTests/platform/gtk/css3/blending/blend-mode-background-expected.txt.
        * platform/wpe/css3/blending/blend-mode-isolation-flags-append-non-stacking-context-blending-expected.png: Added.
        * platform/wpe/css3/blending/blend-mode-isolation-flags-append-non-stacking-context-blending-expected.txt: Added.
        * platform/wpe/css3/blending/blend-mode-isolation-flags-append-stacking-context-blending-expected.png: Added.
        * platform/wpe/css3/blending/blend-mode-isolation-flags-append-stacking-context-blending-expected.txt: Added.
        * platform/wpe/css3/blending/blend-mode-isolation-flags-remove-non-stacking-context-blending-expected.png: Added.
        * platform/wpe/css3/blending/blend-mode-isolation-flags-remove-non-stacking-context-blending-expected.txt: Added.
        * platform/wpe/css3/blending/blend-mode-isolation-flags-remove-stacking-context-blending-expected.png: Added.
        * platform/wpe/css3/blending/blend-mode-isolation-flags-remove-stacking-context-blending-expected.txt: Added.
        * platform/wpe/css3/blending/blend-mode-isolation-flags-turn-off-blending-expected.png: Added.
        * platform/wpe/css3/blending/blend-mode-isolation-flags-turn-off-blending-expected.txt: Added.
        * platform/wpe/css3/blending/blend-mode-isolation-flags-turn-off-blending-no-isolation-expected.png: Added.
        * platform/wpe/css3/blending/blend-mode-isolation-flags-turn-off-blending-no-isolation-expected.txt: Added.
        * platform/wpe/css3/blending/blend-mode-isolation-flags-turn-off-stacking-context-expected.png: Added.
        * platform/wpe/css3/blending/blend-mode-isolation-flags-turn-off-stacking-context-expected.txt: Added.
        * platform/wpe/css3/blending/blend-mode-isolation-flags-turn-on-blending-expected.png: Added.
        * platform/wpe/css3/blending/blend-mode-isolation-flags-turn-on-blending-expected.txt: Added.
        * platform/wpe/css3/blending/blend-mode-isolation-flags-turn-on-stacking-context-expected.png: Added.
        * platform/wpe/css3/blending/blend-mode-isolation-flags-turn-on-stacking-context-expected.txt: Added.
        * platform/wpe/css3/blending/blend-mode-overflow-expected.png: Added.
        * platform/wpe/css3/blending/blend-mode-overflow-expected.txt: Added.
        * platform/wpe/css3/blending/blend-mode-simple-expected.png: Added.
        * platform/wpe/css3/blending/blend-mode-simple-expected.txt: Added.
        * platform/wpe/css3/blending/repaint/blend-mode-turn-off-isolation-no-effect-expected.txt: Added.
        * platform/wpe/css3/blending/svg-blend-layer-blend-expected.png: Added.
        * platform/wpe/css3/blending/svg-blend-layer-blend-expected.txt: Added.
        * platform/wpe/css3/blending/svg-blend-layer-clip-path-expected.png: Added.
        * platform/wpe/css3/blending/svg-blend-layer-clip-path-expected.txt: Added.
        * platform/wpe/css3/blending/svg-blend-layer-filter-expected.png: Added.
        * platform/wpe/css3/blending/svg-blend-layer-filter-expected.txt: Added.
        * platform/wpe/css3/blending/svg-blend-layer-mask-expected.png: Added.
        * platform/wpe/css3/blending/svg-blend-layer-mask-expected.txt: Added.
        * platform/wpe/css3/blending/svg-blend-layer-opacity-expected.png: Added.
        * platform/wpe/css3/blending/svg-blend-layer-opacity-expected.txt: Added.

2019-07-09  Andres Gonzalez  <andresg_22@apple.com>

        AX: HTML datalist accessibility is not exposed by WebKit
        https://bugs.webkit.org/show_bug.cgi?id=196998
        <rdar://problem/49962521>

        Reviewed by Chris Fleizach.

        * accessibility/datalist-expected.txt: Added.
        * accessibility/datalist.html: Added.

2019-07-09  Saam Barati  <sbarati@apple.com>

        [WHLSL] Import another round of JS spec tests
        https://bugs.webkit.org/show_bug.cgi?id=199647

        Reviewed by Myles C. Maxfield.

        This patch also removes the unneded <!-- webkit-test-runner [ experimental:WebGPUEnabled=true ] -->
        comments in various tests.

        * webgpu/bind-groups.html:
        * webgpu/blit-commands.html:
        * webgpu/map-read-buffers.html:
        * webgpu/map-write-buffers.html:
        * webgpu/msl-harness-test.html:
        * webgpu/pipeline-layouts.html:
        * webgpu/queue-creation.html:
        * webgpu/render-command-encoding.html:
        * webgpu/shader-modules.html:
        * webgpu/textures-textureviews.html:
        * webgpu/whlsl-array-spec-tests.html:
        * webgpu/whlsl-bad-ander-expected.txt: Added.
        * webgpu/whlsl-bad-ander.html: Added.
        * webgpu/whlsl-bad-literals-expected.txt: Added.
        * webgpu/whlsl-bad-literals.html: Added.
        * webgpu/whlsl-bitwise-bool-ops.html:
        * webgpu/whlsl-enum-spec-tests.html:
        * webgpu/whlsl-equality.html:
        * webgpu/whlsl-float-math-expected.txt: Added.
        * webgpu/whlsl-float-math.html: Added.
        * webgpu/whlsl-index-getter-setter-expected.txt: Added.
        * webgpu/whlsl-index-getter-setter.html: Added.
        * webgpu/whlsl-int-bit-math-expected.txt: Added.
        * webgpu/whlsl-int-bit-math.html: Added.
        * webgpu/whlsl-int-literal-compare.html:
        * webgpu/whlsl-make-array-ref-spec-tests-expected.txt: Added.
        * webgpu/whlsl-make-array-ref-spec-tests.html: Added.
        * webgpu/whlsl-matrices-spec-tests.html:
        * webgpu/whlsl-pointer-spec-tests-expected.txt: Added.
        * webgpu/whlsl-pointer-spec-tests.html: Added.
        * webgpu/whlsl-postfix-prefix-expected.txt: Added.
        * webgpu/whlsl-postfix-prefix.html: Added.
        * webgpu/whlsl-return-spec-tests.html:
        * webgpu/whlsl-simple-getter-setter.html:
        * webgpu/whlsl-simple-tests.html:
        * webgpu/whlsl-simple-while-loop.html:
        * webgpu/whlsl-test-harness-test.html:
        * webgpu/whlsl-type-mismatch.html:
        * webgpu/whlsl-uint-bitwise.html:

2019-07-09  Ryan Haddad  <ryanhaddad@apple.com>

        Unreviewed test gardening, address TestExpectations linter warning.

        * TestExpectations: Delete entry for fast/content-observation since
        the directory doesn't exist anymore.

2019-07-09  Saam Barati  <sbarati@apple.com>

        [WHLSL] Add another group of WHLSL JS reference spec tests
        https://bugs.webkit.org/show_bug.cgi?id=199642

        Reviewed by Robin Morisset.

        * webgpu/whlsl-array-spec-tests-expected.txt: Added.
        * webgpu/whlsl-array-spec-tests.html: Added.
        * webgpu/whlsl-enum-spec-tests-expected.txt: Added.
        * webgpu/whlsl-enum-spec-tests.html: Added.
        * webgpu/whlsl-equality-expected.txt: Added.
        * webgpu/whlsl-equality.html: Added.
        * webgpu/whlsl-matrices-spec-tests-expected.txt: Added.
        * webgpu/whlsl-matrices-spec-tests.html: Added.
        * webgpu/whlsl-return-spec-tests-expected.txt: Added.
        * webgpu/whlsl-return-spec-tests.html: Added.
        * webgpu/whlsl-simple-getter-setter-expected.txt: Added.
        * webgpu/whlsl-simple-getter-setter.html: Added.
        * webgpu/whlsl-simple-while-loop-expected.txt: Added.
        * webgpu/whlsl-simple-while-loop.html: Added.

2019-07-09  Youenn Fablet  <youenn@apple.com>

        XHR CORS requests logged twice in the server
        https://bugs.webkit.org/show_bug.cgi?id=199492
        <rdar://problem/52757558>

        Reviewed by Chris Dumez.

        * http/wpt/fetch/disable-speculative-load-for-xhr-and-fetch-loads-expected.txt: Added.
        * http/wpt/fetch/disable-speculative-load-for-xhr-and-fetch-loads.html: Added.
        * http/wpt/fetch/resources/fetch-xhr-load.py: Added.
        (main):
        * http/wpt/fetch/resources/xhr-and-fetch.html: Added.

2019-07-09  Rob Buis  <rbuis@igalia.com>

        Remove rel=subresource tests
        https://bugs.webkit.org/show_bug.cgi?id=199616

        Reviewed by Ryosuke Niwa.

        Remove rel=subresource references by deleting or using rel=prefetch
        instead.

        * TestExpectations:
        * fast/dom/HTMLLinkElement/cachedresource-types.html:
        * http/tests/misc/link-rel-prefetch-and-subresource.html: Removed.
        * webarchive/test-link-rel-subresource-beforeload-expected.webarchive: Removed.
        * webarchive/test-link-rel-subresource-beforeload.html: Removed.

2019-07-09  Antoine Quint  <graouts@apple.com>

        [Pointer Events] Scroll indicators should not show for scrollable content with touch-action: none
        https://bugs.webkit.org/show_bug.cgi?id=199618

        Reviewed by Simon Fraser.

        Add a new test that swipes "overflow: scroll" content which would show scroll indicators without scrolling
        prior to this patch.

        * pointerevents/ios/touch-action-none-no-scroll-indicators-expected.html: Added.
        * pointerevents/ios/touch-action-none-no-scroll-indicators.html: Added.

2019-07-09  Charlie Turner  <cturner@igalia.com>

        [GStreamer] HLS media test gardening
        https://bugs.webkit.org/show_bug.cgi?id=199620

        Unreviewed gardening commit.

        * platform/gtk/TestExpectations:

2019-07-09  Antti Koivisto  <antti@apple.com>

        REGRESSION(r244906): Crash in WebCore::positionOffsetValue
        https://bugs.webkit.org/show_bug.cgi?id=199613
        <rdar://problem/51518172>

        Reviewed by Zalan Bujtas.

        * fast/css/getComputedStyle/sticky-scroll-container-crash-expected.txt: Added.
        * fast/css/getComputedStyle/sticky-scroll-container-crash.html: Added.

2019-07-09  Cathie Chen  <cathiechen@igalia.com>

        Support writing-mode and direction for scrollIntoViewOptions.
        https://bugs.webkit.org/show_bug.cgi?id=161611

        Reviewed by Frédéric Wang and Simon Fraser.

        * platform/ios-simulator-wk2/imported/w3c/web-platform-tests/css/cssom-view/scrollIntoView-horizontal-tb-writing-mode-and-rtl-direction-expected.txt: Removed.

2019-07-08  Saam Barati  <sbarati@apple.com>

        [WHLSL Import 23 new JS reference spec tests
        https://bugs.webkit.org/show_bug.cgi?id=199604

        Reviewed by Myles C. Maxfield.

        This moves some stuff down into whlsl-test-harness which are needed by
        all tests. This also adds a new checkFail that ensures the program never
        runs (e.g, it has a compile error).

        * webgpu/js/whlsl-test-harness.js:
        (async.checkFail):
        (const.webGPUPromiseTest):
        * webgpu/whlsl-bitwise-bool-ops-expected.txt:
        * webgpu/whlsl-bitwise-bool-ops.html:
        * webgpu/whlsl-int-literal-compare-expected.txt: Added.
        * webgpu/whlsl-int-literal-compare.html: Added.
        * webgpu/whlsl-simple-tests-expected.txt: Added.
        * webgpu/whlsl-simple-tests.html: Added.
        * webgpu/whlsl-type-mismatch-expected.txt: Added.
        * webgpu/whlsl-type-mismatch.html: Added.
        * webgpu/whlsl-uint-bitwise-expected.txt: Added.
        * webgpu/whlsl-uint-bitwise.html: Added.

2019-07-08  Wenson Hsieh  <wenson_hsieh@apple.com>

        [iOS 13] paste-does-not-fire-promises-while-sanitizing-web-content.html times out when run with multiple iterations
        https://bugs.webkit.org/show_bug.cgi?id=199597

        Reviewed by Tim Horton.

        Make this test more robust to work around bugs in iOS 13 that currently prevent some single tap gestures from
        being recognized, due to conflicts with double tap gesture recognizers.
        -   Make both the subframe and editable element taller, so that they're easier to hit.
        -   Tap twice when attempting to trigger a paste, in hopes that at least one of the taps will be recognized as a
            single click.
        -   Make several event listeners one-shot, to prevent the double tap gesture from triggering paste twice.

        * editing/pasteboard/paste-does-not-fire-promises-while-sanitizing-web-content.html:

2019-07-08  Keith Miller  <keith_miller@apple.com>

        Enable Intl.PluralRules and Intl.NumberFormatToParts by default
        https://bugs.webkit.org/show_bug.cgi?id=199288

        Reviewed by Yusuke Suzuki.

        Remove runtime flag from testing.

        * js/intl-numberformat-format-to-parts.html:
        * js/intl-pluralrules.html:
        * js/script-tests/intl-numberformat-format-to-parts.js:
        * js/script-tests/intl-pluralrules.js:

2019-07-08  Daniel Bates  <dabates@apple.com>

        [iOS] Support select all in non-editable element
        https://bugs.webkit.org/show_bug.cgi?id=199257
        <rdar://problem/52553667>

        Reviewed by Wenson Hsieh.

        Add a test to ensure that we can perform Select All even when a non-editable element is focused.

        Also disallow testing of Command + A until we fix <https://bugs.webkit.org/show_bug.cgi?id=199475>.
        Otherwise, the test fast/events/ios/key-events-comprehensive/key-events-meta.html fails since
        Command + A now triggers page selection even in a non-editable (the purpose of this change)
        and hence Command + C also triggers the copy command. The triggering of these commands causes
        the test to fail the Command + A and Command + C sub-tests since no keypress event is dispatched
        for the key that triggered these key commands. This is expected, but Command + A should not have
        triggered selection as key-tester.js calls preventDefault() from a keypress handler. That's
        the bug. See <https://bugs.webkit.org/show_bug.cgi?id=199475> for more details.

        * editing/selection/ios/select-all-non-editable-text-using-keyboard-expected.txt: Added.
        * editing/selection/ios/select-all-non-editable-text-using-keyboard.html: Added.
        * fast/events/ios/key-events-comprehensive/key-events-meta-expected.txt: Updated result.
        * fast/events/ios/resources/key-tester.js: Disallow Command + A until we fix <https://bugs.webkit.org/show_bug.cgi?id=199475>.
        * platform/ios/TestExpectations: Skip the test until the fix for <rdar://problem/48322899>
        has shipped.

2019-07-08  Daniel Bates  <dabates@apple.com>

        Command + . generates Escape with key identifier Period, should be Escape
        https://bugs.webkit.org/show_bug.cgi?id=199393
        <rdar://problem/52498001>

        Reviewed by Wenson Hsieh.

        Update test result.

        * fast/events/ios/key-events-comprehensive/key-events-meta-expected.txt:

2019-07-08  Charlie Turner  <cturner@igalia.com>

        [GTK] Some media fragment tests are flaky
        https://bugs.webkit.org/show_bug.cgi?id=132248

        Reviewed by Eric Carlson.

        These tests look like they're flakey due to a small stop time. I'm
        surmising that based on the bot's load, we step over the 0.5 mark
        often. When I run this locally, despite running the fragment tests
        100 times, I saw no timeouts.

        I have seen crashes in the flakiness dashboard, but I would prefer
        for these to have separate bugs so that we can squash them rather
        than allowing them to linger. Having them expected to crash means
        we have no crash logs to investigate.

        Updated the baselines in the LayoutTests/ directory to reflect the
        new stop time delta.

        * media/media-fragments/media-fragments.js:
        (pause): Increase stop delta, on simulator builds the stddev
        crossed the 0.5s mark, and I suspect on GTK builds, our bots being
        heavily loaded cause the majority of timeouts.
        * platform/gtk/TestExpectations: Remove expectations.

2019-07-08  Ryan Haddad  <ryanhaddad@apple.com>

        Add test expectations and baselines for Catalina
        https://bugs.webkit.org/show_bug.cgi?id=199328

        Reviewed by Jonathan Bedard.

        * platfrom/mac/*: Adding Catalina test expectations and baselines.
        * platform/mac-mojave/*: Migrating Mojave baselines from platform/mac directory.

2019-07-08  Wenson Hsieh  <wenson_hsieh@apple.com>

        [iPadOS] Viewport pops while loading sohu.com, xinhuanet.com, and various other websites
        https://bugs.webkit.org/show_bug.cgi?id=199575
        <rdar://problem/51842220>

        Reviewed by Simon Fraser.

        Adjusts an existing layout test, and introduces a new test to verify that the shrink-to-fit heuristic is given a
        chance to run before document load. See WebKit ChangeLog for more details.

        * fast/viewport/ios/shrink-to-fit-content-before-document-load-expected.txt: Added.
        * fast/viewport/ios/shrink-to-fit-content-before-document-load.html: Added.
        * fast/viewport/ios/shrink-to-fit-content-temporary-overflow.html:

        Tweak this layout test to add the temporarily overflowing element after document load.

2019-07-08  Wenson Hsieh  <wenson_hsieh@apple.com>

        Unable to paste from Notes into Excel 365 spreadsheet
        https://bugs.webkit.org/show_bug.cgi?id=199565
        <rdar://problem/43615497>

        Reviewed by Chris Dumez.

        Add a test to verify that promises scheduled right before a programmatic paste resolve in the middle of the
        paste, while creating a document for web content sanitization. See WebCore ChangeLog for more details.

        * editing/pasteboard/paste-does-not-fire-promises-while-sanitizing-web-content-expected.txt: Added.
        * editing/pasteboard/paste-does-not-fire-promises-while-sanitizing-web-content.html: Added.

2019-07-08  Chris Dumez  <cdumez@apple.com>

        Unable to play videos on xfinity.com/stream on macOS Catalina
        https://bugs.webkit.org/show_bug.cgi?id=199576
        <rdar://problem/50101264>

        Reviewed by Alex Christensen.

        Rebaseline existing test.

        * http/wpt/fetch/request-abort-expected.txt:

2019-07-08  Antoine Quint  <graouts@apple.com>

        [Pointer Events] "touch-action: none" does not prevent double-tap-to-zoom
        https://bugs.webkit.org/show_bug.cgi?id=199571
        <rdar://problem/51715002>

        Reviewed by Wenson Hsieh.

        Add two new tests that check that setting "touch-action: none" on an element does not allow double-tap-to-zoom
        and that "touch-action: manipulation" allows it.

        * pointerevents/ios/touch-action-manipulation-double-tap-to-zoom-expected.txt: Added.
        * pointerevents/ios/touch-action-manipulation-double-tap-to-zoom.html: Added.
        * pointerevents/ios/touch-action-none-double-tap-to-zoom-expected.txt: Added.
        * pointerevents/ios/touch-action-none-double-tap-to-zoom.html: Added.
        * pointerevents/utils.js:
        (const.ui.new.UIController.prototype.doubleTapToZoom):

2019-07-08  Charlie Turner  <cturner@igalia.com>

        [GStreamer] media/video-volume.html broken after switching from cubic to linear scaling
        https://bugs.webkit.org/show_bug.cgi?id=199505

        Reviewed by Xabier Rodriguez-Calvar.

        PulseAudio has a conversion process from volume's in
        double-precision to uint32_t volumes. Depending on the environment
        can introduce rounding errors. Be more lenient in our comparison
        code.

        * media/video-volume-expected.txt: Update baseline
        * media/video-volume.html: Compare volume values within a
        reasonable tolerance.

2019-07-08  Antoine Quint  <graouts@apple.com>

        [Pointer Events] Enable only on the most recent version of the supported iOS family
        https://bugs.webkit.org/show_bug.cgi?id=199562
        <rdar://problem/52766511>

        Reviewed by Dean Jackson.

        * js/dom/navigator-maxtouchpoints-expected.txt: Since ENABLE_POINTER_EVENTS is now disabled by default, navigator.maxTouchPoints
        is "undefined" in thed default case.
        * platform/mac/js/dom/navigator-maxtouchpoints-expected.txt: But 0 on macOS.

2019-07-07  Zalan Bujtas  <zalan@apple.com>

        [ContentChangeObserver] Difficult to control videos on iqiyi.com as the actions are mouse hover
        https://bugs.webkit.org/show_bug.cgi?id=199542
        <rdar://problem/51886813>

        Reviewed by Simon Fraser.

        * fast/events/touch/ios/content-observation/tap-on-1px-height-content-expected.txt: Added.
        * fast/events/touch/ios/content-observation/tap-on-1px-height-content.html: Added.
        * fast/events/touch/ios/content-observation/tap-on-1px-width-content-expected.txt: Added.
        * fast/events/touch/ios/content-observation/tap-on-1px-width-content.html: Added.

2019-07-06  Cathie Chen  <cathiechen@igalia.com>

        Import css/cssom-view testcases from WPT.
        https://bugs.webkit.org/show_bug.cgi?id=199509

        Reviewed by Frédéric Wang.

        * TestExpectations:
        * platform/ios-simulator-wk2/imported/w3c/web-platform-tests/css/cssom-view/offsetTopLeft-empty-inline-expected.txt: Added.
        * platform/ios-simulator-wk2/imported/w3c/web-platform-tests/css/cssom-view/offsetTopLeft-leading-space-inline-expected.txt: Added.
        * platform/ios-simulator-wk2/imported/w3c/web-platform-tests/css/cssom-view/scrollIntoView-horizontal-tb-writing-mode-and-rtl-direction-expected.txt: Added.
        * tests-options.json:

2019-07-05  Youenn Fablet  <youenn@apple.com> and Simon Fraser  <simon.fraser@apple.com>

        Trigger a compositing update when video element is changing
        https://bugs.webkit.org/show_bug.cgi?id=199522
        <rdar://problem/47297159>

        Reviewed by Simon Fraser.

        * compositing/video/video-update-rendering-expected.txt: Added.
        * compositing/video/video-update-rendering.html: Added.

2019-07-05  Ryosuke Niwa  <rniwa@webkit.org>

        [iOS] Crash in WebKit::WebPage::positionInformation via Range::startPosition
        https://bugs.webkit.org/show_bug.cgi?id=199503

        Reviewed by Wenson Hsieh.

        Added a regression test for the crash.

        * editing/input/delete-text-in-composition-expected.txt: Added.
        * editing/input/delete-text-in-composition.html: Added.
        * resources/ui-helper.js:
        (window.UIHelper.ensurePositionInformationUpdateForElement): Added.

2019-07-02  Myles C. Maxfield  <mmaxfield@apple.com>

        [WHLSL] Standard library is too big to directly include in WebCore
        https://bugs.webkit.org/show_bug.cgi?id=198186
        <rdar://problem/51288898>

        Reviewed by Saam Barati.

        The standard library doesn't include any matrix constructors that broadcast a single value
        to every field in a matrix. https://bugs.webkit.org/show_bug.cgi?id=199333

        * webgpu/whlsl-matrix.html:

2019-07-05  Zalan Bujtas  <zalan@apple.com>

        [ContentChangeObserver] REGRESSION (r247015): facebook photo/video upload button is unresponsive to user interaction.
        https://bugs.webkit.org/show_bug.cgi?id=199502
        <rdar://problem/52547473>

        Reviewed by Simon Fraser.

        * fast/events/touch/ios/content-observation/opacity-change-happens-on-touchstart-with-transition3-expected.txt: Added.
        * fast/events/touch/ios/content-observation/opacity-change-happens-on-touchstart-with-transition3.html: Added.

2019-07-05  Youenn Fablet  <youenn@apple.com>

        [iOS] Local capture MediaStreamTrack does not render in portrait mode
        https://bugs.webkit.org/show_bug.cgi?id=199519
        <rdar://problem/52689720>

        Reviewed by Eric Carlson.

        * webrtc/video-rotation-expected.txt:
        * webrtc/video-rotation.html:

2019-07-05  Ryan Haddad  <ryanhaddad@apple.com>

        Unreviewed, rolling out r247115.

        Breaks lldbWebKitTester (and by extension, test-webkitpy)

        Reverted changeset:

        "[WHLSL] Standard library is too big to directly include in
        WebCore"
        https://bugs.webkit.org/show_bug.cgi?id=198186
        https://trac.webkit.org/changeset/247115

2019-07-05  Wenson Hsieh  <wenson_hsieh@apple.com>

        Click events on outer page are not being dispatched correctly after touch-zooming within an iframe
        https://bugs.webkit.org/show_bug.cgi?id=185001
        <rdar://problem/40569615>

        Reviewed by Simon Fraser.

        Add a new layout test to verify that after interacting with an element with touch event handlers in a cross-
        origin subframe, the user is still able to click on elements on the top level document.

        * http/tests/events/touch/ios/click-after-handling-touch-in-cross-origin-frame.https-expected.txt: Added.
        * http/tests/events/touch/ios/click-after-handling-touch-in-cross-origin-frame.https.html: Added.
        * http/tests/events/touch/ios/resources/touch-target.html: Added.

2019-07-05  Wenson Hsieh  <wenson_hsieh@apple.com>

        Touching media controls sometimes shows software keyboard
        https://bugs.webkit.org/show_bug.cgi?id=199490
        <rdar://problem/52076270>

        Reviewed by Eric Carlson.

        Adds a new layout test to verify that the keyboard only appears after a handled touch event if the focused
        element is inside a hidden editable area; otherwise, the keyboard should not be present.

        * fast/events/touch/ios/do-not-show-keyboard-after-preventing-touchstart-expected.txt: Added.
        * fast/events/touch/ios/do-not-show-keyboard-after-preventing-touchstart.html: Added.

        This test passes as long as we didn't begin showing the keyboard after tapping.

        * fast/events/touch/ios/show-keyboard-after-preventing-touchstart-expected.txt:
        * fast/events/touch/ios/show-keyboard-after-preventing-touchstart.html:

        Adjust this existing test to make the focused textarea hidden.

        * resources/ui-helper.js:
        (window.UIHelper.hasInputSession):

        Add a new testing hook to check whether there is an active input session.

2019-07-05  Antoine Quint  <graouts@apple.com>

        [Pointer Events] Respect pointer capture when dispatching mouse boundary events and updating :hover
        https://bugs.webkit.org/show_bug.cgi?id=198999
        <rdar://problem/51979477>

        Reviewed by Dean Jackson.

        Update some WK1-specific expectations.

        * platform/mac-wk1/imported/w3c/web-platform-tests/pointerevents/pointerevent_boundary_events_at_implicit_release_hoverable_pointers-expected.txt:
        * platform/mac-wk1/imported/w3c/web-platform-tests/pointerevents/pointerevent_setpointercapture_relatedtarget-expected.txt:

2019-07-04  Zalan Bujtas  <zalan@apple.com>

        [ContentChangeObserver] didFinishTransition triggers a nested style recalc via isConsideredClickable
        https://bugs.webkit.org/show_bug.cgi?id=199506
        <rdar://problem/52656221>

        Reviewed by Ryosuke Niwa.

        * fast/events/touch/ios/content-observation/animation-end-with-visiblity-change-and-recursive-update-style-expected.txt: Added.
        * fast/events/touch/ios/content-observation/animation-end-with-visiblity-change-and-recursive-update-style.html: Added.

2019-07-04  Zalan Bujtas  <zalan@apple.com>

        [ContentChangeObserver] Limit mouseOut dispatching after synthetic click to YouTube.com
        https://bugs.webkit.org/show_bug.cgi?id=199497
        <rdar://problem/52361019>

        Reviewed by Wenson Hsieh.

        * fast/events/touch/ios/content-observation/mouse-out-event-should-fire-on-click.html:
        * fast/events/touch/ios/content-observation/mouse-out-event-should-not-fire-on-click-expected.txt: Added.
        * fast/events/touch/ios/content-observation/mouse-out-event-should-not-fire-on-click.html: Copied from LayoutTests/fast/events/touch/ios/content-observation/mouse-out-event-should-fire-on-click.html.

2019-07-03  Simon Fraser  <simon.fraser@apple.com>

        Some layers inside overflow:scroll don't move back to correct positions when the contents are shrunk
        https://bugs.webkit.org/show_bug.cgi?id=199464
        rdar://problem/52613285

        Reviewed by Sam Weinig.

        * compositing/scrolling/async-overflow-scrolling/become-non-scrollable-with-child-expected.html: Added.
        * compositing/scrolling/async-overflow-scrolling/become-non-scrollable-with-child.html: Added.

2019-07-03  Justin Fan  <justin_fan@apple.com>

        [WHLSL] Support float4x4 in test harness
        https://bugs.webkit.org/show_bug.cgi?id=199484

        Reviewed by Myles C. Maxfield.

        Support WHLSL float4x4 parameters in the WHLSL test harness.

        * webgpu/js/whlsl-test-harness.js:
        (isScalar):
        (convertTypeToArrayType):
        (convertTypeToWHLSLType):
        (Data):
        (makeFloat4):
        (makeFloat4x4):
        (processArrays):
        (async.callFloat4x4Function):
        (isVectorType): Deleted. Replaced with isScalar.

        Add some float4x4 sanity checks:
        * webgpu/whlsl-test-harness-test-expected.txt:
        * webgpu/whlsl-test-harness-test.html:

2019-07-03  Simon Fraser  <simon.fraser@apple.com>

        RELEASE_ASSERT in WebCore: WebCore::ScrollingStateTree::insertNode()
        https://bugs.webkit.org/show_bug.cgi?id=199479
        rdar://problem/52392556

        Reviewed by Zalan Bujtas.

        * scrollingcoordinator/scrolling-tree/scrolling-proxy-with-no-scrolling-layer-expected.txt: Added.
        * scrollingcoordinator/scrolling-tree/scrolling-proxy-with-no-scrolling-layer.html: Added.

2019-07-02  Myles C. Maxfield  <mmaxfield@apple.com>

        [WHLSL] Standard library is too big to directly include in WebCore
        https://bugs.webkit.org/show_bug.cgi?id=198186
        <rdar://problem/51288898>

        Reviewed by Saam Barati.

        The standard library doesn't include any matrix constructors that broadcast a single value
        to every field in a matrix. https://bugs.webkit.org/show_bug.cgi?id=199333

        * webgpu/whlsl-matrix.html:

2019-07-03  Daniel Bates  <dabates@apple.com>

        Skip the test added in r246810 as it requires the simulator to be preconfigured with a Pinyin keyboard
        <rdar://problem/52608620>

        We will remove this prerequisite in <https://bugs.webkit.org/show_bug.cgi?id=199472>.

        * platform/ios/TestExpectations:

2019-07-03  Wenson Hsieh  <wenson_hsieh@apple.com>

        REGRESSION (iOS 13): Tapping an element with a click event handler no longer clears the selection
        https://bugs.webkit.org/show_bug.cgi?id=199430

        Reviewed by Tim Horton.

        Add and adjust layout tests to verify that calling preventDefault() on mousedown on iOS causes an existing
        selection to not be cleared, and that tapping in an element with a click handler clears out the selection.

        * editing/selection/ios/clear-selection-after-tapping-on-element-with-click-handler-expected.txt: Added.
        * editing/selection/ios/clear-selection-after-tapping-on-element-with-click-handler.html: Added.
        * editing/selection/ios/persist-selection-after-tapping-on-element-with-mousedown-handler-expected.txt: Renamed.
        * editing/selection/ios/persist-selection-after-tapping-on-element-with-mousedown-handler.html:

        Renamed from LayoutTests/editing/selection/ios/persist-selection-after-tapping-on-element-with-click-handler.html,
        and adjusted to call preventDefault() on mousedown events instead of click events. Also, remove a bit of
        trailing whitespace.

2019-07-03  Russell Epstein  <russell_e@apple.com>

        Rebaseline fast/events/ios/keydown-keyup-special-keys-in-non-editable-element.html
        https://bugs.webkit.org/show_bug.cgi?id=199459

        Unreviewed Test Gardening.

        * fast/events/ios/keydown-keyup-special-keys-in-non-editable-element-expected.txt:

2019-07-03  Zalan Bujtas  <zalan@apple.com>

        REGRESSION (r244356): Drop down menus collapse without user input - Ebay.com
        https://bugs.webkit.org/show_bug.cgi?id=199457
        <rdar://problem/52386563>

        Reviewed by Simon Fraser.

        * fast/events/touch/ios/content-observation/tap-on-input-type-button-element-with-async-clickable-change-expected.txt: Added.
        * fast/events/touch/ios/content-observation/tap-on-input-type-button-element-with-async-clickable-change.html: Copied from LayoutTests/fast/events/touch/ios/content-observation/tap-on-input-type-button-element.html.
        * fast/events/touch/ios/content-observation/tap-on-input-type-button-element-with-clickable-change-expected.txt: Added.
        * fast/events/touch/ios/content-observation/tap-on-input-type-button-element-with-clickable-change.html: Copied from LayoutTests/fast/events/touch/ios/content-observation/tap-on-input-type-button-element.html.
        * fast/events/touch/ios/content-observation/tap-on-input-type-button-element.html:

2019-07-03  Andres Gonzalez  <andresg_22@apple.com>

        Safari hanging while loading pages - WebCore::AccessibilityRenderObject::visiblePositionRangeForLine.
        https://bugs.webkit.org/show_bug.cgi?id=199434
        <rdar://problem/52475140>

        Reviewed by Chris Fleizach.

        Disabled the tests that were passing for workaround. The workaround had
        to be roll out cause it is hanging Safari.
        * TestExpectations:
        * platform/ios-wk2/TestExpectations:

2019-07-02  Fujii Hironori  <Hironori.Fujii@sony.com>

        imported/blink/animations/display-inline-style-adjust.html isn't a valid ref test
        https://bugs.webkit.org/show_bug.cgi?id=199311

        Reviewed by Simon Fraser.

        These tests are depending on platform font metrics. They were
        created for a Blink bug, doesn't seem useful for WebKit. Just
        removed them.

        * imported/blink/animations/display-inline-style-adjust.html: Deleted.
        * legacy-animation-engine/imported/blink/animations/display-inline-style-adjust.html: Deleted.
        * platform/gtk/TestExpectations: Unmarked them.
        * platform/ios/TestExpectations: Ditto.
        * platform/wpe/TestExpectations: Ditto.

2019-07-02  Said Abou-Hallawa  <sabouhallawa@apple.com>

        Assertion fires when animating the 'class' attribute of an SVG element
        https://bugs.webkit.org/show_bug.cgi?id=197372

        Reviewed by Ryosuke Niwa.

        * svg/animations/animated-bool-externalResourcesRequired-instances-expected.svg: Added.
        * svg/animations/animated-bool-externalResourcesRequired-instances.svg: Added.
        * svg/animations/animated-string-class-instances-expected.svg: Added.
        * svg/animations/animated-string-class-instances.svg: Added.
        * svg/animations/animated-string-href-expected.svg: Added.
        * svg/animations/animated-string-href.svg: Added.

2019-07-02  Ryan Haddad  <ryanhaddad@apple.com>

        [macOS WK2] REGRESSION (r242313): Layout Test scrollingcoordinator/mac/multiple-fixed.html is a flaky time out and image diff
        https://bugs.webkit.org/show_bug.cgi?id=195635

        Unreviewed test gardening.

        Move test expectation entry to a more specific file.

        * platform/mac-wk2/TestExpectations:
        * platform/mac/TestExpectations:

2019-07-02  Saam Barati  <sbarati@apple.com>

        [WHLSL] Change whlsl-two-dimensional-array.html to not be flaky on AMD Radeon Pro GPUs
        https://bugs.webkit.org/show_bug.cgi?id=199424

        Reviewed by Myles C. Maxfield.

        * webgpu/whlsl-two-dimensional-array.html:

2019-07-02  Andres Gonzalez  <andresg_22@apple.com>

        Enhance support of aria-haspopup per ARIA 1.1 specification.
        https://bugs.webkit.org/show_bug.cgi?id=199216
        <rdar://problem/46221342>

        Reviewed by Chris Fleizach.

        * accessibility/button-with-aria-haspopup-role-expected.txt:
        * accessibility/button-with-aria-haspopup-role.html:
        * accessibility/ios-simulator/button-with-aria-haspopup-role-expected.txt:
        * accessibility/ios-simulator/button-with-aria-haspopup-role.html:

2019-07-02  Saam Barati  <sbarati@apple.com>

        [WHLSL] Import bitwise bool tests
        https://bugs.webkit.org/show_bug.cgi?id=199093

        Reviewed by Myles C. Maxfield.

        This patch makes it so that we can mark bools as input and output types in the
        WHLSL harness. Since bool is not something WHLSL itself allows as an entrypoint
        input/output type (because we don't specify its bit pattern), we convert between
        bool and int in the input and output of the function. For now,  we don't support
        a buffer of bools for the input type as a simplification, so we don't have to worry
        about dynamically converting an int buffer to a bool buffer. We could add this
        in the future if we found it helpful, but we don't have a strong reason for supporting
        it right now.
        
        This patch also starts the process of importing the WHLSL test suite by importing bool
        bit op tests.

        * webgpu/js/whlsl-test-harness.js:
        (convertTypeToArrayType):
        (whlslArgumentType):
        (convertToWHLSLOutputType):
        (convertToWHLSLInputType):
        (Data):
        (Harness.prototype.get isWHLSL):
        (Harness.prototype.async.callTypedFunction):
        (Harness.prototype._setUpArguments):
        (callVoidFunction):
        * webgpu/whlsl-bitwise-bool-ops-expected.txt: Added.
        * webgpu/whlsl-bitwise-bool-ops.html: Added.
        * webgpu/whlsl-test-harness-test-expected.txt:
        * webgpu/whlsl-test-harness-test.html:

2019-07-02  Takashi Komori  <Takashi.Komori@sony.com>

        [Curl] Fix CookieJarCurl::getRawCookie.
        https://bugs.webkit.org/show_bug.cgi?id=199300

        Reviewed by Fujii Hironori.

        * http/tests/inspector/page/get-cookies-expected.txt: Added.
        * http/tests/inspector/page/get-cookies.html: Added.
        * http/tests/inspector/page/resources/set-cookie.php: Added.
        * platform/wincairo-wk1/TestExpectations:
        * platform/wincairo/TestExpectations:

2019-07-02  Daniel Bates  <dabates@apple.com>

        [iOS] Cannot tab cycle through credit card fields on antonsvpatisserie.com checkout page
        https://bugs.webkit.org/show_bug.cgi?id=196053
        <rdar://problem/49093034>

        Reviewed by Wenson Hsieh.

        Add some tests.

        * fast/events/ios/tab-cycle-expected.txt: Added.
        * fast/events/ios/tab-cycle.html: Added.
        * fast/events/ios/tab-into-text-field-inside-iframe-expected.txt: Added.
        * fast/events/ios/tab-into-text-field-inside-iframe.html: Added.

2019-07-02  Daniel Bates  <dabates@apple.com>

        Left and right option key has Unidentified key identifier
        https://bugs.webkit.org/show_bug.cgi?id=199392
        <rdar://problem/52497604>

        Reviewed by Wenson Hsieh.

        Update test results.

        * fast/events/ios/key-events-comprehensive/key-events-control-option-expected.txt:
        * fast/events/ios/key-events-comprehensive/key-events-meta-option-expected.txt:
        * fast/events/ios/key-events-comprehensive/key-events-option-expected.txt:
        * fast/events/ios/key-events-comprehensive/key-events-option-shift-expected.txt:

2019-07-02  Antti Koivisto  <antti@apple.com>

        Crash when adding inline stylesheet to shadow tree in document with null base URL
        https://bugs.webkit.org/show_bug.cgi?id=199400

        Reviewed by Zalan Bujtas.

        * fast/shadow-dom/stylesheet-in-shadow-without-base-url-crash-expected.txt: Added.
        * fast/shadow-dom/stylesheet-in-shadow-without-base-url-crash.html: Added.

2019-07-01  Justin Michaud  <justin_michaud@apple.com>

        [Wasm-References] Disable references by default
        https://bugs.webkit.org/show_bug.cgi?id=199390

        Reviewed by Saam Barati.

        * workers/wasm-references.html:

2019-07-01  Devin Rousso  <drousso@apple.com>

        Web Inspector: REGRESSION(r245498): Timelines: CPU: discontinuities are filled in by the next record
        https://bugs.webkit.org/show_bug.cgi?id=198927

        Reviewed by Matt Baker.

        * inspector/unit-tests/set-utilities.html:
        * inspector/unit-tests/set-utilities-expected.txt:

2019-07-01  Russell Epstein  <russell_e@apple.com>

        Layout Test imported/blink/fast/multicol/span/overflow-on-viewport.html is flaky.
        https://bugs.webkit.org/show_bug.cgi?id=199387

        Unreviewed Test Gardening.

        * platform/ios-wk2/TestExpectations:

2019-07-01  Wenson Hsieh  <wenson_hsieh@apple.com>

        [iOS 13] editing/selection/ios/dispatch-mouse-events-when-modifying-selection-quirk.html fails on trunk
        https://bugs.webkit.org/show_bug.cgi?id=199384

        Reviewed by Tim Horton.

        Adjust this test to show the callout menu by tapping on the caret rect, rather than the center of the editable
        area. Currently, tapping the center of the editable area twice results in a double tap, which fails to trigger
        the callout bar.

        * editing/selection/ios/dispatch-mouse-events-when-modifying-selection-quirk.html:

2019-07-01  Chris Dumez  <cdumez@apple.com>

        It should not be possible to trigger a load while in the middle of restoring a page in PageCache
        https://bugs.webkit.org/show_bug.cgi?id=199190
        <rdar://problem/52114552>

        Reviewed by Brady Eidson.

        Add layout test coverage.

        * http/tests/security/navigate-when-restoring-cached-page-expected.txt: Added.
        * http/tests/security/navigate-when-restoring-cached-page.html: Added.
        * http/tests/security/resources/navigate-when-restoring-cached-page-frame.html: Added.
        * http/tests/security/resources/navigate-when-restoring-cached-page-victim.html: Added.

2019-07-01  Truitt Savell  <tsavell@apple.com>

        Unreviewed, rolling out r246844.

        Broke 12 tests in imported/w3c/web-platform-
        tests/pointerevents/

        Reverted changeset:

        "[Pointer Events] Respect pointer capture when dispatching
        mouse boundary events and updating :hover"
        https://bugs.webkit.org/show_bug.cgi?id=198999
        https://trac.webkit.org/changeset/246844

2019-07-01  Truitt Savell  <tsavell@apple.com>

        Unreviewed, rolling out r246958.

        Broke inspector/dom/getAccessibilityPropertiesForNode.html

        Reverted changeset:

        "Enhance support of aria-haspopup per ARIA 1.1 specification."
        https://bugs.webkit.org/show_bug.cgi?id=199216
        https://trac.webkit.org/changeset/246958

2019-07-01  Eric Carlson  <eric.carlson@apple.com>

        [iOS] Exiting from fullscreen scrolls to top of page
        https://bugs.webkit.org/show_bug.cgi?id=199338
        <rdar://problem/51273017>

        Reviewed by Jer Noble.

        * fullscreen/fullscreen-restore-scroll-position-expected.txt: Added.
        * fullscreen/fullscreen-restore-scroll-position.html: Added.

2019-07-01  Russell Epstein  <russell_e@apple.com>

        Layout Test imported/mozilla/svg/text/selectSubString.svg is flaky.
        https://bugs.webkit.org/show_bug.cgi?id=199370

        Unreviewed Test Gardening.

        * platform/ios-wk2/TestExpectations:

2019-07-01  Zalan Bujtas  <zalan@apple.com>

        Tapping on the bottom part of youtube video behaves as if controls were visible
        https://bugs.webkit.org/show_bug.cgi?id=199349
        <rdar://problem/51955744>

        Reviewed by Simon Fraser.

        * fast/events/touch/ios/content-observation/opacity-change-happens-on-touchstart-with-transition2-expected.txt: Added.
        * fast/events/touch/ios/content-observation/opacity-change-happens-on-touchstart-with-transition2.html: Added.

2019-07-01  Wenson Hsieh  <wenson_hsieh@apple.com>

        iOS: REGRESSION(async scroll): Caret doesn't scroll when scrolling textarea
        https://bugs.webkit.org/show_bug.cgi?id=198217
        <rdar://problem/51097296>

        Reviewed by Simon Fraser.

        Add a new layout test to check that the text selection views are updated after scrolling in a fast overflow
        scrolling container.

        * editing/selection/ios/update-selection-after-overflow-scroll-expected.txt: Added.
        * editing/selection/ios/update-selection-after-overflow-scroll.html: Added.

2019-06-30  Fujii Hironori  <Hironori.Fujii@sony.com>

        Unreviewed, rolling out r246959.

        svg/clip-path/clip-hidpi.svg is flaky on mac-wk2-ews

        Reverted changeset:

        "LayoutTests svg/clip-path/clip-hidpi.svg isn't working as
        expected due to a syntax error"
        https://bugs.webkit.org/show_bug.cgi?id=199313
        https://trac.webkit.org/changeset/246959

2019-06-30  Fujii Hironori  <Hironori.Fujii@sony.com>

        LayoutTests svg/clip-path/clip-hidpi.svg isn't working as expected due to a syntax error
        https://bugs.webkit.org/show_bug.cgi?id=199313

        Reviewed by Carlos Garcia Campos.

        * svg/clip-path/clip-hidpi.svg: Fix the syntax error by replacing '->' with '=>'.
        Call testRunner.waitUntilDone() before testRunner.notifyDone().
        * svg/clip-path/clip-hidpi-expected.svg: Call testRunner.setBackingScaleFactor().

2019-06-30  Andres Gonzalez  <andresg_22@apple.com>

        Enhance support of aria-haspopup per ARIA 1.1 specification.
        https://bugs.webkit.org/show_bug.cgi?id=199216
        <rdar://problem/46221342>

        Reviewed by Chris Fleizach.

        * accessibility/button-with-aria-haspopup-role-expected.txt:
        * accessibility/button-with-aria-haspopup-role.html:
        * accessibility/ios-simulator/button-with-aria-haspopup-role-expected.txt:
        * accessibility/ios-simulator/button-with-aria-haspopup-role.html:

2019-06-29  Simon Fraser  <simon.fraser@apple.com>

        Remove a PLATFORM(IOS_FAMILY) related to repaint offsets in composited scrolling layers
        https://bugs.webkit.org/show_bug.cgi?id=199342

        Reviewed by Zalan Bujtas.

        * fast/events/touch/ios/touch-event-regions/scrolled-overflow-expected.txt: Added.
        * fast/events/touch/ios/touch-event-regions/scrolled-overflow.html: Added.

2019-06-28  Zalan Bujtas  <zalan@apple.com>

        [Text autosizing][iPadOS] bing.com is hard to read even with boosted text because of the line height
        https://bugs.webkit.org/show_bug.cgi?id=199318
        <rdar://problem/51826096>

        Reviewed by Wenson Hsieh.

        * fast/text-autosizing/ios/idempotentmode/line-height-boosting-expected.txt: Added.
        * fast/text-autosizing/ios/idempotentmode/line-height-boosting.html: Added.

2019-06-27  Ryosuke Niwa  <rniwa@webkit.org>

        Fix the test added in r246868 on iOS debug simulator.

        * editing/pasteboard/paste-contents-with-side-effects.html:

2019-06-27  Daniel Bates  <dabates@apple.com>

        [iOS] Select all with existing range selection replaces range instead of selecting all text
        https://bugs.webkit.org/show_bug.cgi?id=197950
        <rdar://problem/50245131>

        Reviewed by Wenson Hsieh.

        Add a test to ensure that pressing Command + A performs a "select all" even when there
        is an existing range selection.

        * fast/events/ios/select-all-with-existing-selection-expected.txt: Added.
        * fast/events/ios/select-all-with-existing-selection.html: Added.

2019-06-27  Russell Epstein  <russell_e@apple.com>

        Layout Test fast/parser/parser-yield-timing.html was flaky due to strict tolerance, increased tolerance.
        https://bugs.webkit.org/show_bug.cgi?id=199280

        Reviewed by Tim Horton.

        * fast/parser/parser-yield-timing-expected.txt:
        * fast/parser/parser-yield-timing.html:
        * platform/mac-wk1/TestExpectations:

2019-06-27  Ryan Haddad  <ryanhaddad@apple.com>

        REGRESSION (r246888): fast/dom/navigator-detached-no-crash.html failing on Apple High Sierra Release WK2 (Tests)
        https://bugs.webkit.org/show_bug.cgi?id=199284

        Unreviewed test gardening.

        * platform/mac-highsierra/fast/dom/navigator-detached-no-crash-expected.txt: Rebaseline test after r246888.

2019-06-27  Russell Epstein  <russell_e@apple.com>

        Layout Test fast/parser/parser-yield-timing.html is flaky.
        https://bugs.webkit.org/show_bug.cgi?id=199280

        Unreviewed test gardening.

        * platform/mac-wk1/TestExpectations:

2019-06-27  Antoine Quint  <graouts@apple.com>

        pointerevents/ios/pointer-events-implicit-capture.html fails on iOS
        https://bugs.webkit.org/show_bug.cgi?id=199259

        Reviewed by Dean Jackson.

        The assumptions made by this test were incorrect. The "gotpointercapture" event should not be dispatched
        until the next pointer event is dispatched after setting pointer capture. Even though pointer capture is
        set implicitly on "pointerdown" on non-mouse devices, the event will only be fired once a "pointermove" or
        "pointerup" event is dispatched.

        * pointerevents/ios/pointer-events-implicit-capture.html:

2019-06-27  Devin Rousso  <drousso@apple.com>

        Unreviewed, fix test failures after r246876.

        * inspector/worker/console-basic-expected.txt:

2019-06-27  Ryan Haddad  <ryanhaddad@apple.com>

        Unreviewed test gardening, rebaseline test after r246876.

        * inspector/worker/console-basic-expected.txt:

2019-06-27  Saam Barati  <sbarati@apple.com>

        Unreviewed. Skip WebGPU tests on High Sierra since WebGPU is disabled.

        * platform/mac-wk2/TestExpectations:
        * platform/mac/TestExpectations:

2019-06-27  Antti Koivisto  <antti@apple.com>

        REGRESSION (touch-action): Can't scroll vertically when touching a horizontally-scrollable element on instagram.com
        https://bugs.webkit.org/show_bug.cgi?id=199268
        <rdar://problem/52246473>

        Reviewed by Antoine Quint.

        * pointerevents/ios/touch-action-region-manipulation-expected.txt: Added.
        * pointerevents/ios/touch-action-region-manipulation.html: Added.

2019-06-27  Devin Rousso  <drousso@apple.com>

        Web Inspector: throw an error if console.count/console.countReset is called with an object that throws an error from toString
        https://bugs.webkit.org/show_bug.cgi?id=199252

        Reviewed by Joseph Pecoraro.

        * inspector/console/console-count.html:
        * inspector/console/console-count-expected.txt:
        * inspector/console/console-api-expected.txt:

2019-06-27  Saam Barati  <sbarati@apple.com>

        [WHLSL] Implement arrays and MakeArrayReference
        https://bugs.webkit.org/show_bug.cgi?id=198414

        Reviewed by Myles C. Maxfield.

        * webgpu/whlsl-huge-array-expected.txt: Added.
        * webgpu/whlsl-huge-array.html: Added.
        * webgpu/whlsl-make-array-reference-expected.txt: Added.
        * webgpu/whlsl-make-array-reference.html: Added.
        * webgpu/whlsl-simple-arrays-expected.txt: Added.
        * webgpu/whlsl-simple-arrays.html: Added.
        * webgpu/whlsl-two-dimensional-array-expected.txt: Added.
        * webgpu/whlsl-two-dimensional-array.html: Added.

2019-06-26  Simon Fraser  <simon.fraser@apple.com>

        [Async overflow scrolling] Fix missing or misplaced content inside overflow:scroll
        https://bugs.webkit.org/show_bug.cgi?id=199253

        Reviewed by Zalan Bujtas.

        * compositing/geometry/limit-layer-bounds-clipping-ancestor-expected.txt:
        * compositing/layer-creation/clipping-scope/overlap-constrained-inside-scroller-expected.txt:
        * compositing/layer-creation/clipping-scope/scroller-with-negative-z-children-expected.txt:
        * compositing/rtl/rtl-scrolling-with-transformed-descendants-expected.txt:
        * compositing/scrolling/async-overflow-scrolling/hidden-relative-layer-content-in-scroller-expected.html: Added.
        * compositing/scrolling/async-overflow-scrolling/hidden-relative-layer-content-in-scroller.html: Added.
        * compositing/scrolling/async-overflow-scrolling/layer-for-negative-z-in-scroller-expected.txt: Added.
        * compositing/scrolling/async-overflow-scrolling/layer-for-negative-z-in-scroller.html: Added.
        * compositing/scrolling/async-overflow-scrolling/negative-z-in-scroller-expected.html: Added.
        * compositing/scrolling/async-overflow-scrolling/negative-z-in-scroller.html: Added.
        * compositing/shared-backing/overflow-scroll/nested-absolute-with-clipping-in-stacking-overflow-expected.txt:
        * platform/ios-wk2/compositing/layer-creation/clipping-scope/overlap-constrained-inside-scroller-expected.txt:
        * platform/ios-wk2/compositing/layer-creation/clipping-scope/scroller-with-negative-z-children-expected.txt:
        * platform/ios-wk2/compositing/scrolling/async-overflow-scrolling/layer-for-negative-z-in-scroller-expected.txt: Added.
        * platform/ios-wk2/compositing/shared-backing/overflow-scroll/nested-absolute-with-clipping-in-stacking-overflow-expected.txt:
        * platform/ios/compositing/geometry/limit-layer-bounds-clipping-ancestor-expected.txt:

2019-06-26  Ryosuke Niwa  <rniwa@webkit.org>

        ReplacementFragment should not have script observable side effects
        https://bugs.webkit.org/show_bug.cgi?id=199147

        Reviewed by Wenson Hsieh.

        Added regression tests.

        * editing/pasteboard/paste-contents-with-side-effects-expected.txt: Added.
        * editing/pasteboard/paste-contents-with-side-effects.html: Added.

2019-06-26  Andy Estes  <aestes@apple.com>

        [Payment Request] Set state to Closed when show() is called during an active session
        https://bugs.webkit.org/show_bug.cgi?id=199239

        Reviewed by Alex Christensen.

        Copied from web-platform-tests/payment-request/payment-is-showing.https.html and modified to
        use UIHelper instead of test_driver.bless.

        * http/tests/paymentrequest/payment-is-showing.https-expected.txt: Added.
        * http/tests/paymentrequest/payment-is-showing.https.html: Added.
        * http/tests/paymentrequest/resources/blank.html: Added.

2019-06-26  Russell Epstein  <russell_e@apple.com>

        Layout Test http/tests/performance/performance-resource-timing-resourcetimingbufferfull-shrinking-buffer-crash.html is failing.
        https://bugs.webkit.org/show_bug.cgi?id=199242

        Unreviewed Test Gardening.

        * platform/mac-wk1/TestExpectations:

2019-06-26  Wenson Hsieh  <wenson_hsieh@apple.com>

        [iPadOS] eddm.usps.com scrolls horizontally due to explicit width set in viewport meta tag
        https://bugs.webkit.org/show_bug.cgi?id=199219
        <rdar://problem/50425765>

        Reviewed by Tim Horton.

        Add a new test to verify that if the meta viewport tag specifies a wide fixed width value, we will still try to
        shrink the page down to fit within the viewport.

        * fast/viewport/ios/shrink-to-fit-content-large-constant-width-expected.txt: Added.
        * fast/viewport/ios/shrink-to-fit-content-large-constant-width.html: Added.

2019-06-26  Joseph Pecoraro  <pecoraro@apple.com>

        Web Inspector: Implement console.countReset
        https://bugs.webkit.org/show_bug.cgi?id=199200

        Reviewed by Devin Rousso.

        * inspector/console/console-count-expected.txt:
        * inspector/console/console-count.html:
        * js/console-expected.txt:

2019-06-26  Myles C. Maxfield  <mmaxfield@apple.com>

        REGRESSION: ( r246394 ) webgpu/whlsl-buffer-fragment.html and webgpu/whlsl-buffer-vertex.html are failing
        https://bugs.webkit.org/show_bug.cgi?id=199012

        Reviewed by Saam Barati.

        Make the tests still pass if the machine doesn't support WebGPU.

        * webgpu/adapter-options-expected.txt: Removed.
        * webgpu/adapter-options.html: Removed.
        * webgpu/bind-groups.html:
        * webgpu/blend-color-triangle-strip-expected.html:
        * webgpu/blend-color-triangle-strip.html:
        * webgpu/blend-triangle-strip-expected.html:
        * webgpu/blend-triangle-strip.html:
        * webgpu/blit-commands-expected.html:
        * webgpu/blit-commands.html:
        * webgpu/buffer-command-buffer-races-expected.html:
        * webgpu/buffer-command-buffer-races.html:
        * webgpu/color-write-mask-triangle-strip-expected.html:
        * webgpu/color-write-mask-triangle-strip.html:
        * webgpu/command-buffers.html:
        * webgpu/depth-enabled-triangle-strip-expected.html:
        * webgpu/depth-enabled-triangle-strip.html:
        * webgpu/draw-indexed-triangles-expected.html:
        * webgpu/draw-indexed-triangles.html:
        * webgpu/js/create-worker-device.js: Removed.
        * webgpu/js/webgpu-functions.js:
        (drawWhiteSquareOnBlueBackgroundInSoftware):
        (drawGreenSquareInSoftware):
        (drawGreenAndBlueCheckerboardInSoftware):
        (async.mapWriteDataToBuffer):
        * webgpu/map-read-buffers.html:
        * webgpu/map-write-buffers.html:
        * webgpu/pipeline-layouts.html:
        * webgpu/propertyresolver/ander-abstract-lvalue-expected.html:
        * webgpu/propertyresolver/ander-abstract-lvalue.html:
        * webgpu/propertyresolver/ander-expected.html:
        * webgpu/propertyresolver/ander-lvalue-3-levels-expected.html:
        * webgpu/propertyresolver/ander-lvalue-3-levels.html:
        * webgpu/propertyresolver/ander-lvalue-expected.html:
        * webgpu/propertyresolver/ander-lvalue.html:
        * webgpu/propertyresolver/ander.html:
        * webgpu/propertyresolver/getter-expected.html:
        * webgpu/propertyresolver/getter.html:
        * webgpu/propertyresolver/indexer-ander-abstract-lvalue-expected.html:
        * webgpu/propertyresolver/indexer-ander-abstract-lvalue.html:
        * webgpu/propertyresolver/indexer-ander-expected.html:
        * webgpu/propertyresolver/indexer-ander-lvalue-3-levels-expected.html:
        * webgpu/propertyresolver/indexer-ander-lvalue-3-levels.html:
        * webgpu/propertyresolver/indexer-ander-lvalue-expected.html:
        * webgpu/propertyresolver/indexer-ander-lvalue.html:
        * webgpu/propertyresolver/indexer-ander.html:
        * webgpu/propertyresolver/indexer-getter-expected.html:
        * webgpu/propertyresolver/indexer-getter.html:
        * webgpu/propertyresolver/indexer-setter-abstract-lvalue-3-levels-expected.html:
        * webgpu/propertyresolver/indexer-setter-abstract-lvalue-3-levels.html:
        * webgpu/propertyresolver/indexer-setter-abstract-lvalue-expected.html:
        * webgpu/propertyresolver/indexer-setter-abstract-lvalue.html:
        * webgpu/propertyresolver/indexer-setter-expected.html:
        * webgpu/propertyresolver/indexer-setter-lvalue-expected.html:
        * webgpu/propertyresolver/indexer-setter-lvalue.html:
        * webgpu/propertyresolver/indexer-setter.html:
        * webgpu/propertyresolver/setter-abstract-lvalue-3-levels-expected.html:
        * webgpu/propertyresolver/setter-abstract-lvalue-3-levels.html:
        * webgpu/propertyresolver/setter-abstract-lvalue-expected.html:
        * webgpu/propertyresolver/setter-abstract-lvalue.html:
        * webgpu/propertyresolver/setter-lvalue-expected.html:
        * webgpu/propertyresolver/setter-lvalue.html:
        * webgpu/queue-creation.html:
        * webgpu/render-command-encoding.html:
        * webgpu/render-pipelines.html:
        * webgpu/shader-modules.html:
        * webgpu/simple-triangle-strip-expected.html:
        * webgpu/simple-triangle-strip.html:
        * webgpu/texture-triangle-strip-expected.html:
        * webgpu/texture-triangle-strip.html:
        * webgpu/textures-textureviews.html:
        * webgpu/vertex-buffer-triangle-strip-expected.html:
        * webgpu/vertex-buffer-triangle-strip.html:
        * webgpu/viewport-scissor-rect-triangle-strip-expected.html:
        * webgpu/viewport-scissor-rect-triangle-strip.html:
        * webgpu/webgpu-enabled-expected.txt: Removed.
        * webgpu/webgpu-enabled-in-worker-expected.txt: Removed.
        * webgpu/webgpu-enabled-in-worker.html: Removed.
        * webgpu/webgpu-enabled.html: Removed.
        * webgpu/whlsl-arbitrary-vertex-attribute-locations-expected.html:
        * webgpu/whlsl-arbitrary-vertex-attribute-locations.html:
        * webgpu/whlsl-buffer-fragment-expected.html:
        * webgpu/whlsl-buffer-fragment.html:
        * webgpu/whlsl-buffer-length-expected.txt:
        * webgpu/whlsl-buffer-length.html:
        * webgpu/whlsl-buffer-vertex-expected.html:
        * webgpu/whlsl-buffer-vertex.html:
        * webgpu/whlsl-checker-should-set-type-of-read-modify-write-variables-expected.txt:
        * webgpu/whlsl-checker-should-set-type-of-read-modify-write-variables.html:
        * webgpu/whlsl-compute-expected.txt:
        * webgpu/whlsl-compute.html:
        * webgpu/whlsl-dereference-pointer-should-type-check-expected.html:
        * webgpu/whlsl-dereference-pointer-should-type-check.html:
        * webgpu/whlsl-do-while-loop-break-expected.html:
        * webgpu/whlsl-do-while-loop-break.html:
        * webgpu/whlsl-do-while-loop-continue-expected.html:
        * webgpu/whlsl-do-while-loop-continue.html:
        * webgpu/whlsl-do-while-loop-expected.html:
        * webgpu/whlsl-do-while-loop.html:
        * webgpu/whlsl-dont-crash-parsing-enum-expected.html:
        * webgpu/whlsl-dont-crash-parsing-enum.html:
        * webgpu/whlsl-dot-expressions-expected.html:
        * webgpu/whlsl-dot-expressions.html:
        * webgpu/whlsl-duplicate-types-should-not-produce-duplicate-ctors-expected.txt:
        * webgpu/whlsl-duplicate-types-should-not-produce-duplicate-ctors.html:
        * webgpu/whlsl-ensure-proper-variable-lifetime-2-expected.html:
        * webgpu/whlsl-ensure-proper-variable-lifetime-2.html:
        * webgpu/whlsl-ensure-proper-variable-lifetime-3-expected.html:
        * webgpu/whlsl-ensure-proper-variable-lifetime-3.html:
        * webgpu/whlsl-ensure-proper-variable-lifetime-expected.html:
        * webgpu/whlsl-ensure-proper-variable-lifetime.html:
        * webgpu/whlsl-expected.html:
        * webgpu/whlsl-loops-break-expected.html:
        * webgpu/whlsl-loops-break.html:
        * webgpu/whlsl-loops-continue-expected.html:
        * webgpu/whlsl-loops-continue.html:
        * webgpu/whlsl-loops-expected.html:
        * webgpu/whlsl-loops.html:
        * webgpu/whlsl-matrix-2-expected.txt:
        * webgpu/whlsl-matrix-2.html:
        * webgpu/whlsl-matrix-expected.txt:
        * webgpu/whlsl-matrix.html:
        * webgpu/whlsl-nested-dot-expression-rvalue-expected.html:
        * webgpu/whlsl-nested-dot-expression-rvalue.html:
        * webgpu/whlsl-nested-loop-expected.html:
        * webgpu/whlsl-nested-loop.html:
        * webgpu/whlsl-null-dereference-expected.txt:
        * webgpu/whlsl-null-dereference.html:
        * webgpu/whlsl-oob-access-expected.txt:
        * webgpu/whlsl-oob-access.html:
        * webgpu/whlsl-read-modify-write-high-zombies-expected.txt:
        * webgpu/whlsl-read-modify-write-high-zombies.html:
        * webgpu/whlsl-return-local-variable-expected.html:
        * webgpu/whlsl-return-local-variable.html:
        * webgpu/whlsl-store-to-property-updates-properly-expected.html:
        * webgpu/whlsl-store-to-property-updates-properly.html:
        * webgpu/whlsl-textures-getdimensions-expected.txt:
        * webgpu/whlsl-textures-getdimensions.html:
        * webgpu/whlsl-textures-load-expected.html:
        * webgpu/whlsl-textures-load.html:
        * webgpu/whlsl-textures-sample-expected.html:
        * webgpu/whlsl-textures-sample.html:
        * webgpu/whlsl-while-loop-break-expected.html:
        * webgpu/whlsl-while-loop-break.html:
        * webgpu/whlsl-while-loop-continue-expected.html:
        * webgpu/whlsl-while-loop-continue.html:
        * webgpu/whlsl-zero-initialize-values-2-expected.html:
        * webgpu/whlsl-zero-initialize-values-2.html:
        * webgpu/whlsl-zero-initialize-values-expected.html:
        * webgpu/whlsl-zero-initialize-values.html:
        * webgpu/whlsl.html:

2019-06-26  Simon Fraser  <simon.fraser@apple.com>

        Incorrect clippping with overflow:scroll inside oveflow:hidden with border-radius
        https://bugs.webkit.org/show_bug.cgi?id=199135
        rdar://problem/51882383

        Reviewed by Zalan Bujtas.

        * compositing/scrolling/async-overflow-scrolling/border-radius-on-scroll-container-expected.html: Added.
        * compositing/scrolling/async-overflow-scrolling/border-radius-on-scroll-container.html: Added.

2019-06-26  Antoine Quint  <graouts@apple.com>

        [Pointer Events] Respect pointer capture when dispatching mouse boundary events and updating :hover
        https://bugs.webkit.org/show_bug.cgi?id=198999
        <rdar://problem/51979477>

        Reviewed by Dean Jackson.

        Update some WK1-specific expectations.

        * platform/mac-wk1/imported/w3c/web-platform-tests/pointerevents/pointerevent_boundary_events_at_implicit_release_hoverable_pointers-expected.txt:
        * platform/mac-wk1/imported/w3c/web-platform-tests/pointerevents/pointerevent_setpointercapture_relatedtarget-expected.txt:

2019-06-26  Russell Epstein  <russell_e@apple.com>

        Layout Test imported/mozilla/svg/text/selectSubString-2.svg is failing.
        https://bugs.webkit.org/show_bug.cgi?id=199196

        Unreviewed Test Gardening.

        * platform/ios-wk2/TestExpectations:

2019-06-26  Zalan Bujtas  <zalan@apple.com>

        [ContentChangeObserver] Dispatch synthetic mouse event asynchronously in completePendingSyntheticClickForContentChangeObserver
        https://bugs.webkit.org/show_bug.cgi?id=199220
        <rdar://problem/51787961>

        Reviewed by Simon Fraser.

        * fast/events/touch/ios/content-observation/animation-end-with-visiblity-change-crash-expected.txt: Added.
        * fast/events/touch/ios/content-observation/animation-end-with-visiblity-change-crash.html: Added.

2019-06-25  Russell Epstein  <russell_e@apple.com>

        Layout Test imported/blink/editing/selection/deleteFromDocument-crash.html is failing.
        https://bugs.webkit.org/show_bug.cgi?id=199213

        Unreviewed Test Gardening.

        * platform/ios-wk2/TestExpectations:

2019-06-25  Justin Fan  <justin_fan@apple.com>

        [WHLSL] Make whlsl-test-harness actually generate WHLSL shaders by default
        https://bugs.webkit.org/show_bug.cgi?id=199028

        Reviewed by Saam Barati.

        whlsl-test-harness.js now generates WHLSL shaders and invokes WebKit's WHLSL compiler.
        MSL mode remains to facilitate further harness tesing.
        In addition, if WebGPU is not supported, synchronous Harness methods do nothing.
        Asynchronous methods will throw a WebGPUUnsupportedError that "rejects" the returned Promise.

        * TestExpectations:
        * platform/mac/TestExpectations:
        * webgpu/js/whlsl-test-harness.js:
        (WebGPUUnsupportedError): Layout tests should catch these to fail gracefully if WebGPU is not supported.
        (Data):
        (Data.prototype.async.getArrayBuffer):
        (Data.prototype.get isBuffer): Renamed from isPointer.
        (Harness):
        (Harness.prototype.async.requestDevice): Can be used to re-acquire a GPUDevice.
        (Harness.prototype.set isWHLSL): Determines whether harness will generate WHLSL or MSL shaders.
        (Harness.prototype.async.callTypedFunction):
        (Harness.prototype.callVoidFunction):
        (Harness.prototype.get device):
        (Harness.prototype._clearResults):
        (Harness.prototype._setUpArguments):
        (Harness.prototype._callFunction):
        (Data.prototype.get isPointer): Deleted.
        (Harness.prototype._initialize): Deleted.
        (Harness.prototype.async.callVoidFunction): Deleted.
        (harness._initialize.async): Deleted.
        * webgpu/msl-harness-test-expected.txt: Renamed from LayoutTests/webgpu/whlsl-harness-test-expected.txt.
        * webgpu/msl-harness-test.html: Copied from LayoutTests/webgpu/whlsl-harness-test.html.
        * webgpu/whlsl-test-harness-test-expected.html: Added.
        * webgpu/whlsl-test-harness-test.html: Renamed from LayoutTests/webgpu/whlsl-harness-test.html.

2019-06-25  Daniel Bates  <dabates@apple.com>

        Non-editable text selections should be modifiable with hardware keyboard
        https://bugs.webkit.org/show_bug.cgi?id=199204
        <rdar://problem/51651496>

        Reviewed by Wenson Hsieh.

        Add a test, skipped for now, until we have the fix for <rdar://problem/48322899>.

        * editing/selection/ios/select-non-editable-text-using-keyboard-expected.txt: Added.
        * editing/selection/ios/select-non-editable-text-using-keyboard.html: Added.
        * platform/ios/TestExpectations:
        * resources/ui-helper.js:
        (window.UIHelper.callFunctionAndWaitForEvent): Added.

2019-06-25  Daniel Bates  <dabates@apple.com>

        [iOS] Should not process key events in non-editable elements using IME
        https://bugs.webkit.org/show_bug.cgi?id=199122
        <rdar://problem/52006654>

        Reviewed by Brent Fulgham.

        Add a test to ensure that we do not process key events as being handled by the Input Manager
        when using a Chinese keyboard layout and targeting a non-editable element.

        * fast/events/ios/keydown-keyup-keypress-keys-in-non-editable-using-chinese-keyboard-expected.txt: Added.
        * fast/events/ios/keydown-keyup-keypress-keys-in-non-editable-using-chinese-keyboard.html: Added.

2019-06-25  Truitt Savell  <tsavell@apple.com>

        [macOS WK2] REGRESSION (r242313): Layout Test scrollingcoordinator/mac/multiple-fixed.html is a flaky time out and image diff
        https://bugs.webkit.org/show_bug.cgi?id=195635

        Unreviewed test gardening.

        * platform/mac/TestExpectations:

2019-06-25  John Wilander  <wilander@apple.com>

        Migrate LayoutTests/http/tests/resourceLoadStatistics/clear-in-memory-and-persistent-store* test cases to setEnableFeature() and jsTestIsAsync
        https://bugs.webkit.org/show_bug.cgi?id=199180
        <rdar://problem/52085369>

        Reviewed by Brent Fulgham.

        * http/tests/resourceLoadStatistics/clear-in-memory-and-persistent-store-expected.txt:
        * http/tests/resourceLoadStatistics/clear-in-memory-and-persistent-store-one-hour-expected.txt:
        * http/tests/resourceLoadStatistics/clear-in-memory-and-persistent-store-one-hour.html:
        * http/tests/resourceLoadStatistics/clear-in-memory-and-persistent-store.html:

2019-06-25  Russell Epstein  <russell_e@apple.com>

        Layout Test imported/mozilla/svg/text/textpath-selection.svg is flaky.
        https://bugs.webkit.org/show_bug.cgi?id=199196

        Unreviewed Test Gardening.

        * platform/ios-wk2/TestExpectations:

2019-06-25  Joseph Pecoraro  <pecoraro@apple.com>

        Web Inspector: Implement console.timeLog
        https://bugs.webkit.org/show_bug.cgi?id=199184

        Reviewed by Devin Rousso.

        * inspector/console/console-time-expected.txt:
        * inspector/console/console-time.html:
        Add new timeLog tests.

        * js/console-expected.txt:
        New timeLog method.

        * platform/gtk/TestExpectations:
        * platform/mac/TestExpectations:
        Unskip test.

2019-06-25  Fujii Hironori  <Hironori.Fujii@sony.com>

        Unreviewed test gardening

        * TestExpectations: Added webkit.org/b/184066 to imported/w3c/web-platform-tests/IndexedDB/nested-cloning-large-multiple.html and others.
        Added webkit.org/b/184065 to imported/w3c/web-platform-tests/IndexedDB/keypath-exceptions.htm.

2019-06-25  Fujii Hironori  <Hironori.Fujii@sony.com>

        [WinCairo] Unreviewed test gardening

        * platform/wincairo/TestExpectations: Added webkit.org/b/199186 to fonts/use-typo-metrics-1.html.
        Removed duplicated storage/indexeddb/key-type-array-private.html and storage/indexeddb/key-type-array.html.

2019-06-24  Wenson Hsieh  <wenson_hsieh@apple.com>

        [Text autosizing] [iPadOS] Revise our heuristics to determine idempotent text autosizing candidates
        https://bugs.webkit.org/show_bug.cgi?id=198763
        <rdar://problem/51826266>

        Reviewed by Simon Fraser.

        Rebaseline an existing text autosizing test, and introduce some new test cases that correspond to several common
        patterns of autosizable (or non-autosizable) text on websites that were surveyed.

        * fast/text-autosizing/ios/idempotentmode/idempotent-autosizing-after-changing-initial-scale.html:
        * fast/text-autosizing/ios/idempotentmode/idempotent-autosizing-candidates-expected.txt: Added.
        * fast/text-autosizing/ios/idempotentmode/idempotent-autosizing-candidates.html: Renamed from LayoutTests/fast/text-autosizing/ios/idempotentmode/idempotent-autosizing-skip.html.

        Rename this existing layout test too, to avoid using the term "skip" in the name of a layout test.

        * fast/text-autosizing/ios/idempotentmode/idempotent-autosizing-skip-expected.txt: Removed.

2019-06-24  Simon Fraser  <simon.fraser@apple.com>

        REGRESSION (r246725 ): Crashes on twitch.tv
        https://bugs.webkit.org/show_bug.cgi?id=199176

        Reviewed by Zalan Bujtas.

        * scrollingcoordinator/scrolling-tree/scroller-with-negative-z-child-expected.txt: Added.
        * scrollingcoordinator/scrolling-tree/scroller-with-negative-z-child.html: Added.

2019-06-24  Alexey Shvayka  <shvaikalesh@gmail.com>

        Add Array.prototype.{flat,flatMap} to unscopables
        https://bugs.webkit.org/show_bug.cgi?id=194322

        Reviewed by Keith Miller.

        * js/array-unscopables-properties-expected.txt:
        * js/script-tests/array-unscopables-properties.js:

2019-06-24  Jer Noble  <jer.noble@apple.com>

        iOS 12.2 Drawing portrait video to canvas is sideways
        https://bugs.webkit.org/show_bug.cgi?id=196772
        <rdar://problem/49781802>

        Reviewed by Eric Carlson.

        * media/content/no-rotation.mp4:
        * media/media-source/only-bcp47-language-tags-accepted-as-valid-expected.txt:
        * media/video-orientation-canvas-expected.txt: Added.
        * media/video-orientation-canvas.html: Added.
        * media/video-test.js:
        (waitFor):

2019-06-24  Daniel Bates  <dabates@apple.com>

        m_focusedElement != &element in WebPage::elementDidBlur() sometimes
        https://bugs.webkit.org/show_bug.cgi?id=198928
        <rdar://problem/51814327>

        Reviewed by Brent Fulgham.

        Update test result now that we do not mutate the focused frame on tap.

        * TestExpectations: Skip problematic test editing/deleting/smart-delete-paragraph-003.html;
        See <https://bugs.webkit.org/show_bug.cgi?id=198928#c16>, <https://bugs.webkit.org/show_bug.cgi?id=198928#c17>,
        and <https://bugs.webkit.org/show_bug.cgi?id=199039> for more details.
        * fast/events/ios/should-be-able-to-dismiss-form-accessory-after-tapping-outside-iframe-with-focused-field-expected.txt:

2019-06-24  Antoine Quint  <graouts@apple.com>

        [Pointer Events WPT] Unskip imported/w3c/web-platform-tests/pointerevents/pointerlock/pointerevent_coordinates_when_locked.html
        https://bugs.webkit.org/show_bug.cgi?id=197007

        Reviewed by Dean Jackson.

        This test now works reliably, even if it fails the actual assertions.

        * platform/mac/TestExpectations:

2019-06-24  Antoine Quint  <graouts@apple.com>

        [Pointer Events WPT] Unskip imported/w3c/web-platform-tests/pointerevents/pointerevent_lostpointercapture_is_first.html
        https://bugs.webkit.org/show_bug.cgi?id=197005

        Reviewed by Dean Jackson.

        * platform/mac-wk1/imported/w3c/web-platform-tests/pointerevents/pointerevent_mouse_capture_change_hover-expected.txt: Removed.
        * platform/mac-highsierra-wk1/imported/w3c/web-platform-tests/pointerevents/pointerevent_mouse_capture_change_hover-expected.txt: Removed.
        * platform/mac-highsierra/imported/w3c/web-platform-tests/pointerevents/pointerevent_mouse_capture_change_hover-expected.txt: Removed.
        Since we've fixed the issue with event dispatch in WK1, we can remove these platform-specific expectations.
        * platform/mac/TestExpectations: We no longer skip this test which works reliably.
        * pointerevents/mouse/pointer-capture.html: We modify this test to correctly expect the "gotpointercapture" event only once the next
        pointer event has been dispatched.

2019-06-24  Greg Doolittle  <gr3g@apple.com>

        Web Inspector: AXI: Audit: image label test is throwing spurious errors on elements with existing alt attr, but no value: <img alt>
        https://bugs.webkit.org/show_bug.cgi?id=194754

        Reviewed by Chris Fleizach.

        * accessibility/img-alt-attribute-unassigned-value-expected.txt: Added.
        * accessibility/img-alt-attribute-unassigned-value.html: Added.
        * inspector/dom/getAccessibilityPropertiesForNode-expected.txt:

2019-06-24  Antoine Quint  <graouts@apple.com>

        [Pointer Events] Respect pointer capture when dispatching mouse boundary events and updating :hover
        https://bugs.webkit.org/show_bug.cgi?id=198999
        <rdar://problem/51979477>

        Unreviewed.

        Rolling back all changes made for this bug (r246728 + r246716 + r246674) as it regressed one test
        (imported/w3c/web-platform-tests/pointerevents/pointerevent_mouse_pointercapture_in_frame.html).

        * platform/mac-highsierra-wk1/imported/w3c/web-platform-tests/pointerevents/pointerevent_mouse_capture_change_hover-expected.txt: Added.
        * platform/mac-highsierra/imported/w3c/web-platform-tests/pointerevents/pointerevent_mouse_capture_change_hover-expected.txt: Added.
        * platform/mac-wk1/imported/w3c/web-platform-tests/pointerevents/pointerevent_boundary_events_at_implicit_release_hoverable_pointers-expected.txt:
        * platform/mac-wk1/imported/w3c/web-platform-tests/pointerevents/pointerevent_click_during_capture-expected.txt: Removed.
        * platform/mac-wk1/imported/w3c/web-platform-tests/pointerevents/pointerevent_mouse_pointercapture_in_frame-expected.txt: Added.
        * platform/mac-wk1/imported/w3c/web-platform-tests/pointerevents/pointerevent_setpointercapture_relatedtarget-expected.txt:

2019-06-23  Fujii Hironori  <Hironori.Fujii@sony.com>

        [WinCairo] Unreviewed test gardening

        * platform/wincairo/TestExpectations:

2019-06-23  Simon Fraser  <simon.fraser@apple.com>

        [Async overflow scroll] Clipped composited layers inside overflow scroll jitter and get incorrectly clipped
        https://bugs.webkit.org/show_bug.cgi?id=199133
        rdar://problem/43614439

        Reviewed by Antti Koivisto.
        
        New baselines for:
        - clipping layers no longer have offsetFromRenderer(), which they didn't need.
        - positioned nodes don't print scrollBehavior (they are always "Stationary")
        - "Moves" positioned nodes are replaced with overflow scroll proxy nodes

        * compositing/backing/backing-store-attachment-empty-keyframe-expected.txt:
        * compositing/geometry/clip-expected.txt:
        * compositing/geometry/clip-inside-expected.txt:
        * compositing/geometry/limit-layer-bounds-clipping-ancestor-expected.txt:
        * compositing/layer-creation/clipping-scope/nested-scroller-overlap-expected.txt:
        * compositing/layer-creation/clipping-scope/nested-scroller-overlap.html:
        * compositing/layer-creation/clipping-scope/overlap-constrained-inside-scroller-expected.txt:
        * compositing/layer-creation/clipping-scope/scroller-with-negative-z-children-expected.txt:
        * compositing/overflow/clip-descendents-expected.txt:
        * compositing/overflow/scrolling-content-clip-to-viewport-expected.txt:
        * compositing/rtl/rtl-scrolling-with-transformed-descendants-expected.txt:
        * compositing/rtl/rtl-scrolling-with-transformed-descendants.html:
        * compositing/scrolling/async-overflow-scrolling/clipped-layer-in-overflow-clipped-by-scroll-expected.txt: Added.
        * compositing/scrolling/async-overflow-scrolling/clipped-layer-in-overflow-clipped-by-scroll.html: Added.
        * compositing/scrolling/async-overflow-scrolling/clipped-layer-in-overflow-expected.txt: Added.
        * compositing/scrolling/async-overflow-scrolling/clipped-layer-in-overflow-nested-expected.txt: Added.
        * compositing/scrolling/async-overflow-scrolling/clipped-layer-in-overflow-nested.html: Added.
        * compositing/scrolling/async-overflow-scrolling/clipped-layer-in-overflow.html: Added.
        * compositing/scrolling/async-overflow-scrolling/layer-in-overflow-clip-to-hidden-expected.txt: Added.
        * compositing/scrolling/async-overflow-scrolling/layer-in-overflow-clip-to-hidden.html: Added.
        * compositing/scrolling/async-overflow-scrolling/layer-in-overflow-clip-to-visible-expected.txt: Added.
        * compositing/scrolling/async-overflow-scrolling/layer-in-overflow-clip-to-visible.html: Added.
        * compositing/scrolling/async-overflow-scrolling/layer-in-overflow-expected.txt: Added.
        * compositing/scrolling/async-overflow-scrolling/layer-in-overflow-gain-clipping-layer-expected.txt: Added.
        * compositing/scrolling/async-overflow-scrolling/layer-in-overflow-gain-clipping-layer.html: Added.
        * compositing/scrolling/async-overflow-scrolling/layer-in-overflow-in-clipped-expected.txt: Added.
        * compositing/scrolling/async-overflow-scrolling/layer-in-overflow-in-clipped.html: Added.
        * compositing/scrolling/async-overflow-scrolling/layer-in-overflow-lose-clipping-layer-expected.txt: Added.
        * compositing/scrolling/async-overflow-scrolling/layer-in-overflow-lose-clipping-layer.html: Added.
        * compositing/scrolling/async-overflow-scrolling/layer-in-overflow.html: Added.
        * compositing/shared-backing/overflow-scroll/composited-absolute-in-absolute-in-relative-in-scroller-expected.txt:
        * compositing/shared-backing/overflow-scroll/previous-sibling-prevents-inclusiveness-expected.txt:
        * compositing/shared-backing/overflow-scroll/previous-sibling-prevents-inclusiveness.html:
        * platform/ios-wk2/compositing/layer-creation/clipping-scope/nested-scroller-overlap-expected.txt:
        * platform/ios-wk2/compositing/layer-creation/clipping-scope/overlap-constrained-inside-scroller-expected.txt:
        * platform/ios-wk2/compositing/layer-creation/clipping-scope/scroller-with-negative-z-children-expected.txt:
        * platform/ios-wk2/compositing/scrolling/async-overflow-scrolling/clipped-layer-in-overflow-clipped-by-scroll-expected.txt: Added.
        * platform/ios-wk2/compositing/scrolling/async-overflow-scrolling/clipped-layer-in-overflow-expected.txt: Added.
        * platform/ios-wk2/compositing/scrolling/async-overflow-scrolling/clipped-layer-in-overflow-nested-expected.txt: Added.
        * platform/ios-wk2/compositing/scrolling/async-overflow-scrolling/layer-in-overflow-clip-to-hidden-expected.txt: Added.
        * platform/ios-wk2/compositing/scrolling/async-overflow-scrolling/layer-in-overflow-clip-to-visible-expected.txt: Added.
        * platform/ios-wk2/compositing/scrolling/async-overflow-scrolling/layer-in-overflow-expected.txt: Added.
        * platform/ios-wk2/compositing/scrolling/async-overflow-scrolling/layer-in-overflow-gain-clipping-layer-expected.txt: Added.
        * platform/ios-wk2/compositing/scrolling/async-overflow-scrolling/layer-in-overflow-in-clipped-expected.txt: Added.
        * platform/ios-wk2/compositing/scrolling/async-overflow-scrolling/layer-in-overflow-lose-clipping-layer-expected.txt: Added.
        * platform/ios-wk2/compositing/shared-backing/overflow-scroll/composited-absolute-in-absolute-in-relative-in-scroller-expected.txt:
        * platform/ios-wk2/compositing/shared-backing/overflow-scroll/previous-sibling-prevents-inclusiveness-expected.txt:
        * platform/ios-wk2/scrollingcoordinator/scrolling-tree/absolute-in-nested-sc-scrollers-expected.txt:
        * platform/ios-wk2/scrollingcoordinator/scrolling-tree/absolute-inside-stacking-in-scroller-expected.txt:
        * platform/ios-wk2/scrollingcoordinator/scrolling-tree/clipped-layer-in-overflow-expected.txt: Copied from LayoutTests/platform/ios-wk2/scrollingcoordinator/scrolling-tree/absolute-inside-stacking-in-scroller-expected.txt.
        * platform/ios-wk2/scrollingcoordinator/scrolling-tree/clipped-layer-in-overflow-nested-expected.txt: Copied from LayoutTests/platform/ios-wk2/scrollingcoordinator/scrolling-tree/nested-overflow-scroll-expected.txt.
        * platform/ios-wk2/scrollingcoordinator/scrolling-tree/composited-in-absolute-in-stacking-context-overflow-expected.txt:
        * platform/ios-wk2/scrollingcoordinator/scrolling-tree/nested-absolute-in-absolute-overflow-expected.txt:
        * platform/ios-wk2/scrollingcoordinator/scrolling-tree/nested-absolute-in-relative-in-overflow-expected.txt:
        * platform/ios-wk2/scrollingcoordinator/scrolling-tree/nested-absolute-in-sc-overflow-expected.txt:
        * platform/ios-wk2/scrollingcoordinator/scrolling-tree/nested-overflow-scroll-expected.txt:
        * platform/ios-wk2/scrollingcoordinator/scrolling-tree/positioned-nodes-complex-expected.txt:
        * platform/ios-wk2/scrollingcoordinator/scrolling-tree/positioned-nodes-expected.txt:
        * platform/ios-wk2/scrollingcoordinator/scrolling-tree/sticky-in-overflow-expected.txt:
        * platform/ios/compositing/geometry/limit-layer-bounds-clipping-ancestor-expected.txt:
        * platform/ios/compositing/rtl/rtl-scrolling-with-transformed-descendants-expected.txt:
        * scrollingcoordinator/scrolling-tree/absolute-in-nested-sc-scrollers-expected.txt:
        * scrollingcoordinator/scrolling-tree/absolute-inside-stacking-in-scroller-expected.txt:
        * scrollingcoordinator/scrolling-tree/clipped-layer-in-overflow-expected.txt: Copied from LayoutTests/scrollingcoordinator/scrolling-tree/absolute-inside-stacking-in-scroller-expected.txt.
        * scrollingcoordinator/scrolling-tree/clipped-layer-in-overflow-nested-expected.txt: Copied from LayoutTests/scrollingcoordinator/scrolling-tree/nested-overflow-scroll-expected.txt.
        * scrollingcoordinator/scrolling-tree/clipped-layer-in-overflow-nested.html: Added.
        * scrollingcoordinator/scrolling-tree/clipped-layer-in-overflow.html: Added.
        * scrollingcoordinator/scrolling-tree/composited-in-absolute-in-stacking-context-overflow-expected.txt:
        * scrollingcoordinator/scrolling-tree/nested-absolute-in-absolute-overflow-expected.txt:
        * scrollingcoordinator/scrolling-tree/nested-absolute-in-relative-in-overflow-expected.txt:
        * scrollingcoordinator/scrolling-tree/nested-absolute-in-sc-overflow-expected.txt:
        * scrollingcoordinator/scrolling-tree/nested-overflow-scroll-expected.txt:
        * scrollingcoordinator/scrolling-tree/positioned-nodes-complex-expected.txt:
        * scrollingcoordinator/scrolling-tree/positioned-nodes-expected.txt:
        * scrollingcoordinator/scrolling-tree/sticky-in-overflow-expected.txt:

2019-06-23  Antoine Quint  <graouts@apple.com>

        [Pointer Events WPT] Unflake imported/w3c/web-platform-tests/pointerevents/pointerevent_mouse_pointercapture_in_frame.html
        https://bugs.webkit.org/show_bug.cgi?id=197058

        Unreviewed test gardening.

        * platform/mac/TestExpectations:

2019-06-23  Antoine Quint  <graouts@apple.com>

        [Pointer Events WPT] Unflake imported/w3c/web-platform-tests/pointerevents/pointerevent_setpointercapture_invalid_pointerid.html
        https://bugs.webkit.org/show_bug.cgi?id=197009

        Unreviewed test gardening.

        This test some being flaky as of r245809, the fix for wkb.ug/198191.

        * platform/mac/TestExpectations:

2019-06-22  Andres Gonzalez  <andresg_22@apple.com>

        Accessibility objects contained in links should honor the aria-haspopup attribute in the ancestor link.
        https://bugs.webkit.org/show_bug.cgi?id=199107
        <rdar://problem/43663611>

        Reviewed by Chris Fleizach.

        * accessibility/element-haspopup-expected.txt:
        * accessibility/element-haspopup.html: Added cases for a <p> element contained within <a>.
        * accessibility/ios-simulator/button-with-aria-haspopup-role-expected.txt: Added.
        * accessibility/ios-simulator/button-with-aria-haspopup-role.html: Added. Existed for MacOS and now also for iOS.
        * accessibility/ios-simulator/element-haspopup-expected.txt: Copied from LayoutTests/accessibility/element-haspopup-expected.txt.
        * accessibility/ios-simulator/element-haspopup.html: Added.

2019-06-21  Sihui Liu  <sihui_liu@apple.com>

        openDatabase should return an empty object when WebSQL is disabled
        https://bugs.webkit.org/show_bug.cgi?id=198805

        Reviewed by Geoffrey Garen.

        Modify test expectation as openDatabase is not a function but an attribute of window now.

        * js/dom/global-function-resolve-expected.txt:
        * js/dom/script-tests/global-function-resolve.js:

2019-06-21  Saam Barati  <sbarati@apple.com>

        [WHLSL] Code that accesses an undefined variable crashes
        https://bugs.webkit.org/show_bug.cgi?id=198775

        Reviewed by Myles C. Maxfield.

        * webgpu/whlsl-use-undefined-variable-2-expected.txt: Added.
        * webgpu/whlsl-use-undefined-variable-2.html: Added.
        * webgpu/whlsl-use-undefined-variable-expected.txt: Added.
        * webgpu/whlsl-use-undefined-variable.html: Added.

2019-06-21  Truitt Savell  <tsavell@apple.com>

        Unreviewed, rolling out r246611.

        Introduced a flakey test.

        Reverted changeset:

        "iOS 12.2 Drawing portrait video to canvas is sideways"
        https://bugs.webkit.org/show_bug.cgi?id=196772
        https://trac.webkit.org/changeset/246611

2019-06-21  Myles C. Maxfield  <mmaxfield@apple.com>

        [WHLSL] read modify write expressions do no work as expected
        https://bugs.webkit.org/show_bug.cgi?id=195864

        Unreviewed test gardening.

        * webgpu/whlsl-read-modify-write-expected.txt: Added.

2019-06-21  Tim Horton  <timothy_horton@apple.com>

        Preview of <picture> element doesn't match element bounds
        https://bugs.webkit.org/show_bug.cgi?id=199049
        <rdar://problem/51474402>

        Reviewed by Simon Fraser.

        * fast/text-indicator/text-indicator-uses-img-size-inside-picture-expected.txt: Added.
        * fast/text-indicator/text-indicator-uses-img-size-inside-picture.html: Added.

2019-06-21  Antoine Quint  <graouts@apple.com>

        [iOS] Compatibility mouse events aren't prevented by calling preventDefault() on pointerdown
        https://bugs.webkit.org/show_bug.cgi?id=198124

        Reviewed by Dean Jackson.

        Add a new test that checks that calling preventDefault() within a "pointerdown" event handler correctly prevents
        the dispatch of compatibility mouse events even with a slow tap. 

        * pointerevents/ios/pointer-events-no-mousedown-when-prevent-default-called-on-pointerdown-expected.txt: Added.
        * pointerevents/ios/pointer-events-no-mousedown-when-prevent-default-called-on-pointerdown.html: Added.

2019-06-21  Russell Epstein  <russell_e@apple.com>

        Layout Test animations/change-one-anim.html is flaky.
        https://bugs.webkit.org/show_bug.cgi?id=190882

        Unreviewed Test Gardening.

        * platform/ios-wk2/TestExpectations:
        * platform/mac/TestExpectations:

2019-06-21  Youenn Fablet  <youenn@apple.com>

        Safari crashes after ~2028 OfflineAudioContext objects are created (they never get garbage collected, consuming a thread each)
        https://bugs.webkit.org/show_bug.cgi?id=198964
        <rdar://problem/51891520>

        Reviewed by Jer Noble.

        * webaudio/offlineaudiocontext-gc-expected.txt: Added.
        * webaudio/offlineaudiocontext-gc.html: Added.

2019-06-21  Truitt Savell  <tsavell@apple.com>

        Unreviewed, rolling out r246655.

        Introduced a failing test

        Reverted changeset:

        "Web Inspector: AXI: Audit: image label test is throwing
        spurious errors on elements with existing alt attr, but no
        value: <img alt>"
        https://bugs.webkit.org/show_bug.cgi?id=194754
        https://trac.webkit.org/changeset/246655

2019-06-21  Myles C. Maxfield  <mmaxfield@apple.com>

        [WHLSL] read modify write expressions do no work as expected
        https://bugs.webkit.org/show_bug.cgi?id=195864

        Reviewed by Saam Barati.

        * webgpu/whlsl-read-modify-write.html: Added.

2019-06-21  Carlos Garcia Campos  <cgarcia@igalia.com>

        Unreviewed GTK gardening. Rebaseline css-dark-mode/default-colors.html.

        * platform/gtk/TestExpectations:
        * platform/gtk/css-dark-mode/default-colors-expected.txt:

2019-06-21  Carlos Garcia Campos  <cgarcia@igalia.com>

        Unreviewed GTK gardening. Skip touch event tests.

        Since r245788 touch events support is enabled at runtime depending on whether there's an actual touch device
        attached or not. We need to skip the tests in the bots since they don't have a touch screen.

        * platform/gtk/TestExpectations:
        * platform/gtk/fast/events/event-attribute-expected.txt: Removed.
        * platform/gtk/fast/events/touch/document-create-touch-list-expected.txt: Removed.

2019-06-20  Antoine Quint  <graouts@apple.com>

        [Pointer Events] Respect pointer capture when dispatching mouse boundary events and updating :hover
        https://bugs.webkit.org/show_bug.cgi?id=198999

        Reviewed by Dean Jackson.

        Record progressions in two WPT tests and mark updated failures in two other WPT tests.

        * platform/mac-highsierra-wk1/imported/w3c/web-platform-tests/pointerevents/pointerevent_mouse_capture_change_hover-expected.txt: Removed.
        * platform/mac-highsierra/imported/w3c/web-platform-tests/pointerevents/pointerevent_mouse_capture_change_hover-expected.txt: Removed.
        * platform/mac-wk1/imported/w3c/web-platform-tests/pointerevents/pointerevent_boundary_events_at_implicit_release_hoverable_pointers-expected.txt:
        * platform/mac-wk1/imported/w3c/web-platform-tests/pointerevents/pointerevent_click_during_capture-expected.txt: Added.
        * platform/mac-wk1/imported/w3c/web-platform-tests/pointerevents/pointerevent_mouse_pointercapture_in_frame-expected.txt: Removed.
        * platform/mac-wk1/imported/w3c/web-platform-tests/pointerevents/pointerevent_setpointercapture_relatedtarget-expected.txt:

2019-06-20  Antoine Quint  <graouts@apple.com>

        fast/events/ios/click-event-and-display-contents.html times out on iPad
        https://bugs.webkit.org/show_bug.cgi?id=199068
        <rdar://problem/51899547>

        Reviewed by Dean Jackson.

        Querying the bounds of a "display: contents" element will always return 0 width and height. So let's position the element at 0,0
        so that we can send a tap at that location and reliably tap on that element.

        * fast/events/ios/click-event-and-display-contents.html:

2019-06-20  Simon Fraser  <simon.fraser@apple.com>

        Make it possible to include clipping in GraphicsLayer tree dumps
        https://bugs.webkit.org/show_bug.cgi?id=199096

        Reviewed by Zalan Bujtas.

        * compositing/clipping/border-radius-async-overflow-clipping-layer-expected.txt:
        * compositing/clipping/border-radius-async-overflow-clipping-layer.html:
        * compositing/clipping/border-radius-overflow-hidden-stacking-context-expected.txt:
        * compositing/clipping/border-radius-overflow-hidden-stacking-context.html:
        * platform/mac-wk1/compositing/clipping/border-radius-async-overflow-clipping-layer-expected.txt:

2019-06-20  Greg Doolittle  <gr3g@apple.com>

        Web Inspector: AXI: Audit: image label test is throwing spurious errors on elements with existing alt attr, but no value: <img alt>
        https://bugs.webkit.org/show_bug.cgi?id=194754

        Reviewed by Chris Fleizach.

        * accessibility/img-alt-attribute-unassigned-value-expected.txt: Added.
        * accessibility/img-alt-attribute-unassigned-value.html: Added.
        * inspector/dom/getAccessibilityPropertiesForNode-expected.txt:

2019-06-20  Saam Barati  <sbarati@apple.com>

        [WHLSL] Property resolver needs to recurse on newValueExpression for RMW operations
        https://bugs.webkit.org/show_bug.cgi?id=199037

        Reviewed by Myles C. Maxfield.

        * webgpu/whlsl-read-modify-write-high-zombies-expected.txt: Added.
        * webgpu/whlsl-read-modify-write-high-zombies.html: Added.

2019-06-20  Justin Fan  <justin_fan@apple.com>

        [WebGPU] High Sierra/Intel HD Graphics 4000: whlsl-harness-test.html crashes during dispatch call.
        https://bugs.webkit.org/show_bug.cgi?id=199076

        Unreviewed test gardening.

        * platform/mac/TestExpectations: Skip the test on High Sierra.

2019-06-20  Justin Michaud  <justin_michaud@apple.com>

        [WASM-References] Add extra tests for Wasm references + fix element parsing and subtyping bugs
        https://bugs.webkit.org/show_bug.cgi?id=199044

        Reviewed by Saam Barati.

        Add wasm references spec tests as well as a worker test. 

        * workers/wasm-references.html: Added.
        * workers/wasm-references/test.js: Added.
        (const._fail):
        (const.isNotA.assert.isNotA):
        (const):
        (switch.typeof):
        (Builder):
        (Builder.prototype.setChecked):
        (Builder.prototype.setPreamble):
        (Builder.prototype._functionIndexSpaceKeyHash):
        (Builder.prototype._registerFunctionToIndexSpace):
        (Builder.prototype._getFunctionFromIndexSpace):
        (Builder.prototype._registerSectionBuilders.const.section.in.WASM.description.section.switch.section.case.string_appeared_here.this.section):
        (Builder.prototype._registerSectionBuilders.const.section.in.WASM.description.section.switch.section.const.codeBuilder.End.switch.case.string_appeared_here.e):
        (Builder.prototype._registerSectionBuilders.this.Unknown):
        (done):
        (runTest.worker.onmessage):
        (runTest):
        (doGC):
        * workers/wasm-references/worker.js: Added.
        (const._fail):
        (const.isNotA.assert.isNotA):

2019-06-20  Youenn Fablet  <youenn@apple.com>

        Changing settings of a MediaStreamTrack clone should not alter the settings of the original track
        https://bugs.webkit.org/show_bug.cgi?id=198840

        Reviewed by Eric Carlson.

        * fast/mediastream/mediastreamtrack-video-clone-expected.txt: Added.
        * fast/mediastream/mediastreamtrack-video-clone.html: Added.

2019-06-20  Russell Epstein  <russell_e@apple.com>

        Layout Test imported/blink/fast/css/user-select-none.html is flaky.
        https://bugs.webkit.org/show_bug.cgi?id=199071

        Unreviewed Test Gardening.

        * platform/ios-wk2/TestExpectations:

2019-06-20  Shawn Roberts  <sroberts@apple.com>

        Moving expectations files
        https://bugs.webkit.org/show_bug.cgi?id=196495

        Unreviewed test gardening.

        * platform/ios-simulator-wk2/TestExpectations:
        * platform/ios-wk2/TestExpectations:

2019-06-20  Alexander Mikhaylenko  <exalm7659@gmail.com>

        [GTK] Enable navigation swipe layout tests
        https://bugs.webkit.org/show_bug.cgi?id=198995

        Reviewed by Michael Catanzaro.

        Enable the existing tests for the swipe gesture.

        swipe/pushState-programmatic-back-while-swiping-crash.html is not applicable because
        it deals with NSEvents directly, skip it.

        swipe/main-frame-pinning-requirement.html is flaky, same as on Mac.

        swipe/pushstate-with-manual-scrollrestoration.html passes, don't mark it as failure.

        * platform/gtk/TestExpectations:

2019-06-20  Alexander Mikhaylenko  <exalm7659@gmail.com>

        [GTK] HTTP layout tests don't run in flatpak
        https://bugs.webkit.org/show_bug.cgi?id=199067

        Reviewed by Michael Catanzaro.

        Set PERL5LIB environment variable in Apache config.

        * http/conf/flatpak-httpd.conf:

2019-06-18  Darin Adler  <darin@apple.com>

        Tidy up the remaining bits of the AtomicString to AtomString rename
        https://bugs.webkit.org/show_bug.cgi?id=198990

        Reviewed by Michael Catanzaro.

        * js/dopey-rope-with-16-bit-propertyname-expected.txt: Rename to AtomString.
        * js/dopey-rope-with-16-bit-propertyname.html: Ditto.

2019-06-19  Myles C. Maxfield  <mmaxfield@apple.com>

        [WHLSL] Hook up common texture functions
        https://bugs.webkit.org/show_bug.cgi?id=198704
        <rdar://problem/51668841>

        Reviewed by Saam Barati.

        Make the text tests play better with js-test-pre.js.

        * webgpu/whlsl-buffer-length.html:
        * webgpu/whlsl-compute-expected.txt:
        * webgpu/whlsl-compute.html:
        * webgpu/whlsl-duplicate-types-should-not-produce-duplicate-ctors.html:
        * webgpu/whlsl-null-dereference-expected.txt:
        * webgpu/whlsl-null-dereference.html:
        * webgpu/whlsl-oob-access-expected.txt:
        * webgpu/whlsl-oob-access.html:
        * webgpu/whlsl-textures-getdimensions-expected.txt: Added.
        * webgpu/whlsl-textures-getdimensions.html: Copied from LayoutTests/webgpu/whlsl-buffer-length.html.
        * webgpu/whlsl-textures-load-expected.html: Added.
        * webgpu/whlsl-textures-load.html: Added.
        * webgpu/whlsl-textures-sample-expected.html: Added.
        * webgpu/whlsl-textures-sample.html: Added.

2019-06-19  Rob Buis  <rbuis@igalia.com>

        Make preload/link-header-preload-imagesrcset.html work on DPR != 1
        https://bugs.webkit.org/show_bug.cgi?id=198533

        Reviewed by Youenn Fablet.

        Remove unneeded iOS test expectations.

        * platform/ios-simulator-12-wk2/imported/w3c/web-platform-tests/preload/dynamic-adding-preload-imagesrcset-expected.txt: Removed.
        * platform/ios-simulator-12-wk2/imported/w3c/web-platform-tests/preload/link-header-preload-imagesrcset-expected.txt: Removed.

2019-06-19  Justin Fan  <justin_fan@apple.com>

        [WHLSL] Create a shading language test harness
        https://bugs.webkit.org/show_bug.cgi?id=198978

        Reviewed by Myles C. Maxfield.

        Introduce a test harness that can be used to test WebGPU shader compilation and functionality.
        Currently using MSL. 
        Will be replaced with WHLSL as it gains the minimum features needed to support.

        * webgpu/js/whlsl-test-harness.js: Added.
        (isVectorType):
        (convertTypeToArrayType):
        (convertTypeToWHLSLType):
        (Data):
        (Data.prototype.async.getArrayBuffer):
        (Data.prototype.get type):
        (Data.prototype.get isPointer):
        (Data.prototype.get buffer):
        (Data.prototype.get byteLength):
        (Harness.prototype._initialize):
        (Harness.prototype.async.callTypedFunction):
        (Harness.prototype.async.callVoidFunction):
        (Harness.prototype._setUpArguments):
        (Harness.prototype._callFunction):
        (Harness):
        (harness._initialize.async):
        (makeBool):
        (makeInt):
        (makeUchar):
        (makeUint):
        (makeFloat):
        (makeFloat4):
        (async.callBoolFunction):
        (async.callIntFunction):
        (async.callUcharFunction):
        (async.callUintFunction):
        (async.callFloatFunction):
        (async.callFloat4Function):
        (callVoidFunction):
        * webgpu/whlsl-harness-test-expected.txt: Added.
        * webgpu/whlsl-harness-test.html: Added.

2019-06-19  Saam Barati  <sbarati@apple.com>

        [WHLSL] The checker needs to resolve types for the anonymous variables in ReadModifyWrite expressions
        https://bugs.webkit.org/show_bug.cgi?id=198988

        Reviewed by Dean Jackson and Myles C. Maxfield.

        * webgpu/whlsl-checker-should-set-type-of-read-modify-write-variables-expected.txt: Added.
        * webgpu/whlsl-checker-should-set-type-of-read-modify-write-variables.html: Added.

2019-06-19  Nikita Vasilyev  <nvasilyev@apple.com>

        REGRESSION(r240946): Web Inspector: Styles: Pasting multiple properties has issues
        https://bugs.webkit.org/show_bug.cgi?id=198505
        <rdar://problem/51374780>

        Reviewed by Matt Baker.

        * inspector/css/modify-css-property.html:
        Listen for PropertiesChanged on the specific inline style declaration.
        In Debug, PropertiesChanged may fire on a computed style declaration first,
        causing the test to fail.

        * inspector/css/pseudo-element-matches-for-pseudo-element-node.html:
        Drive-by: fix trailing white space.

2019-06-19  Ryan Haddad  <ryanhaddad@apple.com>

        REGRESSION: ( r246394 ) webgpu/whlsl-buffer-fragment.html and webgpu/whlsl-buffer-vertex.html are failing
        https://bugs.webkit.org/show_bug.cgi?id=199012

        Unreviewed test gardening.

        * platform/mac-wk2/TestExpectations: Limit the failure expectation to High Sierra.

2019-06-19  Russell Epstein  <russell_e@apple.com>

        Layout Tests in imported/w3c/web-platform-tests/websockets/ are flakey failures after r246406.
        https://bugs.webkit.org/show_bug.cgi?id=199013

        Unreviewed Test Gardening.

        * TestExpectations:

2019-06-19  Jer Noble  <jer.noble@apple.com>

        iOS 12.2 Drawing portrait video to canvas is sideways
        https://bugs.webkit.org/show_bug.cgi?id=196772
        <rdar://problem/49781802>

        Reviewed by Eric Carlson.

        * media/content/no-rotation.mp4:
        * media/media-source/only-bcp47-language-tags-accepted-as-valid-expected.txt:
        * media/video-orientation-canvas-expected.html: Added.
        * media/video-orientation-canvas.html: Added.
        * media/video-test.js:
        (waitFor):

2019-06-19  Alicia Boya García  <aboya@igalia.com>

        [GTK] Unreviewed test gardening
        https://bugs.webkit.org/show_bug.cgi?id=199021

        * platform/gtk/TestExpectations:

2019-06-19  Simon Fraser  <simon.fraser@apple.com>

        Revert parts of r246538 so that frame scrolling is reverted to using layer positions.
        Overflow scroll will still scroll by changing boundsOrigin.
        
        The bug was caused by confusion about insetClipLayer and scrollContainerLayer; macOS
        positions the clip layer using FrameView::yPositionForInsetClipLayer(), so it's not just
        a simple scroll container, and this change broke positioning for fixed position layers.

        * compositing/iframes/scrolling-iframe-expected.txt:
        * compositing/repaint/iframes/compositing-iframe-scroll-repaint-expected.txt:
        * compositing/repaint/iframes/compositing-iframe-with-fixed-background-doc-repaint-expected.txt:
        * platform/ios-wk2/compositing/iframes/scrolling-iframe-expected.txt:
        * platform/ios-wk2/scrollingcoordinator/scrolling-tree/fixed-inside-frame-expected.txt:
        * platform/mac-highsierra-wk1/compositing/repaint/iframes/compositing-iframe-scroll-repaint-expected.txt:
        * platform/mac-highsierra-wk1/compositing/repaint/iframes/compositing-iframe-with-fixed-background-doc-repaint-expected.txt:
        * platform/mac-sierra-wk1/compositing/repaint/iframes/compositing-iframe-scroll-repaint-expected.txt:
        * platform/mac-wk1/compositing/repaint/iframes/compositing-iframe-scroll-repaint-expected.txt:
        * platform/mac-wk1/compositing/repaint/iframes/compositing-iframe-with-fixed-background-doc-repaint-expected.txt:
        * scrollingcoordinator/scrolling-tree/fixed-inside-frame-expected.txt:

2019-06-19  Russell Epstein  <russell_e@apple.com>

        webgpu/blend-color-triangle-strip.html is a flakey failure since introduction.
        https://bugs.webkit.org/show_bug.cgi?id=198921

        Unreviewed Test Gardening.

        * platform/mac-wk2/TestExpectations:

2019-06-19  Russell Epstein  <russell_e@apple.com>

        Layout Test imported/w3c/web-platform-tests/websockets/Create-Secure-verify-url-set-non-default-port.any.html is failing.
        https://bugs.webkit.org/show_bug.cgi?id=199013

        Unreviewed Test Gardening.

        * platform/ios-wk2/TestExpectations:
        * platform/mac/TestExpectations:

2019-06-19  Antti Koivisto  <antti@apple.com>

        RequestedScrollPosition shouldn't be applied after node reattach
        https://bugs.webkit.org/show_bug.cgi?id=198994
        <rdar://problem/51439685>

        Reviewed by Simon Fraser.

        * scrollingcoordinator/ios/scroll-position-after-reattach-expected.html: Added.
        * scrollingcoordinator/ios/scroll-position-after-reattach.html: Added.

2019-06-19  Truitt Savell  <tsavell@apple.com>

        REGRESSION: ( r246394 ) webgpu/whlsl-buffer-fragment.html and webgpu/whlsl-buffer-vertex.html are failing
        https://bugs.webkit.org/show_bug.cgi?id=199012

        Unreviewed test gardening.

        * platform/mac-wk2/TestExpectations:

2019-06-19  Cathie Chen  <cathiechen@igalia.com>

        resize-observer/element-leak.html is a flaky failure
        https://bugs.webkit.org/show_bug.cgi?id=198666

        Reviewed by Frédéric Wang.

        It takes a very long time to construct iframes which create and remove 1000 elements. This would cause timeout sometimes.
        In order to make it more effective, reduce the number of elements to 200 and put them into a container first,
        then attach the container to DOM tree.

        * resize-observer/resources/element-leak-frame.html:

2019-06-18  Megan Gardner  <megan_gardner@apple.com>

        Text Selection gesture has changed behavior, change test to match new behavior
        https://bugs.webkit.org/show_bug.cgi?id=198980
        <rdar://problem/51713918>

        Reviewed by Wenson Hsieh.

        Long press and drag now starts a selection and entends the range, rather than changing
        the start of the text selection. Update the test to match the new behavior. 

        * fast/events/touch/ios/long-press-then-drag-to-select-text.html:

2019-06-18  Saam Barati  <sbarati@apple.com>

        [WHLSL] Support matrices
        https://bugs.webkit.org/show_bug.cgi?id=198876
        <rdar://problem/51768882>

        Reviewed by Dean Jackson and Myles Maxfield.

        * webgpu/whlsl-matrix-2-expected.txt: Added.
        * webgpu/whlsl-matrix-2.html: Added.
        * webgpu/whlsl-matrix-expected.txt: Added.
        * webgpu/whlsl-matrix.html: Added.

2019-06-18  Russell Epstein  <russell_e@apple.com>

        Layout Test imported/w3c/web-platform-tests/content-security-policy/reporting/report-only-in-meta.sub.html is failing.
        https://bugs.webkit.org/show_bug.cgi?id=198977

        Unreviewed Test Gardening.

        * platform/mac-wk1/TestExpectations:

2019-06-18  Russell Epstein  <russell_e@apple.com>

        Layout test http/tests/websocket/tests/hybi/send-object-tostring-check.html is flaky.
        https://bugs.webkit.org/show_bug.cgi?id=176030

        Unreviewed Test Gardening.

        * platform/ios-wk2/TestExpectations:
        * platform/mac-wk2/TestExpectations:

2019-06-18  Daniel Bates  <dabates@apple.com>

        REGRESSION (r240757): Cannot dismiss the keyboard on http://apple.com/apple-tv-plus
        https://bugs.webkit.org/show_bug.cgi?id=198922
        <rdar://problem/50300056>

        Reviewed by Wenson Hsieh.

        Add a test to ensure that pressing Done hides the keyboard after tapping outside the focused
        element's frame.

        * fast/events/ios/should-be-able-to-dismiss-form-accessory-after-tapping-outside-iframe-with-focused-field-expected.txt: Added.
        * fast/events/ios/should-be-able-to-dismiss-form-accessory-after-tapping-outside-iframe-with-focused-field.html: Added.
        * resources/ui-helper.js:
        (window.UIHelper.dismissFormAccessoryView): Added.

2019-06-18  Alexey Shvayka  <shvaikalesh@gmail.com>

        [ESNExt] String.prototype.matchAll
        https://bugs.webkit.org/show_bug.cgi?id=186694

        Reviewed by Yusuke Suzuki.

        Implement String.prototype.matchAll.
        (https://tc39.es/ecma262/#sec-string.prototype.matchall)

        * js/Object-getOwnPropertyNames-expected.txt:
        * js/script-tests/Object-getOwnPropertyNames.js:

2019-06-18  Keith Miller  <keith_miller@apple.com>

        Add support for WeakRef
        https://bugs.webkit.org/show_bug.cgi?id=198710

        Reviewed by Yusuke Suzuki.

        Add an asyncTestStart that mirrors the asyncTestStart behavior in
        the JSC cli.

        * http/tests/resources/js-test-pre.js:
        (asyncTestStart):
        * js/script-tests/weakref-async-is-collected.js: Added.
        (makeWeakRef):
        (turnEventLoop):
        (async.foo):
        (async.test):
        * js/script-tests/weakref-eventually-collects-values.js: Added.
        (makeWeakRef):
        (turnEventLoop):
        (let.weakRefs.async.test):
        * js/script-tests/weakref-microtasks-dont-collect.js: Added.
        (asyncTestStart.1.makeWeakRef):
        (turnEventLoop):
        (async.foo):
        (async.test):
        * js/script-tests/weakref-weakset-consistency.js: Added.
        (makeWeakRef):
        (turnEventLoop):
        (async.foo):
        (async.test):
        * js/weakref-async-is-collected-expected.txt: Added.
        * js/weakref-async-is-collected.html: Added.
        * js/weakref-eventually-collects-values-expected.txt: Added.
        * js/weakref-eventually-collects-values.html: Added.
        * js/weakref-microtasks-dont-collect-expected.txt: Added.
        * js/weakref-microtasks-dont-collect.html: Added.
        * js/weakref-weakset-consistency-expected.txt: Added.
        * js/weakref-weakset-consistency.html: Added.
        * resources/js-test-pre.js:
        (asyncTestStart):

2019-06-18  Daniel Bates  <dabates@apple.com>

        [iOS] Pressing key while holding Command should not insert character
        https://bugs.webkit.org/show_bug.cgi?id=198925
        <rdar://problem/51778811>

        Reviewed by Brent Fulgham.

        Add a test that Command + Shift + v does not insert a v as we don't expect it
        to as of the time of writing. A more comprehensive test would be needed to
        ensure that all unhandled key commands with Command modifiers do not insert
        a character. For now, the added test seems good enough.

        * fast/events/ios/command+shift+v-should-not-insert-v-expected.txt: Added.
        * fast/events/ios/command+shift+v-should-not-insert-v.html: Added.

2019-06-18  Russell Epstein  <russell_e@apple.com>

        [iOS] Layout Test http/tests/resourceLoadStatistics/website-data-removal-for-site-navigated-to-with-link-decoration.html is frequently failing or timing out.
        https://bugs.webkit.org/show_bug.cgi?id=198185.

        Unreviewed Test Gardening.

        * platform/ios-wk2/TestExpectations:

2019-06-18  Devin Rousso  <drousso@apple.com>

        Web Inspector: parseQueryParameters fails to successfully parse query parameter values that contain "="
        https://bugs.webkit.org/show_bug.cgi?id=198971
        <rdar://problem/51852782>

        Reviewed by Joseph Pecoraro.

        * inspector/unit-tests/url-utilities.html:
        * inspector/unit-tests/url-utilities-expected.txt:

2019-06-18  Saam Barati  <sbarati@apple.com>

        [WHLSL] Do not generate duplicate constructors/copy constructors in synthesizeConstructors
        https://bugs.webkit.org/show_bug.cgi?id=198580

        Reviewed by Robin Morisset.

        * webgpu/whlsl-duplicate-types-should-not-produce-duplicate-ctors-expected.txt: Added.
        * webgpu/whlsl-duplicate-types-should-not-produce-duplicate-ctors.html: Added.

2019-06-18  Simon Fraser  <simon.fraser@apple.com>

        Convert macOS to scroll by changing layer boundsOrigin
        https://bugs.webkit.org/show_bug.cgi?id=198917

        Reviewed by Antti Koivisto.

        * compositing/iframes/scrolling-iframe-expected.txt:
        * compositing/overflow/textarea-scroll-touch-expected.txt:
        * compositing/repaint/iframes/compositing-iframe-scroll-repaint-expected.txt:
        * compositing/repaint/iframes/compositing-iframe-with-fixed-background-doc-repaint-expected.txt:
        * compositing/repaint/scroller-with-foreground-layer-repaints-expected.txt:
        * compositing/rtl/rtl-scrolling-with-transformed-descendants-expected.txt:
        * scrollingcoordinator/scrolling-tree/fixed-inside-frame-expected.txt:

2019-06-18  Zan Dobersek  <zdobersek@igalia.com>

        [WebGL] Extensions3DOpenGLES::bindVertexArrayOES() should allow zero array object
        https://bugs.webkit.org/show_bug.cgi?id=198929

        Reviewed by Carlos Garcia Campos.

        Enable the passing tests and update one baseline.

        * platform/wpe/TestExpectations:
        * platform/wpe/webgl/2.0.0/conformance/extensions/oes-vertex-array-object-expected.txt:

2019-06-17  Saam Barati  <sbarati@apple.com>

        [WHLSL] Make .length work
        https://bugs.webkit.org/show_bug.cgi?id=198890

        Reviewed by Myles Maxfield.

        * TestExpectations:
        * webgpu/whlsl-buffer-length-expected.txt: Added.
        * webgpu/whlsl-buffer-length.html: Added.
        * webgpu/whlsl-buffer-vertex.html:
        * webgpu/whlsl-compute.html:
        * webgpu/whlsl-null-dereference.html:
        * webgpu/whlsl-oob-access.html:

2019-06-17  Shawn Roberts  <sroberts@apple.com>

        scrollingcoordinator/ios/sync-layer-positions-after-scroll.html is a flaky failure on iOS Simulator
        https://bugs.webkit.org/show_bug.cgi?id=172001

        Unreviewed test gardening.

        * platform/ios-simulator-wk2/TestExpectations:

2019-06-17  Simon Fraser  <simon.fraser@apple.com>

        Add missing test result after r246471. EWS didn't show any failure when it was missing.

        * compositing/overflow/composited-scrolling-paint-phases-expected.txt: Added.

2019-06-16  Darin Adler  <darin@apple.com>

        Convert some uses of fixed width and fixed precision floating point formatting to use shortest instead
        https://bugs.webkit.org/show_bug.cgi?id=198896

        Reviewed by Sam Weinig.

        * fast/loader/stateobjects/pushstate-frequency-expected.txt:
        * fast/loader/stateobjects/pushstate-frequency-iframe-expected.txt:
        * fast/loader/stateobjects/replacestate-frequency-expected.txt:
        * fast/loader/stateobjects/replacestate-frequency-iframe-expected.txt:
        Updated to expect cleaner output without ".000000".

2019-06-15  Simon Fraser  <simon.fraser@apple.com>

        Make layerTreeAsText() output a bit less verbose
        https://bugs.webkit.org/show_bug.cgi?id=198870

        Reviewed by Tim Horton.

        * compositing/overflow/stacking-context-composited-scroller-with-foreground-paint-phases-expected.txt:
        * platform/gtk/compositing/overflow/composited-scrolling-paint-phases-expected.txt:
        * platform/ios-wk2/compositing/overflow/stacking-context-composited-scroller-with-foreground-paint-phases-expected.txt:
        * platform/mac-wk1/compositing/overflow/stacking-context-composited-scroller-with-foreground-paint-phases-expected.txt:
        * platform/mac/compositing/overflow/composited-scrolling-paint-phases-expected.txt: Removed.

2019-06-15  Rob Buis  <rbuis@igalia.com>

        Add tests for prefetch redirects
        https://bugs.webkit.org/show_bug.cgi?id=197371

        Reviewed by Youenn Fablet.

        Add a test to verify prefetch redirections are cached in the prefetch
        cache and reused when navigating.

        * http/wpt/prefetch/link-prefetch-main-resource-redirect-expected.txt: Added.
        * http/wpt/prefetch/link-prefetch-main-resource-redirect.html: Added.
        * http/wpt/prefetch/resources/main-resource-redirect-no-prefetch.py: Added.
        (main):
        * http/wpt/prefetch/resources/navigate.html: Added.
        * http/wpt/prefetch/resources/prefetched-main-resource-redirect.py: Added.
        (main):
        * platform/mac-wk1/TestExpectations:
        * platform/win/TestExpectations:

2019-06-15  Saam Barati  <sbarati@apple.com>

        Unreviewed. Temporarily mark webgpu/whlsl-oob-access.html as flaky.

        * TestExpectations:

2019-06-14  Devin Rousso  <drousso@apple.com>

        Web Inspector: rework http/tests/inspector/network/resource-sizes-network.html to print the actual values so other platforms don't FAIL
        https://bugs.webkit.org/show_bug.cgi?id=198877
        <rdar://problem/50381370>

        Reviewed by Joseph Pecoraro.

        * http/tests/inspector/network/resources/resource-size-test.js:
        (TestPage.registerInitializer.window.addResourceSizeTest):

        * http/tests/inspector/network/resource-sizes-disk-cache.html:
        * http/tests/inspector/network/resource-sizes-disk-cache-expected.txt:

        * http/tests/inspector/network/resource-sizes-memory-cache.html:
        * http/tests/inspector/network/resource-sizes-memory-cache-expected.txt:
        * platform/gtk/http/tests/inspector/network/resource-sizes-memory-cache-expected.txt:
        * platform/mac/http/tests/inspector/network/resource-sizes-memory-cache-expected.txt:
        * platform/mac-sierra/http/tests/inspector/network/resource-sizes-memory-cache-expected.txt:

        * http/tests/inspector/network/resource-sizes-network.html:
        * http/tests/inspector/network/resource-sizes-network-expected.txt:
        * platform/gtk/http/tests/inspector/network/resource-sizes-network-expected.txt:
        * platform/mac/http/tests/inspector/network/resource-sizes-network-expected.txt:
        * platform/mac-sierra/http/tests/inspector/network/resource-sizes-network-expected.txt:

2019-06-14  John Wilander  <wilander@apple.com>

        Repeatedly check for IDB removal to address flakiness in http/tests/resourceLoadStatistics/website-data-removal-for-site-navigated-to-with-link-decoration.html
        https://bugs.webkit.org/show_bug.cgi?id=198185
        <rdar://problem/51074251>

        Unreviewed test gardening.

        There's an asynchronosity in the removal of IDB entries so this test case
        needs to check repeatedly until the removal has happened.

        * http/tests/resourceLoadStatistics/website-data-removal-for-site-navigated-to-with-link-decoration.html:
        * platform/ios-simulator-wk2/TestExpectations:
            Removed skip.

2019-06-14  Daniel Bates  <dabates@apple.com>

        [iOS] Split up fast/events/ios/key-events-meta-alt-combinations.html and add more tests
        https://bugs.webkit.org/show_bug.cgi?id=198834
        <rdar://problem/50103348>

        Reviewed by Brent Fulgham.

        The test fast/events/ios/key-events-meta-alt-combinations.html frequently times out. Let's try
        to break up this test into multiple files. Also add more modifier combination tests and group
        all these combination tests under a new direcdtory: fast/events/ios/key-events-comprehensive.

        * fast/events/ios/key-events-comprehensive/key-events-control-expected.txt: Renamed from LayoutTests/fast/events/ios/key-events-control-expected.txt.
        * fast/events/ios/key-events-comprehensive/key-events-control-option-expected.txt: Added.
        * fast/events/ios/key-events-comprehensive/key-events-control-option.html: Copied from LayoutTests/fast/events/ios/key-events-control.html.
        * fast/events/ios/key-events-comprehensive/key-events-control-shift-expected.txt: Added.
        * fast/events/ios/key-events-comprehensive/key-events-control-shift.html: Copied from LayoutTests/fast/events/ios/key-events-control.html.
        * fast/events/ios/key-events-comprehensive/key-events-control.html: Renamed from LayoutTests/fast/events/ios/key-events-control.html.
        * fast/events/ios/key-events-comprehensive/key-events-meta-control-expected.txt: Added.
        * fast/events/ios/key-events-comprehensive/key-events-meta-control.html: Copied from LayoutTests/fast/events/ios/key-events-meta.html.
        * fast/events/ios/key-events-comprehensive/key-events-meta-expected.txt: Renamed from LayoutTests/fast/events/ios/key-events-meta-expected.txt.
        * fast/events/ios/key-events-comprehensive/key-events-meta-option-expected.txt: Added.
        * fast/events/ios/key-events-comprehensive/key-events-meta-option.html: Renamed from LayoutTests/fast/events/ios/key-events-meta-alt-combinations.html.
        * fast/events/ios/key-events-comprehensive/key-events-meta-shift-expected.txt: Added.
        * fast/events/ios/key-events-comprehensive/key-events-meta-shift.html: Copied from LayoutTests/fast/events/ios/key-events-meta.html.
        * fast/events/ios/key-events-comprehensive/key-events-meta.html: Renamed from LayoutTests/fast/events/ios/key-events-meta.html.
        * fast/events/ios/key-events-comprehensive/key-events-option-expected.txt: Added.
        * fast/events/ios/key-events-comprehensive/key-events-option-shift-expected.txt: Added.
        * fast/events/ios/key-events-comprehensive/key-events-option-shift.html: Added.
        * fast/events/ios/key-events-comprehensive/key-events-option.html: Added.
        * fast/events/ios/key-events-comprehensive/key-events-shift-expected.txt: Added.
        * fast/events/ios/key-events-comprehensive/key-events-shift.html: Added.
        * fast/events/ios/key-events-meta-alt-combinations-expected.txt: Removed.

2019-06-14  Antoine Quint  <graouts@apple.com>

        [Pointer Events] button property is -1 for pointerdown and pointerup
        https://bugs.webkit.org/show_bug.cgi?id=198868
        <rdar://problem/51758109>

        Reviewed by Dean Jackson.

        * pointerevents/mouse/pointer-button-and-buttons-expected.txt: Added.
        * pointerevents/mouse/pointer-button-and-buttons.html: Added.
        * pointerevents/utils.js:
        (prototype._handlePointerEvent):

2019-06-14  John Wilander  <wilander@apple.com>

        Move http/tests/resourceLoadStatistics/remove-blocking-in-redirect.html off of testRunner.setAlwaysAcceptCookies()
        https://bugs.webkit.org/show_bug.cgi?id=198863
        <rdar://problem/47854589>

        Unreviewed test gardening.

        testRunner.setAlwaysAcceptCookies() is not working right (tracked
        in rdar://problem/51757107). Therefore, we need to change
        http/tests/resourceLoadStatistics/remove-blocking-in-redirect.html
        to make it work properly.

        * http/tests/resourceLoadStatistics/remove-blocking-in-redirect-expected.txt:
        * http/tests/resourceLoadStatistics/remove-blocking-in-redirect.html:

2019-06-14  Saam Barati  <sbarati@apple.com>

        [WHLSL] Implement out-of-bounds and nullptr behavior
        https://bugs.webkit.org/show_bug.cgi?id=198600
        <rdar://problem/51668853>

        Reviewed by Robin Morisset.

        * webgpu/whlsl-null-dereference-expected.txt: Added.
        * webgpu/whlsl-null-dereference.html: Added.
        * webgpu/whlsl-oob-access-expected.txt: Added.
        * webgpu/whlsl-oob-access.html: Added.

2019-06-14  Youenn Fablet  <youenn@apple.com>

        Cloning a MediaStreamTrack does not clone the logger
        https://bugs.webkit.org/show_bug.cgi?id=198844

        Reviewed by Eric Carlson.

        * fast/mediastream/MediaStreamTrack-clone-expected.txt:
        * fast/mediastream/MediaStreamTrack-clone.html:

2019-06-14  Shawn Roberts  <sroberts@apple.com>

        webgpu/compute-squares.html test was deleted in https://trac.webkit.org/changeset/246427
        https://bugs.webkit.org/show_bug.cgi?id=198841

        Unreviewed test gardening.

        * platform/mac-wk2/TestExpectations: Removing expectation for deleted teest

2019-06-14  Per Arne Vollan  <pvollan@apple.com>

        [Win10] Some tests are failing only on specific machines
        https://bugs.webkit.org/show_bug.cgi?id=197509

        Unreviewed test gardening.

        * platform/win/TestExpectations:

2019-06-13  Devin Rousso  <drousso@apple.com>

        Web Inspector: REGRESSION(r246178): extra spaces added in at-rules when formatting CSS
        https://bugs.webkit.org/show_bug.cgi?id=198806

        Reviewed by Joseph Pecoraro.

        * inspector/formatting/resources/css-tests/keyframes.css:
        * inspector/formatting/resources/css-tests/keyframes-expected.css:
        * inspector/formatting/resources/css-tests/media-query.css:
        * inspector/formatting/resources/css-tests/media-query-expected.css:
        * inspector/formatting/resources/css-tests/selectors.css:
        * inspector/formatting/resources/css-tests/selectors-expected.css:
        * inspector/formatting/resources/css-tests/wrapping.css:
        * inspector/formatting/resources/css-tests/wrapping-expected.css:

2019-06-13  Antoine Quint  <graouts@apple.com>

        REGRESSION (r246103) [ Mojave+ WK1 ] Layout Test scrollbars/scrollbar-iframe-click-does-not-blur-content.html is timing out
        https://bugs.webkit.org/show_bug.cgi?id=198800
        <rdar://problem/51679634>

        Reviewed by Tim Horton.

        This test now passes reliably on WK1.

        * platform/mac-wk1/TestExpectations:

2019-06-12  Myles C. Maxfield  <mmaxfield@apple.com>

        [WHLSL] Hook up compute
        https://bugs.webkit.org/show_bug.cgi?id=198644

        Reviewed by Saam Barati.

        This doesn't thoroughly test compute, but it's at least enough to unblock the WHLSL testing effort.

        * webgpu/compute-squares-expected.txt: Deleted. Covered by webgpu/whlsl-compute.html.
        * webgpu/compute-squares.html: Deleted. Ditto.
        * webgpu/whlsl-compute-expected.txt: Added.
        * webgpu/whlsl-compute.html: Added.

2019-06-13  Zalan Bujtas  <zalan@apple.com>

        [ContentChangeObserver] LayoutTest/fast/content-observation/click-event-suppression-on-content-change.html is failing
        https://bugs.webkit.org/show_bug.cgi?id=198848
        <rdar://problem/51689630>

        Reviewed by Dean Jackson.

        1. Enable content observation for this test.
        2. Add role attribute to trigger fast click-through -less flaky with the sleeps. 
        3. Use UIHelper functions.

        * fast/content-observation/click-event-suppression-on-content-change.html: Removed.
        * fast/events/touch/ios/content-observation/click-event-suppression-on-content-change-expected.txt: Renamed from LayoutTests/fast/content-observation/click-event-suppression-on-content-change-expected.txt.
        * fast/events/touch/ios/content-observation/click-event-suppression-on-content-change.html: Added.

2019-06-13  Daniel Bates  <dabates@apple.com>

        [iOS] Normalize test result of fast/events/ios/keyboard-event-key-attribute.html to handle possible modifier dispatch
        https://bugs.webkit.org/show_bug.cgi?id=198835
        <rdar://problem/46082708>

        Reviewed by Darin Adler.

        WebKit now knows how to handle flag change events on iOS and dispatch DOM events just like Mac.
        Until USE(UIKIT_KEYBOARD_ADDITIONS) is enabled by default WebKit does not expect to receive
        modifier flag changes. But once this compile time flag is enabled it will and the test
        fast/events/ios/keyboard-event-key-attribute.html will fail because it types '@' and only
        expects to see a single keydown for '@' even though it actually requires two key downs to
        generate an '@': Shift, and 2 (on a US keyboard layout). We have a bunch of other tests to
        check that modifier key presses generate DOM events. So, let's just normalize the result of
        this test to ignore Shift keydowns.

        * fast/events/ios/keyboard-event-key-attribute.html:

2019-06-13  Truitt Savell  <tsavell@apple.com>

        Test gardening after r246406
        https://bugs.webkit.org/show_bug.cgi?id=198774

        Unreviewed test gardening.

        * platform/ios-wk2/TestExpectations:
        * platform/mac-wk2/TestExpectations:

2019-06-13  Jonathan Bedard  <jbedard@apple.com>

        run-webkit-tests: Correctly garden fast/events/ios, fast/forms/ios tests
        https://bugs.webkit.org/show_bug.cgi?id=198798

        Reviewed by Aakash Jain.

        Any expectations for fast/events/ios and fast/forms/ios tests are overriden
        in ios-wk2 expectations, remove them since they don't do anything.

        * platform/ios-device/TestExpectations:
        * platform/ios-wk1/TestExpectations:
        * platform/ios/TestExpectations:
        * platform/ipad/TestExpectations:

2019-06-13  Shawn Roberts  <sroberts@apple.com>

        webgpu/compute-squares.html is crashing on HighSierra
        https://bugs.webkit.org/show_bug.cgi?id=198841

        Unreviewed test gardening.

        * platform/mac-wk2/TestExpectations: Skipping on High Sierra

2019-06-13  Commit Queue  <commit-queue@webkit.org>

        Unreviewed, rolling out r246396 and r246397.
        https://bugs.webkit.org/show_bug.cgi?id=198837

        Breaks internal builds (Requested by ShawnRoberts on #webkit).

        Reverted changesets:

        "[WHLSL] Hook up compute"
        https://bugs.webkit.org/show_bug.cgi?id=198644
        https://trac.webkit.org/changeset/246396

        "[WHLSL] Hook up compute"
        https://bugs.webkit.org/show_bug.cgi?id=198644
        https://trac.webkit.org/changeset/246397

2019-06-13  Antti Koivisto  <antti@apple.com>

        twitch.tv: embedded video hovers down the screen when scrolling on iPad
        https://bugs.webkit.org/show_bug.cgi?id=198832
        <rdar://problem/51541439>

        Reviewed by Simon Fraser.

        * compositing/scrolling/async-overflow-scrolling/overflow-scroll-paint-order-sibling-expected.html: Added.
        * compositing/scrolling/async-overflow-scrolling/overflow-scroll-paint-order-sibling.html: Added.

2019-06-13  Youenn Fablet  <youenn@apple.com>

        Import WPT websockets tests
        https://bugs.webkit.org/show_bug.cgi?id=198774

        Reviewed by Geoffrey Garen.

        * platform/mac-wk1/TestExpectations:
        * TestExpectations:
        * tests-options.json:

2019-06-13  Antoine Quint  <graouts@apple.com>

        "display: contents" Content click does not trigger
        https://bugs.webkit.org/show_bug.cgi?id=198559
        <rdar://problem/51488524>

        Reviewed by Antti Koivisto.

        Add a new test that checks that tapping on an element with "display: contents" correctly gets a "click" event.

        * fast/events/ios/click-event-and-display-contents-expected.txt: Added.
        * fast/events/ios/click-event-and-display-contents.html: Added.

2019-06-13  Youenn Fablet  <youenn@apple.com>

        Update service worker test and expectation after revision 246363
        https://bugs.webkit.org/show_bug.cgi?id=198808

        Reviewed by Geoffrey Garen.

        * TestExpectations:
        Skip timing out test in Debug

2019-06-13  Miguel Gomez  <magomez@igalia.com>

        Unreviewed GTK+ gardening. Update expectations after r246397.

        * platform/gtk/TestExpectations:

2019-06-12  Myles C. Maxfield  <mmaxfield@apple.com>

        [WHLSL] Hook up compute
        https://bugs.webkit.org/show_bug.cgi?id=198644

        Reviewed by Saam Barati.

        This doesn't thoroughly test compute, but it's at least enough to unblock the WHLSL testing effort.

        * webgpu/compute-squares-expected.txt: Deleted. Covered by webgpu/whlsl-compute.html.
        * webgpu/compute-squares.html: Deleted. Ditto.
        * webgpu/whlsl-compute-expected.txt: Added.
        * webgpu/whlsl-compute.html: Added.

2019-06-12  Myles C. Maxfield  <mmaxfield@apple.com>

        [WHLSL] Implement array references
        https://bugs.webkit.org/show_bug.cgi?id=198163

        Reviewed by Saam Barati.

        * webgpu/buffer-resource-triangles-expected.html: Deleted. This test doens't make any sense and triggers
        Metal to read out-of-bounds of a vertex buffer.
        * webgpu/buffer-resource-triangles.html: Deleted.
        * webgpu/whlsl-buffer-fragment-expected.html: Added.
        * webgpu/whlsl-buffer-fragment.html: Added.
        * webgpu/whlsl-buffer-vertex-expected.html: Added.
        * webgpu/whlsl-buffer-vertex.html: Added.
        * webgpu/whlsl-dont-crash-parsing-enum.html:
        * webgpu/whlsl.html:

2019-06-12  Justin Fan  <justin_fan@apple.com>

        [WebGL] ANGLE Extension directive location incorrectly enforced for webgl 1.0
        https://bugs.webkit.org/show_bug.cgi?id=198811

        Reviewed by Dean Jackson.

        ANGLE was updated so that this case should not be an error.

        * webgl/webgl-extension-directive-location-no-error-expected.txt: Added.
        * webgl/webgl-extension-directive-location-no-error.html: Added.

2019-06-12  Carlos Garcia Campos  <cgarcia@igalia.com>

        [cairo][SVG] If clipPath has multiple elements, clip-path doesn't work with transform
        https://bugs.webkit.org/show_bug.cgi?id=198746
        <rdar://problem/51620347>

        Reviewed by Don Olmstead.

        * svg/clip-path/clip-hidpi-expected.svg: Added.
        * svg/clip-path/clip-hidpi.svg: Added.
        * svg/clip-path/clip-opacity-translate-expected.svg: Added.
        * svg/clip-path/clip-opacity-translate.svg: Added.

2019-06-12  Myles C. Maxfield  <mmaxfield@apple.com>

        [WHLSL] Educate the property resolver about IndexExpressions
        https://bugs.webkit.org/show_bug.cgi?id=198399

        Unreviewed test gardening.

        Failing WebGPU tests should fail instead of time out.

        * webgpu/blend-color-triangle-strip.html:
        * webgpu/blend-triangle-strip.html:
        * webgpu/blit-commands.html:
        * webgpu/buffer-command-buffer-races.html:
        * webgpu/buffer-resource-triangles.html:
        * webgpu/color-write-mask-triangle-strip.html:
        * webgpu/depth-enabled-triangle-strip.html:
        * webgpu/draw-indexed-triangles.html:
        * webgpu/propertyresolver/ander-abstract-lvalue.html:
        * webgpu/propertyresolver/ander-lvalue-3-levels.html:
        * webgpu/propertyresolver/ander-lvalue.html:
        * webgpu/propertyresolver/ander.html:
        * webgpu/propertyresolver/getter.html:
        * webgpu/propertyresolver/indexer-ander-abstract-lvalue.html:
        * webgpu/propertyresolver/indexer-ander-lvalue-3-levels.html:
        * webgpu/propertyresolver/indexer-ander-lvalue.html:
        * webgpu/propertyresolver/indexer-ander.html:
        * webgpu/propertyresolver/indexer-getter.html:
        * webgpu/propertyresolver/indexer-setter-abstract-lvalue-3-levels.html:
        * webgpu/propertyresolver/indexer-setter-abstract-lvalue.html:
        * webgpu/propertyresolver/indexer-setter-lvalue.html:
        * webgpu/propertyresolver/indexer-setter.html:
        * webgpu/propertyresolver/setter-abstract-lvalue-3-levels.html:
        * webgpu/propertyresolver/setter-abstract-lvalue.html:
        * webgpu/propertyresolver/setter-lvalue.html:
        * webgpu/simple-triangle-strip.html:
        * webgpu/texture-triangle-strip.html:
        * webgpu/vertex-buffer-triangle-strip.html:
        * webgpu/viewport-scissor-rect-triangle-strip.html:
        * webgpu/whlsl-arbitrary-vertex-attribute-locations.html:
        * webgpu/whlsl-dereference-pointer-should-type-check.html:
        * webgpu/whlsl-do-while-loop-break.html:
        * webgpu/whlsl-do-while-loop-continue.html:
        * webgpu/whlsl-do-while-loop.html:
        * webgpu/whlsl-dont-crash-parsing-enum.html:
        * webgpu/whlsl-dot-expressions.html:
        * webgpu/whlsl-ensure-proper-variable-lifetime-2.html:
        * webgpu/whlsl-ensure-proper-variable-lifetime-3.html:
        * webgpu/whlsl-ensure-proper-variable-lifetime.html:
        * webgpu/whlsl-loops-break.html:
        * webgpu/whlsl-loops-continue.html:
        * webgpu/whlsl-loops.html:
        * webgpu/whlsl-nested-dot-expression-rvalue.html:
        * webgpu/whlsl-nested-loop.html:
        * webgpu/whlsl-return-local-variable.html:
        * webgpu/whlsl-store-to-property-updates-properly.html:
        * webgpu/whlsl-while-loop-break.html:
        * webgpu/whlsl-while-loop-continue.html:
        * webgpu/whlsl-zero-initialize-values-2.html:
        * webgpu/whlsl-zero-initialize-values.html:
        * webgpu/whlsl.html:

2019-06-12  Simon Fraser  <simon.fraser@apple.com>

        paddingBoxRect() is wrong with RTL scrollbars on the left
        https://bugs.webkit.org/show_bug.cgi?id=198816

        Reviewed by Jon Lee.

        * compositing/geometry/rtl-overflow-scroll-expected.html: Added.
        * compositing/geometry/rtl-overflow-scroll.html: Added.

2019-06-12  Eric Carlson  <eric.carlson@apple.com>

        [High Sierra / Mojave Debug WK2] Layout Test media/video-restricted-invisible-autoplay-allowed-when-visible.html is a flaky failure
        https://bugs.webkit.org/show_bug.cgi?id=190885
        <rdar://problem/45590590>

        Reviewed by Youenn Fablet.

        * media/video-restricted-invisible-autoplay-allowed-when-visible.html: Increase the amount of
         time it takes for the test to fail so it isn't flaky on slow machines.

2019-06-12  Daniel Bates  <dabates@apple.com>

        [iOS] Adjust tests platform/ipad/fast/forms/{select-form-run-twice, unfocus-inside-fixed-hittest}.html following r243808
        https://bugs.webkit.org/show_bug.cgi?id=198799
        <rdar://problem/50181023>

        Reviewed by Brent Fulgham.

        Following r243808 we no longer defocus a <select> on iPad when its popover is dismissed as a
        result of picking a value for it. This is to make the behavior of <select> on iPad like the Mac. 
        However the tests platform/ipad/fast/forms/{select-form-run-twice, unfocus-inside-fixed-hittest}.html
        depend on the old behavior. So, we need to update them to no longer expect a defocusing of the
        <select>/the end of form control interaction.

        * platform/ipad/fast/forms/select-form-run-twice.html:
        * platform/ipad/fast/forms/unfocus-inside-fixed-hittest.html:

2019-06-12  Myles C. Maxfield  <mmaxfield@apple.com>

        [WHLSL] Educate the property resolver about IndexExpressions
        https://bugs.webkit.org/show_bug.cgi?id=198399

        Reviewed by Saam Barati.

        * webgpu/propertyresolver/ander-abstract-lvalue-expected.html: Added.
        * webgpu/propertyresolver/ander-abstract-lvalue.html: Added.
        * webgpu/propertyresolver/ander-expected.html: Added.
        * webgpu/propertyresolver/ander-lvalue-3-levels-expected.html: Added.
        * webgpu/propertyresolver/ander-lvalue-3-levels.html: Added.
        * webgpu/propertyresolver/ander-lvalue-expected.html: Added.
        * webgpu/propertyresolver/ander-lvalue.html: Added.
        * webgpu/propertyresolver/ander.html: Added.
        * webgpu/propertyresolver/getter-expected.html: Added.
        * webgpu/propertyresolver/getter.html: Added.
        * webgpu/propertyresolver/indexer-ander-abstract-lvalue-expected.html: Added.
        * webgpu/propertyresolver/indexer-ander-abstract-lvalue.html: Added.
        * webgpu/propertyresolver/indexer-ander-expected.html: Added.
        * webgpu/propertyresolver/indexer-ander-lvalue-3-levels-expected.html: Added.
        * webgpu/propertyresolver/indexer-ander-lvalue-3-levels.html: Added.
        * webgpu/propertyresolver/indexer-ander-lvalue-expected.html: Added.
        * webgpu/propertyresolver/indexer-ander-lvalue.html: Added.
        * webgpu/propertyresolver/indexer-ander.html: Added.
        * webgpu/propertyresolver/indexer-getter-expected.html: Added.
        * webgpu/propertyresolver/indexer-getter.html: Added.
        * webgpu/propertyresolver/indexer-setter-abstract-lvalue-3-levels-expected.html: Added.
        * webgpu/propertyresolver/indexer-setter-abstract-lvalue-3-levels.html: Added.
        * webgpu/propertyresolver/indexer-setter-abstract-lvalue-expected.html: Added.
        * webgpu/propertyresolver/indexer-setter-abstract-lvalue.html: Added.
        * webgpu/propertyresolver/indexer-setter-expected.html: Added.
        * webgpu/propertyresolver/indexer-setter-lvalue-expected.html: Added.
        * webgpu/propertyresolver/indexer-setter-lvalue.html: Added.
        * webgpu/propertyresolver/indexer-setter.html: Added.
        * webgpu/propertyresolver/setter-abstract-lvalue-3-levels-expected.html: Added.
        * webgpu/propertyresolver/setter-abstract-lvalue-3-levels.html: Added.
        * webgpu/propertyresolver/setter-abstract-lvalue-expected.html: Added.
        * webgpu/propertyresolver/setter-abstract-lvalue.html: Added.
        * webgpu/propertyresolver/setter-lvalue-expected.html: Added.
        * webgpu/propertyresolver/setter-lvalue.html: Added.

2019-06-12  Shawn Roberts  <sroberts@apple.com>

        scrollbars/scrollbar-iframe-click-does-not-blur-content.html is timing out on WK1 testers
        https://bugs.webkit.org/show_bug.cgi?id=198800

        Unreviewed test gardening.

        * platform/mac-wk1/TestExpectations: Updating expecations for test

2019-06-12  Jiewen Tan  <jiewen_tan@apple.com>

        REGRESSION (r245043) [Mac WK2 Debug] ASSERTION FAILED: m_services.isEmpty() && transports.size() <= maxTransportNumber seen with two http/wpt/webauthn/public-key-credential-* tests
        https://bugs.webkit.org/show_bug.cgi?id=197917
        <rdar://problem/51524958>

        Reviewed by Brent Fulgham.

        * platform/mac-wk2/TestExpectations:

2019-06-12  Antti Koivisto  <antti@apple.com>

        (Async scrolling) Handle 'position:fixed' inside 'position:sticky' correctly.
        https://bugs.webkit.org/show_bug.cgi?id=198788
        <rdar://problem/51589759>

        Reviewed by Simon Fraser.

        * scrollingcoordinator/ios/fixed-inside-overflow-inside-fixed-expected.html: Added.
        * scrollingcoordinator/ios/fixed-inside-overflow-inside-fixed.html: Added.
        * scrollingcoordinator/ios/fixed-inside-sticky-frame-expected.html: Added.
        * scrollingcoordinator/ios/fixed-inside-sticky-frame.html: Added.
        * scrollingcoordinator/ios/fixed-inside-sticky-no-stacking-context-2-expected.html: Added.
        * scrollingcoordinator/ios/fixed-inside-sticky-no-stacking-context-2.html: Added.
        * scrollingcoordinator/ios/fixed-inside-sticky-no-stacking-context-expected.html: Added.
        * scrollingcoordinator/ios/fixed-inside-sticky-no-stacking-context.html: Added.
        * scrollingcoordinator/ios/fixed-inside-sticky-stacking-context-expected.html: Added.
        * scrollingcoordinator/ios/fixed-inside-sticky-stacking-context.html: Added.

2019-06-12  Youenn Fablet  <youenn@apple.com>

        Update WPT service workers test up to 0df7c68
        https://bugs.webkit.org/show_bug.cgi?id=198720

        Reviewed by Eric Carlson.

        * TestExpectations:
        * tests-options.json:

2019-06-12  Truitt Savell  <tsavell@apple.com>

        Unreviewed, rolling out r246350.

        r246350 Introduced a failing and timing out test svg/clip-path
        /clip-hidpi.svg

        Reverted changeset:

        "[cairo][SVG] If clipPath has multiple elements, clip-path doesn't work with transform"
        https://bugs.webkit.org/show_bug.cgi?id=198746
        https://trac.webkit.org/changeset/246350

2019-06-12  Carlos Garcia Campos  <cgarcia@igalia.com>

        [cairo][SVG] If clipPath has multiple elements, clip-path doesn't work with transform
        https://bugs.webkit.org/show_bug.cgi?id=198746
        <rdar://problem/51665805>

        Reviewed by Don Olmstead.

        * svg/clip-path/clip-hidpi-expected.svg: Added.
        * svg/clip-path/clip-hidpi.svg: Added.
        * svg/clip-path/clip-opacity-translate-expected.svg: Added.
        * svg/clip-path/clip-opacity-translate.svg: Added.

2019-06-12  Fujii Hironori  <Hironori.Fujii@sony.com>

        [GTK] Some reftest fail with only one or two pixel differences in diff image
        https://bugs.webkit.org/show_bug.cgi?id=168426

        Unreviewed test gardening.

        * platform/gtk/TestExpectations:
        * platform/wpe/TestExpectations:
        svg/clip-path/clip-opacity.html results in 0.01% image diff. Marked it as ImageOnlyFailure of Bug 168426.

2019-06-11  Wenson Hsieh  <wenson_hsieh@apple.com>

        [iOS] Idempotent text autosizing needs to react properly to viewport changes
        https://bugs.webkit.org/show_bug.cgi?id=198736
        <rdar://problem/50591911>

        Reviewed by Zalan Bujtas.

        Add a new layout test that programmatically adjusts the meta viewport initial scale, and dumps the resulting
        computed sizes of several paragraphs of text, after adjusting for text autosizing.

        * fast/text-autosizing/ios/idempotentmode/idempotent-autosizing-after-changing-initial-scale-expected.txt: Added.
        * fast/text-autosizing/ios/idempotentmode/idempotent-autosizing-after-changing-initial-scale.html: Added.

2019-06-11  Zalan Bujtas  <zalan@apple.com>

        LayoutTests/fast/events/touch/ios/double-tap-for-double-click* test cases are failing
        https://bugs.webkit.org/show_bug.cgi?id=198764
        <rdar://problem/51035459>

        Reviewed by Wenson Hsieh.

        * fast/events/touch/ios/double-tap-for-double-click1.html:
        * fast/events/touch/ios/double-tap-for-double-click2.html:
        * fast/events/touch/ios/double-tap-for-double-click3.html:

2019-06-11  Commit Queue  <commit-queue@webkit.org>

        Unreviewed, rolling out r246320.
        https://bugs.webkit.org/show_bug.cgi?id=198773

        New test is failing, and commit is causing another test to
        fail. (Requested by ShawnRoberts on #webkit).

        Reverted changeset:

        "Web Inspector: AXI: Audit: image label test is throwing
        spurious errors on elements with existing alt attr, but no
        value: <img alt>"
        https://bugs.webkit.org/show_bug.cgi?id=194754
        https://trac.webkit.org/changeset/246320

2019-06-11  Devin Rousso  <drousso@apple.com>

        Sort the computed styles list
        https://bugs.webkit.org/show_bug.cgi?id=198743

        Reviewed by Simon Fraser

        * fast/css/getComputedStyle/computed-style-expected.txt:
        * platform/gtk/fast/css/getComputedStyle/computed-style-expected.txt:
        * platform/ios/fast/css/getComputedStyle/computed-style-expected.txt:
        * platform/mac/fast/css/getComputedStyle/computed-style-expected.txt:
        * platform/mac-sierra/fast/css/getComputedStyle/computed-style-expected.txt:
        * platform/wpe/fast/css/getComputedStyle/computed-style-expected.txt:

        * fast/css/getComputedStyle/computed-style-font-family-expected.txt:
        * platform/gtk/fast/css/getComputedStyle/computed-style-font-family-expected.txt:
        * platform/ios/fast/css/getComputedStyle/computed-style-font-family-expected.txt:
        * platform/mac/fast/css/getComputedStyle/computed-style-font-family-expected.txt:
        * platform/mac-sierra/fast/css/getComputedStyle/computed-style-font-family-expected.txt:
        * platform/wpe/fast/css/getComputedStyle/computed-style-font-family-expected.txt:

        * fast/css/getComputedStyle/computed-style-without-renderer-expected.txt:
        * platform/gtk/fast/css/getComputedStyle/computed-style-without-renderer-expected.txt:
        * platform/ios/fast/css/getComputedStyle/computed-style-without-renderer-expected.txt:
        * platform/mac/fast/css/getComputedStyle/computed-style-without-renderer-expected.txt:
        * platform/mac-sierra/fast/css/getComputedStyle/computed-style-without-renderer-expected.txt:
        * platform/wpe/fast/css/getComputedStyle/computed-style-without-renderer-expected.txt:

        * svg/css/getComputedStyle-basic-expected.txt:
        * platform/gtk/svg/css/getComputedStyle-basic-expected.txt:
        * platform/ios/svg/css/getComputedStyle-basic-expected.txt:
        * platform/mac/svg/css/getComputedStyle-basic-expected.txt:
        * platform/mac-sierra/svg/css/getComputedStyle-basic-expected.txt:
        * platform/wpe/svg/css/getComputedStyle-basic-expected.txt:

2019-06-11  Daniel Bates  <dabates@apple.com>

        [iOS] Adjust test fast/events/ios/keyup.html to ignore Shift keyups
        https://bugs.webkit.org/show_bug.cgi?id=198768
        <rdar://problem/46082743>

        Reviewed by Brent Fulgham.

        Ignore Shift keyups as in the future they will be emitted. We have existing test coverage for them
        currently skipped in OpenSource that will be unskipped in the future once we enable ENABLE(FULL_KEYBOARD_ACCESS).

        * fast/events/ios/keyup.html:

2019-06-11  Daniel Bates  <dabates@apple.com>

        Fix up test result following r245161.
        <rdar://problem/51032967>

        Until we get UIKit support, almost all keys, including the numpad comma key (on JIS keyboards)
        report Dead for their key property and Unidentified for their keyIdentifier property.

        * fast/events/ios/keydown-keyup-special-keys-in-non-editable-element-expected.txt:

2019-06-11  Truitt Savell  <tsavell@apple.com>

        r246018 introduced a falkey test on WK1
        https://bugs.webkit.org/show_bug.cgi?id=196508

        Unreviewed test gardening.

        * platform/mac-wk1/TestExpectations:

2019-06-11  Daniel Bates  <dabates@apple.com>

        Import Content Security Policy Web Platform Tests
        https://bugs.webkit.org/show_bug.cgi?id=198676
        <rdar://problem/51533785>

        Reviewed by Youenn Fablet.

        Import tests as of 3840f46213d9a991acc9288e3863530f7502c05e (origin/master).

        * TestExpectations: Skip some tests for features we do not support.
        * platform/mac-wk1/TestExpectations: Skip some tests.
        * platform/win/TestExpectations: Ditto.
        * tests-options.json:

2019-06-11  Daniel Bates  <dabates@apple.com>

        Skip test http/tests/security/contentSecurityPolicy/navigate-self-to-data-url.html as
        testRunner.queueLoad() does not support loading data URLs in Legacy WebKit on Mac and iOS

        * platform/ios-wk1/TestExpectations:
        * platform/mac-wk1/TestExpectations:

2019-06-11  Daniel Bates  <dabates@apple.com>

        [Win] Layout test http/tests/security/contentSecurityPolicy/navigate-self-to-blob.html is timing out
        https://bugs.webkit.org/show_bug.cgi?id=198758

        It is a longstanding known issue (since 2015) that navigating to a blob URL times out on Windows.
        Further investigation is needed. Skip another test for now.

        * platform/win/TestExpectations:

2019-06-11  Shawn Roberts  <sroberts@apple.com>

        compositing/fixed-with-main-thread-scrolling.html is a flaky timeout
        https://bugs.webkit.org/show_bug.cgi?id=198757

        Unreviewed test gardening.

        * platform/mac-wk2/TestExpectations: Updating expectations for flaky test

2019-06-11  Greg Doolittle  <gr3g@apple.com>

        Web Inspector: AXI: Audit: image label test is throwing spurious errors on elements with existing alt attr, but no value: <img alt>
        https://bugs.webkit.org/show_bug.cgi?id=194754
        <rdar://problem/48144534>

        Reviewed by Chris Fleizach.

        * accessibility/img-alt-attribute-empty-string-expected.txt: Added.
        * accessibility/img-alt-attribute-empty-string.html: Added.
        * accessibility/img-alt-attribute-no-value-expected.txt: Added.
        * accessibility/img-alt-attribute-no-value.html: Added.

2019-06-11  Shawn Roberts  <sroberts@apple.com>

        http/tests/resourceLoadStatistics/website-data-removal-for-site-navigated-to-with-link-decoration.html is a flaky failure and timeout
        https://bugs.webkit.org/show_bug.cgi?id=198185

        Unreviewed test gardening.

        * platform/ios-simulator-wk2/TestExpectations: Skipping test on iOS

2019-06-11  Devin Rousso  <drousso@apple.com>

        Unreviewed, fix test failures after r246292.

        * inspector/timeline/timeline-recording.html:
        * inspector/timeline/timeline-recording-expected.txt:
        Filter the contents of `sampleStackTraces` and `sampleDurations` when exporting.

2019-06-11  Antti Koivisto  <antti@apple.com>

        REGRESSION (iOS): Can't scroll litter-robot.com checkout form's dropdown menus
        https://bugs.webkit.org/show_bug.cgi?id=198753
        <rdar://problem/51355686>

        Reviewed by Simon Fraser.

        * fast/scrolling/ios/overflow-scroll-user-interaction-disabled-expected.txt: Added.
        * fast/scrolling/ios/overflow-scroll-user-interaction-disabled.html: Added.

2019-06-11  Youenn Fablet  <youenn@apple.com>

        MediaStreamAudioSourceNode::setFormat should check for m_sourceSampleRate equality
        https://bugs.webkit.org/show_bug.cgi?id=198740
        <rdar://problem/47088939>

        Reviewed by Eric Carlson.

        * platform/mac/TestExpectations:

2019-06-11  Fujii Hironori  <Hironori.Fujii@sony.com>

        [cairo][SVG] Putting multiple path elements in clippath causes rendering artifacts
        https://bugs.webkit.org/show_bug.cgi?id=198701

        Reviewed by Carlos Garcia Campos.

        * platform/gtk/TestExpectations:
        * platform/wpe/TestExpectations:
        Unskipped svg/gradients/spreadMethodDiagonal3.svg and svg/gradients/spreadMethodDiagonal4.svg.

        * svg/clip-path/clip-opacity-expected.html: Added.
        * svg/clip-path/clip-opacity.html: Added.
        * svg/clip-path/svg-in-html-expected.html: Added.
        * svg/clip-path/svg-in-html.html: Added.

2019-06-10  Daniel Bates  <dabates@apple.com>

        [CSP] Blob URLs should inherit their CSP policy
        https://bugs.webkit.org/show_bug.cgi?id=198579
        <rdar://problem/51366878>

        Reviewed by Brent Fulgham.

        Actually add the tests that I inadvertently omitted from r246277.

        * http/tests/security/contentSecurityPolicy/navigate-self-to-blob-expected.txt: Added.
        * http/tests/security/contentSecurityPolicy/navigate-self-to-blob.html: Added.
        * http/tests/security/contentSecurityPolicy/navigate-self-to-data-url-expected.txt: Added.
        * http/tests/security/contentSecurityPolicy/navigate-self-to-data-url.html: Added.

2019-06-10  Sam Weinig  <weinig@apple.com>

        Remove Dashboard support
        https://bugs.webkit.org/show_bug.cgi?id=198615

        Reviewed by Ryosuke Niwa.

        * TestExpectations:
        * cssom/cssvalue-comparison-expected.txt:
        * cssom/cssvalue-comparison.html:
        * fast/canvas/canvas-gradient-addStop-error-expected.txt:
        * fast/canvas/canvas-gradient-addStop-error.html:
        * fast/canvas/fill-stroke-clip-reset-path-expected.txt:
        * fast/canvas/fill-stroke-clip-reset-path.html:
        * fast/css/dashboard-regions-attr-crash-expected.txt: Removed.
        * fast/css/dashboard-regions-attr-crash.html: Removed.
        * fast/css/dashboard-regions-undefined-length-assertion-expected.txt: Removed.
        * fast/css/dashboard-regions-undefined-length-assertion.html: Removed.
        * fast/xmlhttprequest/set-dangerous-headers-in-dashboard-expected.txt: Removed.
        * fast/xmlhttprequest/set-dangerous-headers-in-dashboard.html: Removed.
        * http/tests/xmlhttprequest/default-content-type-dashboard-expected.txt: Removed.
        * http/tests/xmlhttprequest/default-content-type-dashboard.html: Removed.
        * http/tests/xmlhttprequest/svg-created-by-xhr-allowed-in-dashboard-expected.txt: Removed.
        * http/tests/xmlhttprequest/svg-created-by-xhr-allowed-in-dashboard.html: Removed.
        * legacy-animation-engine/cssom/cssvalue-comparison-expected.txt:
        * legacy-animation-engine/cssom/cssvalue-comparison.html:
        * mathml/mathml-in-dashboard-expected.txt: Removed.
        * mathml/mathml-in-dashboard.html: Removed.
        * platform/gtk/TestExpectations:
        * platform/ios-simulator-wk2/TestExpectations:
        * platform/ios-wk1/TestExpectations:
        * platform/ios/TestExpectations:
        * platform/ios/mathml/mathml-in-dashboard-expected.txt: Removed.
        * platform/mac/TestExpectations:
        * platform/mac/fast/css/dashboard-region-parser-expected.txt: Removed.
        * platform/mac/fast/css/dashboard-region-parser.html: Removed.
        * platform/mac/fast/dom/HTMLImageElement/dashboard-src-quirk-expected.txt: Removed.
        * platform/mac/fast/dom/HTMLImageElement/dashboard-src-quirk.html: Removed.
        * platform/mac/mathml/mathml-in-dashboard-expected.png: Removed.
        * platform/mac/mathml/mathml-in-dashboard-expected.txt: Removed.
        * platform/mac/svg/custom/embedded-svg-disallowed-in-dashboard-expected.png: Removed.
        * platform/mac/svg/custom/manually-parsed-embedded-svg-disallowed-in-dashboard-expected.png: Removed.
        * platform/mac/svg/custom/manually-parsed-svg-disallowed-in-dashboard-expected.png: Removed.
        * platform/mac/svg/custom/svg-disallowed-in-dashboard-object-expected.png: Removed.
        * platform/win/TestExpectations:
        * platform/wincairo/TestExpectations:
        * svg/custom/embedded-svg-allowed-in-dashboard-expected.txt: Removed.
        * svg/custom/embedded-svg-allowed-in-dashboard.xml: Removed.
        * svg/custom/manually-parsed-embedded-svg-allowed-in-dashboard-expected.txt: Removed.
        * svg/custom/manually-parsed-embedded-svg-allowed-in-dashboard.html: Removed.
        * svg/custom/manually-parsed-svg-allowed-in-dashboard-expected.txt: Removed.
        * svg/custom/manually-parsed-svg-allowed-in-dashboard.html: Removed.
        * svg/custom/svg-allowed-in-dashboard-object-expected.txt: Removed.
        * svg/custom/svg-allowed-in-dashboard-object.html: Removed.

2019-06-10  Ryan Haddad  <ryanhaddad@apple.com>

        [ iOS Sim WK2 ] Layout Test editing/deleting/delete-emoji* is failing

        Unreviewed test gardening.

        * platform/ios-simulator-wk2/TestExpectations: Remove failure expectation.
        * platform/ios/editing/deleting/delete-emoji-1-expected.txt: Rebaseline test.
        * platform/ios/editing/deleting/delete-emoji-9-expected.txt: Ditto.
        * platform/ios/editing/deleting/delete-emoji-expected.txt: Ditto.

2019-06-10  Antti Koivisto  <antti@apple.com>

        Event region should be set on scrolledContentsLayer if it exists
        https://bugs.webkit.org/show_bug.cgi?id=198717
        <rdar://problem/51572169>

        Reviewed by Simon Fraser.

        * pointerevents/ios/touch-action-region-backing-sharing-expected.txt:
        * pointerevents/ios/touch-action-region-overflow-expected.txt: Added.
        * pointerevents/ios/touch-action-region-overflow.html: Added.

2019-06-10  Daniel Bates  <dabates@apple.com>

        [CSP] Blob URLs should inherit their CSP policy
        https://bugs.webkit.org/show_bug.cgi?id=198579
        <rdar://problem/51366878>

        Reviewed by Brent Fulgham.

        Add tests to ensure that a self navigation to a Blob or Data URL inherits its CSP policy from
        its parent document.

        * http/tests/security/contentSecurityPolicy/navigate-self-to-blob-expected.txt: Added.
        * http/tests/security/contentSecurityPolicy/navigate-self-to-blob.html: Added.
        * http/tests/security/contentSecurityPolicy/navigate-self-to-data-url-expected.txt: Added.
        * http/tests/security/contentSecurityPolicy/navigate-self-to-data-url.html: Added.

2019-06-10  Saam Barati  <sbarati@apple.com>

        [WHLSL] Auto initialize local variables
        https://bugs.webkit.org/show_bug.cgi?id=198426

        Reviewed by Myles Maxfield.

        * webgpu/whlsl-zero-initialize-values-2-expected.html: Added.
        * webgpu/whlsl-zero-initialize-values-2.html: Added.
        * webgpu/whlsl-zero-initialize-values-expected.html: Added.
        * webgpu/whlsl-zero-initialize-values.html: Added.

2019-06-10  Timothy Hatcher  <timothy@apple.com>

        Integrate dark mode support for iOS.
        https://bugs.webkit.org/show_bug.cgi?id=198687
        rdar://problem/51545643

        Reviewed by Tim Horton.

        * platform/ios/TestExpectations:

2019-06-10  Youenn Fablet  <youenn@apple.com>

        Call was negotiated with H264 Base Profile 42e01f but encoded in High Profile
        https://bugs.webkit.org/show_bug.cgi?id=195124
        <rdar://problem/48453085>

        Reviewed by Eric Carlson.

        * webrtc/video-h264-expected.txt: Added.
        * webrtc/video-h264.html: Added.

2019-06-08  Cathie Chen  <cathiechen@igalia.com>

        resize-observer/element-leak.html fails on Windows platform
        https://bugs.webkit.org/show_bug.cgi?id=197908

        Reviewed by Ryosuke Niwa.

        We have conservative GC, the removed objects might keep alive for a while. Change the test case
        to 20 iframes. This would make the result more accurate.

        * platform/win/TestExpectations:
        * resize-observer/element-leak-expected.txt:
        * resize-observer/element-leak.html:

2019-06-07  Youenn Fablet  <youenn@apple.com>

        [ Mac Debug ] REGRESSION (r242975) Layout Test storage/indexeddb/modern/deletedatabase-2-private.html is a flaky failure
        https://bugs.webkit.org/show_bug.cgi?id=196445
        <rdar://problem/49483061>

        Reviewed by Brady Eidson.

        Unflake the test by making sure to wait for the onerror event before continuing the test.

        * platform/mac-wk2/TestExpectations:
        * storage/indexeddb/modern/resources/deletedatabase-2.js:
        (prepareDatabase.event.target.onerror):
        (continueTest1.request.onsuccess): Deleted.

2019-06-07  Truitt Savell  <tsavell@apple.com>

        Unreviewed, rolling out r246138.

        Broke internal builds

        Reverted changeset:

        "[WHLSL] Educate the property resolver about IndexExpressions"
        https://bugs.webkit.org/show_bug.cgi?id=198399
        https://trac.webkit.org/changeset/246138

2019-06-07  Nikita Vasilyev  <nvasilyev@apple.com>

        Web Inspector: longhand CSS properties overridden by shorthands miss strikethrough
        https://bugs.webkit.org/show_bug.cgi?id=198629
        <rdar://problem/51504160>

        Reviewed by Devin Rousso.

        * inspector/css/overridden-property-expected.txt:
        * inspector/css/overridden-property.html:

2019-06-07  Justin Fan  <justin_fan@apple.com>

        [WebGPU] Remove GPUBuffer.setSubData and implement GPUDevice.createBufferMapped
        https://bugs.webkit.org/show_bug.cgi?id=198591

        Reviewed by Myles C. Maxfield.

        GPUBuffer.setSubData has been removed from the WebGPU implementation.
        GPUDevice.createBufferMapped has been added to the WebGPU implementation.
        Replace all setSubData calls with appropriate replacements.

        * webgpu/blend-triangle-strip.html:
        * webgpu/blit-commands.html:
        * webgpu/buffer-command-buffer-races.html:
        * webgpu/buffer-resource-triangles.html:
        * webgpu/compute-squares.html:
        * webgpu/depth-enabled-triangle-strip.html:
        * webgpu/draw-indexed-triangles.html:
        * webgpu/js/webgpu-functions.js:
        (createBufferWithData):
        (async.mapWriteDataToBuffer):
        * webgpu/map-read-buffers-expected.txt:
        * webgpu/map-read-buffers.html:
        * webgpu/texture-triangle-strip.html:
        * webgpu/vertex-buffer-triangle-strip.html:

2019-06-07  Per Arne Vollan  <pvollan@apple.com>

        Layout Test fast/events/fire-mousedown-while-pressing-mouse-button.html is failing
        https://bugs.webkit.org/show_bug.cgi?id=198679

        Unreviewed test gardening.

        * platform/win/TestExpectations:

2019-06-07  Antoine Quint  <graouts@apple.com>

        Restrict fast clicks everywhere to desktop content mode
        https://bugs.webkit.org/show_bug.cgi?id=198610
        <rdar://problem/50114230>

        Reviewed by Dean Jackson.

        Add a new test that enables fast clicks but also sets a mobile content mode.
        
        We also mark fast/visual-viewport/ios/min-scale-greater-than-one.html as non-flaky
        since the flakiness was due to the fast clicks everywhere behavior being enabled on iPhone.

        Finally, we can now remove the hack where ui.tap() in the Pointer Events utility returned
        a promise with a one-second delay since the issue of double-taps being recognized instead of
        two consecutive single taps across two tests has been resolved.

        * fast/events/ios/ipad/fast-click-always-mobile-content-mode-expected.txt: Added.
        * fast/events/ios/ipad/fast-click-always-mobile-content-mode.html: Added.
        * platform/ios-simulator-wk2/TestExpectations:
        * pointerevents/utils.js:

2019-06-07  Shawn Roberts  <sroberts@apple.com>

        http/tests/storageAccess/request-and-grant-access-then-navigate-same-site-should-have-access.html is a flaky timeout
        https://bugs.webkit.org/show_bug.cgi?id=198663

        Unreviewed test gardening.

        * platform/mac-wk2/TestExpectations: Updating expectations for flaky test

2019-06-07  Shawn Roberts  <sroberts@apple.com>

        scrollingcoordinator/mac/nested-sticky.html is a flaky Timeout and ImageOnlyFailure
        https://bugs.webkit.org/show_bug.cgi?id=198661

        Unreviewed test gardening.

        * platform/mac-wk2/TestExpectations: Updating expectations for flaky test

2019-06-07  Antti Koivisto  <antti@apple.com>

        position:fixed inside overflow positioning nodes is jumpy
        https://bugs.webkit.org/show_bug.cgi?id=198647
        <rdar://problem/51514437>

        Reviewed by Frédéric Wang.

        * scrollingcoordinator/ios/fixed-overflow-no-stacking-context-1-expected.html: Added.
        * scrollingcoordinator/ios/fixed-overflow-no-stacking-context-1.html: Added.
        * scrollingcoordinator/ios/fixed-overflow-no-stacking-context-2-expected.html: Added.
        * scrollingcoordinator/ios/fixed-overflow-no-stacking-context-2.html: Added.
        * scrollingcoordinator/ios/fixed-overflow-stacking-context-stationary-expected.html: Added.
        * scrollingcoordinator/ios/fixed-overflow-stacking-context-stationary.html: Added.

2019-06-07  Enrique Ocaña González  <eocanha@igalia.com>

        [MSE][GStreamer] Avoid QUOTA_EXCEEDED_ERR when seeking to a buffered range just before the buffered one
        https://bugs.webkit.org/show_bug.cgi?id=166620

        Reviewed by Xabier Rodriguez-Calvar.

        Added a test to check that, after the memory is filled by appending a continuous
        range, a seek right before it and a new append can be done without getting a
        QuotaExceededError on GStreamer ports. On the rest of the ports, QuotaExceededError
        is never thrown and the expectations just check that the right buffered ranges
        remain.

        * media/media-source/media-source-append-before-last-range-no-quota-exceeded-expected.txt: Added.
        * media/media-source/media-source-append-before-last-range-no-quota-exceeded.html: Added.
        * platform/gtk/media/media-source/media-source-append-before-last-range-no-quota-exceeded-expected.txt: Added.
        * platform/wpe/media/media-source/media-source-append-before-last-range-no-quota-exceeded-expected.txt: Added.


2019-06-07  Joonghun Park  <jh718.park@samsung.com>

        Implement tab-size with units
        https://bugs.webkit.org/show_bug.cgi?id=179022

        Reviewed by Simon Fraser.

        This change is ported from Blink.
        The committed revision is https://src.chromium.org/viewvc/blink?revision=189430&view=revision.

        Additionally, this patch lets css "number" value be allowed as tab-size's property value,
        not css "integer" value,
        according to https://drafts.csswg.org/css-text-3/#tab-size-property.

        * TestExpectations:
        * css3/tab-size-expected.txt: Added.
        * css3/tab-size.html: Added.
        * fast/css/tab-size-expected.html:
        * fast/css/tab-size.html:

2019-06-06  Youenn Fablet  <youenn@apple.com>

        Allow WebKitTestRunner to terminate network process after it finishes service worker file operations
        https://bugs.webkit.org/show_bug.cgi?id=198584

        Reviewed by Geoffrey Garen.

        * http/wpt/service-workers/service-worker-networkprocess-crash.html:

2019-06-06  Commit Queue  <commit-queue@webkit.org>

        Unreviewed, rolling out r246165.
        https://bugs.webkit.org/show_bug.cgi?id=198636

        Causing test failures in 7 content-observation tests.
        (Requested by ShawnRoberts on #webkit).

        Reverted changeset:

        "Restrict fast clicks everywhere to desktop content mode"
        https://bugs.webkit.org/show_bug.cgi?id=198610
        https://trac.webkit.org/changeset/246165

2019-06-06  Devin Rousso  <drousso@apple.com>

        Web Inspector: Formatter: pretty-print CSS using a Worker
        https://bugs.webkit.org/show_bug.cgi?id=197829
        <rdar://problem/36891532>

        Reviewed by Timothy Hatcher.

        * inspector/formatting/formatting-css.html: Added.
        * inspector/formatting/formatting-css-expected.txt: Added.
        * inspector/formatting/resources/css-tests/basic-expected.css: Added.
        * inspector/formatting/resources/css-tests/basic.css: Added.
        * inspector/formatting/resources/css-tests/gradient-expected.css: Added.
        * inspector/formatting/resources/css-tests/gradient.css: Added.
        * inspector/formatting/resources/css-tests/keyframes-expected.css: Added.
        * inspector/formatting/resources/css-tests/keyframes.css: Added.
        * inspector/formatting/resources/css-tests/media-query-expected.css: Added.
        * inspector/formatting/resources/css-tests/media-query.css: Added.
        * inspector/formatting/resources/css-tests/selectors-expected.css: Added.
        * inspector/formatting/resources/css-tests/selectors.css: Added.
        * inspector/formatting/resources/css-tests/wrapping-expected.css: Added.
        * inspector/formatting/resources/css-tests/wrapping.css: Added.
        * inspector/formatting/resources/utilities.js:
        (TestPage.registerInitializer.runFormattingTest):

2019-06-06  Youenn Fablet  <youenn@apple.com>

        REGRESSION (r243270) [ iOS Sim Release ] Layout Test imported/w3c/web-platform-tests/IndexedDB/keypath-special-identifiers.htm is a flaky failure
        https://bugs.webkit.org/show_bug.cgi?id=198573
        <rdar://problem/51447519>

        Unreviewed.

        * platform/ios-simulator-wk2/TestExpectations:
        Marking test as slow.

2019-06-05  Said Abou-Hallawa  <sabouhallawa@apple.com>

        REGRESSION (r243121): Load event should not be fired while animating the 'externalResourcesRequired' attribute 
        https://bugs.webkit.org/show_bug.cgi?id=198576

        Reviewed by Simon Fraser.

        * svg/animations/animate-externalResourcesRequired-no-load-event-expected.txt: Added.
        * svg/animations/animate-externalResourcesRequired-no-load-event.html: Added.

2019-06-04  Takashi Komori  <Takashi.Komori@sony.com>
2019-06-06  Antoine Quint  <graouts@apple.com>

        Restrict fast clicks everywhere to desktop content mode
        https://bugs.webkit.org/show_bug.cgi?id=198610
        <rdar://problem/50114230>

        Reviewed by Dean Jackson.

        Add a new test that enables fast clicks but also sets a mobile content mode.

        * fast/events/ios/ipad/fast-click-always-mobile-content-mode-expected.txt: Added.
        * fast/events/ios/ipad/fast-click-always-mobile-content-mode.html: Added.

2019-06-06  Alexey Shvayka  <shvaikalesh@gmail.com>

        JSON.parse throws incorrect exception when called w/o arguments
        https://bugs.webkit.org/show_bug.cgi?id=198574

        Reviewed by Yusuke Suzuki.

        SyntaxError should be thrown if JSON.parse is called w/o arguments.
        (steps 1-2 of https://tc39.github.io/ecma262/#sec-json.parse)

        * js/dom/JSON-parse-expected.txt:

2019-06-06  Antti Koivisto  <antti@apple.com>

        Position fixed is buggy with overflow:auto scrolling inside iframes
        https://bugs.webkit.org/show_bug.cgi?id=154399
        <rdar://problem/24742251>

        Reviewed by Frederic Wang and Simon Fraser.

        * scrollingcoordinator/ios/fixed-frame-overflow-swipe-expected.html: Added.
        * scrollingcoordinator/ios/fixed-frame-overflow-swipe.html: Added.

2019-06-06  Antoine Quint  <graouts@apple.com>

        [Pointer Events] Add support for chorded button interactions
        https://bugs.webkit.org/show_bug.cgi?id=198462

        Unreviewed, rebaselining this test for WK1.

        * platform/mac-wk1/imported/w3c/web-platform-tests/pointerevents/pointerevent_mouse_capture_change_hover-expected.txt:

2019-06-05  Takashi Komori  <Takashi.Komori@sony.com>

        [Curl] Report all request headers to web inspector.
        https://bugs.webkit.org/show_bug.cgi?id=191653

        Reviewed by Fujii Hironori.

        * platform/wincairo/TestExpectations:
        * platform/wincairo/http/tests/inspector/network/resource-request-headers-expected.txt: Added.

2019-06-05  Myles C. Maxfield  <mmaxfield@apple.com>

        [WHLSL] Educate the property resolver about IndexExpressions
        https://bugs.webkit.org/show_bug.cgi?id=198399

        Reviewed by Saam Barati.

        * webgpu/propertyresolver/ander-abstract-lvalue-expected.html: Added.
        * webgpu/propertyresolver/ander-abstract-lvalue.html: Added.
        * webgpu/propertyresolver/ander-expected.html: Added.
        * webgpu/propertyresolver/ander-lvalue-3-levels-expected.html: Added.
        * webgpu/propertyresolver/ander-lvalue-3-levels.html: Added.
        * webgpu/propertyresolver/ander-lvalue-expected.html: Added.
        * webgpu/propertyresolver/ander-lvalue.html: Added.
        * webgpu/propertyresolver/ander.html: Added.
        * webgpu/propertyresolver/getter-expected.html: Added.
        * webgpu/propertyresolver/getter.html: Added.
        * webgpu/propertyresolver/indexer-ander-abstract-lvalue-expected.html: Added.
        * webgpu/propertyresolver/indexer-ander-abstract-lvalue.html: Added.
        * webgpu/propertyresolver/indexer-ander-expected.html: Added.
        * webgpu/propertyresolver/indexer-ander-lvalue-3-levels-expected.html: Added.
        * webgpu/propertyresolver/indexer-ander-lvalue-3-levels.html: Added.
        * webgpu/propertyresolver/indexer-ander-lvalue-expected.html: Added.
        * webgpu/propertyresolver/indexer-ander-lvalue.html: Added.
        * webgpu/propertyresolver/indexer-ander.html: Added.
        * webgpu/propertyresolver/indexer-getter-expected.html: Added.
        * webgpu/propertyresolver/indexer-getter.html: Added.
        * webgpu/propertyresolver/indexer-setter-abstract-lvalue-3-levels-expected.html: Added.
        * webgpu/propertyresolver/indexer-setter-abstract-lvalue-3-levels.html: Added.
        * webgpu/propertyresolver/indexer-setter-abstract-lvalue-expected.html: Added.
        * webgpu/propertyresolver/indexer-setter-abstract-lvalue.html: Added.
        * webgpu/propertyresolver/indexer-setter-expected.html: Added.
        * webgpu/propertyresolver/indexer-setter-lvalue-expected.html: Added.
        * webgpu/propertyresolver/indexer-setter-lvalue.html: Added.
        * webgpu/propertyresolver/indexer-setter.html: Added.
        * webgpu/propertyresolver/setter-abstract-lvalue-3-levels-expected.html: Added.
        * webgpu/propertyresolver/setter-abstract-lvalue-3-levels.html: Added.
        * webgpu/propertyresolver/setter-abstract-lvalue-expected.html: Added.
        * webgpu/propertyresolver/setter-abstract-lvalue.html: Added.
        * webgpu/propertyresolver/setter-lvalue-expected.html: Added.
        * webgpu/propertyresolver/setter-lvalue.html: Added.

2019-06-05  Daniel Bates  <dabates@apple.com>

        [CSP] Data URLs should inherit their CSP policy
        https://bugs.webkit.org/show_bug.cgi?id=198572
        <rdar://problem/50660927>

        Reviewed by Brent Fulgham.

        Add a test to ensure that a framed data URL inherits its CSP policy from its parent document.

        * http/tests/security/contentSecurityPolicy/subframe-with-data-url-inheritance-expected.txt: Added.
        * http/tests/security/contentSecurityPolicy/subframe-with-data-url-inheritance.html: Added.

2019-06-05  Alex Christensen  <achristensen@webkit.org>

        Re-enable safe browsing in WKWebView
        https://bugs.webkit.org/show_bug.cgi?id=196161
        <rdar://problem/49171413>

        Reviewed by Ryosuke Niwa.

        * platform/mac-wk2/http/tests/navigation/keyboard-events-during-provisional-navigation-expected.txt:

== Rolled over to ChangeLog-2019-06-05 ==
