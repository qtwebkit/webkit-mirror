From 8e0d41070cccca08f148c317bde1ac1a8114e46a Mon Sep 17 00:00:00 2001
From: "mark.lam@apple.com"
 <mark.lam@apple.com@268f45cc-cd09-0410-ab3c-d52691b4dbfc>
Date: Mon, 8 May 2017 22:24:29 +0000
Subject: [PATCH] Cherry-pick r216459. rdar://problem/32119857

---
 JSTests/ChangeLog                               | 14 ++++++++++++
 JSTests/stress/bug-171786.js                    | 15 +++++++++++++
 Source/JavaScriptCore/ChangeLog                 | 29 +++++++++++++++++++++++++
 Source/JavaScriptCore/bytecode/BytecodeUseDef.h |  4 ++--
 Source/JavaScriptCore/bytecode/CodeBlock.cpp    |  4 ++--
 Source/JavaScriptCore/dfg/DFGByteCodeParser.cpp |  2 +-
 6 files changed, 63 insertions(+), 5 deletions(-)
 create mode 100644 JSTests/stress/bug-171786.js

diff --git a/JSTests/ChangeLog b/JSTests/ChangeLog
index 627a80b31c5..be722c32e19 100644
--- a/JSTests/ChangeLog
+++ b/JSTests/ChangeLog
@@ -1,3 +1,17 @@
+2017-06-01  Matthew Hanson  <matthew_hanson@apple.com>
+
+        Cherry-pick r216459. rdar://problem/32119857
+
+    2017-05-08  Mark Lam  <mark.lam@apple.com>
+
+            op_throw_static_error's use of its first operand should be reflected in DFG BytecodeUseDef as well.
+            https://bugs.webkit.org/show_bug.cgi?id=171786
+            <rdar://problem/32051023>
+
+            Reviewed by Saam Barati.
+
+            * stress/bug-171786.js: Added.
+
 2017-05-25  Saam Barati  <sbarati@apple.com>
 
         Cherry-pick r217438. rdar://problem/32385704
diff --git a/JSTests/stress/bug-171786.js b/JSTests/stress/bug-171786.js
new file mode 100644
index 00000000000..2e467557e74
--- /dev/null
+++ b/JSTests/stress/bug-171786.js
@@ -0,0 +1,15 @@
+
+function foo(i, x) {
+    return String.prototype.big.call(x);
+}
+noInline(foo);
+
+for (var i = 0; i < 1000; i++) {
+    try {
+        if (i < 200)
+            foo(i, "hello");
+        else
+            foo(i, undefined);
+    } catch(e) {
+    }
+}
diff --git a/Source/JavaScriptCore/ChangeLog b/Source/JavaScriptCore/ChangeLog
index 95139187833..b27ac5b6b33 100644
--- a/Source/JavaScriptCore/ChangeLog
+++ b/Source/JavaScriptCore/ChangeLog
@@ -1,3 +1,32 @@
+2017-06-01  Matthew Hanson  <matthew_hanson@apple.com>
+
+        Cherry-pick r216459. rdar://problem/32119857
+
+    2017-05-08  Mark Lam  <mark.lam@apple.com>
+
+            op_throw_static_error's use of its first operand should be reflected in DFG BytecodeUseDef as well.
+            https://bugs.webkit.org/show_bug.cgi?id=171786
+            <rdar://problem/32051023>
+
+            Reviewed by Saam Barati.
+
+            * bytecode/BytecodeDumper.cpp:
+            (JSC::BytecodeDumper<Block>::dumpBytecode):
+            - Fix BytecodeDumper to dump op_throw_static_error correctly.  Previously,
+              it was expecting op1 to always be a constant.  r206870 changed it to take a
+              variable string as well.
+
+            * bytecode/BytecodeUseDef.h:
+            (JSC::computeUsesForBytecodeOffset):
+            - Fix the bug.
+
+            * dfg/DFGByteCodeParser.cpp:
+            (JSC::DFG::ByteCodeParser::parseBlock):
+            - Move the Phantom of op1 after the ThrowStaticError node, because technically,
+              the ThrowStaticError represents op_throw_static_error, and op_throw_static_error
+              uses op1.  In practice, this probably doesn't matter, but let's have the code
+              accurately communicate the behavior we're expecting.
+
 2017-05-25  Saam Barati  <sbarati@apple.com>
 
         Cherry-pick r217438. rdar://problem/32385704
diff --git a/Source/JavaScriptCore/bytecode/BytecodeUseDef.h b/Source/JavaScriptCore/bytecode/BytecodeUseDef.h
index 3a24d0f43a2..0f592cda233 100644
--- a/Source/JavaScriptCore/bytecode/BytecodeUseDef.h
+++ b/Source/JavaScriptCore/bytecode/BytecodeUseDef.h
@@ -40,7 +40,6 @@ void computeUsesForBytecodeOffset(Block* codeBlock, OpcodeID opcodeID, Instructi
     // No uses.
     case op_new_regexp:
     case op_new_array_buffer:
-    case op_throw_static_error:
     case op_debug:
     case op_jneq_ptr:
     case op_loop_hint:
@@ -71,7 +70,8 @@ void computeUsesForBytecodeOffset(Block* codeBlock, OpcodeID opcodeID, Instructi
     case op_jneq_null:
     case op_dec:
     case op_inc:
-    case op_log_shadow_chicken_prologue: {
+    case op_log_shadow_chicken_prologue:
+    case op_throw_static_error: {
         ASSERT(opcodeLengths[opcodeID] > 1);
         functor(codeBlock, instruction, opcodeID, instruction[1].u.operand);
         return;
diff --git a/Source/JavaScriptCore/bytecode/CodeBlock.cpp b/Source/JavaScriptCore/bytecode/CodeBlock.cpp
index 7623887bc86..efb7629b7cf 100644
--- a/Source/JavaScriptCore/bytecode/CodeBlock.cpp
+++ b/Source/JavaScriptCore/bytecode/CodeBlock.cpp
@@ -1672,10 +1672,10 @@ void CodeBlock::dumpBytecode(
             break;
         }
         case op_throw_static_error: {
-            int k0 = (++it)->u.operand;
+            int r0 = (++it)->u.operand;
             ErrorType k1 = static_cast<ErrorType>((++it)->u.unsignedValue);
             printLocationAndOp(out, exec, location, it, "throw_static_error");
-            out.printf("%s, ", constantName(k0).data());
+            out.printf("%s, ", registerName(r0).data());
             out.print(k1);
             break;
         }
diff --git a/Source/JavaScriptCore/dfg/DFGByteCodeParser.cpp b/Source/JavaScriptCore/dfg/DFGByteCodeParser.cpp
index b38879df36b..2245ba3ca2a 100644
--- a/Source/JavaScriptCore/dfg/DFGByteCodeParser.cpp
+++ b/Source/JavaScriptCore/dfg/DFGByteCodeParser.cpp
@@ -4857,8 +4857,8 @@ bool ByteCodeParser::parseBlock(unsigned limit)
             LAST_OPCODE(op_throw);
             
         case op_throw_static_error:
-            addToGraph(Phantom, get(VirtualRegister(currentInstruction[1].u.operand))); // Keep argument live.
             addToGraph(ThrowStaticError);
+            addToGraph(Phantom, get(VirtualRegister(currentInstruction[1].u.operand))); // Keep argument live.
             flushForTerminal();
             addToGraph(Unreachable);
             LAST_OPCODE(op_throw_static_error);
-- 
2.12.2 (Apple Git-86)

