2015-07-24  Matthew Hanson  <matthew_hanson@apple.com>

        Merge r187173. rdar://problem/21637698

    2015-07-22  Beth Dakin  <bdakin@apple.com>

            Animated images should animate in previews
            https://bugs.webkit.org/show_bug.cgi?id=147173
            -and corresponding-
            rdar://problem/21637698

            Reviewed by Dan Bernstein.

            InteractionInformationAtPosition needs to know if itâ€™s an animated image.
            * Shared/InteractionInformationAtPosition.cpp:
            (WebKit::InteractionInformationAtPosition::encode):
            (WebKit::InteractionInformationAtPosition::decode):
            * Shared/InteractionInformationAtPosition.h:

            New delegate method to create a link preview view controller for animated
            images.
            * UIProcess/API/Cocoa/WKUIDelegatePrivate.h:

            Treat animated images more like link previews.
            * UIProcess/ios/WKContentViewInteraction.mm:
            (-[WKContentView previewViewControllerForPosition:inSourceView:]):

            Set info.isAnimatedImage
            * WebProcess/WebPage/ios/WebPageIOS.mm:
            (WebKit::WebPage::getPositionInformation):

2015-07-24  Lucas Forschler  <lforschler@apple.com>

        Merge r187131

    2015-07-21  Zalan Bujtas  <zalan@apple.com>

            [iOS] Menu drop down such as on nike.com does not stay
            https://bugs.webkit.org/show_bug.cgi?id=147047
            rdar://problem/21046961

            Reviewed by Benjamin Poulain.

            This is a workaround for unintended scrolling while scaling.
            (Based on Benjamin Poulain's WIP patch for webkit.org/b/136904)

            In certain cases when scaling would result in moving the scrollview (which would trigger
            a scroll event on WebCore side), zoomRect is called instead of setZoomScale to ensure
            that the scroll position stays intact.

            * UIProcess/API/Cocoa/WKWebView.mm:
            (-[WKWebView _didCommitLayerTree:]):

2015-07-24  Lucas Forschler  <lforschler@apple.com>

        Merge r187136

    2015-07-21  Daniel Bates  <dabates@apple.com>

            Fix the build following <https://trac.webkit.org/changeset/187129>
            (https://bugs.webkit.org/show_bug.cgi?id=147112)

            * UIProcess/WebProcessProxy.cpp:
            (WebKit::WebProcessProxy::reinstateNetworkProcessAssertionState): Guard implementation with PLATFORM(IOS)
            since this logic is specific to the iOS port.

2015-07-23  Lucas Forschler  <lforschler@apple.com>

        Merge r187129

    2015-07-21  Daniel Bates  <dabates@apple.com>

            WTFCrash() in WebKit::WebProcess::networkConnection()
            https://bugs.webkit.org/show_bug.cgi?id=147112
            <rdar://problem/18477459>

            Reviewed by Gavin Barraclough.

            Fixes an issue where a newly launched network process may be jetsam'd because it has not
            taken a process assertion between the time it was launched and the time when a web process
            makes use of it.

            Initially a network process does not have a process assertion. A process assertion is taken
            (if one has not been taken) for the network process when a process assertion is taken for at
            least one web process. When the network process crashes a WebProcess may ultimately launch a
            new network process in WebProcess::networkConnection(). The new network process may be jetsam'd
            immediately when the system is under some measure pressure because it has a low jetsam priority,
            0 (since it does not have a process assertion and higher priority implies that a process is less
            likely to be jetsam'd). And the logic in WebProcess::networkConnection() explicitly calls
            CRASH() if the newly launched network process crashes immediately. Towards preventing the newly
            launched network process from being jetsam'd we should obtain a process assertion for it.

            * UIProcess/WebProcessPool.cpp:
            (WebKit::WebProcessPool::WebProcessPool): Initialize m_didNetworkProcessCrash to false.
            (WebKit::WebProcessPool::ensureNetworkProcess): If the network process crashed (m_didNetworkProcessCrash == true)
            then tell each process in the pool to reinstate their network activity token for the new network process.
            (WebKit::WebProcessPool::networkProcessCrashed): Set m_didNetworkProcessCrash to true when the
            network process crashed.
            * UIProcess/WebProcessPool.h:
            * UIProcess/WebProcessProxy.cpp:
            (WebKit::WebProcessProxy::reinstateNetworkProcessAssertionState): Added.
            (WebKit::WebProcessProxy::didSetAssertionState): Add assert to ensure we never have both
            a background- and foreground- activity token for the network process.
            * UIProcess/WebProcessProxy.h:

2015-07-23  Lucas Forschler  <lforschler@apple.com>

        Merge r187117

    2015-07-21  Tim Horton  <timothy_horton@apple.com>

            [iOS] Avoid using a TextIndicator if there are non-text things to indicate
            https://bugs.webkit.org/show_bug.cgi?id=147152
            <rdar://problem/21921061>

            Reviewed by Beth Dakin.

            * UIProcess/ios/WKContentViewInteraction.mm:
            (-[WKContentView willPresentPreviewViewController:forPosition:inSourceView:]):
            * WebProcess/WebPage/ios/WebPageIOS.mm:
            (WebKit::shouldUseTextIndicatorForLink):
            (WebKit::WebPage::getPositionInformation):
            Fall back to a rectangular area instead of a TextIndicator if there are any
            non-inline elements inside the link.

2015-07-23  Lucas Forschler  <lforschler@apple.com>

        Merge r187115

    2015-07-21  Andreas Kling  <akling@apple.com>

            API::Session should clean up its storage in the network process when destroyed.
            <https://webkit.org/b/147139>
            <rdar://problem/21838764>

            Reviewed by Anders Carlsson.

            Have ~Session() send a DestroyPrivateBrowsingSession message to all networking processes
            for ephemeral sessions. This plugs a NetworkStorageSession leak that could retain a large
            CFNetwork object graph.

            * UIProcess/API/APISession.cpp:
            (API::Session::~Session):

2015-07-23  Lucas Forschler  <lforschler@apple.com>

        Merge r187045

    2015-07-20  Antti Koivisto  <antti@apple.com>

            NSURLCache fallback does not work on iOS due to sandboxing
            https://bugs.webkit.org/show_bug.cgi?id=146314
            <rdar://problem/21433691>

            Reviewed by Anders Carlsson.

            This broke with earlier cache path computation changes.

            * NetworkProcess/cocoa/NetworkProcessCocoa.mm:
            (WebKit::NetworkProcess::platformInitializeNetworkProcessCocoa):

                NSURLCache path is relative to the container cache path so "." is sufficient.
                This puts the cache files under
                <container>/Library/Caches/com.apple.WebKit.Networking/

== Rolled over to ChangeLog-2015-07-23 ==
