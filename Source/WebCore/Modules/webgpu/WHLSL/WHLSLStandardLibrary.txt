// https://github.com/gpuweb/WHLSL/blob/9528f19aaa71fd5c3c706d2873f4b8c8cce857b5/Spec/source/Generate_Standard_Library.js
// This was autogenerated from Generate_Standard_Library.js! Do not edit!!

native typedef void;
native typedef bool;
native typedef uchar;
native typedef ushort;
native typedef uint;
native typedef char;
native typedef short;
native typedef int;
native typedef half;
native typedef float;
native typedef atomic_int;
native typedef atomic_uint;
native typedef vector<bool, 2>;
typedef bool2 = vector<bool, 2>;
native typedef vector<bool, 3>;
typedef bool3 = vector<bool, 3>;
native typedef vector<bool, 4>;
typedef bool4 = vector<bool, 4>;
native typedef vector<uchar, 2>;
typedef uchar2 = vector<uchar, 2>;
native typedef vector<uchar, 3>;
typedef uchar3 = vector<uchar, 3>;
native typedef vector<uchar, 4>;
typedef uchar4 = vector<uchar, 4>;
native typedef vector<ushort, 2>;
typedef ushort2 = vector<ushort, 2>;
native typedef vector<ushort, 3>;
typedef ushort3 = vector<ushort, 3>;
native typedef vector<ushort, 4>;
typedef ushort4 = vector<ushort, 4>;
native typedef vector<uint, 2>;
typedef uint2 = vector<uint, 2>;
native typedef vector<uint, 3>;
typedef uint3 = vector<uint, 3>;
native typedef vector<uint, 4>;
typedef uint4 = vector<uint, 4>;
native typedef vector<char, 2>;
typedef char2 = vector<char, 2>;
native typedef vector<char, 3>;
typedef char3 = vector<char, 3>;
native typedef vector<char, 4>;
typedef char4 = vector<char, 4>;
native typedef vector<short, 2>;
typedef short2 = vector<short, 2>;
native typedef vector<short, 3>;
typedef short3 = vector<short, 3>;
native typedef vector<short, 4>;
typedef short4 = vector<short, 4>;
native typedef vector<int, 2>;
typedef int2 = vector<int, 2>;
native typedef vector<int, 3>;
typedef int3 = vector<int, 3>;
native typedef vector<int, 4>;
typedef int4 = vector<int, 4>;
native typedef vector<half, 2>;
typedef half2 = vector<half, 2>;
native typedef vector<half, 3>;
typedef half3 = vector<half, 3>;
native typedef vector<half, 4>;
typedef half4 = vector<half, 4>;
native typedef vector<float, 2>;
typedef float2 = vector<float, 2>;
native typedef vector<float, 3>;
typedef float3 = vector<float, 3>;
native typedef vector<float, 4>;
typedef float4 = vector<float, 4>;

native typedef matrix<half, 2, 2>;
typedef half2x2 = matrix<half, 2, 2>;
native typedef matrix<half, 2, 3>;
typedef half2x3 = matrix<half, 2, 3>;
native typedef matrix<half, 2, 4>;
typedef half2x4 = matrix<half, 2, 4>;
native typedef matrix<half, 3, 2>;
typedef half3x2 = matrix<half, 3, 2>;
native typedef matrix<half, 3, 3>;
typedef half3x3 = matrix<half, 3, 3>;
native typedef matrix<half, 3, 4>;
typedef half3x4 = matrix<half, 3, 4>;
native typedef matrix<half, 4, 2>;
typedef half4x2 = matrix<half, 4, 2>;
native typedef matrix<half, 4, 3>;
typedef half4x3 = matrix<half, 4, 3>;
native typedef matrix<half, 4, 4>;
typedef half4x4 = matrix<half, 4, 4>;
native typedef matrix<float, 2, 2>;
typedef float2x2 = matrix<float, 2, 2>;
native typedef matrix<float, 2, 3>;
typedef float2x3 = matrix<float, 2, 3>;
native typedef matrix<float, 2, 4>;
typedef float2x4 = matrix<float, 2, 4>;
native typedef matrix<float, 3, 2>;
typedef float3x2 = matrix<float, 3, 2>;
native typedef matrix<float, 3, 3>;
typedef float3x3 = matrix<float, 3, 3>;
native typedef matrix<float, 3, 4>;
typedef float3x4 = matrix<float, 3, 4>;
native typedef matrix<float, 4, 2>;
typedef float4x2 = matrix<float, 4, 2>;
native typedef matrix<float, 4, 3>;
typedef float4x3 = matrix<float, 4, 3>;
native typedef matrix<float, 4, 4>;
typedef float4x4 = matrix<float, 4, 4>;
native typedef sampler;
native typedef Texture1D<ushort>;
native typedef Texture1D<ushort2>;
native typedef Texture1D<ushort3>;
native typedef Texture1D<ushort4>;
native typedef Texture1D<uint>;
native typedef Texture1D<uint2>;
native typedef Texture1D<uint3>;
native typedef Texture1D<uint4>;
native typedef Texture1D<short>;
native typedef Texture1D<short2>;
native typedef Texture1D<short3>;
native typedef Texture1D<short4>;
native typedef Texture1D<int>;
native typedef Texture1D<int2>;
native typedef Texture1D<int3>;
native typedef Texture1D<int4>;
native typedef Texture1D<half>;
native typedef Texture1D<half2>;
native typedef Texture1D<half3>;
native typedef Texture1D<half4>;
native typedef Texture1D<float>;
native typedef Texture1D<float2>;
native typedef Texture1D<float3>;
native typedef Texture1D<float4>;
native typedef Texture1DArray<ushort>;
native typedef Texture1DArray<ushort2>;
native typedef Texture1DArray<ushort3>;
native typedef Texture1DArray<ushort4>;
native typedef Texture1DArray<uint>;
native typedef Texture1DArray<uint2>;
native typedef Texture1DArray<uint3>;
native typedef Texture1DArray<uint4>;
native typedef Texture1DArray<short>;
native typedef Texture1DArray<short2>;
native typedef Texture1DArray<short3>;
native typedef Texture1DArray<short4>;
native typedef Texture1DArray<int>;
native typedef Texture1DArray<int2>;
native typedef Texture1DArray<int3>;
native typedef Texture1DArray<int4>;
native typedef Texture1DArray<half>;
native typedef Texture1DArray<half2>;
native typedef Texture1DArray<half3>;
native typedef Texture1DArray<half4>;
native typedef Texture1DArray<float>;
native typedef Texture1DArray<float2>;
native typedef Texture1DArray<float3>;
native typedef Texture1DArray<float4>;
native typedef Texture2D<ushort>;
native typedef Texture2D<ushort2>;
native typedef Texture2D<ushort3>;
native typedef Texture2D<ushort4>;
native typedef Texture2D<uint>;
native typedef Texture2D<uint2>;
native typedef Texture2D<uint3>;
native typedef Texture2D<uint4>;
native typedef Texture2D<short>;
native typedef Texture2D<short2>;
native typedef Texture2D<short3>;
native typedef Texture2D<short4>;
native typedef Texture2D<int>;
native typedef Texture2D<int2>;
native typedef Texture2D<int3>;
native typedef Texture2D<int4>;
native typedef Texture2D<half>;
native typedef Texture2D<half2>;
native typedef Texture2D<half3>;
native typedef Texture2D<half4>;
native typedef Texture2D<float>;
native typedef Texture2D<float2>;
native typedef Texture2D<float3>;
native typedef Texture2D<float4>;
native typedef Texture2DArray<ushort>;
native typedef Texture2DArray<ushort2>;
native typedef Texture2DArray<ushort3>;
native typedef Texture2DArray<ushort4>;
native typedef Texture2DArray<uint>;
native typedef Texture2DArray<uint2>;
native typedef Texture2DArray<uint3>;
native typedef Texture2DArray<uint4>;
native typedef Texture2DArray<short>;
native typedef Texture2DArray<short2>;
native typedef Texture2DArray<short3>;
native typedef Texture2DArray<short4>;
native typedef Texture2DArray<int>;
native typedef Texture2DArray<int2>;
native typedef Texture2DArray<int3>;
native typedef Texture2DArray<int4>;
native typedef Texture2DArray<half>;
native typedef Texture2DArray<half2>;
native typedef Texture2DArray<half3>;
native typedef Texture2DArray<half4>;
native typedef Texture2DArray<float>;
native typedef Texture2DArray<float2>;
native typedef Texture2DArray<float3>;
native typedef Texture2DArray<float4>;
native typedef Texture3D<ushort>;
native typedef Texture3D<ushort2>;
native typedef Texture3D<ushort3>;
native typedef Texture3D<ushort4>;
native typedef Texture3D<uint>;
native typedef Texture3D<uint2>;
native typedef Texture3D<uint3>;
native typedef Texture3D<uint4>;
native typedef Texture3D<short>;
native typedef Texture3D<short2>;
native typedef Texture3D<short3>;
native typedef Texture3D<short4>;
native typedef Texture3D<int>;
native typedef Texture3D<int2>;
native typedef Texture3D<int3>;
native typedef Texture3D<int4>;
native typedef Texture3D<half>;
native typedef Texture3D<half2>;
native typedef Texture3D<half3>;
native typedef Texture3D<half4>;
native typedef Texture3D<float>;
native typedef Texture3D<float2>;
native typedef Texture3D<float3>;
native typedef Texture3D<float4>;
native typedef TextureCube<ushort>;
native typedef TextureCube<ushort2>;
native typedef TextureCube<ushort3>;
native typedef TextureCube<ushort4>;
native typedef TextureCube<uint>;
native typedef TextureCube<uint2>;
native typedef TextureCube<uint3>;
native typedef TextureCube<uint4>;
native typedef TextureCube<short>;
native typedef TextureCube<short2>;
native typedef TextureCube<short3>;
native typedef TextureCube<short4>;
native typedef TextureCube<int>;
native typedef TextureCube<int2>;
native typedef TextureCube<int3>;
native typedef TextureCube<int4>;
native typedef TextureCube<half>;
native typedef TextureCube<half2>;
native typedef TextureCube<half3>;
native typedef TextureCube<half4>;
native typedef TextureCube<float>;
native typedef TextureCube<float2>;
native typedef TextureCube<float3>;
native typedef TextureCube<float4>;
native typedef TextureDepth2D<float>;
native typedef TextureDepth2DArray<float>;
native typedef TextureDepthCube<float>;

native operator uchar(ushort);
native operator uchar(uint);
native operator uchar(char);
native operator uchar(short);
native operator uchar(int);
native operator uchar(half);
native operator uchar(float);
native operator ushort(uchar);
native operator ushort(uint);
native operator ushort(char);
native operator ushort(short);
native operator ushort(int);
native operator ushort(half);
native operator ushort(float);
native operator uint(uchar);
native operator uint(ushort);
native operator uint(char);
native operator uint(short);
native operator uint(int);
native operator uint(half);
native operator uint(float);
native operator char(uchar);
native operator char(ushort);
native operator char(uint);
native operator char(short);
native operator char(int);
native operator char(half);
native operator char(float);
native operator short(uchar);
native operator short(ushort);
native operator short(uint);
native operator short(char);
native operator short(int);
native operator short(half);
native operator short(float);
native operator int(uchar);
native operator int(ushort);
native operator int(uint);
native operator int(char);
native operator int(short);
native operator int(half);
native operator int(float);
native operator half(uchar);
native operator half(ushort);
native operator half(uint);
native operator half(char);
native operator half(short);
native operator half(int);
native operator half(float);
native operator float(uchar);
native operator float(ushort);
native operator float(uint);
native operator float(char);
native operator float(short);
native operator float(int);
native operator float(half);

// FIXME: These should be auto generated by the compiler.
// https://bugs.webkit.org/show_bug.cgi?id=198861
native bool operator==(thread int*, thread int*);

native bool operator.x(bool2);
native bool operator.y(bool2);
native bool operator.x(bool3);
native bool operator.y(bool3);
native bool operator.z(bool3);
native bool operator.x(bool4);
native bool operator.y(bool4);
native bool operator.z(bool4);
native bool operator.w(bool4);
native bool2 operator.x=(bool2, bool);
native bool2 operator.y=(bool2, bool);
native bool3 operator.x=(bool3, bool);
native bool3 operator.y=(bool3, bool);
native bool3 operator.z=(bool3, bool);
native bool4 operator.x=(bool4, bool);
native bool4 operator.y=(bool4, bool);
native bool4 operator.z=(bool4, bool);
native bool4 operator.w=(bool4, bool);
native uchar operator.x(uchar2);
native uchar operator.y(uchar2);
native uchar operator.x(uchar3);
native uchar operator.y(uchar3);
native uchar operator.z(uchar3);
native uchar operator.x(uchar4);
native uchar operator.y(uchar4);
native uchar operator.z(uchar4);
native uchar operator.w(uchar4);
native uchar2 operator.x=(uchar2, uchar);
native uchar2 operator.y=(uchar2, uchar);
native uchar3 operator.x=(uchar3, uchar);
native uchar3 operator.y=(uchar3, uchar);
native uchar3 operator.z=(uchar3, uchar);
native uchar4 operator.x=(uchar4, uchar);
native uchar4 operator.y=(uchar4, uchar);
native uchar4 operator.z=(uchar4, uchar);
native uchar4 operator.w=(uchar4, uchar);
native ushort operator.x(ushort2);
native ushort operator.y(ushort2);
native ushort operator.x(ushort3);
native ushort operator.y(ushort3);
native ushort operator.z(ushort3);
native ushort operator.x(ushort4);
native ushort operator.y(ushort4);
native ushort operator.z(ushort4);
native ushort operator.w(ushort4);
native ushort2 operator.x=(ushort2, ushort);
native ushort2 operator.y=(ushort2, ushort);
native ushort3 operator.x=(ushort3, ushort);
native ushort3 operator.y=(ushort3, ushort);
native ushort3 operator.z=(ushort3, ushort);
native ushort4 operator.x=(ushort4, ushort);
native ushort4 operator.y=(ushort4, ushort);
native ushort4 operator.z=(ushort4, ushort);
native ushort4 operator.w=(ushort4, ushort);
native uint operator.x(uint2);
native uint operator.y(uint2);
native uint operator.x(uint3);
native uint operator.y(uint3);
native uint operator.z(uint3);
native uint operator.x(uint4);
native uint operator.y(uint4);
native uint operator.z(uint4);
native uint operator.w(uint4);
native uint2 operator.x=(uint2, uint);
native uint2 operator.y=(uint2, uint);
native uint3 operator.x=(uint3, uint);
native uint3 operator.y=(uint3, uint);
native uint3 operator.z=(uint3, uint);
native uint4 operator.x=(uint4, uint);
native uint4 operator.y=(uint4, uint);
native uint4 operator.z=(uint4, uint);
native uint4 operator.w=(uint4, uint);
native char operator.x(char2);
native char operator.y(char2);
native char operator.x(char3);
native char operator.y(char3);
native char operator.z(char3);
native char operator.x(char4);
native char operator.y(char4);
native char operator.z(char4);
native char operator.w(char4);
native char2 operator.x=(char2, char);
native char2 operator.y=(char2, char);
native char3 operator.x=(char3, char);
native char3 operator.y=(char3, char);
native char3 operator.z=(char3, char);
native char4 operator.x=(char4, char);
native char4 operator.y=(char4, char);
native char4 operator.z=(char4, char);
native char4 operator.w=(char4, char);
native short operator.x(short2);
native short operator.y(short2);
native short operator.x(short3);
native short operator.y(short3);
native short operator.z(short3);
native short operator.x(short4);
native short operator.y(short4);
native short operator.z(short4);
native short operator.w(short4);
native short2 operator.x=(short2, short);
native short2 operator.y=(short2, short);
native short3 operator.x=(short3, short);
native short3 operator.y=(short3, short);
native short3 operator.z=(short3, short);
native short4 operator.x=(short4, short);
native short4 operator.y=(short4, short);
native short4 operator.z=(short4, short);
native short4 operator.w=(short4, short);
native int operator.x(int2);
native int operator.y(int2);
native int operator.x(int3);
native int operator.y(int3);
native int operator.z(int3);
native int operator.x(int4);
native int operator.y(int4);
native int operator.z(int4);
native int operator.w(int4);
native int2 operator.x=(int2, int);
native int2 operator.y=(int2, int);
native int3 operator.x=(int3, int);
native int3 operator.y=(int3, int);
native int3 operator.z=(int3, int);
native int4 operator.x=(int4, int);
native int4 operator.y=(int4, int);
native int4 operator.z=(int4, int);
native int4 operator.w=(int4, int);
native half operator.x(half2);
native half operator.y(half2);
native half operator.x(half3);
native half operator.y(half3);
native half operator.z(half3);
native half operator.x(half4);
native half operator.y(half4);
native half operator.z(half4);
native half operator.w(half4);
native half2 operator.x=(half2, half);
native half2 operator.y=(half2, half);
native half3 operator.x=(half3, half);
native half3 operator.y=(half3, half);
native half3 operator.z=(half3, half);
native half4 operator.x=(half4, half);
native half4 operator.y=(half4, half);
native half4 operator.z=(half4, half);
native half4 operator.w=(half4, half);
native float operator.x(float2);
native float operator.y(float2);
native float operator.x(float3);
native float operator.y(float3);
native float operator.z(float3);
native float operator.x(float4);
native float operator.y(float4);
native float operator.z(float4);
native float operator.w(float4);
native float2 operator.x=(float2, float);
native float2 operator.y=(float2, float);
native float3 operator.x=(float3, float);
native float3 operator.y=(float3, float);
native float3 operator.z=(float3, float);
native float4 operator.x=(float4, float);
native float4 operator.y=(float4, float);
native float4 operator.z=(float4, float);
native float4 operator.w=(float4, float);

native float ddx(float);
native float ddy(float);
native void AllMemoryBarrierWithGroupSync();
native void DeviceMemoryBarrierWithGroupSync();
native void GroupMemoryBarrierWithGroupSync();

operator float4(float x, float y, float z, float w) {
    float4 result;
    result.x = x;
    result.y = y;
    result.z = z;
    result.w = w;
    return result;
}

native float3 operator[](float2x3, uint);
native float2x3 operator[]=(float2x3, uint, float3);
float operator[](float3 v, uint index) {
    switch (index) {
        case 0:
            return v.x;
        case 1:
            return v.y;
        case 2:
            return v.z;
        default:
            break;
    }
    return 0.0;
}
float3 operator[]=(float3 v, uint index, float a) {
    switch (index) {
        case 0:
            v.x = a;
            break;
        case 1:
            v.y = a;
            break;
        case 2:
            v.z = a;
            break;
        default:
            break;
    }
    return v;
}
float2x3 operator+(float2x3 a, float2x3 b) {
    float2x3 result;
    result[0][0] = a[0][0] + b[0][0];
    result[0][1] = a[0][1] + b[0][1];
    result[0][2] = a[0][2] + b[0][2];
    result[1][0] = a[1][0] + b[1][0];
    result[1][1] = a[1][1] + b[1][1];
    result[1][2] = a[1][2] + b[1][2];
    return result;
}
float2x3 operator*(float2x3 a, float b) {
    float2x3 result;
    result[0][0] = a[0][0] * b;
    result[0][1] = a[0][1] * b;
    result[0][2] = a[0][2] * b;
    result[1][0] = a[1][0] * b;
    result[1][1] = a[1][1] * b;
    result[1][2] = a[1][2] * b;
    return result;
}
float2x3 operator+(float2x3 a, float b) {
    float2x3 result;
    result[0][0] = a[0][0] + b;
    result[0][1] = a[0][1] + b;
    result[0][2] = a[0][2] + b;
    result[1][0] = a[1][0] + b;
    result[1][1] = a[1][1] + b;
    result[1][2] = a[1][2] + b;
    return result;
}
float2x3 operator-(float2x3 a, float b) {
    float2x3 result;
    result[0][0] = a[0][0] - b;
    result[0][1] = a[0][1] - b;
    result[0][2] = a[0][2] - b;
    result[1][0] = a[1][0] - b;
    result[1][1] = a[1][1] - b;
    result[1][2] = a[1][2] - b;
    return result;
}

typedef float4x4 = matrix<float, 4, 4>;
native float4 operator[](float4x4, uint);
native float4x4 operator[]=(float4x4, uint, float4);

float operator[](float4 v, uint index) {
    switch (index) {
        case 0:
            return v.x;
        case 1:
            return v.y;
        case 2:
            return v.z;
        case 3:
            return v.w;
        default:
            break;
    }
    float result;
    return result;
}

float4 operator[]=(float4 v, uint index, float a) {
    switch (index) {
        case 0:
            v.x = a;
            break;
        case 1:
            v.y = a;
            break;
        case 2:
            v.z = a;
            break;
        case 3:
            v.w = a;
            break;
        default:
            break;
    }
    return v;
}

float4 mul(float4x4 x, float4 y) {
    float4 result;
    result[0] = 0;
    result[0] += x[0][0] * y[0];
    result[0] += x[0][1] * y[1];
    result[0] += x[0][2] * y[2];
    result[0] += x[0][3] * y[3];
    result[1] = 0;
    result[1] += x[1][0] * y[0];
    result[1] += x[1][1] * y[1];
    result[1] += x[1][2] * y[2];
    result[1] += x[1][3] * y[3];
    result[2] = 0;
    result[2] += x[2][0] * y[0];
    result[2] += x[2][1] * y[1];
    result[2] += x[2][2] * y[2];
    result[2] += x[2][3] * y[3];
    result[3] = 0;
    result[3] += x[3][0] * y[0];
    result[3] += x[3][1] * y[1];
    result[3] += x[3][2] * y[2];
    result[3] += x[3][3] * y[3];
    return result;
}

float4x4 mul(float4x4 x, float4x4 y) {
    float4x4 result;
    result[0][0] = 0;
    result[0][0] += x[0][0] * y[0][0];
    result[0][0] += x[0][1] * y[1][0];
    result[0][0] += x[0][2] * y[2][0];
    result[0][0] += x[0][3] * y[3][0];
    result[0][1] = 0;
    result[0][1] += x[0][0] * y[0][1];
    result[0][1] += x[0][1] * y[1][1];
    result[0][1] += x[0][2] * y[2][1];
    result[0][1] += x[0][3] * y[3][1];
    result[0][2] = 0;
    result[0][2] += x[0][0] * y[0][2];
    result[0][2] += x[0][1] * y[1][2];
    result[0][2] += x[0][2] * y[2][2];
    result[0][2] += x[0][3] * y[3][2];
    result[0][3] = 0;
    result[0][3] += x[0][0] * y[0][3];
    result[0][3] += x[0][1] * y[1][3];
    result[0][3] += x[0][2] * y[2][3];
    result[0][3] += x[0][3] * y[3][3];
    result[1][0] = 0;
    result[1][0] += x[1][0] * y[0][0];
    result[1][0] += x[1][1] * y[1][0];
    result[1][0] += x[1][2] * y[2][0];
    result[1][0] += x[1][3] * y[3][0];
    result[1][1] = 0;
    result[1][1] += x[1][0] * y[0][1];
    result[1][1] += x[1][1] * y[1][1];
    result[1][1] += x[1][2] * y[2][1];
    result[1][1] += x[1][3] * y[3][1];
    result[1][2] = 0;
    result[1][2] += x[1][0] * y[0][2];
    result[1][2] += x[1][1] * y[1][2];
    result[1][2] += x[1][2] * y[2][2];
    result[1][2] += x[1][3] * y[3][2];
    result[1][3] = 0;
    result[1][3] += x[1][0] * y[0][3];
    result[1][3] += x[1][1] * y[1][3];
    result[1][3] += x[1][2] * y[2][3];
    result[1][3] += x[1][3] * y[3][3];
    result[2][0] = 0;
    result[2][0] += x[2][0] * y[0][0];
    result[2][0] += x[2][1] * y[1][0];
    result[2][0] += x[2][2] * y[2][0];
    result[2][0] += x[2][3] * y[3][0];
    result[2][1] = 0;
    result[2][1] += x[2][0] * y[0][1];
    result[2][1] += x[2][1] * y[1][1];
    result[2][1] += x[2][2] * y[2][1];
    result[2][1] += x[2][3] * y[3][1];
    result[2][2] = 0;
    result[2][2] += x[2][0] * y[0][2];
    result[2][2] += x[2][1] * y[1][2];
    result[2][2] += x[2][2] * y[2][2];
    result[2][2] += x[2][3] * y[3][2];
    result[2][3] = 0;
    result[2][3] += x[2][0] * y[0][3];
    result[2][3] += x[2][1] * y[1][3];
    result[2][3] += x[2][2] * y[2][3];
    result[2][3] += x[2][3] * y[3][3];
    result[3][0] = 0;
    result[3][0] += x[3][0] * y[0][0];
    result[3][0] += x[3][1] * y[1][0];
    result[3][0] += x[3][2] * y[2][0];
    result[3][0] += x[3][3] * y[3][0];
    result[3][1] = 0;
    result[3][1] += x[3][0] * y[0][1];
    result[3][1] += x[3][1] * y[1][1];
    result[3][1] += x[3][2] * y[2][1];
    result[3][1] += x[3][3] * y[3][1];
    result[3][2] = 0;
    result[3][2] += x[3][0] * y[0][2];
    result[3][2] += x[3][1] * y[1][2];
    result[3][2] += x[3][2] * y[2][2];
    result[3][2] += x[3][3] * y[3][2];
    result[3][3] = 0;
    result[3][3] += x[3][0] * y[0][3];
    result[3][3] += x[3][1] * y[1][3];
    result[3][3] += x[3][2] * y[2][3];
    result[3][3] += x[3][3] * y[3][3];
    return result;
}

operator float2(float x, float y) {
    float2 result;
    result.x = x;
    result.y = y;
    return result;
}

operator int3(int x, int y, int z) {
    int3 result;
    result.x = x;
    result.y = y;
    result.z = z;
    return result;
}

operator int2(int x, int y) {
    int2 result;
    result.x = x;
    result.y = y;
    return result;
}

operator uint2(uint x, uint y) {
    uint2 result;
    result.x = x;
    result.y = y;
    return result;
}

native bool operator==(uchar, uchar);
native bool operator==(ushort, ushort);
native bool operator==(char, char);
native bool operator==(short, short);
native bool operator==(half, half);

native int operator+(int, int);
native int operator-(int, int);
native int operator*(int, int);
native int operator/(int, int);
native bool operator==(int, int);
native bool operator<(int, int);
native bool operator<=(int, int);
native bool operator>(int, int);
native bool operator>=(int, int);
native uint operator+(uint, uint);
native uint operator-(uint, uint);
native uint operator*(uint, uint);
native uint operator/(uint, uint);
native bool operator==(uint, uint);
native bool operator<(uint, uint);
native bool operator<=(uint, uint);
native bool operator>(uint, uint);
native bool operator>=(uint, uint);

native float operator+(float, float);
native float operator-(float, float);
native float operator*(float, float);
native float operator/(float, float);
native bool operator==(float, float);
native bool operator<(float, float);
native bool operator<=(float, float);
native bool operator>(float, float);
native bool operator>=(float, float);

native int operator&(int, int);
native int operator|(int, int);
native int operator^(int, int);
native int operator~(int);
native int operator<<(int, uint);
native int operator>>(int, uint);
native uint operator&(uint, uint);
native uint operator|(uint, uint);
native uint operator^(uint, uint);
native uint operator~(uint);
native uint operator<<(uint, uint);
native uint operator>>(uint, uint);

int operator++(int value) {
    return value + 1;
}
int operator--(int value) {
    return value - 1;
}
uint operator++(uint value) {
    return value + 1;
}
uint operator--(uint value) {
    return value - 1;
}

native ushort Sample(Texture1D<ushort>, sampler, float location);
native ushort Sample(Texture1DArray<ushort>, sampler, float2 location);
native ushort Sample(Texture2D<ushort>, sampler, float2 location);
native ushort Sample(Texture2D<ushort>, sampler, float2 location, int2 offset);
native ushort Sample(Texture2DArray<ushort>, sampler, float3 location);
native ushort Sample(Texture2DArray<ushort>, sampler, float3 location, int2 offset);
native ushort Sample(Texture3D<ushort>, sampler, float3 location);
native ushort Sample(Texture3D<ushort>, sampler, float3 location, int3 offset);
native ushort Sample(TextureCube<ushort>, sampler, float3 location);
native ushort2 Sample(Texture1D<ushort2>, sampler, float location);
native ushort2 Sample(Texture1DArray<ushort2>, sampler, float2 location);
native ushort2 Sample(Texture2D<ushort2>, sampler, float2 location);
native ushort2 Sample(Texture2D<ushort2>, sampler, float2 location, int2 offset);
native ushort2 Sample(Texture2DArray<ushort2>, sampler, float3 location);
native ushort2 Sample(Texture2DArray<ushort2>, sampler, float3 location, int2 offset);
native ushort2 Sample(Texture3D<ushort2>, sampler, float3 location);
native ushort2 Sample(Texture3D<ushort2>, sampler, float3 location, int3 offset);
native ushort2 Sample(TextureCube<ushort2>, sampler, float3 location);
native ushort3 Sample(Texture1D<ushort3>, sampler, float location);
native ushort3 Sample(Texture1DArray<ushort3>, sampler, float2 location);
native ushort3 Sample(Texture2D<ushort3>, sampler, float2 location);
native ushort3 Sample(Texture2D<ushort3>, sampler, float2 location, int2 offset);
native ushort3 Sample(Texture2DArray<ushort3>, sampler, float3 location);
native ushort3 Sample(Texture2DArray<ushort3>, sampler, float3 location, int2 offset);
native ushort3 Sample(Texture3D<ushort3>, sampler, float3 location);
native ushort3 Sample(Texture3D<ushort3>, sampler, float3 location, int3 offset);
native ushort3 Sample(TextureCube<ushort3>, sampler, float3 location);
native ushort4 Sample(Texture1D<ushort4>, sampler, float location);
native ushort4 Sample(Texture1DArray<ushort4>, sampler, float2 location);
native ushort4 Sample(Texture2D<ushort4>, sampler, float2 location);
native ushort4 Sample(Texture2D<ushort4>, sampler, float2 location, int2 offset);
native ushort4 Sample(Texture2DArray<ushort4>, sampler, float3 location);
native ushort4 Sample(Texture2DArray<ushort4>, sampler, float3 location, int2 offset);
native ushort4 Sample(Texture3D<ushort4>, sampler, float3 location);
native ushort4 Sample(Texture3D<ushort4>, sampler, float3 location, int3 offset);
native ushort4 Sample(TextureCube<ushort4>, sampler, float3 location);
native uint Sample(Texture1D<uint>, sampler, float location);
native uint Sample(Texture1DArray<uint>, sampler, float2 location);
native uint Sample(Texture2D<uint>, sampler, float2 location);
native uint Sample(Texture2D<uint>, sampler, float2 location, int2 offset);
native uint Sample(Texture2DArray<uint>, sampler, float3 location);
native uint Sample(Texture2DArray<uint>, sampler, float3 location, int2 offset);
native uint Sample(Texture3D<uint>, sampler, float3 location);
native uint Sample(Texture3D<uint>, sampler, float3 location, int3 offset);
native uint Sample(TextureCube<uint>, sampler, float3 location);
native uint2 Sample(Texture1D<uint2>, sampler, float location);
native uint2 Sample(Texture1DArray<uint2>, sampler, float2 location);
native uint2 Sample(Texture2D<uint2>, sampler, float2 location);
native uint2 Sample(Texture2D<uint2>, sampler, float2 location, int2 offset);
native uint2 Sample(Texture2DArray<uint2>, sampler, float3 location);
native uint2 Sample(Texture2DArray<uint2>, sampler, float3 location, int2 offset);
native uint2 Sample(Texture3D<uint2>, sampler, float3 location);
native uint2 Sample(Texture3D<uint2>, sampler, float3 location, int3 offset);
native uint2 Sample(TextureCube<uint2>, sampler, float3 location);
native uint3 Sample(Texture1D<uint3>, sampler, float location);
native uint3 Sample(Texture1DArray<uint3>, sampler, float2 location);
native uint3 Sample(Texture2D<uint3>, sampler, float2 location);
native uint3 Sample(Texture2D<uint3>, sampler, float2 location, int2 offset);
native uint3 Sample(Texture2DArray<uint3>, sampler, float3 location);
native uint3 Sample(Texture2DArray<uint3>, sampler, float3 location, int2 offset);
native uint3 Sample(Texture3D<uint3>, sampler, float3 location);
native uint3 Sample(Texture3D<uint3>, sampler, float3 location, int3 offset);
native uint3 Sample(TextureCube<uint3>, sampler, float3 location);
native uint4 Sample(Texture1D<uint4>, sampler, float location);
native uint4 Sample(Texture1DArray<uint4>, sampler, float2 location);
native uint4 Sample(Texture2D<uint4>, sampler, float2 location);
native uint4 Sample(Texture2D<uint4>, sampler, float2 location, int2 offset);
native uint4 Sample(Texture2DArray<uint4>, sampler, float3 location);
native uint4 Sample(Texture2DArray<uint4>, sampler, float3 location, int2 offset);
native uint4 Sample(Texture3D<uint4>, sampler, float3 location);
native uint4 Sample(Texture3D<uint4>, sampler, float3 location, int3 offset);
native uint4 Sample(TextureCube<uint4>, sampler, float3 location);
native short Sample(Texture1D<short>, sampler, float location);
native short Sample(Texture1DArray<short>, sampler, float2 location);
native short Sample(Texture2D<short>, sampler, float2 location);
native short Sample(Texture2D<short>, sampler, float2 location, int2 offset);
native short Sample(Texture2DArray<short>, sampler, float3 location);
native short Sample(Texture2DArray<short>, sampler, float3 location, int2 offset);
native short Sample(Texture3D<short>, sampler, float3 location);
native short Sample(Texture3D<short>, sampler, float3 location, int3 offset);
native short Sample(TextureCube<short>, sampler, float3 location);
native short2 Sample(Texture1D<short2>, sampler, float location);
native short2 Sample(Texture1DArray<short2>, sampler, float2 location);
native short2 Sample(Texture2D<short2>, sampler, float2 location);
native short2 Sample(Texture2D<short2>, sampler, float2 location, int2 offset);
native short2 Sample(Texture2DArray<short2>, sampler, float3 location);
native short2 Sample(Texture2DArray<short2>, sampler, float3 location, int2 offset);
native short2 Sample(Texture3D<short2>, sampler, float3 location);
native short2 Sample(Texture3D<short2>, sampler, float3 location, int3 offset);
native short2 Sample(TextureCube<short2>, sampler, float3 location);
native short3 Sample(Texture1D<short3>, sampler, float location);
native short3 Sample(Texture1DArray<short3>, sampler, float2 location);
native short3 Sample(Texture2D<short3>, sampler, float2 location);
native short3 Sample(Texture2D<short3>, sampler, float2 location, int2 offset);
native short3 Sample(Texture2DArray<short3>, sampler, float3 location);
native short3 Sample(Texture2DArray<short3>, sampler, float3 location, int2 offset);
native short3 Sample(Texture3D<short3>, sampler, float3 location);
native short3 Sample(Texture3D<short3>, sampler, float3 location, int3 offset);
native short3 Sample(TextureCube<short3>, sampler, float3 location);
native short4 Sample(Texture1D<short4>, sampler, float location);
native short4 Sample(Texture1DArray<short4>, sampler, float2 location);
native short4 Sample(Texture2D<short4>, sampler, float2 location);
native short4 Sample(Texture2D<short4>, sampler, float2 location, int2 offset);
native short4 Sample(Texture2DArray<short4>, sampler, float3 location);
native short4 Sample(Texture2DArray<short4>, sampler, float3 location, int2 offset);
native short4 Sample(Texture3D<short4>, sampler, float3 location);
native short4 Sample(Texture3D<short4>, sampler, float3 location, int3 offset);
native short4 Sample(TextureCube<short4>, sampler, float3 location);
native int Sample(Texture1D<int>, sampler, float location);
native int Sample(Texture1DArray<int>, sampler, float2 location);
native int Sample(Texture2D<int>, sampler, float2 location);
native int Sample(Texture2D<int>, sampler, float2 location, int2 offset);
native int Sample(Texture2DArray<int>, sampler, float3 location);
native int Sample(Texture2DArray<int>, sampler, float3 location, int2 offset);
native int Sample(Texture3D<int>, sampler, float3 location);
native int Sample(Texture3D<int>, sampler, float3 location, int3 offset);
native int Sample(TextureCube<int>, sampler, float3 location);
native int2 Sample(Texture1D<int2>, sampler, float location);
native int2 Sample(Texture1DArray<int2>, sampler, float2 location);
native int2 Sample(Texture2D<int2>, sampler, float2 location);
native int2 Sample(Texture2D<int2>, sampler, float2 location, int2 offset);
native int2 Sample(Texture2DArray<int2>, sampler, float3 location);
native int2 Sample(Texture2DArray<int2>, sampler, float3 location, int2 offset);
native int2 Sample(Texture3D<int2>, sampler, float3 location);
native int2 Sample(Texture3D<int2>, sampler, float3 location, int3 offset);
native int2 Sample(TextureCube<int2>, sampler, float3 location);
native int3 Sample(Texture1D<int3>, sampler, float location);
native int3 Sample(Texture1DArray<int3>, sampler, float2 location);
native int3 Sample(Texture2D<int3>, sampler, float2 location);
native int3 Sample(Texture2D<int3>, sampler, float2 location, int2 offset);
native int3 Sample(Texture2DArray<int3>, sampler, float3 location);
native int3 Sample(Texture2DArray<int3>, sampler, float3 location, int2 offset);
native int3 Sample(Texture3D<int3>, sampler, float3 location);
native int3 Sample(Texture3D<int3>, sampler, float3 location, int3 offset);
native int3 Sample(TextureCube<int3>, sampler, float3 location);
native int4 Sample(Texture1D<int4>, sampler, float location);
native int4 Sample(Texture1DArray<int4>, sampler, float2 location);
native int4 Sample(Texture2D<int4>, sampler, float2 location);
native int4 Sample(Texture2D<int4>, sampler, float2 location, int2 offset);
native int4 Sample(Texture2DArray<int4>, sampler, float3 location);
native int4 Sample(Texture2DArray<int4>, sampler, float3 location, int2 offset);
native int4 Sample(Texture3D<int4>, sampler, float3 location);
native int4 Sample(Texture3D<int4>, sampler, float3 location, int3 offset);
native int4 Sample(TextureCube<int4>, sampler, float3 location);
native half Sample(Texture1D<half>, sampler, float location);
native half Sample(Texture1DArray<half>, sampler, float2 location);
native half Sample(Texture2D<half>, sampler, float2 location);
native half Sample(Texture2D<half>, sampler, float2 location, int2 offset);
native half Sample(Texture2DArray<half>, sampler, float3 location);
native half Sample(Texture2DArray<half>, sampler, float3 location, int2 offset);
native half Sample(Texture3D<half>, sampler, float3 location);
native half Sample(Texture3D<half>, sampler, float3 location, int3 offset);
native half Sample(TextureCube<half>, sampler, float3 location);
native half2 Sample(Texture1D<half2>, sampler, float location);
native half2 Sample(Texture1DArray<half2>, sampler, float2 location);
native half2 Sample(Texture2D<half2>, sampler, float2 location);
native half2 Sample(Texture2D<half2>, sampler, float2 location, int2 offset);
native half2 Sample(Texture2DArray<half2>, sampler, float3 location);
native half2 Sample(Texture2DArray<half2>, sampler, float3 location, int2 offset);
native half2 Sample(Texture3D<half2>, sampler, float3 location);
native half2 Sample(Texture3D<half2>, sampler, float3 location, int3 offset);
native half2 Sample(TextureCube<half2>, sampler, float3 location);
native half3 Sample(Texture1D<half3>, sampler, float location);
native half3 Sample(Texture1DArray<half3>, sampler, float2 location);
native half3 Sample(Texture2D<half3>, sampler, float2 location);
native half3 Sample(Texture2D<half3>, sampler, float2 location, int2 offset);
native half3 Sample(Texture2DArray<half3>, sampler, float3 location);
native half3 Sample(Texture2DArray<half3>, sampler, float3 location, int2 offset);
native half3 Sample(Texture3D<half3>, sampler, float3 location);
native half3 Sample(Texture3D<half3>, sampler, float3 location, int3 offset);
native half3 Sample(TextureCube<half3>, sampler, float3 location);
native half4 Sample(Texture1D<half4>, sampler, float location);
native half4 Sample(Texture1DArray<half4>, sampler, float2 location);
native half4 Sample(Texture2D<half4>, sampler, float2 location);
native half4 Sample(Texture2D<half4>, sampler, float2 location, int2 offset);
native half4 Sample(Texture2DArray<half4>, sampler, float3 location);
native half4 Sample(Texture2DArray<half4>, sampler, float3 location, int2 offset);
native half4 Sample(Texture3D<half4>, sampler, float3 location);
native half4 Sample(Texture3D<half4>, sampler, float3 location, int3 offset);
native half4 Sample(TextureCube<half4>, sampler, float3 location);
native float Sample(Texture1D<float>, sampler, float location);
native float Sample(Texture1DArray<float>, sampler, float2 location);
native float Sample(Texture2D<float>, sampler, float2 location);
native float Sample(Texture2D<float>, sampler, float2 location, int2 offset);
native float Sample(Texture2DArray<float>, sampler, float3 location);
native float Sample(Texture2DArray<float>, sampler, float3 location, int2 offset);
native float Sample(Texture3D<float>, sampler, float3 location);
native float Sample(Texture3D<float>, sampler, float3 location, int3 offset);
native float Sample(TextureCube<float>, sampler, float3 location);
native float2 Sample(Texture1D<float2>, sampler, float location);
native float2 Sample(Texture1DArray<float2>, sampler, float2 location);
native float2 Sample(Texture2D<float2>, sampler, float2 location);
native float2 Sample(Texture2D<float2>, sampler, float2 location, int2 offset);
native float2 Sample(Texture2DArray<float2>, sampler, float3 location);
native float2 Sample(Texture2DArray<float2>, sampler, float3 location, int2 offset);
native float2 Sample(Texture3D<float2>, sampler, float3 location);
native float2 Sample(Texture3D<float2>, sampler, float3 location, int3 offset);
native float2 Sample(TextureCube<float2>, sampler, float3 location);
native float3 Sample(Texture1D<float3>, sampler, float location);
native float3 Sample(Texture1DArray<float3>, sampler, float2 location);
native float3 Sample(Texture2D<float3>, sampler, float2 location);
native float3 Sample(Texture2D<float3>, sampler, float2 location, int2 offset);
native float3 Sample(Texture2DArray<float3>, sampler, float3 location);
native float3 Sample(Texture2DArray<float3>, sampler, float3 location, int2 offset);
native float3 Sample(Texture3D<float3>, sampler, float3 location);
native float3 Sample(Texture3D<float3>, sampler, float3 location, int3 offset);
native float3 Sample(TextureCube<float3>, sampler, float3 location);
native float4 Sample(Texture1D<float4>, sampler, float location);
native float4 Sample(Texture1DArray<float4>, sampler, float2 location);
native float4 Sample(Texture2D<float4>, sampler, float2 location);
native float4 Sample(Texture2D<float4>, sampler, float2 location, int2 offset);
native float4 Sample(Texture2DArray<float4>, sampler, float3 location);
native float4 Sample(Texture2DArray<float4>, sampler, float3 location, int2 offset);
native float4 Sample(Texture3D<float4>, sampler, float3 location);
native float4 Sample(Texture3D<float4>, sampler, float3 location, int3 offset);
native float4 Sample(TextureCube<float4>, sampler, float3 location);
native float Sample(TextureDepth2D<float>, sampler, float2 location);
native float Sample(TextureDepth2D<float>, sampler, float2 location, int2 offset);
native float Sample(TextureDepth2DArray<float>, sampler, float3 location);
native float Sample(TextureDepth2DArray<float>, sampler, float3 location, int2 offset);
native float Sample(TextureDepthCube<float>, sampler, float3 location);

native ushort Load(Texture1D<ushort>, int location);
native ushort Load(Texture1DArray<ushort>, int2 location);
native ushort Load(Texture2D<ushort>, int2 location);
native ushort Load(Texture2DArray<ushort>, int3 location);
native ushort Load(Texture3D<ushort>, int3 location);
native ushort2 Load(Texture1D<ushort2>, int location);
native ushort2 Load(Texture1DArray<ushort2>, int2 location);
native ushort2 Load(Texture2D<ushort2>, int2 location);
native ushort2 Load(Texture2DArray<ushort2>, int3 location);
native ushort2 Load(Texture3D<ushort2>, int3 location);
native ushort3 Load(Texture1D<ushort3>, int location);
native ushort3 Load(Texture1DArray<ushort3>, int2 location);
native ushort3 Load(Texture2D<ushort3>, int2 location);
native ushort3 Load(Texture2DArray<ushort3>, int3 location);
native ushort3 Load(Texture3D<ushort3>, int3 location);
native ushort4 Load(Texture1D<ushort4>, int location);
native ushort4 Load(Texture1DArray<ushort4>, int2 location);
native ushort4 Load(Texture2D<ushort4>, int2 location);
native ushort4 Load(Texture2DArray<ushort4>, int3 location);
native ushort4 Load(Texture3D<ushort4>, int3 location);
native uint Load(Texture1D<uint>, int location);
native uint Load(Texture1DArray<uint>, int2 location);
native uint Load(Texture2D<uint>, int2 location);
native uint Load(Texture2DArray<uint>, int3 location);
native uint Load(Texture3D<uint>, int3 location);
native uint2 Load(Texture1D<uint2>, int location);
native uint2 Load(Texture1DArray<uint2>, int2 location);
native uint2 Load(Texture2D<uint2>, int2 location);
native uint2 Load(Texture2DArray<uint2>, int3 location);
native uint2 Load(Texture3D<uint2>, int3 location);
native uint3 Load(Texture1D<uint3>, int location);
native uint3 Load(Texture1DArray<uint3>, int2 location);
native uint3 Load(Texture2D<uint3>, int2 location);
native uint3 Load(Texture2DArray<uint3>, int3 location);
native uint3 Load(Texture3D<uint3>, int3 location);
native uint4 Load(Texture1D<uint4>, int location);
native uint4 Load(Texture1DArray<uint4>, int2 location);
native uint4 Load(Texture2D<uint4>, int2 location);
native uint4 Load(Texture2DArray<uint4>, int3 location);
native uint4 Load(Texture3D<uint4>, int3 location);
native short Load(Texture1D<short>, int location);
native short Load(Texture1DArray<short>, int2 location);
native short Load(Texture2D<short>, int2 location);
native short Load(Texture2DArray<short>, int3 location);
native short Load(Texture3D<short>, int3 location);
native short2 Load(Texture1D<short2>, int location);
native short2 Load(Texture1DArray<short2>, int2 location);
native short2 Load(Texture2D<short2>, int2 location);
native short2 Load(Texture2DArray<short2>, int3 location);
native short2 Load(Texture3D<short2>, int3 location);
native short3 Load(Texture1D<short3>, int location);
native short3 Load(Texture1DArray<short3>, int2 location);
native short3 Load(Texture2D<short3>, int2 location);
native short3 Load(Texture2DArray<short3>, int3 location);
native short3 Load(Texture3D<short3>, int3 location);
native short4 Load(Texture1D<short4>, int location);
native short4 Load(Texture1DArray<short4>, int2 location);
native short4 Load(Texture2D<short4>, int2 location);
native short4 Load(Texture2DArray<short4>, int3 location);
native short4 Load(Texture3D<short4>, int3 location);
native int Load(Texture1D<int>, int location);
native int Load(Texture1DArray<int>, int2 location);
native int Load(Texture2D<int>, int2 location);
native int Load(Texture2DArray<int>, int3 location);
native int Load(Texture3D<int>, int3 location);
native int2 Load(Texture1D<int2>, int location);
native int2 Load(Texture1DArray<int2>, int2 location);
native int2 Load(Texture2D<int2>, int2 location);
native int2 Load(Texture2DArray<int2>, int3 location);
native int2 Load(Texture3D<int2>, int3 location);
native int3 Load(Texture1D<int3>, int location);
native int3 Load(Texture1DArray<int3>, int2 location);
native int3 Load(Texture2D<int3>, int2 location);
native int3 Load(Texture2DArray<int3>, int3 location);
native int3 Load(Texture3D<int3>, int3 location);
native int4 Load(Texture1D<int4>, int location);
native int4 Load(Texture1DArray<int4>, int2 location);
native int4 Load(Texture2D<int4>, int2 location);
native int4 Load(Texture2DArray<int4>, int3 location);
native int4 Load(Texture3D<int4>, int3 location);
native half Load(Texture1D<half>, int location);
native half Load(Texture1DArray<half>, int2 location);
native half Load(Texture2D<half>, int2 location);
native half Load(Texture2DArray<half>, int3 location);
native half Load(Texture3D<half>, int3 location);
native half2 Load(Texture1D<half2>, int location);
native half2 Load(Texture1DArray<half2>, int2 location);
native half2 Load(Texture2D<half2>, int2 location);
native half2 Load(Texture2DArray<half2>, int3 location);
native half2 Load(Texture3D<half2>, int3 location);
native half3 Load(Texture1D<half3>, int location);
native half3 Load(Texture1DArray<half3>, int2 location);
native half3 Load(Texture2D<half3>, int2 location);
native half3 Load(Texture2DArray<half3>, int3 location);
native half3 Load(Texture3D<half3>, int3 location);
native half4 Load(Texture1D<half4>, int location);
native half4 Load(Texture1DArray<half4>, int2 location);
native half4 Load(Texture2D<half4>, int2 location);
native half4 Load(Texture2DArray<half4>, int3 location);
native half4 Load(Texture3D<half4>, int3 location);
native float Load(Texture1D<float>, int location);
native float Load(Texture1DArray<float>, int2 location);
native float Load(Texture2D<float>, int2 location);
native float Load(Texture2DArray<float>, int3 location);
native float Load(Texture3D<float>, int3 location);
native float2 Load(Texture1D<float2>, int location);
native float2 Load(Texture1DArray<float2>, int2 location);
native float2 Load(Texture2D<float2>, int2 location);
native float2 Load(Texture2DArray<float2>, int3 location);
native float2 Load(Texture3D<float2>, int3 location);
native float3 Load(Texture1D<float3>, int location);
native float3 Load(Texture1DArray<float3>, int2 location);
native float3 Load(Texture2D<float3>, int2 location);
native float3 Load(Texture2DArray<float3>, int3 location);
native float3 Load(Texture3D<float3>, int3 location);
native float4 Load(Texture1D<float4>, int location);
native float4 Load(Texture1DArray<float4>, int2 location);
native float4 Load(Texture2D<float4>, int2 location);
native float4 Load(Texture2DArray<float4>, int3 location);
native float4 Load(Texture3D<float4>, int3 location);
native float Load(TextureDepth2D<float>, int2 location);
native float Load(TextureDepth2DArray<float>, int3 location);

native void GetDimensions(Texture2D<float4>, uint MipLevel, thread uint* Width, thread uint* Height, thread uint* NumberOfLevels);
native void GetDimensions(Texture2D<float4>, uint MipLevel, thread uint* Width, thread uint* Height, device uint* NumberOfLevels);
native void GetDimensions(Texture2D<float4>, uint MipLevel, thread uint* Width, thread uint* Height, threadgroup uint* NumberOfLevels);
native void GetDimensions(Texture2D<float4>, uint MipLevel, thread uint* Width, device uint* Height, thread uint* NumberOfLevels);
native void GetDimensions(Texture2D<float4>, uint MipLevel, thread uint* Width, device uint* Height, device uint* NumberOfLevels);
native void GetDimensions(Texture2D<float4>, uint MipLevel, thread uint* Width, device uint* Height, threadgroup uint* NumberOfLevels);
native void GetDimensions(Texture2D<float4>, uint MipLevel, thread uint* Width, threadgroup uint* Height, thread uint* NumberOfLevels);
native void GetDimensions(Texture2D<float4>, uint MipLevel, thread uint* Width, threadgroup uint* Height, device uint* NumberOfLevels);
native void GetDimensions(Texture2D<float4>, uint MipLevel, thread uint* Width, threadgroup uint* Height, threadgroup uint* NumberOfLevels);
native void GetDimensions(Texture2D<float4>, uint MipLevel, device uint* Width, thread uint* Height, thread uint* NumberOfLevels);
native void GetDimensions(Texture2D<float4>, uint MipLevel, device uint* Width, thread uint* Height, device uint* NumberOfLevels);
native void GetDimensions(Texture2D<float4>, uint MipLevel, device uint* Width, thread uint* Height, threadgroup uint* NumberOfLevels);
native void GetDimensions(Texture2D<float4>, uint MipLevel, device uint* Width, device uint* Height, thread uint* NumberOfLevels);
native void GetDimensions(Texture2D<float4>, uint MipLevel, device uint* Width, device uint* Height, device uint* NumberOfLevels);
native void GetDimensions(Texture2D<float4>, uint MipLevel, device uint* Width, device uint* Height, threadgroup uint* NumberOfLevels);
native void GetDimensions(Texture2D<float4>, uint MipLevel, device uint* Width, threadgroup uint* Height, thread uint* NumberOfLevels);
native void GetDimensions(Texture2D<float4>, uint MipLevel, device uint* Width, threadgroup uint* Height, device uint* NumberOfLevels);
native void GetDimensions(Texture2D<float4>, uint MipLevel, device uint* Width, threadgroup uint* Height, threadgroup uint* NumberOfLevels);
native void GetDimensions(Texture2D<float4>, uint MipLevel, threadgroup uint* Width, thread uint* Height, thread uint* NumberOfLevels);
native void GetDimensions(Texture2D<float4>, uint MipLevel, threadgroup uint* Width, thread uint* Height, device uint* NumberOfLevels);
native void GetDimensions(Texture2D<float4>, uint MipLevel, threadgroup uint* Width, thread uint* Height, threadgroup uint* NumberOfLevels);
native void GetDimensions(Texture2D<float4>, uint MipLevel, threadgroup uint* Width, device uint* Height, thread uint* NumberOfLevels);
native void GetDimensions(Texture2D<float4>, uint MipLevel, threadgroup uint* Width, device uint* Height, device uint* NumberOfLevels);
native void GetDimensions(Texture2D<float4>, uint MipLevel, threadgroup uint* Width, device uint* Height, threadgroup uint* NumberOfLevels);
native void GetDimensions(Texture2D<float4>, uint MipLevel, threadgroup uint* Width, threadgroup uint* Height, thread uint* NumberOfLevels);
native void GetDimensions(Texture2D<float4>, uint MipLevel, threadgroup uint* Width, threadgroup uint* Height, device uint* NumberOfLevels);
native void GetDimensions(Texture2D<float4>, uint MipLevel, threadgroup uint* Width, threadgroup uint* Height, threadgroup uint* NumberOfLevels);


native bool operator==(bool, bool);
native bool operator&&(bool, bool);
native bool operator||(bool, bool);
bool operator&(bool a, bool b) {
    return a && b;
}
bool operator|(bool a, bool b) {
    return a || b;
}
bool operator^(bool a, bool b) {
    if (a)
        return !b;
    return b;
}
bool operator~(bool value) {
    return !value;
}

operator bool(uchar x) {
    return x != 0;
}
operator bool(ushort x) {
    return x != 0;
}
operator bool(uint x) {
    return x != 0;
}
operator bool(char x) {
    return x != 0;
}
operator bool(short x) {
    return x != 0;
}
operator bool(int x) {
    return x != 0;
}
operator bool(half x) {
    return x != 0;
}
operator bool(float x) {
    return x != 0;
}

operator int(bool x) {
    return x ? 1 : 0;
}

// FIXME: https://bugs.webkit.org/show_bug.cgi?id=192890 Insert the rest of the standard library once the parser is fast enough
