2018-01-22  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r227272. rdar://problem/36722635

    2018-01-20  Jer Noble  <jer.noble@apple.com>

            Release ASSERT when reloading Vimeo page @ WebCore: WebCore::Document::updateLayout
            https://bugs.webkit.org/show_bug.cgi?id=181840
            <rdar://problem/36186214>

            Reviewed by Simon Fraser.

            Test: media/video-fullscreen-reload-crash.html

            Short circuit play() or pause() operations if the document is suspended or stopped.

            * html/HTMLMediaElement.cpp:
            (WebCore::HTMLMediaElement::playInternal):
            (WebCore::HTMLMediaElement::pauseInternal):

2018-01-22  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r227270. rdar://problem/36722650

    2018-01-20  Youenn Fablet  <youenn@apple.com>

            fetch redirect is incompatible with "no-cors" mode
            https://bugs.webkit.org/show_bug.cgi?id=181866
            <rdar://problem/35827140>

            Reviewed by Chris Dumez.

            Covered by updated tests.

            Return a network error when no-cors mode and redirect mode is manual or error.
            Update preflight implementation to no longer use manual redirect mode to simulate https://fetch.spec.whatwg.org/#http-network-or-cache-fetch.
            Instead implement redirectReceived callback to treat any redirect response as the preflight response.

            * loader/cache/CachedResourceLoader.cpp:
            (WebCore::CachedResourceLoader::canRequest):
            * loader/CrossOriginPreflightChecker.cpp:
            (WebCore::CrossOriginPreflightChecker::redirectReceived):
            (WebCore::CrossOriginPreflightChecker::startPreflight):
            * loader/CrossOriginPreflightChecker.h:

2018-01-22  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r227266. rdar://problem/36723017

    2018-01-19  Wenson Hsieh  <wenson_hsieh@apple.com>

            [macOS] [WK2] Drag location is computed incorrectly when dragging content from subframes
            https://bugs.webkit.org/show_bug.cgi?id=181896
            <rdar://problem/35479043>

            Reviewed by Tim Horton.

            In r218837, I packaged most of the information needed to start a drag into DragItem, which is propagated to the client layer
            via the startDrag codepath. However, this introduced a bug in computing the event position and drag location in window
            coordinates. Consider the case where we're determining the drag image offset for a dragged element in a subframe:

            Before the patch, the drag location (which starts out in the subframe's content coordinates) would be converted to root view
            coordinates, which would then be converted to mainframe content coordinates, which would then be converted to window coordinates
            using the mainframe's view. After the patch, we carry out the same math until the last step, where we erroneously use the
            _subframe's_ view to convert to window coordinates from content coordinates. This results in the position of the iframe relative
            to the mainframe being accounted for twice.

            To fix this, we simply use the main frame's view to convert from mainframe content coordinates to window coordinates while
            computing the drag location. As for the event position in window coordinates, this is currently unused by any codepath in WebKit,
            so we can just remove it altogether.

            Since this bug only affects drag and drop in the macOS WebKit2 port, there's currently no way to test this. I'll be using
            <https://bugs.webkit.org/show_bug.cgi?id=181898> to track adding test support for drag and drop on macOS WebKit2. Manually tested
            dragging in both WebKit1 and WebKit2 on macOS. dragLocationInWindowCoordinates isn't used at all for iOS drag and drop.

            * page/DragController.cpp:
            (WebCore::DragController::doSystemDrag):
            * platform/DragItem.h:
            (WebCore::DragItem::encode const):
            (WebCore::DragItem::decode):

2018-01-22  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r227245. rdar://problem/36722470

    2018-01-19  Youenn Fablet  <youenn@apple.com>

            Cache storage errors like Quota should trigger console messages
            https://bugs.webkit.org/show_bug.cgi?id=181879
            <rdar://problem/36669048>

            Reviewed by Chris Dumez.

            Covered by rebased test.

            * Modules/cache/DOMCache.cpp:
            (WebCore::DOMCache::retrieveRecords):
            (WebCore::DOMCache::batchDeleteOperation):
            (WebCore::DOMCache::batchPutOperation):
            * Modules/cache/DOMCacheEngine.cpp:
            (WebCore::DOMCacheEngine::errorToException):
            (WebCore::DOMCacheEngine::logErrorAndConvertToException):
            * Modules/cache/DOMCacheEngine.h:
            * Modules/cache/DOMCacheStorage.cpp:
            (WebCore::DOMCacheStorage::retrieveCaches):
            (WebCore::DOMCacheStorage::doOpen):
            (WebCore::DOMCacheStorage::doRemove):

2018-01-22  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r227242. rdar://problem/36722539

    2018-01-19  Youenn Fablet  <youenn@apple.com>

            Do not go to the storage process when registering a service worker client if there is no service worker registered
            https://bugs.webkit.org/show_bug.cgi?id=181740
            <rdar://problem/36650400>

            Reviewed by Chris Dumez.

            Register a document as service worker client only if there is an existing service worker connection.
            This allows not creating any connection if no service worker is registered.

            Add internals API to test whether a service worker connection was created or not.
            This is used by API tests that cover the changes.

            * dom/Document.cpp:
            (WebCore::Document::privateBrowsingStateDidChange): No need to create a service worker connection if client is not registered yet.
            (WebCore::Document::setServiceWorkerConnection): No need to unregister/register if service worker connection is the same.
            Similarly, if Document is to be destroyed or suspended, we should not register it.
            * loader/DocumentLoader.cpp:
            (WebCore::DocumentLoader::commitData):
            * testing/Internals.cpp:
            (WebCore::Internals::hasServiceWorkerConnection):
            * testing/Internals.h:
            * testing/Internals.idl:
            * workers/service/ServiceWorkerProvider.cpp:
            (WebCore::ServiceWorkerProvider::registerServiceWorkerClients):
            * workers/service/ServiceWorkerProvider.h:

2018-01-22  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r227240. rdar://problem/36722464

    2018-01-19  Dean Jackson  <dino@apple.com>

            REGRESSION (r221092): Swipe actions are hard to perform in FastMail app
            https://bugs.webkit.org/show_bug.cgi?id=181817
            <rdar://problem/35274055>

            Add a setting for controlling whether touch listeners are passive
            by default on document/window/body.

            Updated existing test.

            * dom/EventTarget.cpp:
            (WebCore::EventTarget::addEventListener):
            * page/Settings.yaml:

2018-01-22  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r227238. rdar://problem/36722424

    2018-01-19  Daniel Bates  <dabates@apple.com>

            Update frame-ancestor directive to match Content Security Policy Level 3
            https://bugs.webkit.org/show_bug.cgi?id=178891
            <rdar://problem/35209458>

            Reviewed by Alex Christensen.

            Derived from Blink e667cc2e501fabab3605b838e4ee0d642a9c4a59:
            <https://chromium.googlesource.com/chromium/src.git/+/e667cc2e501fabab3605b838e4ee0d642a9c4a59>

            Update frame-ancestor directive to match against the origin of the ancestor document per the
            Content Security Policy Level 3 spec.: <https://w3c.github.io/webappsec-csp/> (15 January 2018).
            Specifically this change in behavior was made to CSP 3 in <https://github.com/w3c/webappsec/issues/311>.
            In earlier versions of the spec, the frame-ancestor directive matched against the URL of the
            ancestor document.

            Disregarding allow-same-origin sandboxed iframes, a document with policy "frame-ancestor 'self'"
            will be blocked from loading in a sandboxed iframe as a result of this change.

            Tests: http/tests/security/contentSecurityPolicy/1.1/frame-ancestors/frame-ancestors-nested-cross-in-allow-same-origin-sandboxed-cross-url-allow.html
                   http/tests/security/contentSecurityPolicy/1.1/frame-ancestors/frame-ancestors-nested-cross-in-sandboxed-cross-url-block.html

            * page/csp/ContentSecurityPolicyDirectiveList.cpp:
            (WebCore::checkFrameAncestors):

2018-01-22  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r227225. rdar://problem/36722527

    2018-01-19  Joseph Pecoraro  <pecoraro@apple.com>

            AppCache: Log a Deprecation warning to the Console when AppCache is used
            https://bugs.webkit.org/show_bug.cgi?id=181778

            Reviewed by Alex Christensen.

            * html/HTMLHtmlElement.cpp:
            (WebCore::HTMLHtmlElement::insertedByParser):

2018-01-22  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r227221. rdar://problem/36722533

    2018-01-19  Chris Dumez  <cdumez@apple.com>

            ASSERT(registration || isTerminating()) hit in SWServerWorker::skipWaiting()
            https://bugs.webkit.org/show_bug.cgi?id=181761
            <rdar://problem/36594564>

            Reviewed by Youenn Fablet.

            There is a short period of time, early in the registration process where a
            SWServerWorker object exists for a registration but is not in the registration's
            installing/waiting/active slots yet. As a result, if a registration is cleared
            during this period (for e.g. due to the user clearing all website data), that
            SWServerWorker will not be terminated. We then hit assertion later on when this
            worker is trying to do things (like call skipWaiting).

            To address the issue, we now keep a reference this SWServerWorker on the
            registration, via a new SWServerRegistration::m_preInstallationWorker data member.
            When the registration is cleared, we now take care of terminating this worker.

            No new tests, covered by existing tests that crash flakily in debug builds.

            * workers/WorkerThread.cpp:
            (WebCore::WorkerThread::stop):
            if the mutex is locked, then the worker thread is still starting. We spin the
            runloop and try to stop again later. This avoids the deadlock shown in
            Bug 181763 as the worker thread may need to interact with the main thread
            during startup.

            * workers/service/server/SWServer.cpp:
            (WebCore::SWServer::installContextData):
            * workers/service/server/SWServerJobQueue.cpp:
            (WebCore::SWServerJobQueue::scriptContextFailedToStart):
            (WebCore::SWServerJobQueue::install):
            * workers/service/server/SWServerRegistration.cpp:
            (WebCore::SWServerRegistration::~SWServerRegistration):
            (WebCore::SWServerRegistration::setPreInstallationWorker):
            (WebCore::SWServerRegistration::clear):
            * workers/service/server/SWServerRegistration.h:
            (WebCore::SWServerRegistration::preInstallationWorker const):

2018-01-22  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r227220. rdar://problem/36722596

    2018-01-19  Chris Dumez  <cdumez@apple.com>

            Service worker registrations restored from disk may not be reused when the JS calls register() again
            https://bugs.webkit.org/show_bug.cgi?id=181810
            <rdar://problem/36591711>

            Reviewed by Youenn Fablet.

            The issue was that when restoring a registration from disk, we would not set its active worker right
            away. We only set it later in installContextData(). installContextData() is only called after we’ve
            launched the service worker process and established a connection to it.

            However, we would start processing jobs (such as registrations) before we’ve established the connection
            to the service worker process. SWServerJobQueue::runRegisterJob(), in order to reuse an existing
            registration checks the registration’s active worker has the right script URL. The issue was that when
            this code would execute, we may not have set the registration’s active service worker yet, in which case,
            we would update the existing registration instead of reusing it as-is.

            To address the issue, we now delay the processing of jobs until the connection to the service worker
            process has been established and we've installed all pending contexts via installContextData().

            Changed is covered by new API test.

            * workers/service/server/SWServer.cpp:
            (WebCore::SWServer::Connection::scheduleJobInServer):
            (WebCore::SWServer::scheduleJob):
            (WebCore::SWServer::serverToContextConnectionCreated):
            * workers/service/server/SWServer.h:

2018-01-22  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r227219. rdar://problem/36722501

    2018-01-19  James Craig  <jcraig@apple.com>

            AX: when invert colors is on, double-invert image and picture elements in UserAgentStyleSheet
            https://bugs.webkit.org/show_bug.cgi?id=181281
            <rdar://problem/36291776>

            Reviewed by Simon Fraser.

            Updated "Smart Invert" to include img and picture element inversion and tests.

            Tests: accessibility/smart-invert-reference.html
                   accessibility/smart-invert.html

            * css/html.css:
            (@media (inverted-colors)):
            (img:not(picture>img), picture, video):

2018-01-22  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r227216. rdar://problem/36722508

    2018-01-19  Chris Dumez  <cdumez@apple.com>

            The WebContent process should not process incoming IPC while waiting for a sync IPC reply
            https://bugs.webkit.org/show_bug.cgi?id=181560

            Reviewed by Ryosuke Niwa.

            Add internals API for testing purposes.

            Test: fast/misc/testIncomingSyncIPCMessageWhileWaitingForSyncReply.html

            * page/ChromeClient.h:
            * testing/Internals.cpp:
            (WebCore::Internals::testIncomingSyncIPCMessageWhileWaitingForSyncReply):
            * testing/Internals.h:
            * testing/Internals.idl:

2018-01-22  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r227161. rdar://problem/36722461

    2018-01-18  Youenn Fablet  <youenn@apple.com>

            Do not go to the storage process when loading a main resource if there is no service worker registered
            https://bugs.webkit.org/show_bug.cgi?id=181395

            Reviewed by Chris Dumez.

            No observable behavior change.
            Instead of creating a connection to know whether there is a potential service worker,
            Ask the service worker provider that will use the connection if needed.
            Otherwise, it will use a default value provided by the UIProcess.

            Tested by cleaning all service workers and checking the computed value of the default value,
            then observing whether pages registering service workers work well.

            * loader/DocumentLoader.cpp:
            (WebCore::DocumentLoader::startLoadingMainResource):
            * workers/service/ServiceWorkerProvider.cpp:
            (WebCore::ServiceWorkerProvider::mayHaveServiceWorkerRegisteredForOrigin):
            * workers/service/ServiceWorkerProvider.h:

2018-01-22  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r227153. rdar://problem/36722558

    2018-01-18  Chris Dumez  <cdumez@apple.com>

            Service Workers restored from persistent storage have 'redundant' state
            https://bugs.webkit.org/show_bug.cgi?id=181749
            <rdar://problem/36556486>

            Reviewed by Youenn Fablet.

            Tested by new API test.

            * workers/service/server/SWServer.cpp:
            (WebCore::SWServer::installContextData):
            Make sure the SWServerWorker's state is set to "activated" after it is assigned to
            the registrations' active slot. Otherwise, it stays in its default state (redundant).

2018-01-22  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r227145. rdar://problem/36722475

    2018-01-18  Antti Koivisto  <antti@apple.com>

            REGRESSION (r223604): Setting :before/after pseudo element on <noscript> asserts
            https://bugs.webkit.org/show_bug.cgi?id=181795
            <rdar://problem/36334524>

            Reviewed by David Kilzer.

            <noscript> disallows renderer generation outside CSS mechanisms, however we would still construct
            PseudoElements for them during style resolution. These were never removed properly because the
            pseudo element removal was tied to render tree teardown. Without proper removal the associated
            animations were also not canceled.

            Test: fast/css-generated-content/noscript-pseudo-anim-crash.html

            * dom/Element.cpp:
            (WebCore::Element::removedFromAncestor):

            Take care to get rid of PseudoElements when the element is removed from the tree.
            This also cancels any associated animations.

2018-01-22  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r227141. rdar://problem/36722585

    2018-01-17  Per Arne Vollan  <pvollan@apple.com>

            REGRESSION (r224780): Text stroke not applied to video captions.
            https://bugs.webkit.org/show_bug.cgi?id=181743
            <rdar://problem/35874338>

            Reviewed by Simon Fraser.

            Tests: media/track/track-css-visible-stroke-expected.html
                   media/track/track-css-visible-stroke.html

            After r224780, it is no longer possible to mix text stroke styles with webkit
            legacy text stroke styles.

            * css/StyleResolver.cpp:
            (WebCore::isValidCueStyleProperty):
            * page/CaptionUserPreferencesMediaAF.cpp:
            (WebCore::CaptionUserPreferencesMediaAF::captionsTextEdgeCSS const):

2018-01-22  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r227140. rdar://problem/36722478

    2018-01-18  Andy Estes  <aestes@apple.com>

            [Payment Request] Support a default shipping address for Apple Pay
            https://bugs.webkit.org/show_bug.cgi?id=181754
            <rdar://problem/36009733>

            Reviewed by Brady Eidson.

            Move shippingContact from ApplePayPaymentRequest to ApplePayRequestBase. This allows
            merchants to specify a default shipping address when using Apple Pay with Payment Request.

            This also fixes a bug found during testing where
            +[NSPersonNameComponentsFormatter localizedStringFromPersonNameComponents:style:options:]
            would throw an exception when passed a nil NSPersonNameComponents.

            Test: http/tests/ssl/applepay/ApplePayRequestShippingContact.https.html

            * Modules/applepay/ApplePayPaymentRequest.h:
            * Modules/applepay/ApplePayPaymentRequest.idl:
            * Modules/applepay/ApplePayRequestBase.cpp:
            (WebCore::convertAndValidate):
            * Modules/applepay/ApplePayRequestBase.h:
            * Modules/applepay/ApplePayRequestBase.idl:
            * Modules/applepay/ApplePaySession.cpp:
            (WebCore::convertAndValidate):
            * Modules/applepay/ApplePaySessionPaymentRequest.h:
            (WebCore::ApplePaySessionPaymentRequest::version const):
            (WebCore::ApplePaySessionPaymentRequest::setVersion):
            * Modules/applepay/cocoa/PaymentContactCocoa.mm:
            (WebCore::convert):
            * Modules/applepay/paymentrequest/ApplePayRequest.idl:
            * testing/MockPaymentCoordinator.cpp:
            (WebCore::MockPaymentCoordinator::showPaymentUI):
            (WebCore::MockPaymentCoordinator::completeMerchantValidation):
            * testing/MockPaymentCoordinator.h:

2018-01-22  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r227135. rdar://problem/36722512

    2018-01-18  Wenson Hsieh  <wenson_hsieh@apple.com>

            [iOS] Specify -[NSURL _title] for the associated URL when copying an image element
            https://bugs.webkit.org/show_bug.cgi?id=181783
            <rdar://problem/35785445>

            Reviewed by Ryosuke Niwa.

            Always specify the -[NSURL _title] to be either the title specified in a PasteboardImage's inner PasteboardURL,
            or if no title is specified, fall back to the user-visible URL string. This is because at least one internal
            client always tries to use the -_title property to determine the title of a pasted URL, or if none is specified,
            the -suggestedName. Since we need to set suggestedName to the preferred file name of the copied image and we
            don't want the suggested name to become the title of the link, we need to explicitly set the link title.

            In doing so, this patch also fixes a bug wherein we forget to set the _title of the NSURL we're registering to
            an NSItemProvider.

            Tests:  ActionSheetTests.CopyImageElementWithHREFAndTitle (new)
                    ActionSheetTests.CopyImageElementWithHREF (modified)

            * platform/ios/PlatformPasteboardIOS.mm:
            (WebCore::PlatformPasteboard::write):

2018-01-22  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r227082. rdar://problem/36722629

    2018-01-17  Antti Koivisto  <antti@apple.com>

            REGRESSION (r226385?): Crash in com.apple.WebCore: WebCore::MediaQueryEvaluator::evaluate const + 32
            https://bugs.webkit.org/show_bug.cgi?id=181742
            <rdar://problem/36334726>

            Reviewed by David Kilzer.

            Test: fast/media/mediaqueryevaluator-crash.html

            * css/MediaQueryEvaluator.cpp:
            (WebCore::MediaQueryEvaluator::MediaQueryEvaluator):

            Use WeakPtr<Document> instead of a plain Frame pointer.

            (WebCore::MediaQueryEvaluator::evaluate const):

            Get the frame via document.

            * css/MediaQueryEvaluator.h:
            * dom/Document.cpp:
            (WebCore::Document::prepareForDestruction):

            Take care to clear style resolver.

2018-01-22  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r227079. rdar://problem/36722442

    2018-01-17  Youenn Fablet  <youenn@apple.com>

            Put fetch request keepAlive behind a runtime flag
            https://bugs.webkit.org/show_bug.cgi?id=181592

            Reviewed by Chris Dumez.

            No change of behavior.

            * Modules/fetch/FetchRequest.idl:
            * page/RuntimeEnabledFeatures.h:
            (WebCore::RuntimeEnabledFeatures::fetchAPIKeepAliveEnabled const):
            (WebCore::RuntimeEnabledFeatures::setFetchAPIKeepAliveEnabled):

2018-01-18  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r227147. rdar://problem/36429159

    2018-01-18  Antti Koivisto  <antti@apple.com>

            REGRESSION(r225650): The scores of MotionMark tests Multiply and Leaves dropped by 8%
            https://bugs.webkit.org/show_bug.cgi?id=181460
            <rdar://problem/36379776>

            Reviewed by Ryosuke Niwa.

            * css/parser/CSSParser.cpp:
            (WebCore::CSSParserContext::CSSParserContext):

            Don't do the expensive security origin test if the supplied sheet base URL is null. This
            is true for rules coming from the same document.

2018-01-17  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r227121. rdar://problem/36609529

    2018-01-17  Jer Noble  <jer.noble@apple.com>

            WebVTT served via HLS never results in cues
            https://bugs.webkit.org/show_bug.cgi?id=181773

            Reviewed by Eric Carlson.

            Test: http/tests/media/hls/hls-webvtt-tracks.html

            Three independant errors conspired to keep in-band WebVTT samples from parsing:

            - The definition of ISOWebVTTCue::boxTypeName() was incorrect.
            - ISOWebVTTCue::parse() didn't call it's superclass's parse() method (leading to an incorrect size and offset).
            - Use String::fromUTF8() rather than String.adopt(StringVector&&).

            * platform/graphics/iso/ISOVTTCue.cpp:
            (WebCore::ISOWebVTTCue::parse):
            * platform/graphics/iso/ISOVTTCue.h:
            (WebCore::ISOWebVTTCue::boxTypeName):

2018-01-17  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r227094. rdar://problem/36600688

    2018-01-17  Eric Carlson  <eric.carlson@apple.com>

            Use existing RGB colorspace instead of creating a new one
            https://bugs.webkit.org/show_bug.cgi?id=181765
            <rdar://problem/36595753>

            Reviewed by Dean Jackson.

            * platform/mediastream/mac/ScreenDisplayCaptureSourceMac.mm:
            (WebCore::ScreenDisplayCaptureSourceMac::createDisplayStream): Use sRGBColorSpaceRef instead
            of creating a new static colorspace.

2018-01-17  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r226934. rdar://problem/36567980

    2018-01-12  Chris Dumez  <cdumez@apple.com>

            ASSERTION FAILED: registration || isTerminating() in WebCore::SWServerWorker::skipWaiting()
            https://bugs.webkit.org/show_bug.cgi?id=181603
            <rdar://problem/36476050>

            Reviewed by Youenn Fablet.

            No new tests, covered by existing tests that crash flakily.

            * workers/service/server/SWServer.cpp:
            (WebCore::SWServer::terminateWorkerInternal):
            If the connection to the context process is gone, make sure we make the worker as terminated
            so that it does not stay in Running state and in SWServer::m_runningOrTerminatingWorkers.

            * workers/service/server/SWServerRegistration.cpp:
            (WebCore::SWServerRegistration::~SWServerRegistration):
            Add assertions to make sure none of the registration's workers are still running when
            the registration is destroyed.

            (WebCore::SWServerRegistration::updateRegistrationState):
            Make sure registration workers that are overwritten are not still running.

            * workers/service/server/SWServerWorker.cpp:
            (WebCore::SWServerWorker::setState):
            If a worker's state is set to redundant, make sure we also terminate it.

2018-01-17  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r227103. rdar://problem/36598105

    2018-01-17  John Wilander  <wilander@apple.com>

            Resource Load Statistics: Block cookies for prevalent resources without user interaction
            https://bugs.webkit.org/show_bug.cgi?id=177394
            <rdar://problem/34613960>

            Reviewed by Alex Christensen.

            Tests: http/tests/resourceLoadStatistics/add-blocking-to-redirect.html
                   http/tests/resourceLoadStatistics/non-prevalent-resources-can-access-cookies-in-a-third-party-context.html
                   http/tests/resourceLoadStatistics/remove-blocking-in-redirect.html
                   http/tests/resourceLoadStatistics/remove-partitioning-in-redirect.html

            * platform/network/NetworkStorageSession.h:
                Now exports NetworkStorageSession::nsCookieStorage().
            * platform/network/cf/NetworkStorageSessionCFNet.cpp:
            (WebCore::NetworkStorageSession::setPrevalentDomainsToPartitionOrBlockCookies):
                Fixes the FIXME.

2018-01-17  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r227093. rdar://problem/36598105

    2018-01-17  Matt Lewis  <jlewis3@apple.com>

            Unreviewed, rolling out r227076.

            This breaks internal builds

            Reverted changeset:

            "Resource Load Statistics: Block cookies for prevalent
            resources without user interaction"
            https://bugs.webkit.org/show_bug.cgi?id=177394
            https://trac.webkit.org/changeset/227076

2018-01-17  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r227087. rdar://problem/36597993

    2018-01-17  Zalan Bujtas  <zalan@apple.com>

            Multicol: RenderMultiColumnFlow should not inherit the flow state
            https://bugs.webkit.org/show_bug.cgi?id=181762
            <rdar://problem/35448565>

            Reviewed by Simon Fraser.

            Do not compute the inherited flow state flag for RenderMultiColumnFlow.
            It is (by definition) always inside a fragmented flow.

            Test: fast/multicol/crash-when-out-of-flow-positioned-becomes-in-flow.html

            * rendering/RenderObject.cpp:
            (WebCore::RenderObject::computedFragmentedFlowState):

2018-01-17  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r227076. rdar://problem/36598105

    2018-01-17  John Wilander  <wilander@apple.com>

            Resource Load Statistics: Block cookies for prevalent resources without user interaction
            https://bugs.webkit.org/show_bug.cgi?id=177394
            <rdar://problem/34613960>

            Reviewed by Alex Christensen.

            Tests: http/tests/resourceLoadStatistics/add-blocking-to-redirect.html
                   http/tests/resourceLoadStatistics/non-prevalent-resources-can-access-cookies-in-a-third-party-context.html
                   http/tests/resourceLoadStatistics/remove-blocking-in-redirect.html
                   http/tests/resourceLoadStatistics/remove-partitioning-in-redirect.html

            * platform/network/NetworkStorageSession.h:
                Now exports NetworkStorageSession::nsCookieStorage().
            * platform/network/cf/NetworkStorageSessionCFNet.cpp:
            (WebCore::NetworkStorageSession::setPrevalentDomainsToPartitionOrBlockCookies):
                Fixes the FIXME.

2018-01-17  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r227075. rdar://problem/36598185

    2018-01-17  Daniel Bates  <dabates@apple.com>

            REGRESSION (r222795): Cardiogram never signs in
            https://bugs.webkit.org/show_bug.cgi?id=181693
            <rdar://problem/36286293>

            Reviewed by Ryosuke Niwa.

            Exempt Cardiogram from the XHR header restrictions in r222795.

            Following r222795 only Dashboard widgets are allowed to set arbitrary XHR headers.
            However Cardiogram also depends on such functionality.

            Test: fast/xmlhttprequest/set-dangerous-headers-from-file-when-setting-enabled.html

            * page/Settings.yaml:
            * platform/RuntimeApplicationChecks.h:
            * platform/cocoa/RuntimeApplicationChecksCocoa.mm:
            (WebCore::IOSApplication::isCardiogram):
            * xml/XMLHttpRequest.cpp:
            (WebCore::XMLHttpRequest::setRequestHeader):

2018-01-17  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r227074. rdar://problem/36598123

    2018-01-17  Daniel Bates  <dabates@apple.com>

            ASSERTION FAILED: !m_completionHandler in PingHandle::~PingHandle()
            https://bugs.webkit.org/show_bug.cgi?id=181746
            <rdar://problem/36586248>

            Reviewed by Chris Dumez.

            Call PingHandle::pingLoadComplete() with an error when NSURLConnection queries
            whether the ping is able to respond to an authentication request. (Pings do not
            respond to authenticate requests.) It will call the completion handler, nullify
            the completion handler, and deallocate the PingHandle. Nullifying the completion
            handler is necessary to avoid the assertion failure in ~PingHandle().

            Test: http/tests/misc/before-unload-load-image.html

            * platform/network/PingHandle.h:

2018-01-17  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r227073. rdar://problem/36598265

    2018-01-17  Daniel Bates  <dabates@apple.com>

            WebCoreResourceHandleAsOperationQueueDelegate/ResourceHandleCFURLConnectionDelegateWithOperationQueue may
            be deleted in main thread callback
            https://bugs.webkit.org/show_bug.cgi?id=181747
            <rdar://problem/36588120>

            Reviewed by Alex Christensen.

            Retain the delegate (e.g. WebCoreResourceHandleAsOperationQueueDelegate) before scheduling
            a main thread callback and blocking on a semaphore for its reply because the main thread
            callback can do anything, including deleting the delegate, before the non-main thread
            has a chance to execute. For instance, a PingHandle will delete itself (and hence delete
            its resource handle delegate) in most of the code paths invoked by the delegate.

            * platform/network/cf/ResourceHandleCFURLConnectionDelegateWithOperationQueue.cpp:
            (WebCore::ResourceHandleCFURLConnectionDelegateWithOperationQueue::willSendRequest):
            (WebCore::ResourceHandleCFURLConnectionDelegateWithOperationQueue::didReceiveResponse):
            (WebCore::ResourceHandleCFURLConnectionDelegateWithOperationQueue::willCacheResponse):
            (WebCore::ResourceHandleCFURLConnectionDelegateWithOperationQueue::canRespondToProtectionSpace):
            * platform/network/mac/WebCoreResourceHandleAsOperationQueueDelegate.mm:
            (-[WebCoreResourceHandleAsOperationQueueDelegate connection:willSendRequest:redirectResponse:]):
            (-[WebCoreResourceHandleAsOperationQueueDelegate connection:canAuthenticateAgainstProtectionSpace:]):
            (-[WebCoreResourceHandleAsOperationQueueDelegate connection:didReceiveResponse:]):
            (-[WebCoreResourceHandleAsOperationQueueDelegate connection:willCacheResponse:]):

2018-01-17  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r227070. rdar://problem/36598339

    2018-01-17  Chris Dumez  <cdumez@apple.com>

            'fetch' event may be sent to a service worker before its state is set to 'activated'
            https://bugs.webkit.org/show_bug.cgi?id=181698
            <rdar://problem/36554856>

            Reviewed by Youenn Fablet.

            'fetch' event may be sent to a service worker before its state is set to 'activated'.
            When the registration's active worker needs to intercept a load, and its state is 'activating',
            we queue the request to send the fetch event in SWServerWorker::m_whenActivatedHandlers.
            Once the SWServerWorker::setState() is called with 'activated' state, we then call the
            handlers in m_whenActivatedHandlers to make send the fetch event now that the worker is
            activated. The issue is that even though the worker is activated and its state was set to
            'activated' on Storage process side, we had not yet notified the ServiceWorker process
            of the service worker's new state yet.

            To address the issue, we now make sure that SWServerWorker::m_whenActivatedHandlers are
            called *after* we've sent the IPC to the ServiceWorker process to update the worker's
            state to 'activated'. Also, we now call ServiceWorkerFetch::dispatchFetchEvent()
            asynchronously in a postTask() as the service worker's state is also updated asynchronously
            in a postTask. This is as per specification [1], which says to "queue a task" to fire
            the fetch event.

            [1] https://w3c.github.io/ServiceWorker/#on-fetch-request-algorithm (step 18)

            No new tests, covered by imported/w3c/web-platform-tests/service-workers/service-worker/fetch-waits-for-activate.https.html
            which hits the new assertion without the fix.

            * workers/service/context/ServiceWorkerFetch.cpp:
            (WebCore::ServiceWorkerFetch::dispatchFetchEvent):
            Add assertions to make sure that we dispatch the fetch event on the right worker and
            that the worker is in 'activated' state.

            * workers/service/context/ServiceWorkerThread.cpp:
            (WebCore::ServiceWorkerThread::postFetchTask):
            Queue a task to fire the fetch event as per:
            - https://w3c.github.io/ServiceWorker/#on-fetch-request-algorithm (step 18)
            We need to match the specification exactly here or things will happen in the wrong
            order. In particular, things like "update registration state" and "update worker state"
            might happen *after* firing the fetch event, even though the IPC for "update registration/worker
            state" was sent before the "fire fetch event" one, because the code for updating a registration/
            worker state already queues a task, as per the specification.

            * workers/service/server/SWServerRegistration.cpp:
            (WebCore::SWServerRegistration::updateWorkerState):
            * workers/service/server/SWServerRegistration.h:
            * workers/service/server/SWServerWorker.cpp:
            (WebCore::SWServerWorker::setState):
            Move code to send the IPC to the Service Worker process whenever the service worker's state
            needs to be updated from SWServerRegistration::updateWorkerState() to SWServerWorker::setState().
            This way, we can make sure the IPC is sent *before* we call the m_whenActivatedHandlers handlers,
            as they may also send IPC to the Service Worker process, and we need to make sure this IPC happens
            after so that the service worker is in the right state.

2018-01-16  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r226880. rdar://problem/36569616

    2018-01-12  Commit Queue  <commit-queue@webkit.org>

            Unreviewed, rolling out r226721.
            https://bugs.webkit.org/show_bug.cgi?id=181583

            Lets do a slightly different fix (Requested by anttik on
            #webkit).

            Reverted changeset:

            "REGRESSION(r225650): The scores of MotionMark tests Multiply
            and Leaves dropped by 8%"
            https://bugs.webkit.org/show_bug.cgi?id=181460
            https://trac.webkit.org/changeset/226721

2018-01-16  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r227010. rdar://problem/36567991

    2018-01-16  Chris Dumez  <cdumez@apple.com>

            SWServerWorker::m_contextConnectionIdentifier may get out of date
            https://bugs.webkit.org/show_bug.cgi?id=181687
            <rdar://problem/36548111>

            Reviewed by Brady Eidson.

            SWServerWorker::m_contextConnectionIdentifier may get out of date. This happens when the
            context process crashes and is relaunched.

            No new tests, added assertion in terminateWorkerInternal() that hits without this fix.

            * workers/service/server/SWServer.cpp:
            (WebCore::SWServer::runServiceWorker):
            (WebCore::SWServer::terminateWorkerInternal):
            (WebCore::SWServer::unregisterServiceWorkerClient):
            * workers/service/server/SWServerWorker.h:
            (WebCore::SWServerWorker::setContextConnectionIdentifier):

2018-01-16  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r226916. rdar://problem/36568057

    2018-01-11  Dean Jackson  <dino@apple.com>

            [WebGL] Simulated vertexAttrib0 can sometimes cause OUT_OF_MEMORY errors
            https://bugs.webkit.org/show_bug.cgi?id=181558
            <rdar://problem/36189833>

            Reviewed by Eric Carlson.

            Very large element indices in the ELEMENT_ARRAY_BUFFER meant that
            our simulated vertexAttrib0 buffer might be too large. We need
            to check for out-of-memory, but we can also detect some of the issues
            earlier in our validation code. Additionally, make sure that we don't
            accidentally cast an unsigned to a signed.

            Test: fast/canvas/webgl/simulated-vertexAttrib0-invalid-indicies.html

            * html/canvas/WebGL2RenderingContext.cpp:
            (WebCore::WebGL2RenderingContext::validateIndexArrayConservative): Update validation
            code to look for overflow, rather than relying on looking for sign changes.
            * html/canvas/WebGLRenderingContext.cpp:
            (WebCore::WebGLRenderingContext::validateIndexArrayConservative): Ditto.
            * html/canvas/WebGLRenderingContextBase.cpp:
            (WebCore::WebGLRenderingContextBase::validateIndexArrayPrecise):
            (WebCore::WebGLRenderingContextBase::drawArrays): Check that we were able to simulate.
            (WebCore::WebGLRenderingContextBase::drawElements):
            (WebCore::WebGLRenderingContextBase::validateSimulatedVertexAttrib0): Update validation code, and
            use GC3Duint, since that's what the indicies are.
            (WebCore::WebGLRenderingContextBase::simulateVertexAttrib0): Ditto.
            (WebCore::WebGLRenderingContextBase::drawArraysInstanced): Check that we were able to simulate.
            (WebCore::WebGLRenderingContextBase::drawElementsInstanced):
            * html/canvas/WebGLRenderingContextBase.h:

2018-01-16  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r227009. rdar://problem/36567976

    2018-01-16  Jer Noble  <jer.noble@apple.com>

            Reset MediaSourcePrivateAVFObjC's m_sourceBufferWithSelectedVideo when the underlying SourceBufferPrivate is removed.
            https://bugs.webkit.org/show_bug.cgi?id=181707
            <rdar://problem/34809474>

            Reviewed by Eric Carlson.

            Test: media/media-source/media-source-remove-unload-crash.html

            * platform/graphics/avfoundation/objc/MediaSourcePrivateAVFObjC.mm:
            (WebCore::MediaSourcePrivateAVFObjC::removeSourceBuffer):

2018-01-16  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r227006. rdar://problem/36567998

    2018-01-16  Zalan Bujtas  <zalan@apple.com>

            AX: Do not trigger layout in updateBackingStore() unless it is safe to do so
            https://bugs.webkit.org/show_bug.cgi?id=181703
            <rdar://problem/36365706>

            Reviewed by Ryosuke Niwa.

            Document::isSafeToUpdateStyleOrLayout() can tell whether it is safe to run layout.

            Unable to create test with WebInspector involved.

            * accessibility/AccessibilityObject.cpp:
            (WebCore::AccessibilityObject::updateBackingStore):
            * dom/Document.cpp:
            (WebCore::Document::isSafeToUpdateStyleOrLayout const):
            (WebCore::Document::updateStyleIfNeeded):
            (WebCore::Document::updateLayout):
            (WebCore::isSafeToUpdateStyleOrLayout): Deleted.
            * dom/Document.h:

2018-01-16  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r227000. rdar://problem/36567987

    2018-01-16  Simon Fraser  <simon.fraser@apple.com>

            Text looks bad on some CSS spec pages
            https://bugs.webkit.org/show_bug.cgi?id=181700
            rdar://problem/36552107

            Reviewed by Tim Horton.

            When making new tiles in a TileController, we failed to set their "supports antialiased layer text"
            setting, so tile caches could end up with a mixture of layers that do and do not support
            antialiased layer text.

            No tests because the tiled drawing tests don't dump out tiles inside of tile caches.

            * platform/graphics/ca/TileController.cpp:
            (WebCore::TileController::createTileLayer):

2018-01-16  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r226993. rdar://problem/36567965

    2018-01-16  Said Abou-Hallawa  <sabouhallawa@apple.com>

            REGRESSION(r221292): svg/animations/animateTransform-pattern-transform.html crashes with security assertion
            https://bugs.webkit.org/show_bug.cgi?id=179986

            Reviewed by Simon Fraser.

            This patch reverts all or parts of the following changes-sets
                <http://trac.webkit.org/changeset/221292>
                <http://trac.webkit.org/changeset/197967>
                <http://trac.webkit.org/changeset/196670>

            A JS statement like this:
                var item = text.x.animVal.getItem(0);

            Creates the following C++ objects:
                SVGAnimatedListPropertyTearOff<SVGLengthListValues> for 'text.x'
                SVGListPropertyTearOff<SVGLengthListValues> for 'text.x.animVal'
                SVGPropertyTearOff<SVGLengthValue> for 'text.x.animVal.getItem(0)'

            If 'item' changes, the attribute 'x' of the element '<text>' will change
            as well. But this binding works only in one direction. If the attribute
            'x' of the element '<text>' changes, e.g.:

                text.setAttribute('x', '10,20,30');

            This will detach 'item' from the element <text> and any further changes
            in 'item' won't affect the attribute 'x' of element <text>.

            The one direction binding can only work if this chain of tear-off objects
            is kept connected. This is implemented by RefCounted back pointers from
            SVGPropertyTearOff and SVGListPropertyTearOff to SVGAnimatedListPropertyTearOff.

            The security crashes and the memory leaks are happening because of the
            raw forward pointers:
                -- SVGAnimatedListPropertyTearOff maintains raw pointers of type
                   SVGListPropertyTearOff for m_baseVal and m_animVal
                -- The m_wrappers and m_animatedWrappers of SVGAnimatedListPropertyTearOff
                   are vectors of raw pointer Vector<SVGLength*>

            To control the life cycle of the raw pointers, SVGListPropertyTearOff and
            SVGPropertyTearOff call SVGAnimatedListPropertyTearOff::propertyWillBeDeleted()
            to notify it they are going to be deleted. In propertyWillBeDeleted(), we
            clear the pointers so they are not used after being freed. This mechanism
            has been error-prone and we've never got it 100% right.

            The solution we need to adopt with SVG tear-off objects is the following:
                -- All the forward pointers should be weak pointers.
                -- All the back pointers should be ref pointers.

            This solution may not look intuitive but it solves the bugs and keeps the
            one direction binding. The forward weak pointers allows the tear-off
            objects to go aways if no reference from JS exists. The back ref pointers
            maintains the chain of objects and guarantees the correct binding.

            * svg/SVGPathSegList.h:
            * svg/SVGTransformList.h:
            * svg/properties/SVGAnimatedListPropertyTearOff.h:
            (WebCore::SVGAnimatedListPropertyTearOff::baseVal):
            (WebCore::SVGAnimatedListPropertyTearOff::animVal):
            * svg/properties/SVGAnimatedPathSegListPropertyTearOff.h:
            * svg/properties/SVGAnimatedProperty.h:
            (WebCore::SVGAnimatedProperty::isAnimatedListTearOff const):
            (WebCore::SVGAnimatedProperty::propertyWillBeDeleted): Deleted.
            * svg/properties/SVGAnimatedPropertyTearOff.h:
            * svg/properties/SVGAnimatedTransformListPropertyTearOff.h:
            * svg/properties/SVGListProperty.h:
            (WebCore::SVGListProperty::initializeValuesAndWrappers):
            (WebCore::SVGListProperty::getItemValuesAndWrappers):
            (WebCore::SVGListProperty::insertItemBeforeValuesAndWrappers):
            (WebCore::SVGListProperty::replaceItemValuesAndWrappers):
            (WebCore::SVGListProperty::removeItemValuesAndWrappers):
            (WebCore::SVGListProperty::appendItemValuesAndWrappers):
            (WebCore::SVGListProperty::createWeakPtr const):
            * svg/properties/SVGListPropertyTearOff.h:
            (WebCore::SVGListPropertyTearOff::removeItemFromList):
            (WebCore::SVGListPropertyTearOff::~SVGListPropertyTearOff): Deleted.
            * svg/properties/SVGPropertyTearOff.h:
            (WebCore::SVGPropertyTearOff::createWeakPtr const):
            (WebCore::SVGPropertyTearOff::~SVGPropertyTearOff):

2018-01-16  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r226990. rdar://problem/36568066

    2018-01-16  Eric Carlson  <eric.carlson@apple.com>

            AVSampleBufferDisplayLayer should be flushed when application activates
            https://bugs.webkit.org/show_bug.cgi?id=181623
            <rdar://problem/36487738>

            Reviewed by Darin Adler.

            No new tests, I wasn't able to reproduce it in a test.

            * WebCore.xcodeproj/project.pbxproj:
            * dom/Document.cpp:
            (WebCore::Document::addApplicationStateChangeListener): New.
            (WebCore::Document::removeApplicationStateChangeListener): Ditto.
            (WebCore::Document::forEachApplicationStateChangeListener): Ditto.
            * dom/Document.h:

            * html/HTMLMediaElement.cpp:
            (WebCore::HTMLMediaElement::registerWithDocument): Register for application state changes.
            (WebCore::HTMLMediaElement::unregisterWithDocument): Unregister.
            (WebCore::HTMLMediaElement::applicationWillResignActive): Pass through to the player.
            (WebCore::HTMLMediaElement::applicationDidBecomeActive): Ditto.
            * html/HTMLMediaElement.h:

            * page/ApplicationStateChangeListener.h: Added.
            (WebCore::ApplicationStateChangeListener::applicationWillResignActive):
            (WebCore::ApplicationStateChangeListener::applicationDidBecomeActive):
            * page/Page.cpp:
            (WebCore::Page::forEachDocument):
            (WebCore::Page::applicationWillResignActive):
            (WebCore::Page::applicationDidEnterBackground):
            (WebCore::Page::applicationWillEnterForeground):
            (WebCore::Page::applicationDidBecomeActive):
            * page/Page.h:
            * platform/graphics/MediaPlayer.cpp:
            (WebCore::MediaPlayer::applicationWillResignActive):
            (WebCore::MediaPlayer::applicationDidBecomeActive):
            * platform/graphics/MediaPlayer.h:
            * platform/graphics/MediaPlayerPrivate.h:
            (WebCore::MediaPlayerPrivateInterface::applicationWillResignActive):
            (WebCore::MediaPlayerPrivateInterface::applicationDidBecomeActive):

            * platform/graphics/avfoundation/objc/MediaPlayerPrivateMediaStreamAVFObjC.h:
            * platform/graphics/avfoundation/objc/MediaPlayerPrivateMediaStreamAVFObjC.mm:
            (WebCore::MediaPlayerPrivateMediaStreamAVFObjC::MediaPlayerPrivateMediaStreamAVFObjC): Switch
            to release logging.
            (WebCore::MediaPlayerPrivateMediaStreamAVFObjC::~MediaPlayerPrivateMediaStreamAVFObjC): Ditto.
            (WebCore::MediaPlayerPrivateMediaStreamAVFObjC::enqueueCorrectedVideoSample): Split out of enqueueVideoSample.
            (WebCore::MediaPlayerPrivateMediaStreamAVFObjC::enqueueVideoSample): Move code that updates
            the display later to enqueueCorrectedVideoSample. Rearrange logic to the image painter sample
            buffer has the correct timestamp.
            (WebCore::MediaPlayerPrivateMediaStreamAVFObjC::layerErrorDidChange): Switch to release logging.
            (WebCore::MediaPlayerPrivateMediaStreamAVFObjC::layerStatusDidChange): Ditto.
            (WebCore::MediaPlayerPrivateMediaStreamAVFObjC::applicationDidBecomeActive): f the display
            layer is in the "failed" state, flush the renderer and update the display mode.
            (WebCore::MediaPlayerPrivateMediaStreamAVFObjC::ensureLayers): Switch to release logging.
            (WebCore::MediaPlayerPrivateMediaStreamAVFObjC::load): Ditto.
            (WebCore::MediaPlayerPrivateMediaStreamAVFObjC::cancelLoad): Ditto.
            (WebCore::MediaPlayerPrivateMediaStreamAVFObjC::prepareToPlay): Ditto.
            (WebCore::MediaPlayerPrivateMediaStreamAVFObjC::updateDisplayMode): Ditto.
            (WebCore::MediaPlayerPrivateMediaStreamAVFObjC::play): Ditto.
            (WebCore::MediaPlayerPrivateMediaStreamAVFObjC::pause): Ditto.
            (WebCore::MediaPlayerPrivateMediaStreamAVFObjC::setVolume): Ditto.
            (WebCore::MediaPlayerPrivateMediaStreamAVFObjC::setMuted): Ditto.
            (WebCore::MediaPlayerPrivateMediaStreamAVFObjC::updateReadyState) Ditto.:
            (WebCore::MediaPlayerPrivateMediaStreamAVFObjC::logChannel const): Ditto.
            (WebCore::MediaPlayerPrivateMediaStreamAVFObjC::updateSampleTimes): Deleted.

2018-01-16  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r226982. rdar://problem/36567983

    2018-01-16  Jer Noble  <jer.noble@apple.com>

            Crash playing audio-only HLS stream via hls.js (MSE)
            https://bugs.webkit.org/show_bug.cgi?id=181691
            <rdar://problem/32967295>

            Reviewed by Eric Carlson.

            Add a weak-link check to the block called by -[AVSampleBufferDisplayLayer requestMediaDataWhenReadyOnQueue:usingBlock:].

            * platform/graphics/avfoundation/objc/SourceBufferPrivateAVFObjC.mm:
            (WebCore::SourceBufferPrivateAVFObjC::trackDidChangeEnabled):
            (WebCore::SourceBufferPrivateAVFObjC::notifyClientWhenReadyForMoreSamples):
            (WebCore::SourceBufferPrivateAVFObjC::setVideoLayer):

2018-01-16  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r226951. rdar://problem/36568098

    2018-01-15  Youenn Fablet  <youenn@apple.com>

            RealtimeMediaSource should be ThreadSafeRefCounted
            https://bugs.webkit.org/show_bug.cgi?id=181649

            Reviewed by Eric Carlson.

            Difficult to write a test as this is really racy.
            RealtimeIncomingVideoSourceCocoa::OnFrame is taking a reference on a background thread
            to send a task to the main thread.
            This requires it to be thread safe ref counted.

            * platform/mediastream/RealtimeMediaSource.h:

2018-01-16  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r226930. rdar://problem/36567972

    2018-01-12  Myles C. Maxfield  <mmaxfield@apple.com>

            Data URL fonts split in the middle of an alphabet cause random letters to disappear
            https://bugs.webkit.org/show_bug.cgi?id=175845
            <rdar://problem/33996578>

            Reviewed by Brent Fulgham.

            It is fairly common practice for a font foundry to split a font up into two files such that a semi-random
            half of the alphabet is present in one of the files, and the other half is present in the other file. This
            practice involves representing the files as data URLs, so as to minimize the time it takes to load them.

            Because resource loading is asynchronous (even for data URLs), it is possible today to get a paint after
            the first file is loaded but before the second file is loaded. Indeed, because of the way font fallback
            works, we will never start loading the second file until a layout has occurred with the first font.

            Because a site usually only uses this pattern for a handful of fonts, and I've never seen this pattern
            being used for CJK fonts, it isn't very expensive to opportunistically decode these data URLs eagerly.
            Using this method doesn't actually guarantee that the two fonts will load in between successive paints,
            but it at least makes this much more likely. This patch implements this strategy, along with a size
            threshold to make sure that we won't decode any super large data URLs when it isn't necessary.

            Test: fast/text/font-load-data-partitioned-alphabet.html

            * css/CSSFontFace.cpp:
            (WebCore::CSSFontFace::opportunisticallyStartFontDataURLLoading):
            * css/CSSFontFace.h:
            * css/CSSFontFaceSource.cpp:
            (WebCore::CSSFontFaceSource::opportunisticallyStartFontDataURLLoading):
            * css/CSSFontFaceSource.h:
            * css/CSSFontSelector.cpp:
            (WebCore::CSSFontSelector::opportunisticallyStartFontDataURLLoading):
            * css/CSSFontSelector.h:
            * platform/graphics/FontCascadeFonts.cpp:
            (WebCore::opportunisticallyStartFontDataURLLoading):
            (WebCore::FontCascadeFonts::glyphDataForVariant):
            * platform/graphics/FontSelector.h:

2018-01-16  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r226929. rdar://problem/36567962

    2018-01-12  Alex Christensen  <achristensen@webkit.org>

            History state should be updated during client redirects with asynchronous policy decisions
            https://bugs.webkit.org/show_bug.cgi?id=181358
            <rdar://problem/35547689>

            Reviewed by Andy Estes.

            When decidePolicyForNavigationAction is responded to asynchronously during a client redirect,
            HistoryController::updateForRedirectWithLockedBackForwardList does not update the history because
            the document loader has not been marked as a client redirect because the FrameLoader only looks
            at its provisional document loader to mark it as a client redirect.  When decidePolicyForNavigationAction
            is responded to asynchronously, though, the FrameLoader's provisional document loader has moved to
            its policy document loader.  To get both asynchronous and synchronous cases, let's just mark the document
            loader as a client redirect whether it's the provisional or policy document loader.

            Covered by a new API test.

            * loader/FrameLoader.cpp:
            (WebCore::FrameLoader::loadURL):
            (WebCore::FrameLoader::loadPostRequest):

2018-01-16  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r226919. rdar://problem/36567968

    2018-01-12  Myles C. Maxfield  <mmaxfield@apple.com>

            [Cocoa] CTFontCopyDefaultCascadeListForLanguages() can return nullptr
            https://bugs.webkit.org/show_bug.cgi?id=181615
            <rdar://problem/36334637>

            Reviewed by Jon Lee.

            Speculative fix. We are getting crash reports saying that this call can return nullptr, and we
            don't check for it.

            No new tests because I couldn't find the specific input that causes it to return nullptr. (I
            tried running this code with every 0, 1, and 2 length locale string, every weight value, and
            every italic value, and couldn't get it to crash. I also inspected the code to figure out what
            values would cause it to return nullptr, and I couldn't find anything other than if the system
            has a totally busted font setup.)

            * platform/graphics/cocoa/FontDescriptionCocoa.cpp:
            (WebCore::SystemFontDatabase::computeCascadeList):

2018-01-16  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r226908. rdar://problem/36568060

    2018-01-12  Dean Jackson  <dino@apple.com>

            drawElements should be invalid if vertexAttrib0 doesn't have data
            https://bugs.webkit.org/show_bug.cgi?id=181609
            <rdar://problem/36392883>

            Reviewed by Antoine Quint.

            If a vertex attribute has been enabled, but no data provided, then
            draw validation should fail.

            Test: fast/canvas/webgl/drawElements-empty-vertex-data.html

            * html/canvas/WebGLRenderingContextBase.cpp:
            (WebCore::WebGLRenderingContextBase::validateVertexAttributes): If there were
            never any data in the vertex buffer, then we incorrectly compared with 0.

2018-01-16  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r226906. rdar://problem/36568006

    2018-01-12  Youenn Fablet  <youenn@apple.com>

            FormDataElement::lengthInBytes should use ThreadableBlobRegistry
            https://bugs.webkit.org/show_bug.cgi?id=181554

            Reviewed by Chris Dumez.

            Covered by updated test.

            Fix blobRegistry() use and add support for creating a response that may trigger the issue.


            * platform/network/FormData.cpp:
            (WebCore::FormDataElement::lengthInBytes const): Was using directly blobRegistry() while ThreadableBlobRegistry is more appropriate
            in case this is called from workers.
            * Modules/fetch/FetchBody.h:
            * Modules/fetch/FetchResponse.h:
            * fileapi/Blob.h:
            * testing/ServiceWorkerInternals.cpp:
            (WebCore::ServiceWorkerInternals::createOpaqueWithBlobBodyResponse):
            * testing/ServiceWorkerInternals.h:
            * testing/ServiceWorkerInternals.idl:

2018-01-16  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r226904. rdar://problem/36568017

    2018-01-12  Youenn Fablet  <youenn@apple.com>

            WebProcess should pass the registration identifier and not the worker identifier for fetch events
            https://bugs.webkit.org/show_bug.cgi?id=181591

            Reviewed by Chris Dumez.

            Test: http/wpt/service-workers/update-service-worker.https.html

            Store service worker registration identifier in ResourceLoaderOptions instead of service worker identifier.

            * loader/DocumentThreadableLoader.cpp:
            (WebCore::DocumentThreadableLoader::DocumentThreadableLoader):
            (WebCore::DocumentThreadableLoader::makeCrossOriginAccessRequest):
            * loader/ResourceLoaderOptions.h:
            * loader/WorkerThreadableLoader.cpp:
            (WebCore::WorkerThreadableLoader::MainThreadBridge::MainThreadBridge):
            * loader/cache/CachedResourceLoader.cpp:
            (WebCore::CachedResourceLoader::prepareFetch):
            (WebCore::CachedResourceLoader::determineRevalidationPolicy const):
            * loader/cache/CachedResourceRequest.cpp:
            (WebCore::CachedResourceRequest::setSelectedServiceWorkerRegistrationIdentifierIfNeeded):
            (WebCore::CachedResourceRequest::setNavigationServiceWorkerRegistrationData):
            (WebCore::CachedResourceRequest::setSelectedServiceWorkerIdentifierIfNeeded): Deleted.
            * loader/cache/CachedResourceRequest.h:
            * workers/WorkerScriptLoader.cpp:
            (WebCore::WorkerScriptLoader::loadSynchronously):
            (WebCore::WorkerScriptLoader::loadAsynchronously):
            * workers/service/server/SWServer.cpp:
            (WebCore::SWServer::activeWorkerFromRegistrationID):
            * workers/service/server/SWServer.h:

2018-01-16  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r226898. rdar://problem/36568103

    2018-01-12  Jer Noble  <jer.noble@apple.com>

            WebGL video texture black in Safari 11.0.2 and wrong colored in Safari Preview 11.1
            https://bugs.webkit.org/show_bug.cgi?id=181445
            <rdar://problem/36383183>

            Reviewed by Dean Jackson.

            Tests: added compile-time correctness tests for YCbCrMatrix values.

            Perform the derivation from YCbCr coefficients into matrices in constexpr expressions
            at compile-time. This allows us to also perform compile-time correctness checks to catch
            regressions which may cause incorrect color conversions.

            Since we now have general-purpose derivation of matrix values from coefficients,
            adding missing specificed matrices is trivial, so add support for SMPTE 240M and BT.2020
            matrices.

            * platform/graphics/cv/VideoTextureCopierCV.cpp:
            (WebCore::GLfloatColor::GLfloatColor):
            (WebCore::GLfloatColor::abs):
            (WebCore::GLfloatColor::isApproximatelyEqualTo const):
            (WebCore::YCbCrMatrix::operator Vector<GLfloat> const):
            (WebCore::YCbCrMatrix::YCbCrMatrix):
            (WebCore::YCbCrMatrix::operator* const):
            (WebCore::YCbCrToRGBMatrixForRangeAndTransferFunction):

2018-01-16  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r226842. rdar://problem/36568025

    2018-01-11  Chris Dumez  <cdumez@apple.com>

            Setting Window.opener to null should disown its opener
            https://bugs.webkit.org/show_bug.cgi?id=181505
            <rdar://problem/36443151>

            Reviewed by Ryosuke Niwa.

            Setting Window.opener to null should disown its opener as per:
            - https://html.spec.whatwg.org/#dom-opener

            With this change, tabs opened by clicking link inside Gmail no
            longer have the Gmail window as opener.

            Tests: fast/dom/Window/window-opener-set-to-null.html
                   fast/dom/Window/window-opener-shadowing.html

            * bindings/js/JSDOMWindowCustom.cpp:
            (WebCore::JSDOMWindow::setOpener):
            * page/DOMWindow.cpp:
            (WebCore::DOMWindow::disownOpener):
            * page/DOMWindow.h:
            * page/DOMWindow.idl:

2018-01-16  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r226790. rdar://problem/36568094

    2018-01-11  Youenn Fablet  <youenn@apple.com>

            Replace WebRTCLegacyAPIDisabled by WebRTCLegacyAPIEnabled and switch off WebRTC legacy flag by default
            https://bugs.webkit.org/show_bug.cgi?id=181480

            Reviewed by Eric Carlson.

            No change of behavior.

            * page/RuntimeEnabledFeatures.h: Set default value to false.

2018-01-12  Jason Marcell  <jmarcell@apple.com>

        Apply patch. rdar://problem/36303061

    Disable WebKit features we don't want to ship after branching
    <rdar://problem/36303061>

    2018-01-12  Maciej Stachowiak  <mjs@apple.com>

            Disable WebKit features we don't want to ship after branching
            <rdar://problem/36303061>

            Reviewed by Maciej Stachowiak.

            * Configurations/FeatureDefines.xcconfig:

2018-01-12  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r226905. rdar://problem/36483899

    2018-01-12  Jer Noble  <jer.noble@apple.com>

            Wrap CDMFairPlayStreaming and related classes in ENABLE(ENCRYPTED_MEDIA) checks
            https://bugs.webkit.org/show_bug.cgi?id=181602

            Reviewed by Maciej Stachowiak.

            * platform/graphics/avfoundation/CDMFairPlayStreaming.h:
            * platform/graphics/avfoundation/objc/CDMInstanceFairPlayStreamingAVFObjC.h:
            * platform/graphics/avfoundation/objc/CDMInstanceFairPlayStreamingAVFObjC.mm:

2018-01-12  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r226745. rdar://problem/36392368

    2018-01-10  Youenn Fablet  <youenn@apple.com>

            Use no-cache fetch mode when loading main documents with location.reload()
            https://bugs.webkit.org/show_bug.cgi?id=181285

            Reviewed by Alex Christensen.

            Covered by rebased tests.

            Start to translate cache policy used for navigation as FetchOptions::Cache.
            This allows ensuring service workers receive the right cache mode when intercepting navigation loads.
            To not change current navigation behavior, ReturnCacheDataElseLoad and ReturnCacheDataDontLoad still trigger default fetch cache mode.

            For Reload and ReloadExpiredOnly frame load types, using no-cache mode is more efficient than reload mode,
            as a conditional request will be sent if possible. This applies to location.reload which is consistent with other browsers.
            Keep reload mode for ReloadFromOrigin.

            * loader/DocumentLoader.cpp:
            (WebCore::toFetchOptionsCache):
            (WebCore::DocumentLoader::loadMainResource):
            * loader/FrameLoader.cpp:
            (WebCore::FrameLoader::loadFrameRequest):
            (WebCore::FrameLoader::loadURL):
            (WebCore::FrameLoader::load):
            (WebCore::FrameLoader::reload):
            (WebCore::FrameLoader::defaultRequestCachingPolicy):
            (WebCore::FrameLoader::loadDifferentDocumentItem):
            * loader/NavigationScheduler.cpp:

2018-01-12  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r226825. rdar://problem/36458902

    2018-01-11  James Craig  <jcraig@apple.com>

            AX: when invert colors is on, double-invert video elements in UserAgentStyleSheet
            https://bugs.webkit.org/show_bug.cgi?id=168447
            <rdar://problem/30559874>

            Reviewed by Simon Fraser.

            Double-invert video when platform "invert colors" setting is enabled. Behavior matches
            current "Smart Invert" feature of Safari Reader on macOS/iOS and other iOS native apps.

            Tests: accessibility/smart-invert-reference.html
                   accessibility/smart-invert.html

            * Modules/modern-media-controls/controls/media-controls.css:
            (@media (inverted-colors)):
            (:host):
            (picture):
            * css/html.css:
            (@media (inverted-colors)):
            (video):

2018-01-12  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r226822. rdar://problem/36458924

    2018-01-11  Filip Pizlo  <fpizlo@apple.com>

            Rename MarkedAllocator to BlockDirectory and AllocatorAttributes to CellAttributes
            https://bugs.webkit.org/show_bug.cgi?id=181543

            Rubber stamped by Michael Saboff.

            No new tests because I'm just renaming things.

            * ForwardingHeaders/heap/BlockDirectoryInlines.h: Copied from Source/WebCore/ForwardingHeaders/heap/MarkedAllocatorInlines.h.
            * ForwardingHeaders/heap/MarkedAllocatorInlines.h: Removed.
            * bindings/js/DOMGCOutputConstraint.cpp:

2018-01-12  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r226813. rdar://problem/36458922

    2018-01-11  Chris Dumez  <cdumez@apple.com>

            ASSERTION FAILED: registration in WebCore::SWServerWorker::skipWaiting()
            https://bugs.webkit.org/show_bug.cgi?id=181222
            <rdar://problem/36332686>

            Reviewed by Youenn Fablet.

            Replace assertion in SWServerWorker::skipWaiting() that assumes the worker
            has a registration. Nowadays, a SWServerWorker can stay alive for a short
            period without having a registration, while it is terminating.

            No new tests, unskipped existing test.

            * workers/service/server/SWServerWorker.cpp:
            (WebCore::SWServerWorker::skipWaiting):

2018-01-11  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r226818. rdar://problem/36458899

    2018-01-11  Alex Christensen  <achristensen@webkit.org>

            REGRESSION(r225003): Loading hangs in environments where dispatch_async does not work
            https://bugs.webkit.org/show_bug.cgi?id=181553
            <rdar://problem/35733938>

            Reviewed by Eric Carlson.

            There is an environment where dispatch_async does not work, but performSelectorOnMainThread works.
            r225003 broke loading in this environment.  This fixes it and updates the test that r225003 fixed.
            It failed sometimes because loading was happening in a different order than html parsing, so I made
            the test not depend on html parsing timing by updating media/video-src-remove.html.

            * platform/network/mac/WebCoreResourceHandleAsOperationQueueDelegate.mm:
            (-[WebCoreResourceHandleAsOperationQueueDelegate callFunctionOnMainThread:]):

2018-01-11  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r226804. rdar://problem/36450810

    2018-01-11  Youenn Fablet  <youenn@apple.com>

            RTCController should disable ICE candidate filtering in case of getUserMedia based on the RTCPerrConnection origin
            https://bugs.webkit.org/show_bug.cgi?id=180851

            Reviewed by Eric Carlson.

            Test: http/wpt/webrtc/third-party-frame-ice-candidate-filtering.html

            RTCController now stores all the client origins (top+frame origins) of frames that got access to camera/microphone access.
            For any such client origin, PeerConnection objects ICE candidate filtering is disabled.
            ICE candidate filtering is reset whenever navigating/reloading the page.

            * Modules/mediastream/RTCController.cpp:
            (WebCore::RTCController::reset):
            (WebCore::matchDocumentOrigin):
            (WebCore::RTCController::shouldDisableICECandidateFiltering):
            (WebCore::RTCController::add):
            (WebCore::RTCController::disableICECandidateFilteringForAllOrigins):
            (WebCore::RTCController::disableICECandidateFiltering):
            (WebCore::RTCController::enableICECandidateFiltering):
            * Modules/mediastream/RTCController.h:
            * Modules/mediastream/RTCPeerConnection.cpp:
            (WebCore::RTCPeerConnection::create):
            * Modules/mediastream/UserMediaRequest.cpp:
            (WebCore::UserMediaRequest::allow):
            * page/Page.cpp:
            (WebCore::Page::disableICECandidateFiltering):
            * testing/Internals.cpp:
            (WebCore::Internals::setICECandidateFiltering):

2018-01-11  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r226796. rdar://problem/36450730

    2018-01-11  Antoine Quint  <graouts@apple.com>

            Only listen to webkitplaybacktargetavailabilitychanged when media controls are visible to the user
            https://bugs.webkit.org/show_bug.cgi?id=181547
            <rdar://problem/35947650>

            Reviewed by Eric Carlson.

            Because listening to "webkitplaybacktargetavailabilitychanged" events incurs some higher power usage on iOS,
            we only listen to such events when controls are visible to the user. In other words, the MediaControls need to
            have both "visible" set to "true" and "faded" set to "false". To support this, we add a delegate method on
            MediaControls such that it can tell the MediaController that the "visible" property changed. With this message,
            MediaController can inform its MediaControllerSupport objects that user visibility of the controls changed, which
            lets AirplaySupport disable itself when controls are no longer visible.

            Test: media/modern-media-controls/airplay-support/airplay-support-disable-event-listeners-with-hidden-controls.html

            * Modules/modern-media-controls/controls/media-controls.js:
            (MediaControls.prototype.set visible):
            * Modules/modern-media-controls/media/airplay-support.js:
            (AirplaySupport.prototype.controlsUserVisibilityDidChange):
            * Modules/modern-media-controls/media/media-controller-support.js:
            (MediaControllerSupport.prototype.controlsUserVisibilityDidChange):
            * Modules/modern-media-controls/media/media-controller.js:
            (MediaController.prototype.mediaControlsVisibilityDidChange):
            (MediaController.prototype.mediaControlsFadedStateDidChange):
            (MediaController.prototype._controlsUserVisibilityDidChange):

2018-01-11  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r226795. rdar://problem/36450750

    2018-01-11  Antoine Quint  <graouts@apple.com>

            [iOS] There should be no controls markup generated in fullscreen
            https://bugs.webkit.org/show_bug.cgi?id=181540
            <rdar://problem/35060379>

            Reviewed by Eric Carlson.

            We completely forgo the display of any content when fullscreen on iOS by setting the
            "visible" flag to "false" on the MediaControls, which will prevent any DOM content from
            being added.

            * Modules/modern-media-controls/media/media-controller.js:
            (MediaController.prototype.handleEvent):
            (MediaController.prototype._updateiOSFullscreenProperties):
            (MediaController):
            (MediaController.prototype._updateSupportingObjectsEnabledState): Deleted.

2018-01-11  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r226791. rdar://problem/36450803

    2018-01-10  Simon Fraser  <simon.fraser@apple.com>

            On macOS, getBoundingClientRect gives incorrect values when pinch-zoomed
            https://bugs.webkit.org/show_bug.cgi?id=181511
            rdar://problem/33741427

            Reviewed by Zalan Bujtas.

            When reverting "client coordinates are relative to layout viewport" in r219829
            I broke documentToClientOffset() on macOS by failing to take pinch zoom scale into
            account (frameScaleFactor() is always 1 on iOs, so this bug doesn't manifest there).

            Covered by existing tests.

            * page/FrameView.cpp:
            (WebCore::FrameView::documentToClientOffset const):

2018-01-11  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r226778. rdar://problem/36450800

    2018-01-11  Michael Saboff  <msaboff@apple.com>

            Add a DOM gadget for Spectre testing
            https://bugs.webkit.org/show_bug.cgi?id=181351

            Reviewed by Ryosuke Niwa.

            This change is used to test Spectre mitigations.

            Added a new DOM class to test for Spectre issues in the DOM layer.
            This additional functionality is disabled by default and must be enabled
            through the JSC option "enableSpectreGadgets".

            * CMakeLists.txt:
            * DerivedSources.make:
            * Sources.txt:
            * WebCore.xcodeproj/project.pbxproj:
            * bindings/js/WebCoreBuiltinNames.h:
            * dom/SpectreGadget.cpp: Added.
            (WebCore::SpectreGadget::SpectreGadget):
            (WebCore::SpectreGadget::create):
            (WebCore::SpectreGadget::setReadLength):
            (WebCore::SpectreGadget::charCodeAt):
            (WebCore::SpectreGadget::clflushReadLength):
            * dom/SpectreGadget.h: Added.
            * dom/SpectreGadget.idl: Added.
            * page/RuntimeEnabledFeatures.cpp:
            (WebCore::RuntimeEnabledFeatures::spectreGadgetsEnabled const):
            * page/RuntimeEnabledFeatures.h:

2018-01-11  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r226766. rdar://problem/36459143

    2018-01-10  Andy Estes  <aestes@apple.com>

            [Payment Request] Rename ApplePayMerchantValidationEvent to MerchantValidationEvent
            https://bugs.webkit.org/show_bug.cgi?id=181437
            <rdar://problem/36376481>

            Reviewed by Tim Horton.

            Renamed ApplePayMerchantValidationEvent to MerchantValidationEvent and changed complete() to accept a Promise.

            Test: http/tests/paymentrequest/payment-request-merchant-validation.https.html

            * DerivedSources.make:
            * Modules/applepay/paymentrequest/ApplePayPaymentHandler.cpp:
            (WebCore::ApplePayPaymentHandler::merchantValidationCompleted):
            (WebCore::ApplePayPaymentHandler::validateMerchant):
            * Modules/applepay/paymentrequest/ApplePayPaymentHandler.h:
            * Modules/paymentrequest/MerchantValidationEvent.cpp: Renamed from Source/WebCore/Modules/applepay/paymentrequest/ApplePayMerchantValidationEvent.cpp.
            (WebCore::MerchantValidationEvent::create):
            (WebCore::MerchantValidationEvent::MerchantValidationEvent):
            (WebCore::MerchantValidationEvent::eventInterface const):
            (WebCore::MerchantValidationEvent::complete):
            * Modules/paymentrequest/MerchantValidationEvent.h: Renamed from Source/WebCore/Modules/applepay/paymentrequest/ApplePayMerchantValidationEvent.h.
            * Modules/paymentrequest/MerchantValidationEvent.idl: Renamed from Source/WebCore/Modules/applepay/paymentrequest/ApplePayMerchantValidationEvent.idl.
            * Modules/paymentrequest/PaymentHandler.h:
            * Modules/paymentrequest/PaymentRequest.cpp:
            (WebCore::PaymentRequest::completeMerchantValidation):
            * Modules/paymentrequest/PaymentRequest.h:
            * Modules/paymentrequest/PaymentRequest.idl:
            * WebCore.xcodeproj/project.pbxproj:
            * dom/EventNames.h:
            * dom/EventNames.in:

2018-01-11  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r226753. rdar://problem/36429138

    2018-01-10  Wenson Hsieh  <wenson_hsieh@apple.com>

            REGRESSION(r222507): Composition highlight doesn't render when using IME
            https://bugs.webkit.org/show_bug.cgi?id=181485
            <rdar://problem/35896516>

            Reviewed by Ryosuke Niwa.

            Fixes the order of arguments passed to paintTextSubrangeBackground from paintCompositionBackground.

            Test: editing/marked-text-appearance.html

            * rendering/InlineTextBox.cpp:
            (WebCore::InlineTextBox::paintCompositionBackground):

2018-01-11  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r226721. rdar://problem/36429159

    2018-01-10  Antti Koivisto  <antti@apple.com>

            REGRESSION(r225650): The scores of MotionMark tests Multiply and Leaves dropped by 8%
            https://bugs.webkit.org/show_bug.cgi?id=181460
            <rdar://problem/36379776>

            Reviewed by Ryosuke Niwa.

            * css/parser/CSSParser.cpp:
            (WebCore::CSSParserContext::CSSParserContext):

            Don't do the expensive security origin test if the sheet base URL and document URL are identical.
            This is true for inline style and inline stylesheets.

2018-01-11  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r226705. rdar://problem/36429137

    2018-01-10  Youenn Fablet  <youenn@apple.com>

            Add Service Worker CSP persistency
            https://bugs.webkit.org/show_bug.cgi?id=181434

            Reviewed by Alex Christensen.

            Covered by manual testing.
            Future work on service worker test infrastructure should allow automating such tests.

            Add support for service worker CSP data persistency.
            Add a version parameter to increment each time the schema is changing.
            This allows the same store to be used by multiple WebKits.

            * workers/service/server/RegistrationDatabase.cpp:
            (WebCore::v1RecordsTableSchema):
            (WebCore::RegistrationDatabase::openSQLiteDatabase):
            (WebCore::RegistrationDatabase::doPushChanges):
            (WebCore::RegistrationDatabase::importRecords):

2018-01-11  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r226677. rdar://problem/36429157

    2018-01-09  Chris Dumez  <cdumez@apple.com>

            Make service workers behave correctly with regards to Page Cache
            https://bugs.webkit.org/show_bug.cgi?id=181446
            <rdar://problem/36164291>

            Reviewed by Youenn Fablet.

            Make service workers behave correctly with regards to Page Cache:
            1. If a document has an active service worker, do not let it go into PageCache
            2. When a document goes into page cache, unregister it from the list of service worker clients
            3. When a document is restored from page cache, add it nack to the list of service worker clients

            Tests: http/tests/workers/service/client-added-to-clients-when-restored-from-page-cache.html
                   http/tests/workers/service/client-removed-from-clients-while-in-page-cache.html
                   http/tests/workers/service/no-page-cache-when-controlled.html
                   http/tests/workers/service/other_resources/test.html

            * dom/Document.cpp:
            (WebCore::Document::suspend):
            (WebCore::Document::resume):
            * history/PageCache.cpp:
            (WebCore::canCacheFrame):
            * page/DiagnosticLoggingKeys.cpp:
            (WebCore::DiagnosticLoggingKeys::serviceWorkerKey):
            * page/DiagnosticLoggingKeys.h:

2018-01-11  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r226668. rdar://problem/36429139

    2018-01-09  Myles C. Maxfield  <mmaxfield@apple.com>

            font-display:fallback can cause a visual flash (which is supposed to be impossible)
            https://bugs.webkit.org/show_bug.cgi?id=181374

            Reviewed by Simon Fraser.

            A FontCascade represents an entire font-family fallback list, but sometimes we need to pull out a single
            representative font from the list to calculate things like line height. Previously, if the first item in
            the font-family list was in the middle of being downloaded, this representative font was hardcoded to be
            Times. However, when actually laying out and drawing the glyphs, we have logic to skip the interstitial
            Times if there are any installed fonts present in the font-family list (so you wouldn't ever actually
            see Times). This means that line height (among other things) was being calculated as if Times was used,
            but in reality, some other font from the font-family list was being used.

            Alone, this isn't a huge problem, but font-display:fallback makes a font transition between "timed out"
            and "failed," and when the font hits the failed state, the representative font skips over the cancelled
            item and hits the next item in the fallback list. This means that line heights will change, which causes
            a visual flash, even when font-display:fallback is specified.

            The solution is simply to educate the logic which identifies this representative font so that it
            understands what to do for currently-loading fonts.

            Tests: fast/text/font-display/swap-flash.html

            * platform/graphics/FontCascadeFonts.h:
            (WebCore::FontCascadeFonts::primaryFont):
            * rendering/line/BreakingContext.h:
            (WebCore::textWidth):

2018-01-11  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r226653. rdar://problem/36429147

    2018-01-09  Antti Koivisto  <antti@apple.com>

            Blank page except for inner iframes because pending stylesheets cause style.isNotFinal() to be true
            https://bugs.webkit.org/show_bug.cgi?id=180940
            <rdar://problem/36116507>

            Reviewed by Darin Adler.

            Test: http/tests/local/loading-stylesheet-import-remove.html

            If a <link> referencing a stylesheet containing an @import that was still loading was removed
            from the document, the loading state was never cleared. For head stylesheets this blocked
            rendering permanently.

            Test reduction by Justin Ridgewell.

            * html/HTMLLinkElement.cpp:
            (WebCore::HTMLLinkElement::removedFromAncestor):

            Test if the stylesheet it loading before clearing the pointer.

2018-01-11  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r226599. rdar://problem/36429130

    2018-01-08  Said Abou-Hallawa  <sabouhallawa@apple.com>

            A canvas should not be tainted if it draws a data URL SVGImage with a <foreignObject>
            https://bugs.webkit.org/show_bug.cgi?id=180301

            Reviewed by Dean Jackson.

            Don't taint the canvas if it draws a data URL SVGImage with a <foreignObject>.
            There should not be a cross-origin data leak in this case.

            Tests: svg/as-image/svg-canvas-data-url-svg-with-feimage-not-tainted.html
                   svg/as-image/svg-canvas-data-url-svg-with-foreign-object-not-tainted.html
                   svg/as-image/svg-canvas-data-url-svg-with-image-not-tainted.html

            * html/ImageBitmap.cpp:
            (WebCore::taintsOrigin):
            * html/canvas/CanvasRenderingContext.cpp:
            (WebCore::CanvasRenderingContext::wouldTaintOrigin):

2018-01-11  Jason Marcell  <jmarcell@apple.com>

        Revert r226013. rdar://problem/36096522

2018-01-11  Jason Marcell  <jmarcell@apple.com>

        Revert r226127. rdar://problem/36123315

2018-01-11  Jason Marcell  <jmarcell@apple.com>

        Revert r226140. rdar://problem/36139222

2018-01-11  Jason Marcell  <jmarcell@apple.com>

        Revert r226168. rdar://problem/36145846

2018-01-11  Jason Marcell  <jmarcell@apple.com>

        Revert r226179. rdar://problem/36156495

2018-01-11  Jason Marcell  <jmarcell@apple.com>

        Revert r226181. rdar://problem/36148601

2018-01-11  Jason Marcell  <jmarcell@apple.com>

        Revert r226196. rdar://problem/36157613

2018-01-11  Jason Marcell  <jmarcell@apple.com>

        Revert r226221. rdar://problem/36167692

2018-01-11  Jason Marcell  <jmarcell@apple.com>

        Revert r226237. rdar://problem/36183940

2018-01-11  Jason Marcell  <jmarcell@apple.com>

        Revert r226240. rdar://problem/36180916

2018-01-11  Jason Marcell  <jmarcell@apple.com>

        Revert r226246. rdar://problem/36184788

2018-01-11  Jason Marcell  <jmarcell@apple.com>

        Revert r226265. rdar://problem/36188262

2018-01-11  Jason Marcell  <jmarcell@apple.com>

        Revert r226273. rdar://problem/36196266

2018-01-09  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r226638. rdar://problem/36392286

    2018-01-09  Said Abou-Hallawa  <sabouhallawa@apple.com>

            Check Image::m_image is not null in ImageLoader::decode()
            https://bugs.webkit.org/show_bug.cgi?id=180386
            <rdar://problem/34634483>

            Reviewed by Tim Horton.

            Ensure ImageLoader::m_image is not null before referencing it.

            * loader/ImageLoader.cpp:
            (WebCore::ImageLoader::decode):

2018-01-09  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r226628. rdar://problem/36392341

    2018-01-09  Youenn Fablet  <youenn@apple.com>

            Add CSP support to service workers
            https://bugs.webkit.org/show_bug.cgi?id=181385

            Reviewed by Chris Dumez.

            Covered by rebased tests.

            Added recovery of CSP information from WorkerScriptLoader.
            Added plumbing to pass the CSP information to Service Workers.
            Did not add persistency support for the CSP information as this requires changing the SQL database schema.
            This will be done in a follow-up.

            * workers/WorkerScriptLoader.cpp:
            (WebCore::WorkerScriptLoader::loadAsynchronously):
            (WebCore::WorkerScriptLoader::didReceiveResponse):
            * workers/WorkerScriptLoader.h:
            (WebCore::WorkerScriptLoader::contentSecurityPolicy const):
            * workers/service/SWClientConnection.cpp:
            (WebCore::SWClientConnection::finishedFetchingScript):
            (WebCore::SWClientConnection::failedFetchingScript):
            * workers/service/SWClientConnection.h:
            * workers/service/ServiceWorkerContainer.cpp:
            (WebCore::ServiceWorkerContainer::addRegistration):
            (WebCore::ServiceWorkerContainer::jobFailedWithException):
            (WebCore::ServiceWorkerContainer::jobResolvedWithRegistration):
            (WebCore::ServiceWorkerContainer::jobFinishedLoadingScript):
            * workers/service/ServiceWorkerContainer.h:
            * workers/service/ServiceWorkerContextData.cpp:
            (WebCore::ServiceWorkerContextData::isolatedCopy const):
            * workers/service/ServiceWorkerContextData.h:
            (WebCore::ServiceWorkerContextData::encode const):
            (WebCore::ServiceWorkerContextData::decode):
            * workers/service/ServiceWorkerFetchResult.h:
            (WebCore::ServiceWorkerFetchResult::encode const):
            (WebCore::ServiceWorkerFetchResult::decode):
            * workers/service/ServiceWorkerGlobalScope.cpp:
            (WebCore::ServiceWorkerGlobalScope::create):
            * workers/service/ServiceWorkerGlobalScope.h:
            * workers/service/ServiceWorkerJob.cpp:
            (WebCore::ServiceWorkerJob::notifyFinished):
            * workers/service/ServiceWorkerJobClient.h:
            * workers/service/context/ServiceWorkerThread.cpp:
            (WebCore::ServiceWorkerThread::ServiceWorkerThread):
            (WebCore::ServiceWorkerThread::createWorkerGlobalScope):
            * workers/service/server/RegistrationDatabase.cpp:
            (WebCore::v1RecordsTableSchema):
            (WebCore::RegistrationDatabase::importRecords):
            * workers/service/server/SWServer.cpp:
            (WebCore::SWServer::updateWorker):
            (WebCore::SWServer::installContextData):
            * workers/service/server/SWServer.h:
            * workers/service/server/SWServerJobQueue.cpp:
            (WebCore::SWServerJobQueue::scriptFetchFinished):
            * workers/service/server/SWServerWorker.cpp:
            (WebCore::SWServerWorker::SWServerWorker):
            (WebCore::m_contentSecurityPolicy):
            (WebCore::SWServerWorker::contextData const):
            * workers/service/server/SWServerWorker.h:

2018-01-09  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r226626. rdar://problem/36392359

    2018-01-09  Youenn Fablet  <youenn@apple.com>

            SWClientConnection should not keep references to service worker jobs
            https://bugs.webkit.org/show_bug.cgi?id=181381

            Reviewed by Chris Dumez.

            Difficult to test determiniscally but corresponding crash log should no longer happen in debug builds.

            Stopped passing ServiceWorkerJob references from ServiceWorkerContainer (potentially in service worker thread) to SWClientConnection (main thread).
            Instead pass job identifiers and related data to the main thread.

            Minor refactoring to use ServiceWorkerJobIdentifier instead of ServiceWorkerJobDataIdentifier which contains more data than needed.

            * workers/service/SWClientConnection.cpp:
            (WebCore::SWClientConnection::scheduleJob):
            (WebCore::SWClientConnection::failedFetchingScript):
            (WebCore::SWClientConnection::postTaskForJob):
            (WebCore::SWClientConnection::jobRejectedInServer):
            (WebCore::SWClientConnection::registrationJobResolvedInServer):
            (WebCore::SWClientConnection::unregistrationJobResolvedInServer):
            (WebCore::SWClientConnection::startScriptFetchForServer):
            (WebCore::SWClientConnection::clearPendingJobs):
            (WebCore::SWClientConnection::finishedFetchingScript): Deleted.
            * workers/service/SWClientConnection.h:
            * workers/service/ServiceWorkerContainer.cpp:
            (WebCore::ServiceWorkerContainer::scheduleJob):
            (WebCore::ServiceWorkerContainer::startScriptFetchForJob):
            (WebCore::ServiceWorkerContainer::jobFinishedLoadingScript):
            (WebCore::ServiceWorkerContainer::jobFailedLoadingScript):
            * workers/service/ServiceWorkerContainer.h:
            * workers/service/server/SWServer.cpp:
            (WebCore::SWServer::rejectJob):
            (WebCore::SWServer::resolveRegistrationJob):
            (WebCore::SWServer::resolveUnregistrationJob):
            (WebCore::SWServer::startScriptFetch):
            * workers/service/server/SWServer.h:

2018-01-09  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r226623. rdar://problem/36392380

    2018-01-09  Carlos Garcia Campos  <cgarcia@igalia.com>

            REGRESSION(r224460): Text fields sometimes get "messed up"
            https://bugs.webkit.org/show_bug.cgi?id=181115

            Reviewed by Zalan Bujtas.

            Add the scroll position to paint offset before computing the clip rectangle. Before r224460, scroll position was
            substracted after the clip rectangle was computed.

            * rendering/LayoutState.cpp:
            (WebCore::LayoutState::computeClipRect):

2018-01-09  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r226617. rdar://problem/36392336

    2018-01-09  Ryosuke Niwa  <rniwa@webkit.org>

            Release assert in addResourceTiming when a cache resource is requested during style recalc
            https://bugs.webkit.org/show_bug.cgi?id=181137
            <rdar://problem/35666574>

            Reviewed by Simon Fraser.

            Make the dispatching of resourcetimingbufferfull event asynchronous to avoid dispatching it
            synchronously during a style resolution when CachedResourceLoader::requestImage requests
            a previously loaded image.

            We now schedule a timer when the resource timing buffer becomes full, and dispatch the event
            when the timer fires. Meanwhile, we have a backup buffer to which additional resource timing
            entries would be added. Once the event is dispatched, we refill the buffer exposed to author
            scripts. When refilling the buffer results in it becoming full again, we keep repeating the
            process of firing resourcetimingbufferfull and re-filling the buffer until either we stop
            making progress (i.e. the script didn't increase the number of empty entires in the buffer)
            or the backup buffer (at the time we started this process) becomes empty.

            Also fixed a bug that we were firing resourcetimingbufferfull event when the last entry that
            fits within the buffer size was added instead of when an entry is being added to an already
            full buffer. To make this work, the patch introduces m_resourceTimingBufferFullFlag,
            representing the concept "resource timing buffer full" flag in the resource timing specification.

            Test: http/tests/performance/performance-resource-timing-resourcetimingbufferfull-crash.html

            * page/Performance.cpp:
            (WebCore::Performance::Performance):
            (WebCore::Performance::clearResourceTimings):
            (WebCore::Performance::setResourceTimingBufferSize):
            (WebCore::Performance::addResourceTiming):
            (WebCore::Performance::resourceTimingBufferFullTimerFired):
            * page/Performance.h:

2018-01-09  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r226542. rdar://problem/36392364

    2018-01-08  John Wilander  <wilander@apple.com>

            Storage Access API: Remove access for all frames under a page when the page is closed
            https://bugs.webkit.org/show_bug.cgi?id=181398
            <rdar://problem/36357879>

            Reviewed by Alex Christensen.

            No new tests. Discussed with Alex Christensen and we concluded that
            both a layout test and an API test would require a lot of work and
            we have existing tests for clearing out storage access for frames.

            * platform/network/NetworkStorageSession.h:
            * platform/network/cf/NetworkStorageSessionCFNet.cpp:
            (WebCore::NetworkStorageSession::removeStorageAccessForAllFramesOnPage):

2018-01-09  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r226526. rdar://problem/36392384

    2018-01-08  Youenn Fablet  <youenn@apple.com>

            Stop exposing fetch and extendable events to window
            https://bugs.webkit.org/show_bug.cgi?id=181325

            Reviewed by Chris Dumez.

            Covered by updated tests.

            Marked FetchEvent and ExtendableEvent as visible in ServiceWorker environments only.
            Moved related Internals testing routines to ServiceWorkerInternals.

            * testing/Internals.cpp:
            (WebCore::Internals::waitForFetchEventToFinish): Deleted.
            (WebCore::Internals::createBeingDispatchedFetchEvent): Deleted.
            * testing/Internals.h:
            * testing/Internals.idl:
            * testing/ServiceWorkerInternals.cpp:
            (WebCore::ServiceWorkerInternals::waitForFetchEventToFinish):
            (WebCore::ServiceWorkerInternals::createBeingDispatchedFetchEvent):
            * testing/ServiceWorkerInternals.h:
            * testing/ServiceWorkerInternals.idl:
            * workers/service/ExtendableEvent.idl:
            * workers/service/FetchEvent.idl:

2018-01-09  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r226521. rdar://problem/36392339

    2018-01-08  Antti Koivisto  <antti@apple.com>

            REGRESSION (r219145): Toggling layer borders on a static document no longer works immediately
            https://bugs.webkit.org/show_bug.cgi?id=176260
            <rdar://problem/34219966>

            Reviewed by Simon Fraser.

            Optimization reveled bugs in debug indicator painting.

            Test: compositing/debug-borders-dynamic.html

            * platform/graphics/ca/GraphicsLayerCA.cpp:
            (WebCore::GraphicsLayerCA::commitLayerChangesBeforeSublayers):
            (WebCore::GraphicsLayerCA::updateDebugIndicators):
            (WebCore::GraphicsLayerCA::updateDebugBorder): Deleted.

            - Rename to indicate this is not just about debug borders.
            - Trigger display so repaint counters get painted. This helper is only called when the indicators change.

            * platform/graphics/ca/GraphicsLayerCA.h:
            * rendering/RenderLayerCompositor.cpp:
            (WebCore::RenderLayerCompositor::cacheAcceleratedCompositingFlags):

            Ensure we do compositing update on debug border change even when there is no layout.

2018-01-09  Jason Marcell  <jmarcell@apple.com>

        Revert r226432. rdar://problem/10353542

2018-01-08  Jeremy Jones  <jeremyj@apple.com>

        Standard controls sometimes say video is in pip when it isnt.
        https://bugs.webkit.org/show_bug.cgi?id=181095
        rdar://problem/36182687

        Reviewed by Eric Carlson.

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::exitFullscreen):

2018-01-08  Jer Noble  <jer.noble@apple.com>

        REGRESSION: [iOS] ASSERTION FAILED: !node.isConnected() in WebCore::notifyNodeInsertedIntoDocument
        https://bugs.webkit.org/show_bug.cgi?id=181091

        Reviewed by Darin Adler.

        Move the work previously performed in insertedIntoAncestor() into didFinishInsertingNode().

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::prepareForLoad):

2018-01-08  Zan Dobersek  <zdobersek@igalia.com>

        [Cairo] Use isolated fill and stroke source containers
        https://bugs.webkit.org/show_bug.cgi?id=181386

        Reviewed by Carlos Garcia Campos.

        Generate fill and stroke source objects upon invocation of various Cairo
        operations, initializing necessary data from the GraphicsContextState
        object.

        Cairo::FillSource and Cairo::StrokeSource structs are introduced, both
        being default-constructible as well as providing a constructor that
        accepts a GraphicsContextState object from which the appropriate
        resources are created.

        The FillSource and StrokeSource objects are then passed to
        PlatformContextCairo's prepareForFilling() and prepareForStroking()
        methods. Here the helper prepareCairoContextSource() function is now
        invoked with cairo_pattern_t objects as pattern or gradient sources, or
        the source color if neither cairo_pattern_t object is specified.

        The FillSource and StrokeSource constructors mimic the previous behavior
        of prepareCairoContextSource(). In case the source is a Pattern object,
        a cairo_pattern_t object is created from that. In case of FillSource,
        we also retrieve pattern size, transform and repetition information. In
        case the source os a Gradient object, we create a 'base' cairo_pattern_t
        object for a completely opaque alpha channel. Additionally, if the alpha
        value on the state is not 1, we create an alpha-adjusted cairo_pattern_t
        that is potentially used for any filling or stroking operation that has
        to preserve transparency. If neither Pattern or Gradient objects are set
        on the GraphicsContextState, we default to the current fill or stroke
        color.

        Overall, there's no change in behavior, this is simply a refactoring
        that enables us to construct Cairo objects for filling and stroking
        sources at the time of Cairo operation dispatch, instead of pulling down
        GraphicsContextState deeper into the Cairo-specific code.

        No new tests -- no change in functionality.

        * platform/graphics/cairo/CairoOperations.cpp:
        (WebCore::Cairo::drawPathShadow):
        (WebCore::Cairo::fillCurrentCairoPath):
        (WebCore::Cairo::FillSource::FillSource):
        (WebCore::Cairo::StrokeSource::StrokeSource):
        (WebCore::Cairo::fillRect):
        (WebCore::Cairo::fillRectWithRoundedHole):
        (WebCore::Cairo::fillPath):
        (WebCore::Cairo::strokeRect):
        (WebCore::Cairo::strokePath):
        (WebCore::Cairo::drawGlyphs):
        * platform/graphics/cairo/CairoOperations.h:
        * platform/graphics/cairo/FontCairo.cpp:
        (WebCore::FontCascade::drawGlyphs):
        * platform/graphics/cairo/GraphicsContextCairo.cpp:
        (WebCore::GraphicsContext::fillPath):
        (WebCore::GraphicsContext::strokePath):
        (WebCore::GraphicsContext::fillRect):
        (WebCore::GraphicsContext::strokeRect):
        (WebCore::GraphicsContext::fillRectWithRoundedHole):
        * platform/graphics/cairo/PlatformContextCairo.cpp:
        (WebCore::prepareCairoContextSource):
        (WebCore::PlatformContextCairo::prepareForFilling):
        (WebCore::PlatformContextCairo::prepareForStroking):
        (WebCore::PlatformContextCairo::clipForPatternFilling):
        * platform/graphics/cairo/PlatformContextCairo.h:

2018-01-08  Youenn Fablet  <youenn@apple.com>

        navigator.onLine does not work inside service workers
        https://bugs.webkit.org/show_bug.cgi?id=181079
        <rdar://problem/36178606>

        Reviewed by Darin Adler.

        Test: http/wpt/service-workers/online.https.html

        Added support for onLine by reusing a similar implementation as regular workers.
        Added ServiceWorkerInternals as an interface for an object exposed as self.internals in WTR.
        This object has currently one method to trigger change in the online/offline status.
        This allows writing a test for the onLine feature.

        Note that self.internals is inserted asynchronously after the script was evaluated.
        When writing a worker script using self.internals, one must make sure to use self.internals when initialized.
        online-worker.js for instance makes use of self.internals in a postMessage callback.

        * CMakeLists.txt:
        * DerivedSources.make:
        * WebCore.xcodeproj/project.pbxproj:
        * bindings/js/WorkerScriptController.h:
        * dom/ScriptExecutionContext.h:
        * testing/ServiceWorkerInternals.cpp: Added.
        (WebCore::ServiceWorkerInternals::ServiceWorkerInternals):
        (WebCore::ServiceWorkerInternals::setOnline):
        * testing/ServiceWorkerInternals.h: Added.
        * testing/ServiceWorkerInternals.idl: Added.
        * testing/js/WebCoreTestSupport.cpp:
        (WebCoreTestSupport::setupNewlyCreateServiceWorker):
        * testing/js/WebCoreTestSupport.h:
        * workers/service/context/SWContextManager.cpp:
        (WebCore::SWContextManager::registerServiceWorkerThreadForInstall):
        (WebCore::SWContextManager::startedServiceWorker):
        * workers/service/context/SWContextManager.h:
        (WebCore::SWContextManager::setServiceWorkerCreationCallback):
        (WebCore::SWContextManager::workerByID):
        * workers/service/context/ServiceWorkerThread.cpp:
        (WebCore::ServiceWorkerThread::ServiceWorkerThread):
        * workers/service/context/ServiceWorkerThreadProxy.cpp:
        (WebCore::ServiceWorkerThreadProxy::ServiceWorkerThreadProxy):
        (WebCore::ServiceWorkerThreadProxy::~ServiceWorkerThreadProxy):
        (WebCore::ServiceWorkerThreadProxy::networkStateChanged):
        (WebCore::ServiceWorkerThreadProxy::notifyNetworkStateChange):
        * workers/service/context/ServiceWorkerThreadProxy.h:

2018-01-08  Zan Dobersek  <zdobersek@igalia.com>

        [Cairo] Contain shadow blur requirement state in a separate object
        https://bugs.webkit.org/show_bug.cgi?id=181380

        Reviewed by Carlos Garcia Campos.

        Instead of picking up the necessary state parameters from a
        GraphicsContextState object, store the necessary parameters in a helper
        ShadowBlurUsage struct. Mimicking the mustUseShadowBlur() function that
        is being removed, values of the shadow color, shadow blur, and shadow
        transform ignorance are stored there. Additionally, the required()
        method accepts a PlatformContextCairo object through which it can
        retrieve the current CTM and determine whether it's an identity, finally
        deciding whether shadow blur can or cannot be ignored.

        Goal of this change is to limit usage of GraphicsContextState directly
        in operations implemented inside the Cairo namespace. Instead, the
        state parameters should be passed directly, or an equivalent but limited
        state object should be constructed for invocation of such operations.

        This is likely only an intermediate solution. It's possible it will be
        replaced by a more complete shadow state struct that would be used for
        any operation that is required to draw shadows, if necessary.

        No new tests -- no change in functionality.

        * platform/graphics/cairo/CairoOperations.cpp:
        (WebCore::Cairo::drawGlyphsShadow):
        (WebCore::Cairo::ShadowBlurUsage::ShadowBlurUsage):
        (WebCore::Cairo::ShadowBlurUsage::required const):
        (WebCore::Cairo::fillRectWithRoundedHole):
        (WebCore::Cairo::drawGlyphs):
        (WebCore::Cairo::mustUseShadowBlur): Deleted.
        * platform/graphics/cairo/CairoOperations.h:
        * platform/graphics/cairo/FontCairo.cpp:
        (WebCore::FontCascade::drawGlyphs):
        * platform/graphics/cairo/GraphicsContextCairo.cpp:
        (WebCore::GraphicsContext::fillRectWithRoundedHole):

2018-01-08  Philippe Normand  <pnormand@igalia.com>

        [GStreamer][Soup] Remove dead getCreateOrReadBuffer code path
        https://bugs.webkit.org/show_bug.cgi?id=181376

        Reviewed by Carlos Garcia Campos.

        This code path is no longer used now that the GStreamer HTTP
        source element uses data coming directly from the network process.

        * SourcesGTK.txt:
        * SourcesWPE.txt:
        * loader/MediaResourceLoader.cpp:
        (WebCore::MediaResource::getOrCreateReadBuffer): Deleted.
        * loader/MediaResourceLoader.h:
        * loader/SubresourceLoader.h:
        * loader/cache/CachedRawResource.h:
        * loader/cache/CachedRawResourceClient.h:
        (WebCore::CachedRawResourceClient::finishedTimingForWorkerLoad):
        (WebCore::CachedRawResourceClient::getOrCreateReadBuffer): Deleted.
        * loader/cache/CachedResource.h:
        (WebCore::CachedResource::getOrCreateReadBuffer): Deleted.
        * loader/soup/CachedRawResourceSoup.cpp: Removed.
        * loader/soup/SubresourceLoaderSoup.cpp: Removed.
        * platform/graphics/PlatformMediaResourceLoader.h:
        (WebCore::PlatformMediaResourceClient::loadFinished):
        (WebCore::PlatformMediaResourceClient::getOrCreateReadBuffer): Deleted.
        * platform/graphics/gstreamer/WebKitWebSourceGStreamer.cpp:
        (CachedResourceStreamingClient::getOrCreateReadBuffer): Deleted.
        * platform/network/ResourceHandleClient.h:
        (WebCore::ResourceHandleClient::getOrCreateReadBuffer): Deleted.
        * platform/network/soup/ResourceHandleSoup.cpp:
        (WebCore::ResourceHandle::ensureReadBuffer):

2018-01-08  Zan Dobersek  <zdobersek@igalia.com> and Carlos Garcia Campos  <cgarcia@igalia.com>

        [GStreamer] use FastMalloc-based GstAllocator
        https://bugs.webkit.org/show_bug.cgi?id=165793

        Reviewed by Philippe Normand.

        Add GstAllocatorFastMalloc, a GstAllocator implementation using fast malloc. It's only used when fast malloc is
        enabled and can be disabled using an environment variable for debugging purposes.

        * platform/GStreamer.cmake:
        * platform/graphics/gstreamer/GStreamerUtilities.cpp:
        (WebCore::initializeGStreamer):
        * platform/graphics/gstreamer/GstAllocatorFastMalloc.cpp: Added.
        (gstMemoryFastMallocNew):
        (gstAllocatorFastMallocAlloc):
        (gstAllocatorFastMallocFree):
        (gstAllocatorFastMallocMemMap):
        (gstAllocatorFastMallocMemUnmap):
        (gstAllocatorFastMallocMemCopy):
        (gstAllocatorFastMallocMemShare):
        (gstAllocatorFastMallocMemIsSpan):
        (gst_allocator_fast_malloc_class_init):
        (gst_allocator_fast_malloc_init):
        * platform/graphics/gstreamer/GstAllocatorFastMalloc.h: Added.

2018-01-07  Ms2ger  <Ms2ger@igalia.com>

        Implement createImageBitmap(ImageBitmap)
        https://bugs.webkit.org/show_bug.cgi?id=181287

        Reviewed by Darin Adler.

        Tests: imported/w3c/web-platform-tests/2dcontext/imagebitmap/createImageBitmap-drawImage.html
               imported/w3c/web-platform-tests/2dcontext/imagebitmap/createImageBitmap-invalid-args.html

        * html/ImageBitmap.cpp:
        (WebCore::ImageBitmap::createPromise):

2018-01-07  Ryosuke Niwa  <rniwa@webkit.org>

        Reduce the precision of "high" resolution time to 1ms
        https://bugs.webkit.org/show_bug.cgi?id=180910
        <rdar://problem/36085943>

        Reviewed by Saam Barati.

        Reduced the high prevision time's resolution to 1ms, the same precision as Date.now().

        Also fixed the bug in fillRTCStats that we weren't reducing the time resolution in RTCStats dictionaries.

        * Modules/mediastream/libwebrtc/LibWebRTCMediaEndpoint.cpp:
        (WebCore::fillRTCStats):
        * page/Performance.cpp:
        (WebCore::Performance::reduceTimeResolution):

2018-01-06  Simon Fraser  <simon.fraser@apple.com>

        Possible crash computing event regions
        https://bugs.webkit.org/show_bug.cgi?id=181368
        rdar://problem/34847081

        Reviewed by Zalan Bujtas.

        Don't trigger layout in Element::absoluteEventHandlerBounds(), since this can run arbirary script
        which might delete elements or re-enter Document::absoluteRegionForEventTargets().

        It's OK to not trigger layout, because if layout is dirty, the next layout will update event regions again.

        Add a LayoutDisallowedScope to check that Document::absoluteRegionForEventTargets() doesn't
        trigger layout, and move the check for LayoutDisallowedScope::isLayoutAllowed() from Document::updateLayout()
        to LayoutContext::layout(), since some layouts don't happen via the former (e.g. the one being removed here).

        The test checks that the assertion does not fire. I was not able to get a reliable test for any crash.

        Test: fast/events/event-handler-regions-layout.html

        * dom/Document.cpp:
        (WebCore::Document::updateLayout):
        (WebCore::Document::absoluteRegionForEventTargets):
        * dom/Element.cpp:
        (WebCore::Element::absoluteEventHandlerBounds):
        * page/LayoutContext.cpp:
        (WebCore::LayoutContext::layout):
        * rendering/LayoutDisallowedScope.h: Move the #ifdefs around to avoid defining the enum twice.
        (WebCore::LayoutDisallowedScope::LayoutDisallowedScope):
        (WebCore::LayoutDisallowedScope::isLayoutAllowed):

2018-01-06  Simon Fraser  <simon.fraser@apple.com>

        Crash under RenderLayer::scrollTo() with marquee
        https://bugs.webkit.org/show_bug.cgi?id=181349
        rdar://problem/36190168

        Reviewed by Zalan Bujtas.

        Don't call updateWidgetPositions() synchonously during RenderLayer scrolling, because it
        can run arbitrary script which may trigger destruction of this RenderLayer.

        Instead, queue up updateWidgetPositions() on a zero-delay timer.

        Under some circumstances this may allow a paint to occur before the widgets have been
        updated (which could be fixed with a more invasive change), but in practice I saw no
        painting issues with plug-ins or iframes inside overflow scroll, in WebKit or LegacyWebKit.

        Test: fast/scrolling/marquee-scroll-crash.html

        * page/FrameView.cpp:
        (WebCore::FrameView::FrameView):
        (WebCore::FrameView::updateWidgetPositions):
        (WebCore::FrameView::scheduleUpdateWidgetPositions):
        (WebCore::FrameView::updateWidgetPositionsTimerFired):
        * page/FrameView.h:
        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::scrollTo):

2018-01-05  Dean Jackson  <dino@apple.com>

        Accurately clip copyTexImage2D and copyTexSubImage2D
        https://bugs.webkit.org/show_bug.cgi?id=181356
        <rdar://problem/35083877>

        Reviewed by Eric Carlson.

        The code to make sure copyTexSubImage2D and copyTexImage2D will not try to read
        out of bounds had a bad bug introduced here:
        https://bugs.webkit.org/show_bug.cgi?id=51421

        With appropriate parameters, it would produce a rectangle with
        negative dimensions. Most GL drivers just ignored this, but some
        are not happy.

        Test: fast/canvas/webgl/copy-tex-image-and-sub-image-2d-bad-input.html

        * html/canvas/WebGLRenderingContextBase.cpp:
        (WebCore::clip2D): Reimplement this in a more sane manner, and use
        checked arithmetic while here.
        * html/canvas/WebGLRenderingContextBase.h:
        (WebCore::clip1D): Deleted.
        (WebCore::clip2D): Deleted.

2018-01-06  Antti Koivisto  <antti@apple.com>

        Use WeakPtr for RenderTreePosition::m_nextSibling
        https://bugs.webkit.org/show_bug.cgi?id=181363

        Reviewed by Zalan Bujtas.

        For safety. In most cases it is null and won't cause us to instantiate WeakReferences for
        many new objects.

        * rendering/updating/RenderTreePosition.cpp:
        (WebCore::RenderTreePosition::computeNextSibling):
        * rendering/updating/RenderTreePosition.h:
        (WebCore::RenderTreePosition::RenderTreePosition):
        (WebCore::RenderTreePosition::nextSibling const):

2018-01-05  David Kilzer  <ddkilzer@apple.com>

        Re-enable -Wcast-qual in WebCore for Apple ports
        <https://webkit.org/b/177895>
        <rdar://problem/34960830>

        Reviewed by Joseph Pecoraro.

        * Configurations/Base.xcconfig:
        (WARNING_CFLAGS): Remove FIXME and add -Wcast-qual back to
        arguments.

        * crypto/mac/SerializedCryptoKeyWrapMac.mm:
        (WebCore::createAndStoreMasterKey):
        - Use checked_cf_cast<SecACLRef>().

        * editing/cocoa/DataDetection.mm:
        (WebCore::detectItemAtPositionWithRange):
        - Manually cast CFTypeRef to DDResultRef until
          DDResultGetTypeID() is available as SPI.

        * platform/gamepad/mac/HIDGamepad.cpp:
        (WebCore::HIDGamepad::initElementsFromArray):
        - Use checked_cf_cast<IOHIDElementRef>().

        * platform/graphics/avfoundation/objc/MediaSampleAVFObjC.mm:
        (WebCore::MediaSampleAVFObjC::createImageSample):
        (WebCore::CMSampleBufferIsRandomAccess):
        (WebCore::CMSampleBufferIsNonDisplaying):
        (WebCore::MediaSampleAVFObjC::createNonDisplayingCopy const):
        - Use checked_cf_cast<CFMutableDictionaryRef>() and
          checked_cf_cast<CFDictionaryRef>().

        * platform/graphics/cocoa/IOSurface.h:
        (WebCore::IOSurface::asLayerContents):
        - Use reinterpret_cast<id>() to cast from IOSurfaceRef to id.

        * platform/graphics/cocoa/WebCoreDecompressionSession.mm:
        (WebCore::WebCoreDecompressionSession::getFirstVideoFrame):
        (WebCore::WebCoreDecompressionSession::automaticDequeue):
        (WebCore::WebCoreDecompressionSession::imageForTime):
        (WebCore::WebCoreDecompressionSession::getDecodeTime):
        (WebCore::WebCoreDecompressionSession::getPresentationTime):
        (WebCore::WebCoreDecompressionSession::getDuration):
        - Use checked_cf_cast<CMSampleBufferRef>().

        * platform/graphics/Font.h:
        (WebCore::Font::m_kernedCFStringAttributes):
        (WebCore::Font::m_nonKernedCFStringAttributes):
        - Change type from RetainPtr<CFDictionaryRef> to
          RetainPtr<CFMutableDictionaryRef> since that's what they are.
        * platform/graphics/mac/SimpleFontDataCoreText.cpp:
        (WebCore::Font::getCFStringAttributes const):
        - Replace local `mutableAttributes` variable with
          `attributesDictionary.get()` since it returns the correct type
          now.

        * platform/ios/wak/WAKView.mm:
        (-[WAKView _initWithViewRef:]):
        (_WAKCopyWrapper):
        * platform/ios/wak/WKView.mm:
        (_WKViewClearSuperview):
        (WKViewFirstChild):
        (WKViewNextSibling):
        - Use static_cast<WKViewRef>(const_cast<void*>()) to convert
          const void* variable to WKViewRef.

        * platform/mac/PasteboardMac.mm:
        (WebCore::flipImageSpec):
        (WebCore::setDragImageImpl):
        - Use const_cast<> to remove 'const' modifier from
          unsigned char pointers.  This regressed while -Wcast-qual was
          disabled for WebCore.

        * platform/mac/SSLKeyGeneratorMac.mm:
        (WebCore::signedPublicKeyAndChallengeString):
        - Use checked_cf_cast<SecACLRef>().

        * platform/mediastream/mac/RealtimeIncomingVideoSourceCocoa.cpp:
        (WebCore::RealtimeIncomingVideoSourceCocoa::OnFrame):
        - Use checked_cf_cast<CFMutableDictionaryRef>().

        * platform/network/cf/SocketStreamHandleImplCFNet.cpp:
        (WebCore::copyCONNECTProxyResponse):
        - Use checked_cf_cast<CFHTTPMessageRef>().

        * platform/network/cocoa/ResourceResponseCocoa.mm:
        (WebCore::ResourceResponse::platformCertificateInfo const):
        - Use checked_cf_cast<SecTrustRef>().

        * platform/network/mac/CertificateInfoMac.mm:
        (WebCore::CertificateInfo::containsNonRootSHA1SignedCertificate const):
        (WebCore::CertificateInfo::dump const):
        - Use checked_cf_cast<SecCertificateRef>().

        * testing/cocoa/WebArchiveDumpSupport.mm:
        (WebCoreTestSupport::createCFURLResponseFromResponseData):
        - Use checked_cf_cast<>() for CFMutable* types.

2018-01-05  John Wilander  <wilander@apple.com>

        Storage Access API: Refactor to make naming accurate and explicit, simplify access table, and prepare for access removal for page
        https://bugs.webkit.org/show_bug.cgi?id=181357
        <rdar://problem/36331031>

        Reviewed by Alex Christensen.

        No new tests. The only changed functionality that isn't covered
        by existing tests is cross-origin iframes in the same partition
        should be handled as already having access. This cannot be
        tested in layout tests since they don't support subdomains.

        This change does the following:
        - Changes function and message names to reflect how this feature
          was eventually implemented, i.e. access per frame.
        - Makes it explicit that the UI process is only involved in
          granting storage access and not removing storage access.
          The latter is done directly by the web process.
        - Simplifies the network process' entry map since only needs to
          be able to give access to one domain in one frame at a time.
          Access goes away on frame navigation so there can only be one
          domain at a time per frame. Also, the map now uses pageIDs as
          main keys to prepare for efficient access removal for all
          frames under a page.
        - Fixes a bug in so that a cross-origin iframe with the same
          partition as the top frame correctly is handled as already
          having access.

        * platform/network/NetworkStorageSession.h:
        * platform/network/cf/NetworkStorageSessionCFNet.cpp:
        (WebCore::NetworkStorageSession::cookieStoragePartition const):
            The only change here is the changed named of the call to
            NetworkStorageSession::hasStorageAccessForFrame().
        (WebCore::NetworkStorageSession::hasStorageAccessForFrame const):
        (WebCore::NetworkStorageSession::grantStorageAccessForFrame):
        (WebCore::NetworkStorageSession::removeStorageAccessForFrame):
        (WebCore::NetworkStorageSession::isStorageAccessGranted const): Deleted.
        (WebCore::NetworkStorageSession::setStorageAccessGranted): Deleted.
        (WebCore::NetworkStorageSession::removeStorageAccess): Deleted.

2018-01-05  Youenn Fablet  <youenn@apple.com>

        Implement Cache API partitioning based on ClientOrigin
        https://bugs.webkit.org/show_bug.cgi?id=181240

        Reviewed by Alex Christensen.

        Covered by updated tests.

        Previously, cache storage was partitioned according the origin of the client, represented as a String.
        We now partition according both client and top origins, represented as a ClientOrigin

        Minor refactoring to use more makePendingActivity.
        Added support for IPC serialization of ClientOrigin.
        Added SecurityOriginData::toString which is used by WebKit2 Cache Storage implementation.

        * Modules/cache/CacheStorageConnection.cpp:
        (WebCore::CacheStorageConnection::open):
        (WebCore::CacheStorageConnection::retrieveCaches):
        * Modules/cache/CacheStorageConnection.h:
        (WebCore::CacheStorageConnection::clearMemoryRepresentation):
        (WebCore::CacheStorageConnection::doOpen):
        (WebCore::CacheStorageConnection::doRetrieveCaches):
        * Modules/cache/DOMCacheStorage.cpp:
        (WebCore::DOMCacheStorage::origin const):
        (WebCore::DOMCacheStorage::retrieveCaches):
        (WebCore::DOMCacheStorage::open):
        (WebCore::DOMCacheStorage::remove):
        * Modules/cache/DOMCacheStorage.h:
        * Modules/cache/WorkerCacheStorageConnection.cpp:
        (WebCore::WorkerCacheStorageConnection::doOpen):
        (WebCore::WorkerCacheStorageConnection::doRetrieveCaches):
        * Modules/cache/WorkerCacheStorageConnection.h:
        * page/ClientOrigin.h:
        (WebCore::ClientOrigin::isolatedCopy const):
        (WebCore::ClientOrigin::encode const):
        (WebCore::ClientOrigin::decode):
        * page/SecurityOriginData.cpp:
        (WebCore::SecurityOriginData::toString const):
        (WebCore::SecurityOriginData::debugString const): Deleted.
        * page/SecurityOriginData.h:
        (WebCore::SecurityOriginData::debugString const):
        * testing/Internals.cpp:
        (WebCore::Internals::clearCacheStorageMemoryRepresentation):

2018-01-05  Wenson Hsieh  <wenson_hsieh@apple.com>

        [Attachment Support] Add a way to write blob data to a file URL from the UI process
        https://bugs.webkit.org/show_bug.cgi?id=181236

        Reviewed by Brady Eidson.

        Add support for writing a blob to a designated file path. See comments below for more detail. No new tests, as
        there change in behavior yet. See part 2: https://bugs.webkit.org/show_bug.cgi?id=181199.

        * page/DragController.cpp:
        (WebCore::DragController::dragAttachmentElement):
        * platform/PromisedBlobInfo.h:

        Remove PromisedBlobData entirely. This was added with the premise of having the web process deliver blob data to
        the UI process. However, the new approach I'm taking just has the UI process tell the network process to write
        a blob to a given location, so a data structure to deliver blob data over IPC is no longer necessary.

        (WebCore::PromisedBlobData::hasData const): Deleted.
        (WebCore::PromisedBlobData::hasFile const): Deleted.
        (WebCore::PromisedBlobData::operator bool const): Deleted.
        (WebCore::PromisedBlobData::fulfills const): Deleted.
        * platform/network/BlobRegistryImpl.cpp:
        (WebCore::BlobRegistryImpl::populateBlobsForFileWriting):

        Introduce a new helper to build a list of blob data for file writing.

        (WebCore::writeFilePathsOrDataBuffersToFile):

        Introduce a new static helper to write blob data (a list of file paths and data buffers) to a given file handle.
        Automatically closes the given file handle upon exit.

        (WebCore::BlobRegistryImpl::writeBlobsToTemporaryFiles):
        (WebCore::BlobRegistryImpl::writeBlobToFilePath):

        Pull out common logic in writeBlobsToTemporaryFiles and writeBlobToFilePath into helper methods (see above), and
        refactor both methods to use the helpers.

        * platform/network/BlobRegistryImpl.h:

2018-01-05  Alex Christensen  <achristensen@webkit.org>

        Forbid < and > in URL hosts
        https://bugs.webkit.org/show_bug.cgi?id=181308
        <rdar://problem/36012757>

        Reviewed by Tim Horton.

        https://url.spec.whatwg.org/#forbidden-host-code-point does not include these characters yet, but I think it should.
        Firefox fails to parse URLs with < or > in the host.  Chrome percent encodes them.  Safari needs to do something.
        The web platform tests are unclear on this case, and they will need to be updated with the specification.
        They do show a change in behavior, though.

        * platform/URLParser.cpp:
        Add < and > to the list of forbidden host code points.

2018-01-05  Eric Carlson  <eric.carlson@apple.com>

        [MediaStream] Add Mac screen capture source
        https://bugs.webkit.org/show_bug.cgi?id=181333
        <rdar://problem/36323219>

        Reviewed by Dean Jackson.

        * SourcesCocoa.txt: Add ScreenDisplayCaptureSourceMac.mm.

        * WebCore.xcodeproj/project.pbxproj: Ditto.

        * platform/cocoa/CoreVideoSoftLink.cpp: Declare new constants used.
        * platform/cocoa/CoreVideoSoftLink.h:

        * platform/mediastream/mac/DisplayCaptureManagerCocoa.cpp:
        (WebCore::displayReconfigurationCallBack): Call refreshCaptureDevices.
        (WebCore::DisplayCaptureManagerCocoa::~DisplayCaptureManagerCocoa): Unregister for display
        reconfiguration callbacks.
        (WebCore::DisplayCaptureManagerCocoa::captureDevices): Register for display reconfigrations.
        (WebCore::DisplayCaptureManagerCocoa::refreshCaptureDevices): Use CGActiveDisplayList to
        get list of active screens.
        (WebCore::DisplayCaptureManagerCocoa::screenCaptureDeviceWithPersistentID): Validate screen
        ID, return CaptureDevice.
        * platform/mediastream/mac/DisplayCaptureManagerCocoa.h:

        * platform/mediastream/mac/RealtimeMediaSourceCenterMac.cpp:
        (WebCore::VideoCaptureSourceFactoryMac::createVideoCaptureSource): Deal with screen capture
        on macOS.

        Implement Mac screen capture with CGDisplayStream.
        * platform/mediastream/mac/ScreenDisplayCaptureSourceMac.h: Added.
        (WebCore::ScreenDisplayCaptureSourceMac::DisplaySurface::~DisplaySurface):
        (WebCore::ScreenDisplayCaptureSourceMac::DisplaySurface::operator=):
        (WebCore::ScreenDisplayCaptureSourceMac::DisplaySurface::ioSurface const):
        * platform/mediastream/mac/ScreenDisplayCaptureSourceMac.mm: Added.
        (WebCore::roundUpToMacroblockMultiple):
        (WebCore::ScreenDisplayCaptureSourceMac::updateDisplayID):
        (WebCore::ScreenDisplayCaptureSourceMac::create):
        (WebCore::ScreenDisplayCaptureSourceMac::ScreenDisplayCaptureSourceMac):
        (WebCore::ScreenDisplayCaptureSourceMac::~ScreenDisplayCaptureSourceMac):
        (WebCore::ScreenDisplayCaptureSourceMac::createDisplayStream):
        (WebCore::ScreenDisplayCaptureSourceMac::startProducingData):
        (WebCore::ScreenDisplayCaptureSourceMac::stopProducingData):
        (WebCore::ScreenDisplayCaptureSourceMac::sampleBufferFromPixelBuffer):
        (WebCore::ScreenDisplayCaptureSourceMac::pixelBufferFromIOSurface):
        (WebCore::ScreenDisplayCaptureSourceMac::generateFrame):
        (WebCore::ScreenDisplayCaptureSourceMac::startDisplayStream):
        (WebCore::ScreenDisplayCaptureSourceMac::applySize):
        (WebCore::ScreenDisplayCaptureSourceMac::applyFrameRate):
        (WebCore::ScreenDisplayCaptureSourceMac::commitConfiguration):
        (WebCore::ScreenDisplayCaptureSourceMac::displayWasReconfigured):
        (WebCore::ScreenDisplayCaptureSourceMac::displayReconfigurationCallBack):
        (WebCore::ScreenDisplayCaptureSourceMac::frameAvailable):

2018-01-05  Don Olmstead  <don.olmstead@sony.com>

        [curl] Can't load file:// URL with a URL fragment identifier
        https://bugs.webkit.org/show_bug.cgi?id=181170

        Reviewed by Alex Christensen.

        No new tests. No change in behavior.

        * platform/network/curl/CurlRequest.cpp:
        (WebCore::CurlRequest::invokeDidReceiveResponseForFile):

2018-01-05  Don Olmstead  <don.olmstead@sony.com>

        TextCodec uses std::array but does not include it
        https://bugs.webkit.org/show_bug.cgi?id=181340

        Reviewed by Alex Christensen.

        No new tests. No change in behavior.

        * platform/text/TextCodec.h:

2018-01-05  Said Abou-Hallawa  <sabouhallawa@apple.com>

        SVGAnimatedListPropertyTearOff::synchronizeWrappersIfNeeded() should do nothing if the property is not animating
        https://bugs.webkit.org/show_bug.cgi?id=181316
        <rdar://problem/36147545>

        Reviewed by Simon Fraser.

        This is a speculative change to fix a crash which appeared after r226065.
        The crash is very intermittent and sometimes very hard to reproduce. The
        basic code analysis did not show how this crash can even happen.

        * svg/SVGAnimatedTypeAnimator.h:
        (WebCore::SVGAnimatedTypeAnimator::resetFromBaseValues): For SVG property
        with two values, e.g. <SVGAngleValue, SVGMarkerOrientType>,  we need to
        detach the wrappers of the animated property if the animated values are
        going to change. This is similar to what we did in resetFromBaseValue().

        * svg/properties/SVGAnimatedListPropertyTearOff.h:
        (WebCore::SVGAnimatedListPropertyTearOff::synchronizeWrappersIfNeeded):

2018-01-05  Matt Lewis  <jlewis3@apple.com>

        Unreviewed, rolling out r226401.

        This caused timeouts on multiple platforms.

        Reverted changeset:

        "Implement Cache API partitioning based on ClientOrigin"
        https://bugs.webkit.org/show_bug.cgi?id=181240
        https://trac.webkit.org/changeset/226401

2018-01-05  Dan Bernstein  <mitz@apple.com>

        Fixed the build following AppKit API deprecations in a recent SDKs

        * platform/mac/PasteboardMac.mm:
        (WebCore::setDragImageImpl): Suppressed deprecation warnings.
        * platform/mac/WidgetMac.mm:
        (WebCore::Widget::paint): Ditto.

2018-01-05  Joseph Pecoraro  <pecoraro@apple.com>

        ServiceWorkers: Enable UserTiming / ResourceTiming
        https://bugs.webkit.org/show_bug.cgi?id=181297
        <rdar://problem/36307306>

        Reviewed by Youenn Fablet.

        Tests: http/tests/workers/service/service-worker-resource-timing.https.html
               http/tests/workers/service/service-worker-user-timing.https.html

        * loader/ResourceTiming.cpp:
        (WebCore::ResourceTiming::ResourceTiming):
        We used to clear extra NetworkLoadMetrics data early on. However,
        for Workers we want to pass the complete NetworkLoadMetrics to
        the Worker so that a Worker inspector has access to it.

        * page/PerformanceResourceTiming.cpp:
        (WebCore::PerformanceResourceTiming::PerformanceResourceTiming):
        Instead move the clearing of extra data to here, when the NetworkLoadMetrics
        have finally settled into being used only for a performance entry.

2018-01-04  Philippe Normand  <pnormand@igalia.com>

        [EME][GStreamer] Fix wrong ifdef
        https://bugs.webkit.org/show_bug.cgi?id=181289

        Reviewed by Alex Christensen.

        * platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.cpp:
        (WebCore::MediaPlayerPrivateGStreamer::handleMessage): Remove the
        ENCRYPTED_MEDIA ifdef from the VIDEO_TRACK ifdef block. Both have
        nothing to do together.

2018-01-05  Fujii Hironori  <Hironori.Fujii@sony.com>

        [Cairo] Canvas: Path::clear should clear its transform
        https://bugs.webkit.org/show_bug.cgi?id=181320

        Reviewed by Carlos Garcia Campos.

        Path of Cairo port has its cairo context. Path::clear() didn't
        clear the transform matrix of the context.

        Test: fast/canvas/reset-scaling-by-height-change.html

        * platform/graphics/cairo/PathCairo.cpp:
        (WebCore::Path::clear): Reset the transform matrix of Path.

2018-01-04  Devin Rousso  <webkit@devinrousso.com>

        Web Inspector: replace HTMLCanvasElement with CanvasRenderingContext for instrumentation logic
        https://bugs.webkit.org/show_bug.cgi?id=180770

        Reviewed by Joseph Pecoraro.

        No change in functionality.

        * html/HTMLCanvasElement.h:
        * html/HTMLCanvasElement.cpp:
        (WebCore::HTMLCanvasElement::createContext2d):
        (WebCore::HTMLCanvasElement::createContextWebGL):
        (WebCore::HTMLCanvasElement::createContextWebGPU):
        (WebCore::HTMLCanvasElement::createContextBitmapRenderer):
        (WebCore::HTMLCanvasElement::reset):
        (WebCore::HTMLCanvasElement::paint):
        (WebCore::HTMLCanvasElement::setImageBuffer const):
        (WebCore::HTMLCanvasElement::addObserver): Deleted.
        (WebCore::HTMLCanvasElement::removeObserver): Deleted.
        (WebCore::HTMLCanvasElement::cssCanvasClients): Deleted.
        (WebCore::HTMLCanvasElement::notifyObserversCanvasChanged): Deleted.
        * html/OffscreenCanvas.h:
        * html/canvas/CanvasRenderingContext.h:
        * html/canvas/CanvasRenderingContext.cpp:
        * html/canvas/CanvasRenderingContext2D.h:
        * html/canvas/CanvasRenderingContext2D.cpp:
        (WebCore::CanvasRenderingContext2D::create):
        * html/canvas/CanvasRenderingContext2DBase.h:
        * html/canvas/ImageBitmapRenderingContext.h:
        * html/canvas/ImageBitmapRenderingContext.cpp:
        (WebCore::ImageBitmapRenderingContext::create):
        * html/canvas/WebGL2RenderingContext.h:
        * html/canvas/WebGL2RenderingContext.cpp:
        (WebCore::WebGL2RenderingContext::create):
        * html/canvas/WebGLRenderingContext.h:
        * html/canvas/WebGLRenderingContext.cpp:
        (WebCore::WebGLRenderingContext::create):
        * html/canvas/WebGLRenderingContextBase.h:
        * html/canvas/WebGLRenderingContextBase.cpp:
        (WebCore::WebGLRenderingContextBase::create):
        * html/canvas/WebGPURenderingContext.cpp:
        (WebCore::WebGPURenderingContext::create):
        Instead of adding didCreateCanvasRenderingContext calls at the construction sites of each
        context, we can make the constructors private and force the usage of static `create` functions.
        This way, we have access to the fully constructed object and have a guaranteed path for creation.

        * html/CanvasBase.h:
        * html/CanvasBase.cpp:
        (WebCore::CanvasBase::~CanvasBase):
        (WebCore::CanvasBase::renderingContext const):
        (WebCore::CanvasBase::addObserver):
        (WebCore::CanvasBase::removeObserver):
        (WebCore::CanvasBase::notifyObserversCanvasChanged):
        (WebCore::CanvasBase::notifyObserversCanvasResized):
        (WebCore::CanvasBase::notifyObserversCanvasDestroyed):
        (WebCore::CanvasBase::cssCanvasClients const):
        * Modules/mediastream/CanvasCaptureMediaStreamTrack.h:
        * Modules/mediastream/CanvasCaptureMediaStreamTrack.cpp:
        (WebCore::CanvasCaptureMediaStreamTrack::Source::canvasDestroyed):
        (WebCore::CanvasCaptureMediaStreamTrack::Source::canvasResized):
        (WebCore::CanvasCaptureMediaStreamTrack::Source::canvasChanged):
        * css/CSSCanvasValue.h:
        Move the CanvasObserver class to CanvasBase so that it can also be used for OffscreenCanvas.

        * inspector/InspectorInstrumentation.h:
        (WebCore::InspectorInstrumentation::didChangeCSSCanvasClientNodes):
        (WebCore::InspectorInstrumentation::didCreateCanvasRenderingContext):
        (WebCore::InspectorInstrumentation::didChangeCanvasMemory):
        (WebCore::InspectorInstrumentation::recordCanvasAction):
        (WebCore::InspectorInstrumentation::didFinishRecordingCanvasFrame):
        (WebCore::InspectorInstrumentation::didEnableExtension):
        (WebCore::InspectorInstrumentation::didCreateProgram):
        (WebCore::InspectorInstrumentation::willDeleteProgram):
        (WebCore::InspectorInstrumentation::isShaderProgramDisabled):
        (WebCore::InspectorInstrumentation::consoleStartRecordingCanvas):
        (WebCore::InspectorInstrumentation::didCreateCSSCanvas): Deleted.
        * inspector/InspectorInstrumentation.cpp:
        (WebCore::InspectorInstrumentation::consoleStartRecordingCanvasImpl):
        (WebCore::InspectorInstrumentation::didChangeCSSCanvasClientNodesImpl):
        (WebCore::InspectorInstrumentation::didCreateCanvasRenderingContextImpl):
        (WebCore::InspectorInstrumentation::didChangeCanvasMemoryImpl):
        (WebCore::InspectorInstrumentation::didFinishRecordingCanvasFrameImpl):
        (WebCore::InspectorInstrumentation::didEnableExtensionImpl):
        (WebCore::InspectorInstrumentation::didCreateProgramImpl):
        (WebCore::InspectorInstrumentation::didCreateCSSCanvasImpl): Deleted.

        * inspector/agents/InspectorCanvasAgent.h:
        * inspector/agents/InspectorCanvasAgent.cpp:
        (WebCore::InspectorCanvasAgent::enable):
        (WebCore::InspectorCanvasAgent::requestNode):
        (WebCore::InspectorCanvasAgent::requestContent):
        (WebCore::InspectorCanvasAgent::requestCSSCanvasClientNodes):
        (WebCore::contextAsScriptValue):
        (WebCore::InspectorCanvasAgent::resolveCanvasContext):
        (WebCore::InspectorCanvasAgent::startRecording):
        (WebCore::InspectorCanvasAgent::stopRecording):
        (WebCore::InspectorCanvasAgent::updateShader):
        (WebCore::InspectorCanvasAgent::frameNavigated):
        (WebCore::InspectorCanvasAgent::didChangeCSSCanvasClientNodes):
        (WebCore::InspectorCanvasAgent::didCreateCanvasRenderingContext):
        (WebCore::InspectorCanvasAgent::didChangeCanvasMemory):
        (WebCore::InspectorCanvasAgent::recordCanvasAction):
        (WebCore::InspectorCanvasAgent::canvasDestroyed):
        (WebCore::InspectorCanvasAgent::didFinishRecordingCanvasFrame):
        (WebCore::InspectorCanvasAgent::consoleStartRecordingCanvas):
        (WebCore::InspectorCanvasAgent::didEnableExtension):
        (WebCore::InspectorCanvasAgent::didCreateProgram):
        (WebCore::InspectorCanvasAgent::canvasRecordingTimerFired):
        (WebCore::InspectorCanvasAgent::clearCanvasData):
        (WebCore::InspectorCanvasAgent::unbindCanvas):
        (WebCore::InspectorCanvasAgent::findInspectorCanvas):
        (WebCore::InspectorCanvasAgent::unbindProgram):
        (WebCore::InspectorCanvasAgent::didCreateCSSCanvas): Deleted.

        * inspector/InspectorCanvas.h:
        * inspector/InspectorCanvas.cpp:
        (WebCore::InspectorCanvas::create):
        (WebCore::InspectorCanvas::InspectorCanvas):
        (WebCore::InspectorCanvas::canvasElement):
        (WebCore::InspectorCanvas::resetRecordingData):
        (WebCore::InspectorCanvas::recordAction):
        (WebCore::InspectorCanvas::buildObjectForCanvas):
        (WebCore::InspectorCanvas::getCanvasContentAsDataURL):
        (WebCore::InspectorCanvas::buildInitialState):
        (WebCore::InspectorCanvas::~InspectorCanvas): Deleted.

        * inspector/InspectorShaderProgram.h:
        * inspector/InspectorShaderProgram.cpp:
        (WebCore::InspectorShaderProgram::context const):

        * page/PageConsoleClient.cpp:
        (WebCore::PageConsoleClient::record):
        (WebCore::PageConsoleClient::recordEnd):

        * dom/Document.h:
        * dom/Document.cpp:
        (WebCore::Document::getCSSCanvasElement):
        (WebCore::Document::nameForCSSCanvasElement const):
        We have no reason to save the CSS canvas name for each InspectorCanvas object, so instead we
        can just query for the name based on the CanvasRenderingContext's HTMLCanvasElement (assuming
        it is not an OffscreenCanvas) when we need it.

2018-01-04  Chris Fleizach  <cfleizach@apple.com>

        AX: Implement updated CSS3 Speech for 'speak' and 'speak-as' properties
        https://bugs.webkit.org/show_bug.cgi?id=180361

        Reviewed by Zalan Bujtas.

        Change speak -> speakAs, and allow a combination of properties.

        Tests: Updated accessibility/mac/css-speech-speak.html

        * accessibility/AccessibilityObject.h:
        (WebCore::AccessibilityObject::speakAsProperty const):
        (WebCore::AccessibilityObject::speakProperty const): Deleted.
        * accessibility/AccessibilityRenderObject.cpp:
        (WebCore::AccessibilityRenderObject::speakAsProperty const):
        (WebCore::AccessibilityRenderObject::speakProperty const): Deleted.
        * accessibility/AccessibilityRenderObject.h:
        * accessibility/ios/WebAccessibilityObjectWrapperIOS.mm:
        (-[WebAccessibilityObjectWrapper accessibilitySpeechHint]):
        * accessibility/mac/WebAccessibilityObjectWrapperBase.h:
        * accessibility/mac/WebAccessibilityObjectWrapperBase.mm:
        (-[WebAccessibilityObjectWrapperBase baseAccessibilitySpeechHint]):
        * accessibility/mac/WebAccessibilityObjectWrapperMac.mm:
        (-[WebAccessibilityObjectWrapper accessibilityAttributeValue:]):
        * css/CSSComputedStyleDeclaration.cpp:
        (WebCore::speakAsToCSSValue):
        (WebCore::ComputedStyleExtractor::propertyValue):
        * css/CSSPrimitiveValueMappings.h:
        (WebCore::CSSPrimitiveValue::CSSPrimitiveValue):
        (WebCore::CSSPrimitiveValue::operator ESpeakAs const):
        (WebCore::CSSPrimitiveValue::operator ESpeak const): Deleted.
        * css/CSSProperties.json:
        * css/StyleBuilderConverter.h:
        (WebCore::StyleBuilderConverter::convertSpeakAs):
        * css/parser/CSSParserFastPaths.cpp:
        (WebCore::CSSParserFastPaths::isValidKeywordPropertyAndValue):
        (WebCore::CSSParserFastPaths::isKeywordPropertyID):
        * css/parser/CSSPropertyParser.cpp:
        (WebCore::consumeSpeakAs):
        (WebCore::CSSPropertyParser::parseSingleValue):
        * rendering/style/RenderStyle.h:
        (WebCore::RenderStyle::speakAs const):
        (WebCore::RenderStyle::setSpeakAs):
        (WebCore::RenderStyle::initialSpeakAs):
        (WebCore::RenderStyle::speak const): Deleted.
        (WebCore::RenderStyle::setSpeak): Deleted.
        (WebCore::RenderStyle::initialSpeak): Deleted.
        * rendering/style/RenderStyleConstants.h:
        (WebCore::operator| ):
        (WebCore::operator|= ):
        * rendering/style/StyleRareInheritedData.cpp:
        (WebCore::StyleRareInheritedData::StyleRareInheritedData):
        (WebCore::StyleRareInheritedData::operator== const):
        * rendering/style/StyleRareInheritedData.h:

2018-01-04  Brian Burg  <bburg@apple.com>

        Web Inspector: Capture Element Screenshot looks fuzzy
        https://bugs.webkit.org/show_bug.cgi?id=175734
        <rdar://problem/33803377>

        Reviewed by Joseph Pecoraro and Simon Fraser.

        Screenshots taken by Web Inspector were being downscaled from the
        internal size to the logical size, causing them to be blurry when
        later upscaled to the internal size.

        Replace ScaleBehavior { Scaled, Unscaled } with PreserveResolution { No, Yes }.
        This is a lot less confusing to read both inside ImageBuffer and at its use sites.

        Remove unused CoordinateSystem argument for ImageBuffer::toDataURL,
        and replace it with PreserveResolution. Plumb PreserveResolution into toCFData
        so that PreserveResolution::Yes will preserve the internal size of
        the image buffer, just as it does in other methods that take PreserveResolution.

        At the use site in InspectorPageAgent, always request PreserveResolution::Yes snapshots
        when taking an element screenshot. For now, keep using downscaled (smaller)
        snapshots when capturing canvas previews, as the previews are not full-size.

        Test: inspector/page/hidpi-snapshot-size.html

        * html/HTMLCanvasElement.cpp:
        (WebCore::HTMLCanvasElement::makePresentationCopy):
        (WebCore::HTMLCanvasElement::copiedImage const):
        * html/canvas/CanvasRenderingContext2DBase.cpp:
        (WebCore::CanvasRenderingContext2DBase::createPattern):
        * inspector/agents/InspectorPageAgent.cpp:
        (WebCore::InspectorPageAgent::snapshotNode):
        (WebCore::InspectorPageAgent::snapshotRect):
        * page/TextIndicator.cpp:
        (WebCore::takeSnapshot):
        * platform/DragImage.cpp:
        (WebCore::createDragImageFromSnapshot):
        * platform/graphics/BitmapImage.cpp:
        (WebCore::BitmapImage::drawPattern):
        * platform/graphics/ImageBuffer.h:
        * platform/graphics/cairo/ImageBufferCairo.cpp:
        (WebCore::ImageBuffer::sinkIntoImage):
        (WebCore::ImageBuffer::copyImage const):
        (WebCore::ImageBuffer::toDataURL const):
        * platform/graphics/cg/ImageBufferCG.cpp:
        (WebCore::createBitmapImageAfterScalingIfNeeded):
        (WebCore::ImageBuffer::copyImage const):
        (WebCore::ImageBuffer::sinkIntoImage):
        (WebCore::ImageBuffer::toDataURL const):
        (WebCore::ImageBuffer::toData const):
        (WebCore::ImageBuffer::toCFData const):
        * platform/graphics/gtk/ImageBufferGtk.cpp:
        (WebCore::ImageBuffer::toDataURL const):
        * platform/graphics/win/ImageBufferDirect2D.cpp:
        (WebCore::ImageBuffer::copyImage const):
        (WebCore::ImageBuffer::sinkIntoImage):
        (WebCore::ImageBuffer::toDataURL const):
        * svg/graphics/SVGImage.cpp:
        (WebCore::SVGImage::drawPatternForContainer):

2018-01-04  John Wilander  <wilander@apple.com>

        Storage Access API: Turn feature on by default in Settings.yaml
        https://bugs.webkit.org/show_bug.cgi?id=181298
        <rdar://problem/36302506>

        Reviewed by Brent Fulgham.

        No new tests. This is just a feature settings change.

        * page/Settings.yaml:

2018-01-04  Zalan Bujtas  <zalan@apple.com>

        WebContent process crashes while loading https://www.classicspecs.com
        https://bugs.webkit.org/show_bug.cgi?id=181290
        <rdar://problem/36225906>

        Reviewed by Simon Fraser.

        Floats can overhang multiple blocks (they are called intruding floats).
        Each block keeps track of such intruding floats. When an overhanging float box is destroyed,
        we need to deregister it from all those blocks. We do it by walking up the ancestor block chain
        and check if the parent (grandparent etc) block still contains this float. Once we find the topmost block, 
        we start deregistering it by traversing back on the descendant blocks.
        Normally we do it in RenderElement::takeChildInternal right before the box is getting detached.
        However in certain cases (like when the float's parent happens to be an anonymous wrapper)
        by the time we get to ::takeChildInternal the subtree is already detached and we can't access all the
        ancestors.
        This patch ensure that the floating box is still attached during de-registration. 

        Test: fast/block/float/crash-when-intruding-float-has-anonymous-parent-and-detach.html

        * rendering/RenderObject.cpp:
        (WebCore::RenderObject::removeFromParentAndDestroyCleaningUpAnonymousWrappers):

2018-01-04  Eric Carlson  <eric.carlson@apple.com>

        [MediaStream] Add Mock screen capture source
        https://bugs.webkit.org/show_bug.cgi?id=181291
        <rdar://problem/36298164>

        Reviewed by Dean Jackson.

        Tests:  http/tests/media/media-stream/get-display-media-prompt.html
                GetDisplayMediaTest.BasicPrompt
                GetDisplayMediaTest.Constraints

        * Modules/mediastream/MediaDevices.cpp:
        (WebCore::MediaDevices::MediaDevices): Add static_assert to ensure MediaDevices::DisplayCaptureSurfaceType
        and RealtimeMediaSourceSettings::DisplaySurfaceType values are equivalent.
        (WebCore::MediaDevices::getSupportedConstraints): Remove bogus code.
        * Modules/mediastream/MediaDevices.h: Add DisplayCaptureSurfaceType.
        * Modules/mediastream/MediaDevices.idl: Ditto.

        * Modules/mediastream/MediaStreamTrack.cpp:
        (WebCore::MediaStreamTrack::getSettings const): Add a FIXME.
        * Modules/mediastream/MediaStreamTrack.h: Add displaySurface and logicalSurface.

        * Modules/mediastream/MediaTrackSupportedConstraints.h: Remove displaySurface and logicalSurface.
        * Modules/mediastream/MediaTrackSupportedConstraints.idl:

        * SourcesCocoa.txt: Add DisplayCaptureManagerCocoa.cpp and DisplayCaptureSourceCocoa.cpp.

        * WebCore.xcodeproj/project.pbxproj: Ditto.

        * platform/mediastream/CaptureDevice.h:
        (WebCore::CaptureDevice::encode const): Add.
        (WebCore::CaptureDevice::decode):

        * platform/mediastream/RealtimeMediaSourceCenter.cpp:
        (WebCore::RealtimeMediaSourceCenter::getMediaStreamDevices): Include display capture "devices".
        (WebCore::RealtimeMediaSourceCenter::validateRequestConstraints): Deal with display capture devices.
        (WebCore::RealtimeMediaSourceCenter::captureDeviceWithPersistentID): Ditto.
        * platform/mediastream/RealtimeMediaSourceCenter.h:

        * platform/mediastream/RealtimeMediaSourceSettings.h:
        (WebCore::RealtimeMediaSourceSettings::displaySurface const): Return a DisplaySurfaceType.
        (WebCore::RealtimeMediaSourceSettings::setDisplaySurface): Take a DisplaySurfaceType.

        * platform/mediastream/mac/DisplayCaptureManagerCocoa.cpp:
        (WebCore::DisplayCaptureManagerCocoa::singleton):
        (WebCore::DisplayCaptureManagerCocoa::~DisplayCaptureManagerCocoa):
        (WebCore::DisplayCaptureManagerCocoa::captureDevices):
        (WebCore::DisplayCaptureManagerCocoa::screenCaptureDeviceWithPersistentID):
        (WebCore::DisplayCaptureManagerCocoa::captureDeviceWithPersistentID):
        * platform/mediastream/mac/DisplayCaptureManagerCocoa.h:

        * platform/mediastream/mac/DisplayCaptureSourceCocoa.cpp: Added.
        (WebCore::DisplayCaptureSourceCocoa::DisplayCaptureSourceCocoa):
        (WebCore::DisplayCaptureSourceCocoa::~DisplayCaptureSourceCocoa):
        (WebCore::DisplayCaptureSourceCocoa::capabilities const):
        (WebCore::DisplayCaptureSourceCocoa::settings const):
        (WebCore::DisplayCaptureSourceCocoa::settingsDidChange):
        (WebCore::DisplayCaptureSourceCocoa::startProducingData):
        (WebCore::DisplayCaptureSourceCocoa::stopProducingData):
        (WebCore::DisplayCaptureSourceCocoa::elapsedTime):
        (WebCore::DisplayCaptureSourceCocoa::applyFrameRate):
        (WebCore::DisplayCaptureSourceCocoa::emitFrame):
        * platform/mediastream/mac/DisplayCaptureSourceCocoa.h:

        * platform/mediastream/mac/RealtimeMediaSourceCenterMac.cpp:
        (WebCore::RealtimeMediaSourceCenterMac::displayCaptureDeviceManager): New.
        * platform/mediastream/mac/RealtimeMediaSourceCenterMac.h:

        * platform/mock/MockRealtimeMediaSource.cpp:
        (WebCore::deviceMap): Add screen capture "devices".
        (WebCore::MockRealtimeMediaSource::displayDevices): New.
        * platform/mock/MockRealtimeMediaSource.h:

        * platform/mock/MockRealtimeMediaSourceCenter.cpp: Clean up includes.
        * platform/mock/MockRealtimeMediaSourceCenter.h:

        * platform/mock/MockRealtimeVideoSource.cpp:
        (WebCore::MockRealtimeVideoSource::MockRealtimeVideoSource): Mock two screen devices.
        (WebCore::MockRealtimeVideoSource::updateSettings): Deal with mock screens.
        (WebCore::MockRealtimeVideoSource::initializeCapabilities): Ditto.
        (WebCore::MockRealtimeVideoSource::initializeSupportedConstraints): Ditto.
        (WebCore::MockRealtimeVideoSource::drawText): Ditto.
        (WebCore::MockRealtimeVideoSource::generateFrame): Ditto.
        * platform/mock/MockRealtimeVideoSource.h:
        (WebCore::MockRealtimeVideoSource::mockCamera const):
        (WebCore::MockRealtimeVideoSource::mockScreen const):

2018-01-04  Youenn Fablet  <youenn@apple.com>

        FetchResponse should set its internal response text encoding name
        https://bugs.webkit.org/show_bug.cgi?id=181284

        Reviewed by Alex Christensen.

        Covered by rebased test.

        * Modules/fetch/FetchResponse.cpp:
        (WebCore::FetchResponse::create): Set response text encoding based on content type charset.

2018-01-04  John Wilander  <wilander@apple.com>

        Storage Access API: Remove JavaScript confirm() prompt from Document::requestStorageAccess()
        https://bugs.webkit.org/show_bug.cgi?id=181276
        <rdar://problem/36290463>

        Reviewed by Alex Christensen.

        No new tests. Existing test expectations updated.

        * dom/Document.cpp:
        (WebCore::Document::requestStorageAccess):

2018-01-04  Carlos Garcia Campos  <cgarcia@igalia.com>

        [GTK] Issues with Ahem's ex / x-height
        https://bugs.webkit.org/show_bug.cgi?id=180581

        Reviewed by Michael Catanzaro.

        Get the x-height value from the TT_OS2 table if available.

        Fixes: fast/text/break-word-pre-wrap.html
               imported/w3c/web-platform-tests/css/css-shapes-1/shape-outside/values/shape-outside-shape-arguments-000.html

        * platform/graphics/freetype/SimpleFontDataFreeType.cpp:
        (WebCore::Font::platformInit):

2018-01-04  Philippe Normand  <pnormand@igalia.com>

        Unreviewed, GTK build fix attempt after r226357

        * platform/graphics/gstreamer/GStreamerUtilities.h: The
        GST_BUFFER_DTS_OR_PTS macro was added in GStreamer 1.8 but old
        versions of Debian might not have this release yet.

2018-01-04  Youenn Fablet  <youenn@apple.com>

        Implement Cache API partitioning based on ClientOrigin
        https://bugs.webkit.org/show_bug.cgi?id=181240

        Reviewed by Alex Christensen.

        Covered by updated tests.

        Previously, cache storage was partitioned according the origin of the client, represented as a String.
        We now partition according both client and top origins, represented as a ClientOrigin

        Minor refactoring to use more makePendingActivity.
        Added support for IPC serialization of ClientOrigin.
        Added SecurityOriginData::toString which is used by WebKit2 Cache Storage implementation.

        * Modules/cache/CacheStorageConnection.cpp:
        (WebCore::CacheStorageConnection::open):
        (WebCore::CacheStorageConnection::retrieveCaches):
        * Modules/cache/CacheStorageConnection.h:
        (WebCore::CacheStorageConnection::clearMemoryRepresentation):
        (WebCore::CacheStorageConnection::doOpen):
        (WebCore::CacheStorageConnection::doRetrieveCaches):
        * Modules/cache/DOMCacheStorage.cpp:
        (WebCore::DOMCacheStorage::origin const):
        (WebCore::DOMCacheStorage::retrieveCaches):
        (WebCore::DOMCacheStorage::open):
        (WebCore::DOMCacheStorage::remove):
        * Modules/cache/DOMCacheStorage.h:
        * Modules/cache/WorkerCacheStorageConnection.cpp:
        (WebCore::WorkerCacheStorageConnection::doOpen):
        (WebCore::WorkerCacheStorageConnection::doRetrieveCaches):
        * Modules/cache/WorkerCacheStorageConnection.h:
        * page/ClientOrigin.h:
        (WebCore::ClientOrigin::isolatedCopy const):
        (WebCore::ClientOrigin::encode const):
        (WebCore::ClientOrigin::decode):
        * page/SecurityOriginData.cpp:
        (WebCore::SecurityOriginData::toString const):
        (WebCore::SecurityOriginData::debugString const): Deleted.
        * page/SecurityOriginData.h:
        (WebCore::SecurityOriginData::debugString const):
        * testing/Internals.cpp:
        (WebCore::Internals::clearCacheStorageMemoryRepresentation):

2018-01-04  Youenn Fablet  <youenn@apple.com>

        Service Worker should expose redirect mode for navigation loads as manual
        https://bugs.webkit.org/show_bug.cgi?id=181067

        Reviewed by Alex Christensen.

        Covered by rebased tests.

        * loader/CrossOriginAccessControl.cpp: Removing ContentType header only if affecting CORS checks.
        This allows extending header filtering in service worker to all modes, including Navigate.
        * workers/service/context/ServiceWorkerFetch.cpp:
        (WebCore::ServiceWorkerFetch::dispatchFetchEvent): Ideally, document loading code should set redirect to manual.
        Since it is not the case yet and that would require changes to various places, manual is set before exposing the corresponding fetch event.

2018-01-04  Youenn Fablet  <youenn@apple.com>

        ServiceWorkerThreadProxy::postTaskForModeToWorkerGlobalScope should be a no-op if worker is being terminated
        https://bugs.webkit.org/show_bug.cgi?id=181245

        Reviewed by Alex Christensen.

        Stop appending tasks to a terminating worker and returning false in that case.
        This mirrors what is done for regular workers.

        * workers/service/context/SWContextManager.cpp:
        (WebCore::SWContextManager::terminateWorker):
        * workers/service/context/ServiceWorkerThreadProxy.cpp:
        (WebCore::ServiceWorkerThreadProxy::postTaskForModeToWorkerGlobalScope):
        * workers/service/context/ServiceWorkerThreadProxy.h:

2018-01-04  Youenn Fablet  <youenn@apple.com>

        Cancel pending script loads when service worker is being terminated
        https://bugs.webkit.org/show_bug.cgi?id=181250

        Reviewed by Alex Christensen.

        Covered by service worker tests no longer crashing in ASAN builds.

        * workers/WorkerScriptLoader.cpp:
        (WebCore::WorkerScriptLoader::notifyFinished): Clearing loader when finished.
        (WebCore::WorkerScriptLoader::cancel): Implementing cancel of a script loader by cancelling the underlying threadable loader.
        * workers/WorkerScriptLoader.h:
        * workers/service/ServiceWorkerContainer.cpp: Canceling loads of all pending jobs.
        (WebCore::ServiceWorkerContainer::stop):
        * workers/service/ServiceWorkerJob.cpp:
        (WebCore::ServiceWorkerJob::cancelPendingLoad):
        * workers/service/ServiceWorkerJob.h:

2018-01-04  Youenn Fablet  <youenn@apple.com>

        Implement  https://fetch.spec.whatwg.org/#main-fetch default referrer policy setting
        https://bugs.webkit.org/show_bug.cgi?id=181239

        Reviewed by Alex Christensen.

        Covered by updated and rebased test.

        Setting the request referrer policy to the Document referrer policy if no one is set.
        If Document has no referrer policy, use no-referrer-when-downgrade as per the spec.

        * loader/cache/CachedResourceLoader.cpp:
        (WebCore::CachedResourceLoader::updateHTTPRequestHeaders):
        (WebCore::CachedResourceLoader::requestResource):
        * loader/cache/CachedResourceLoader.h:
        * loader/cache/CachedResourceRequest.cpp:
        (WebCore::CachedResourceRequest::updateReferrerPolicy):
        (WebCore::CachedResourceRequest::updateReferrerOriginAndUserAgentHeaders):
        * loader/cache/CachedResourceRequest.h:

2018-01-03  Wenson Hsieh  <wenson_hsieh@apple.com>

        [Attachment Support] Create attachment elements when dropping files on iOS
        https://bugs.webkit.org/show_bug.cgi?id=181192
        <rdar://problem/36280945>

        Reviewed by Tim Horton.

        Implements support for dropping data as attachment elements on iOS. See comments below for more detail.

        Tests:  WKAttachmentTests.InsertDroppedRichAndPlainTextFilesAsAttachments
                WKAttachmentTests.InsertDroppedZipArchiveAsAttachment
                WKAttachmentTests.InsertDroppedItemProvidersInOrder

        * WebCore.xcodeproj/project.pbxproj:
        * editing/WebContentReader.cpp:
        (WebCore::WebContentReader::ensureFragment):

        Add a new helper to create the WebContentReader's fragment, if it hasn't already been created.

        * editing/WebContentReader.h:
        * editing/cocoa/WebContentReaderCocoa.mm:
        (WebCore::WebContentReader::readFilePaths):

        Rename readFilenames to readFilePaths (which better reflects its parameters, which are file paths). Also, move
        the implementation of readFilePaths to shared iOS/macOS code in WebContentReaderCocoa, and remove the stub
        implementation on iOS.

        There's a bit of code here that I kept macOS-only which deals with inserting file paths as plain text in
        editable areas, but it's unclear to me why and if WebKit clients currently find this useful, so I left a FIXME
        to investigate removing this altogether. Code for handling this plain text insertion of file paths on Mac was
        introduced in r67403.

        * editing/ios/WebContentReaderIOS.mm:
        (WebCore::WebContentReader::readFilenames): Deleted.
        * editing/mac/WebContentReaderMac.mm:
        (WebCore::WebContentReader::readFilenames): Deleted.
        * page/mac/DragControllerMac.mm:
        (WebCore::DragController::updateSupportedTypeIdentifiersForDragHandlingMethod const):

        Teach DragController to accept all types conforming to "public.item" and "public.content" on iOS, only when
        attachment elements are enabled. This allows us to load content from item providers that we otherwise would not
        have loaded, since we now have the ability to fall back to attachment element insertion if the type is not have
        a default representation using standard web content.

        * platform/Pasteboard.h:
        * platform/PasteboardItemInfo.h: Added.
        (WebCore::PasteboardItemInfo::encode const):
        (WebCore::PasteboardItemInfo::decode):

        Add PasteboardItemInfo, a struct that describes an item on the pasteboard. Also, implement encoding and decoding
        support for PasteboardItemInfo. So far, the item info only describes file information about the pasteboard item,
        and flags indicating whether the item prefers attachment or inline presentation.

        * platform/PasteboardStrategy.h:

        Replace getFilenamesForDataInteraction with informationForItemAtIndex. Instead of returning all of the file
        paths associated with any item on the pasteboard, fetch a PasteboardItemInfo at a given item index, which
        includes information about the file path as well as some other metadata we'll need when deciding how to read
        pasteboard contents as a document fragment.

        * platform/PlatformPasteboard.h:
        * platform/cocoa/PasteboardCocoa.mm:
        (WebCore::Pasteboard::read):
        * platform/ios/AbstractPasteboard.h:
        * platform/ios/PasteboardIOS.mm:
        (WebCore::Pasteboard::read):
        (WebCore::Pasteboard::readRespectingUTIFidelities):

        Teach the iOS Pasteboard to read web content using attachment elements, if enabled. There are two scenarios in
        which we would want to insert an attachment element:
        (1) The item provider uses a preferred presentation style of attachment, in which case we bail out of trying to
            handle the drop using the default mechanisms, and simply insert it as an attachment. We need this to deal
            with the case where we drop text or HTML files from the Files app, so that we don't try and insert the
            contents of the text or HTML as inline web content.
        (2) The item provider doesn't have a preferred attachment presentation style, but there's nothing WebKit would
            otherwise do with the dropped content, so insert an attachment element as a fallback. Examples where this is
            relevant are dropping a PDF or ZIP archive without attachment presentation style explicitly set.
        We first check if we fall into case (1). If so, we can bail early by inserting an attachment; otherwise, we
        proceed normally and see if we can read the contents of the drop as web content. If, at the end of default drop
        handling, we don't still have a way to represent the dropped content, enter case (2).

        (WebCore::Pasteboard::readFilePaths):
        (WebCore::Pasteboard::readFilenames): Deleted.

        Rename readFilenames to readFilePaths, and reimplement it using informationForItemAtIndex.

        * platform/ios/PlatformPasteboardIOS.mm:
        (WebCore::pasteboardItemPresentationStyle):
        (WebCore::PlatformPasteboard::informationForItemAtIndex):
        (WebCore::PlatformPasteboard::filenamesForDataInteraction): Deleted.

        Implement informationForItemAtIndex and remove filenamesForDataInteraction. As before, we ask the pasteboard
        (i.e. WebItemProviderPasteboard) for information about dropped file URLs. This time, we limit this to a single
        file, so we don't end up creating multiple attachment elements for each representation of a single item
        provider. See below for -preferredFileUploadURLAtIndex:fileType: for more detail.

        * platform/ios/WebItemProviderPasteboard.h:
        * platform/ios/WebItemProviderPasteboard.mm:
        (-[WebItemProviderLoadResult initWithItemProvider:typesToLoad:]):
        (-[WebItemProviderLoadResult canBeRepresentedAsFileUpload]):

        Remove this synthesized instance variable and instead just check the item provider's preferredPresentationStyle.

        (-[WebItemProviderLoadResult description]):

        Add a verbose -description to the load result object. Useful for debugging what was content was loaded from an
        item provider on drop.

        (-[WebItemProviderPasteboard preferredFileUploadURLAtIndex:fileType:]):

        Return the highest fidelity loaded type identifier for a given item.

        (-[WebItemProviderPasteboard allDroppedFileURLs]):
        (-[WebItemProviderPasteboard typeIdentifiersToLoadForRegisteredTypeIdentfiers:]):

        Prefer flat RTFD to RTFD. In the case where attachments are enabled and we're accepting all types of content
        using attachment elements as a fallback representation, if the source writes attributed strings to the
        pasteboard with com.apple.rtfd at a higher fidelity than com.apple.flat-rtfd, we'll end up loading only
        com.apple.rtfd and dropping the text as an attachment element because we cannot convert the dropped content to
        markup. Instead, if flat RTFD is present in the item provider, always prefer that over RTFD so that dropping as
        regular web content isn't overridden when attachment elements are enabled.

        (-[WebItemProviderPasteboard doAfterLoadingProvidedContentIntoFileURLs:synchronousTimeout:]):
        (-[WebItemProviderPasteboard droppedFileURLs]): Deleted.
        * platform/mac/DragDataMac.mm:
        (WebCore::DragData::containsCompatibleContent const):

        DragData::containsCompatibleContent should be true when attachment elements are enabled, and there are files we
        can drop as attachment elements.

        * platform/mac/PasteboardMac.mm:
        (WebCore::Pasteboard::read):
        (WebCore::Pasteboard::readFilePaths):
        (WebCore::Pasteboard::readFilenames): Deleted.

2018-01-03  Ting-Wei Lan  <lantw44@gmail.com>

        Replace hard-coded paths in shebangs with #!/usr/bin/env
        https://bugs.webkit.org/show_bug.cgi?id=181040

        Reviewed by Alex Christensen.

        * bindings/scripts/InFilesCompiler.pm:
        * bindings/scripts/InFilesParser.pm:
        * bindings/scripts/generate-bindings-all.pl:
        * bindings/scripts/generate-bindings.pl:
        * bindings/scripts/preprocess-idls.pl:
        * css/make-css-file-arrays.pl:
        * css/makeprop.pl:
        * css/makevalues.pl:
        * dom/make_event_factory.pl:
        * dom/make_names.pl:
        * extract-localizable-strings.pl:
        * make-hash-tools.pl:

2018-01-03  Wenson Hsieh  <wenson_hsieh@apple.com>

        [Attachment Support] Add plumbing for starting a drag with promised blob data
        https://bugs.webkit.org/show_bug.cgi?id=181201

        Reviewed by Tim Horton.

        Adds logic to allow dragging an attachment element as a file by sending promised blob information to the UI
        process. See comments below for more detail.

        The only change in behavior is that dragging an attachment element will no longer write web content and injected
        bundle data to the pasteboard if the attachment element's file attribute is nonnull. This will cause one
        existing WK1 layout test to fail, but will otherwise not affect any attachment editing clients. On iOS,
        attachment elements in the Mail viewer can be dragged, but each attachment's file is null, so we fall back to
        current behavior; on macOS, Mail currently overrides the drag completely, beginning at -mouseDown:, so this
        doesn't make a difference to macOS Mail either.

        * editing/Editor.h:
        * editing/cocoa/EditorCocoa.mm:
        (WebCore::Editor::getPasteboardTypesAndDataForAttachment):

        Add a helper method to retrieve an attachment element as web archive data, for moving attachments within the
        same document. Also gives the injected editor bundle a chance to supply custom pasteboard types.

        * loader/EmptyClients.cpp:
        * page/DragClient.h:
        (WebCore::DragClient::prepareToDragPromisedBlob):

        Add new DragClient methods to send information about a promised blob to the UI process.

        * page/DragController.cpp:
        (WebCore::DragController::startDrag):

        Call dragAttachmentElement when starting a drag on an attachment element.

        (WebCore::DragController::dragAttachmentElement):

        Try to begin dragging a given attachment element, propagating promised blob information to the client layers.
        Returns true iff the attachment is backed by blob data (i.e. the file is nonnull).

        * platform/PromisedBlobInfo.h:

        Add a list of additional types and data to PromisedBlobInfo. In addition to the promised blob info, this would
        allow injected bundle data and other private types alongside the main attachment data on the pasteboard.

2018-01-03  Simon Fraser  <simon.fraser@apple.com>

        Remove the 'resolutionScale' parameter from ImageBufferDataCG get/putBytes
        https://bugs.webkit.org/show_bug.cgi?id=181268

        Reviewed by Alex Christensen.

        These functions were always called with resolutionScale=1.

        * platform/graphics/cg/ImageBufferCG.cpp:
        (WebCore::ImageBuffer::getUnmultipliedImageData const):
        (WebCore::ImageBuffer::getPremultipliedImageData const):
        (WebCore::ImageBuffer::putByteArray):
        * platform/graphics/cg/ImageBufferDataCG.cpp:
        (WebCore::ImageBufferData::getData const):
        (WebCore::ImageBufferData::putData):
        (WebCore::affineWarpBufferData): Deleted.
        * platform/graphics/cg/ImageBufferDataCG.h:

2018-01-03  John Wilander  <wilander@apple.com>

        Storage Access API: Refactor XPC for access removal to go straight from the web process to the network process
        https://bugs.webkit.org/show_bug.cgi?id=181270
        <rdar://problem/36289544>

        Reviewed by Alex Christensen.

        No new tests. Existing test re-enabled.

        This change refactors how the web process tells the network process
        to remove storage access. Previously, this was done over the UI process
        just like requests for storage access. But since no further reasoning
        is needed, the message should go straight from the web process to the
        network process for performance reasons and to minimize the risk of a
        race.

        As a consequence, the XPC code for storage access removal in the UI
        process is deleted.

        * platform/network/cf/NetworkStorageSessionCFNet.cpp:
        (WebCore::NetworkStorageSession::cookieStoragePartition const):
            Removes the storageAccessAPIEnabled check since the flag
            doesn't get propagated when the network process is created.
            Figuring this out will take some work which is unnecessary
            when we already gate access to the feature in Document.idl.

2018-01-03  James Craig  <jcraig@apple.com>

        AX: when invert colors is on, double-invert certain media elements in UserAgentStyleSheet
        https://bugs.webkit.org/show_bug.cgi?id=168447
        <rdar://problem/30559874>

        Reviewed by Simon Fraser.

        Double-invert video when platform 'invert colors' setting is enabled. Behavior matches 
        current 'Smart Invert' feature of Safari Reader on macOS/iOS and other iOS native apps.

        Tests: accessibility/smart-invert-reference.html
               accessibility/smart-invert.html

        * Modules/modern-media-controls/controls/media-controls.css:
        (@media (inverted-colors)):
        (:host):
        (picture):
        * css/html.css:
        (@media (inverted-colors)):
        (video):

2018-01-03  Youenn Fablet  <youenn@apple.com>

        LayoutTest http/tests/media/media-stream/disconnected-frame.html to consistently fail an assertion: !m_adoptionIsRequired
        https://bugs.webkit.org/show_bug.cgi?id=181264

        Reviewed by Eric Carlson.

        Covered by http/tests/media/media-stream/disconnected-frame.html not crashing anymore in Debug builds.
        Calling suspendIfNeeded in create method instead of constructor.

        * Modules/mediastream/UserMediaRequest.cpp:
        (WebCore::UserMediaRequest::create):
        (WebCore::UserMediaRequest::UserMediaRequest):

2018-01-03  Antti Koivisto  <antti@apple.com>

        Remove DeprecatedCSSOMValue::equals
        https://bugs.webkit.org/show_bug.cgi?id=181241

        Reviewed by Zalan Bujtas.

        This is dead code.

        * css/DeprecatedCSSOMValue.cpp:
        (WebCore::compareCSSOMValues): Deleted.
        (WebCore::DeprecatedCSSOMValue::equals const): Deleted.
        * css/DeprecatedCSSOMValue.h:
        (WebCore::DeprecatedCSSOMValue::operator== const): Deleted.
        (WebCore::DeprecatedCSSOMComplexValue::equals const): Deleted.
        * css/DeprecatedCSSOMValueList.cpp:
        (WebCore::DeprecatedCSSOMValueList::equals const): Deleted.
        * css/DeprecatedCSSOMValueList.h:

2018-01-03  Simon Fraser  <simon.fraser@apple.com>

        feLighting is broken with primitiveUnits="objectBoundingBox"
        https://bugs.webkit.org/show_bug.cgi?id=181197

        Reviewed by Tim Horton.

        With <filter primitiveUnits="objectBoundingBox"> we need to convert the coordinates
        of fePointLights and feSpotLights into user space coordinates. Following
        https://www.w3.org/TR/SVG/filters.html#FilterElementPrimitiveUnitsAttribute
        this is done by treating them as fractions of the bounding box on the referencing
        element, with treatment for z following https://www.w3.org/TR/SVG/coords.html#Units_viewport_percentage
        
        To do this, store the bounds of the referencing elemenet on SVGFilterBuilder as
        targetBoundingBox, and store the primitiveUnits type. Then do the conversion of lighting
        coordinates in SVGFESpecularLightingElement::build() and SVGFEDiffuseLightingElement::build().

        Remove SVGFELightElement::findLightSource(), since we need to be able to pass the SVGFilterBuilder
        to the lightSource() function so hoist the code up.

        Tests: svg/filters/feDiffuseLighting-fePointLight-primitiveUnits-objectBoundingBox-expected.svg
               svg/filters/feDiffuseLighting-fePointLight-primitiveUnits-objectBoundingBox.svg
               svg/filters/feDiffuseLighting-feSpotLight-primitiveUnits-objectBoundingBox-expected.svg
               svg/filters/feDiffuseLighting-feSpotLight-primitiveUnits-objectBoundingBox.svg
               svg/filters/feSpecularLighting-fePointLight-primitiveUnits-objectBoundingBox-expected.svg
               svg/filters/feSpecularLighting-fePointLight-primitiveUnits-objectBoundingBox.svg

        * rendering/svg/RenderSVGResourceFilter.cpp:
        (WebCore::RenderSVGResourceFilter::buildPrimitives const):
        * svg/SVGFEDiffuseLightingElement.cpp:
        (WebCore::SVGFEDiffuseLightingElement::build):
        * svg/SVGFEDistantLightElement.cpp:
        (WebCore::SVGFEDistantLightElement::lightSource const):
        * svg/SVGFEDistantLightElement.h:
        * svg/SVGFELightElement.cpp:
        (WebCore::SVGFELightElement::findLightSource): Deleted.
        * svg/SVGFELightElement.h:
        * svg/SVGFEPointLightElement.cpp:
        (WebCore::SVGFEPointLightElement::lightSource const):
        * svg/SVGFEPointLightElement.h:
        * svg/SVGFESpecularLightingElement.cpp:
        (WebCore::SVGFESpecularLightingElement::build):
        * svg/SVGFESpotLightElement.cpp:
        (WebCore::SVGFESpotLightElement::lightSource const):
        * svg/SVGFESpotLightElement.h:
        * svg/graphics/filters/SVGFilterBuilder.h:
        (WebCore::SVGFilterBuilder::setTargetBoundingBox):
        (WebCore::SVGFilterBuilder::targetBoundingBox const):
        (WebCore::SVGFilterBuilder::primitiveUnits const):
        (WebCore::SVGFilterBuilder::setPrimitiveUnits):

2018-01-03  Antti Koivisto  <antti@apple.com>

        Crash beneath CSSValue::equals @ csas.cz
        https://bugs.webkit.org/show_bug.cgi?id=181243
        <rdar://problem/35990826>

        Reviewed by Alex Christensen.

        Test: fast/text/oblique-degree-equals-crash.html

        * css/CSSFontStyleValue.cpp:
        (WebCore::CSSFontStyleValue::equals const):

        Null check both oblique pointers.

2018-01-03  Joseph Pecoraro  <pecoraro@apple.com>

        Web Inspector: Slow open time enumerating system fonts (FontCache::systemFontFamilies)
        https://bugs.webkit.org/show_bug.cgi?id=180979
        <rdar://problem/36146670>

        Reviewed by Matt Baker.

        * platform/graphics/cocoa/FontCacheCoreText.cpp:
        (fontNameIsSystemFont):
        (WebCore::FontCache::systemFontFamilies):
        Switch to the original Mac algorithm before r180979 that uses
        CTFontManagerCopyAvailableFontFamilyNames. Previously this wasn't
        available on iOS but now it is. This is a performance improvement on
        both platforms, but significantly so on macOS. It also finds more,
        valid, family names.

2018-01-03  Michael Catanzaro  <mcatanzaro@igalia.com>

        ASSERTION FAILED: !source || is<Target>(*source) in CoordinatedGraphicsLayer::removeFromParent
        https://bugs.webkit.org/show_bug.cgi?id=166568

        Reviewed by Simon Fraser.

        When a GraphicsLayer has a mask layer, it fails to properly unparent the mask layer before
        it is destroyed. This leaves the mask layer with a dangling parent pointer. Fix it, while
        taking care not to introduce yet another virtual function call during the execution of the
        destructor.

        * platform/graphics/GraphicsLayer.cpp:
        (WebCore::GraphicsLayer::willBeDestroyed):

2018-01-03  Simon Fraser  <simon.fraser@apple.com>

        SVG lighting filter lights are in the wrong coordinate system
        https://bugs.webkit.org/show_bug.cgi?id=181147

        Reviewed by Zalan Bujtas.

        Point and spot light coordinates weren't being converted into buffer-relative
        coordinates before being fed into the lighting math, resulting in incorrect light
        rendering on Retina devices, and when the filter primitive region was clipped.

        Fix by storing absoluteUnclippedSubregion on FilterEffect, which allows us to map
        lighting points from user space coordinates into the coordinates of the buffer being
        used for rendering. Also scale the light z coordinate by doing a dummy point mapping in x.

        Rename members of PointLightSource and SpotLightSource to make it clear which coordinate
        system they are in.

        Tests include HiDPI tests.

        Tests: svg/filters/fePointLight-coordinates-expected.svg
               svg/filters/fePointLight-coordinates.svg
               svg/filters/feSpotLight-coordinates-expected.svg
               svg/filters/feSpotLight-coordinates.svg
               svg/filters/hidpi/fePointLight-coordinates-expected.svg
               svg/filters/hidpi/fePointLight-coordinates.svg
               svg/filters/hidpi/feSpotLight-coordinates-expected.svg
               svg/filters/hidpi/feSpotLight-coordinates.svg

        * platform/graphics/FloatPoint3D.h: Make it easy to get and set the X and Y coords as a FloatPoint.
        (WebCore::FloatPoint3D::xy const):
        (WebCore::FloatPoint3D::setXY):
        * platform/graphics/GeometryUtilities.cpp:
        (WebCore::mapPoint):
        (WebCore::mapRect):
        * platform/graphics/GeometryUtilities.h: Helper to make a point between rects.
        * platform/graphics/filters/DistantLightSource.cpp:
        (WebCore::DistantLightSource::initPaintingData):
        * platform/graphics/filters/DistantLightSource.h:
        * platform/graphics/filters/FELighting.cpp:
        (WebCore::FELighting::drawLighting):
        * platform/graphics/filters/FilterEffect.cpp:
        (WebCore::FilterEffect::mapPointFromUserSpaceToBuffer const):
        * platform/graphics/filters/FilterEffect.h:
        (WebCore::FilterEffect::setUnclippedAbsoluteSubregion):
        * platform/graphics/filters/LightSource.h:
        * platform/graphics/filters/PointLightSource.cpp:
        (WebCore::PointLightSource::initPaintingData):
        (WebCore::PointLightSource::computePixelLightingData const):
        (WebCore::PointLightSource::setX):
        (WebCore::PointLightSource::setY):
        (WebCore::PointLightSource::setZ):
        * platform/graphics/filters/PointLightSource.h:
        (WebCore::PointLightSource::position const):
        (WebCore::PointLightSource::PointLightSource):
        * platform/graphics/filters/SpotLightSource.cpp:
        (WebCore::SpotLightSource::initPaintingData):
        (WebCore::SpotLightSource::computePixelLightingData const):
        (WebCore::SpotLightSource::setX):
        (WebCore::SpotLightSource::setY):
        (WebCore::SpotLightSource::setZ):
        (WebCore::SpotLightSource::setPointsAtX):
        (WebCore::SpotLightSource::setPointsAtY):
        (WebCore::SpotLightSource::setPointsAtZ):
        * platform/graphics/filters/SpotLightSource.h:
        (WebCore::SpotLightSource::position const):
        (WebCore::SpotLightSource::direction const):
        (WebCore::SpotLightSource::SpotLightSource):
        * rendering/svg/RenderSVGResourceFilter.cpp:
        (WebCore::RenderSVGResourceFilter::buildPrimitives const):
        * rendering/svg/RenderSVGResourceFilterPrimitive.cpp:
        (WebCore::RenderSVGResourceFilterPrimitive::determineFilterPrimitiveSubregion):

2018-01-03  Youenn Fablet  <youenn@apple.com>

        Select service worker for documents with data/blob URLS
        https://bugs.webkit.org/show_bug.cgi?id=181213

        Reviewed by Alex Christensen.

        Covered by updated test.

        Reusing the service worker of the parent for blob/data URL documents.

        * loader/DocumentLoader.cpp:
        (WebCore::isLocalURL):
        (WebCore::DocumentLoader::commitData):

2018-01-03  Ryan Haddad  <ryanhaddad@apple.com>

        Unreviewed, rolling out r226352.

        Breaks Sierra and El Capitan builds.

        Reverted changeset:

        "Web Inspector: Slow open time enumerating system fonts
        (FontCache::systemFontFamilies)"
        https://bugs.webkit.org/show_bug.cgi?id=180979
        https://trac.webkit.org/changeset/226352

2018-01-03  Philippe Normand  <pnormand@igalia.com>

        [GStreamer] The bus synchronous handler should be in the base player class
        https://bugs.webkit.org/show_bug.cgi?id=181237

        Reviewed by Carlos Garcia Campos.

        Because this is where video rendering is handled.

        No new tests, this is only a refactoring.

        * platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.cpp:
        (WebCore::MediaPlayerPrivateGStreamer::createGSTPlayBin):
        * platform/graphics/gstreamer/MediaPlayerPrivateGStreamerBase.cpp:
        (WebCore::MediaPlayerPrivateGStreamerBase::setPipeline):

2018-01-03  Philippe Normand  <pnormand@igalia.com>

        [GStreamer] move MediaSample implementation out of mse/
        https://bugs.webkit.org/show_bug.cgi?id=179165

        Reviewed by Carlos Garcia Campos.

        This module isn't specific to MSE and can potentially be reused
        elsewhere, for WebRTC for instance. Additionally the
        ::platformSample() method was implemented and the code was cleaned up.

        * platform/GStreamer.cmake:
        * platform/MediaSample.h:
        * platform/graphics/gstreamer/GStreamerMediaSample.cpp: Renamed from Source/WebCore/platform/graphics/gstreamer/mse/GStreamerMediaSample.cpp.
        (WebCore::GStreamerMediaSample::platformSample):
        * platform/graphics/gstreamer/GStreamerMediaSample.h: Renamed from Source/WebCore/platform/graphics/gstreamer/mse/GStreamerMediaSample.h.
        * platform/graphics/gstreamer/mse/PlaybackPipeline.cpp:
        (WebCore::PlaybackPipeline::enqueueSample):

2018-01-03  Carlos Garcia Campos  <cgarcia@igalia.com>

        Unreviewed. Fix resource load stats tests on GLib based ports after r226355.

        The monitor can be created in the work queue thread too.

        * platform/glib/FileMonitorGLib.cpp:
        (WebCore::FileMonitor::FileMonitor):

2018-01-03  Carlos Garcia Campos  <cgarcia@igalia.com>

        [GTK] Crash destroying WebCore::FileMonitor
        https://bugs.webkit.org/show_bug.cgi?id=181138

        Reviewed by Michael Catanzaro.

        Ensure that platform file monitor is always created and destroyed in the work queue thread synchronously.

        * platform/FileMonitor.h:
        * platform/glib/FileMonitorGLib.cpp:
        (WebCore::FileMonitor::FileMonitor):
        (WebCore::FileMonitor::~FileMonitor):
        (WebCore::FileMonitor::didChange):

2018-01-02  Joseph Pecoraro  <pecoraro@apple.com>

        Web Inspector: Slow open time enumerating system fonts (FontCache::systemFontFamilies)
        https://bugs.webkit.org/show_bug.cgi?id=180979
        <rdar://problem/36146670>

        Reviewed by Matt Baker.

        * platform/graphics/cocoa/FontCacheCoreText.cpp:
        (WebCore::FontCache::systemFontFamilies):
        Switch to the original Mac algorithm before r180979 that uses
        CTFontManagerCopyAvailableFontFamilyNames. Previously this wasn't
        available on iOS but now it is. This is a performance improvement on
        both platforms, but significantly so on macOS. It also finds more,
        valid, family names.

2018-01-02  Yusuke Suzuki  <utatane.tea@gmail.com>

        Unreviewed, fix GCC warning by using #include
        https://bugs.webkit.org/show_bug.cgi?id=181189

        This file is included in C++ files. Use #include instead of #import to suppress warning in GCC.

        * platform/PromisedBlobInfo.h:

2017-12-28  Yusuke Suzuki  <utatane.tea@gmail.com>

        Remove std::chrono completely
        https://bugs.webkit.org/show_bug.cgi?id=181186

        Reviewed by Alex Christensen.

        Use MonotonicTime, WallTime, and Seconds instead.
        Changes are mechanical ones. But persistent network cache data is changed.
        So we bump the version number of the cache storage.

        * Modules/indexeddb/server/IDBServer.cpp:
        (WebCore::IDBServer::IDBServer::closeAndDeleteDatabasesModifiedSince):
        (WebCore::IDBServer::removeAllDatabasesForOriginPath):
        (WebCore::IDBServer::IDBServer::performCloseAndDeleteDatabasesModifiedSince):
        (WebCore::IDBServer::IDBServer::performCloseAndDeleteDatabasesForOrigins):
        * Modules/indexeddb/server/IDBServer.h:
        * Modules/webdatabase/DatabaseTracker.cpp:
        (WebCore::DatabaseTracker::deleteDatabasesModifiedSince):
        * Modules/webdatabase/DatabaseTracker.h:
        * dom/Document.cpp:
        (WebCore::Document::lastModified):
        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::clearMediaCache):
        * html/HTMLMediaElement.h:
        (WebCore::HTMLMediaElement::clearMediaCache):
        * loader/CrossOriginPreflightResultCache.cpp:
        (WebCore::parseAccessControlMaxAge):
        (WebCore::CrossOriginPreflightResultCacheItem::parse):
        (WebCore::CrossOriginPreflightResultCacheItem::allowsRequest const):
        * loader/CrossOriginPreflightResultCache.h:
        * loader/cache/CachedResource.cpp:
        (WebCore::CachedResource::CachedResource):
        (WebCore::CachedResource::freshnessLifetime const):
        (WebCore::CachedResource::responseReceived):
        (WebCore::CachedResource::updateResponseAfterRevalidation):
        * loader/cache/CachedResource.h:
        * platform/FileSystem.cpp:
        (WebCore::FileSystem::getFileModificationTime):
        * platform/FileSystem.h:
        * platform/SearchPopupMenu.h:
        * platform/cocoa/SearchPopupMenuCocoa.h:
        * platform/cocoa/SearchPopupMenuCocoa.mm:
        (WebCore::toSystemClockTime):
        (WebCore::toNSDateFromSystemClock):
        (WebCore::removeRecentlyModifiedRecentSearches):
        * platform/graphics/MediaPlayer.cpp:
        (WebCore::MediaPlayer::clearMediaCache):
        * platform/graphics/MediaPlayer.h:
        * platform/graphics/MediaPlayerPrivate.h:
        (WebCore::MediaPlayerPrivateInterface::clearMediaCache):
        * platform/graphics/avfoundation/objc/MediaPlayerPrivateAVFoundationObjC.h:
        * platform/graphics/avfoundation/objc/MediaPlayerPrivateAVFoundationObjC.mm:
        (WebCore::toSystemClockTime):
        (WebCore::MediaPlayerPrivateAVFoundationObjC::clearMediaCache):
        * platform/graphics/mac/MediaPlayerPrivateQTKit.h:
        * platform/graphics/mac/MediaPlayerPrivateQTKit.mm:
        (WebCore::MediaPlayerPrivateQTKit::clearMediaCache):
        * platform/network/CacheValidation.cpp:
        (WebCore::computeCurrentAge):
        (WebCore::computeFreshnessLifetimeForHTTPFamily):
        (WebCore::updateRedirectChainStatus):
        (WebCore::redirectChainAllowsReuse):
        (WebCore::parseCacheControlDirectives):
        * platform/network/CacheValidation.h:
        (WebCore::RedirectChainCacheStatus::RedirectChainCacheStatus):
        * platform/network/HTTPParsers.cpp:
        (WebCore::parseHTTPDate):
        * platform/network/HTTPParsers.h:
        * platform/network/PlatformCookieJar.h:
        * platform/network/ResourceResponseBase.cpp:
        (WebCore::ResourceResponseBase::cacheControlMaxAge const):
        (WebCore::parseDateValueInHeader):
        (WebCore::ResourceResponseBase::date const):
        (WebCore::ResourceResponseBase::age const):
        (WebCore::ResourceResponseBase::expires const):
        (WebCore::ResourceResponseBase::lastModified const):
        * platform/network/ResourceResponseBase.h:
        * platform/network/cf/CookieJarCFNet.cpp:
        (WebCore::deleteAllCookiesModifiedSince):
        * platform/network/curl/CookieJarCurl.cpp:
        (WebCore::CookieJarCurlFileSystem::deleteAllCookiesModifiedSince):
        (WebCore::deleteAllCookiesModifiedSince):
        * platform/network/curl/CookieJarCurl.h:
        * platform/network/curl/CurlCacheEntry.cpp:
        (WebCore::CurlCacheEntry::CurlCacheEntry):
        (WebCore::CurlCacheEntry::isCached):
        (WebCore::CurlCacheEntry::parseResponseHeaders):
        * platform/network/curl/CurlCacheEntry.h:
        * platform/network/mac/CookieJarMac.mm:
        (WebCore::deleteAllCookiesModifiedSince):
        * platform/network/soup/CookieJarSoup.cpp:
        (WebCore::deleteAllCookiesModifiedSince):
        * platform/win/SearchPopupMenuWin.cpp:
        (WebCore::SearchPopupMenuWin::loadRecentSearches):
        * rendering/RenderSearchField.cpp:
        (WebCore::RenderSearchField::addSearchResult):

2018-01-02  Wenson Hsieh  <wenson_hsieh@apple.com>

        [Attachment Support] Introduce data structures and IPC support for writing promised blobs
        https://bugs.webkit.org/show_bug.cgi?id=181189

        Reviewed by Tim Horton.

        Introduces a new header containing structs to be used for writing blob data when dragging. PromisedBlobInfo
        represents information needed to declare data on the pasteboard that will eventually be provided via a Blob.
        This includes the type and filename of the Blob-backed content. PromisedBlobData represents information needed
        to actually deliver the Blob's content to the platform, and is sent some time after its corresponding
        PromisedBlobInfo. The content may either be in the form of a file path (as is the case using the previous
        declareAndWriteAttachment codepath) or a data buffer (which we would use if the Blob is not already backed by a
        file on disk).

        No new tests, since there is no observable change in functionality yet.

        * WebCore.xcodeproj/project.pbxproj:
        * platform/PromisedBlobInfo.h: Added.
        (WebCore::PromisedBlobInfo::operator bool const):
        (WebCore::PromisedBlobData::hasData const):
        (WebCore::PromisedBlobData::hasFile const):
        (WebCore::PromisedBlobData::operator bool const):
        (WebCore::PromisedBlobData::fulfills const):

2018-01-02  Brady Eidson  <beidson@apple.com>

        Make MessagePortChannel::takeAllMessagesFromRemote asynchronous.
        https://bugs.webkit.org/show_bug.cgi?id=181205

        Reviewed by Alex Christensen.

        No new tests (No behavior change)

        This is needed for the ongoing WK2 MessagePort work.

        For WK1 in-process MessagePorts it is still synchronous; no behavior change.

        * dom/InProcessMessagePortChannel.cpp:
        (WebCore::InProcessMessagePortChannel::takeAllMessagesFromRemote):
        * dom/InProcessMessagePortChannel.h:

        * dom/MessagePort.cpp:
        (WebCore::MessagePort::dispatchMessages):
        * dom/MessagePortChannel.h:

2018-01-02  Jiewen Tan  <jiewen_tan@apple.com>

        Add a WebAuthentication runtime feature flag
        https://bugs.webkit.org/show_bug.cgi?id=181220
        <rdar://problem/36055305>

        Reviewed by Brent Fulgham.

        This patch basically renames the CredentialManagement runtime feature flag into
        WebAuthentication runtime feature flag.

        No tests.

        * Modules/credentialmanagement/BasicCredential.idl:
        * Modules/credentialmanagement/CredentialsContainer.idl:
        * Modules/credentialmanagement/NavigatorCredentials.idl:
        * Modules/webauthn/PublicKeyCredential.idl:
        * page/RuntimeEnabledFeatures.h:
        (WebCore::RuntimeEnabledFeatures::setWebAuthenticationEnabled):
        (WebCore::RuntimeEnabledFeatures::webAuthenticationEnabled const):
        (WebCore::RuntimeEnabledFeatures::setCredentialManagementEnabled): Deleted.
        (WebCore::RuntimeEnabledFeatures::credentialManagementEnabled const): Deleted.

2018-01-02  Wenson Hsieh  <wenson_hsieh@apple.com>

        [Attachment Support] Don't Blob-convert images and attachments with https:, http: or data: urls
        https://bugs.webkit.org/show_bug.cgi?id=181143
        <rdar://problem/36200381>

        Reviewed by Tim Horton.

        Clients such as Mail would expect pasting or dropping an image with src="https://..." to result in the source
        URL being preserved (i.e. staying as remote images) instead of creating image attachments out of them. This
        patch hooks into the shouldConvertToBlob() check added in r226272 so that it applies to attachment element
        replacement as well.

        Test: WKAttachmentTests.DoNotInsertDataURLImagesAsAttachments

        * editing/cocoa/WebContentReaderCocoa.mm:
        (WebCore::shouldConvertToBlob):
        (WebCore::replaceRichContentWithAttachments):

2018-01-02  Brady Eidson  <beidson@apple.com>

        Identify MessagePorts by a globally unique MessagePortIdentifier.
        https://bugs.webkit.org/show_bug.cgi?id=181172

        Reviewed by Alex Christensen.

        No new tests (Behavior change covered by all existing tests).

        This cleans up the abstract MessagePortChannel interface to be in terms of identifiers
        instead of actual MessagePort objects.
        
        The identifiers are compounded with the current ProcessIdentifier meaning they are global
        across all processes for the running UI process, enabling easy cross-process communication.
        
        (Actual cross-process communication comes in a followup)
        
        * WebCore.xcodeproj/project.pbxproj:
        
        * dom/InProcessMessagePortChannel.cpp:
        (WebCore::InProcessMessagePortChannel::createChannelBetweenPorts):
        (WebCore::InProcessMessagePortChannel::isConnectedTo):
        (WebCore::InProcessMessagePortChannel::entangleWithRemoteIfOpen):
        (WebCore::InProcessMessagePortChannel::entangleIfOpen): Deleted.
        * dom/InProcessMessagePortChannel.h:
        
        * dom/MessageChannel.cpp:
        (WebCore::MessageChannel::MessageChannel):
        (WebCore::m_port2):
        
        * dom/MessagePort.cpp:
        (WebCore::allMessagePortsLock):
        (WebCore::MessagePort::ref const):
        (WebCore::MessagePort::deref const):
        (WebCore::MessagePort::existingMessagePortForIdentifier):
        (WebCore::MessagePort::MessagePort):
        (WebCore::MessagePort::~MessagePort):
        (WebCore::MessagePort::postMessage):
        (WebCore::MessagePort::entangleWithRemote):
        (WebCore::MessagePort::entanglePorts):
        (WebCore::MessagePort::entangle): Deleted.
        * dom/MessagePort.h:
        
        * dom/MessagePortChannel.h:
        
        * dom/MessagePortIdentifier.h: Added.
        (WebCore::operator==):
        (WebCore::MessagePortIdentifier::encode const):
        (WebCore::MessagePortIdentifier::decode):
        (WebCore::MessagePortIdentifier::hash const):
        (WTF::MessagePortIdentifierHash::hash):
        (WTF::MessagePortIdentifierHash::equal):
        (WTF::HashTraits<WebCore::MessagePortIdentifier>::emptyValue):
        (WTF::HashTraits<WebCore::MessagePortIdentifier>::constructDeletedValue):
        (WTF::HashTraits<WebCore::MessagePortIdentifier>::isDeletedValue):

2018-01-02  Youenn Fablet  <youenn@apple.com>

        Memory cache should not reuse resources with different credential fetch option
        https://bugs.webkit.org/show_bug.cgi?id=181212

        Reviewed by Alex Christensen.

        Covered by rebased test.

        * loader/cache/CachedResourceLoader.cpp:
        (WebCore::CachedResourceLoader::determineRevalidationPolicy const):

2018-01-02  Jiewen Tan  <jiewen_tan@apple.com>

        Update Credential Management API for WebAuthentication
        https://bugs.webkit.org/show_bug.cgi?id=181082
        <rdar://problem/36055239>

        Reviewed by Brent Fulgham.

        Part 2/2

        This patch implements Core API from Credential Management API: https://www.w3.org/TR/credential-management-1/#core.
        which is required by WebAuthN. It also sets the CredentialManagement runtime flag to enable testing. Note that it
        introduces a dummy PublicKeyCredential interface for testing functionalities of the Credential interface, which
        cannot be instantiated.

        Tests: http/wpt/credential-management/credentialscontainer-create-basics.https.html
               http/wpt/credential-management/credentialscontainer-get-basics.https.html
               http/wpt/credential-management/credentialscontainer-preventSilentAccess-basics.https.html
               http/wpt/credential-management/idl.https.html

        * CMakeLists.txt:
        * DerivedSources.make:
        * Modules/credentialmanagement/BasicCredential.cpp:
        (WebCore::BasicCredential::BasicCredential):
        (WebCore::BasicCredential::type const):
        * Modules/credentialmanagement/BasicCredential.h:
        (WebCore::BasicCredential::discovery const):
        * Modules/credentialmanagement/BasicCredential.idl:
        * Modules/credentialmanagement/CredentialCreationOptions.h:
        * Modules/credentialmanagement/CredentialCreationOptions.idl:
        * Modules/credentialmanagement/CredentialRequestOptions.h:
        * Modules/credentialmanagement/CredentialRequestOptions.idl:
        * Modules/credentialmanagement/CredentialsContainer.cpp:
        (WebCore::CredentialsContainer::CredentialsContainer):
        (WebCore::CredentialsContainer::isSameOriginWithItsAncestors):
        (WebCore::CredentialsContainer::dispatchTask):
        (WebCore::CredentialsContainer::get):
        (WebCore::CredentialsContainer::store):
        (WebCore::CredentialsContainer::isCreate):
        (WebCore::CredentialsContainer::preventSilentAccess):
        * Modules/credentialmanagement/CredentialsContainer.h:
        (WebCore::CredentialsContainer::create):
        (WebCore::CredentialsContainer::CredentialsContainer): Deleted.
        * Modules/credentialmanagement/CredentialsContainer.idl:
        * Modules/credentialmanagement/NavigatorCredentials.cpp:
        (WebCore::NavigatorCredentials::credentials):
        * Modules/credentialmanagement/NavigatorCredentials.h:
        * Modules/credentialmanagement/NavigatorCredentials.idl:
        * Modules/webauthn/PublicKeyCredential.cpp: Copied from Source/WebCore/Modules/credentialmanagement/BasicCredential.cpp.
        (WebCore::PublicKeyCredential::PublicKeyCredential):
        (WebCore::PublicKeyCredential::collectFromCredentialStore):
        (WebCore::PublicKeyCredential::discoverFromExternalSource):
        (WebCore::PublicKeyCredential::store):
        (WebCore::PublicKeyCredential::create):
        * Modules/webauthn/PublicKeyCredential.h: Copied from Source/WebCore/Modules/credentialmanagement/BasicCredential.cpp.
        * Modules/webauthn/PublicKeyCredential.idl: Copied from Source/WebCore/Modules/credentialmanagement/BasicCredential.idl.
        * Sources.txt:
        * WebCore.xcodeproj/project.pbxproj:
        * bindings/js/WebCoreBuiltinNames.h:
        * page/RuntimeEnabledFeatures.h:

2018-01-02  Oleksandr Skachkov  <gskachkov@gmail.com>

        WebAssembly: sending module to iframe fails
        https://bugs.webkit.org/show_bug.cgi?id=179263

        Reviewed by JF Bastien.

        Allow use WebAssembly.Module as input parameters for postMessage 
        in window and iframe object. To prevent sending message to iframe
        that is not ready, in iframe-* test we are waiting message from
        iframe only after that we send message to it.   

        Tests: wasm/iframe-parent-postmessage.html
               wasm/iframe-postmessage.html
               wasm/window-postmessage.html

        * bindings/js/SerializedScriptValue.cpp:
        (WebCore::CloneSerializer::dumpIfTerminal):
        * bindings/js/SerializedScriptValue.h:
        * page/DOMWindow.cpp:
        (WebCore::DOMWindow::postMessage):

== Rolled over to ChangeLog-2018-01-01 ==
