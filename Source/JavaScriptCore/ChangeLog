2018-01-30  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r227617. rdar://problem/37019352

    2018-01-25  Filip Pizlo  <fpizlo@apple.com>

            JSC GC should support TLCs (thread local caches)
            https://bugs.webkit.org/show_bug.cgi?id=181559

            Reviewed by Mark Lam and Saam Barati.

            This is a big step towards object distancing by site origin. This patch implements TLCs, or
            thread-local caches, which allow each thread to allocate from its own free lists. It also
            means that any given thread can context-switch TLCs. This will allow us to do separate
            allocation for separate site origins. Eventually, once we reshape how MarkedBlock looks, this
            will allow us to have a hard distancing constraint between objects from different origins.

            In this new design, every "size class" is represented as a BlockDirectory (formerly known as
            MarkedAllocator, prior to r226822). This contains a bag of blocks allocated using some
            aligned memory allocator (which roughly represents which cage you came out of), and anyone
            using the same allocator can share those blocks - but so long as they are in that
            BlockDirectory, they will have the size and type of that directory. Previously, each
            BlockDirectory had exactly one FreeList. Now, each BlockDirectory has a double-linked-list of
            LocalAllocators, each of which has a FreeList.

            To decide which LocalAllocator to allocate out of, we need a ThreadLocalCache and a
            BlockDirectory. The directory gives us an offset-within-the-ThreadLocalCache, which we simply
            call the Allocator (which is just a POD type that contains a 32-bit offset). Each allocation
            starts by figuring out what Allocator it wants (often we have this information at JIT time).
            Then the allocation loads its ThreadLocalCache::Data from a fast TLS slot. Then we add the
            Allocator offset to the ThreadLocalCache::Data to get the LocalAllocator. Note that we use
            offsets as opposed to indices to make it easy to do the math on each allocation (if
            LocalAllocator had a weird size then every allocation would have to do an imul).

            This is a definite slow-down on GC-heavy benchmarks, but by a small margin, and only on
            unusually heavy tests. For example, boyer and splay are both 3% regressed, but the Octane
            geomean is just fine. The JetStream score regressed by 0.5% with p = 0.08 (so maybe there is
            something there, but it's not significant according to our threshold).

            Relanding after fixing ARM64 bug in AssemblyHelpers::emitAllocateWithNonNullAllocator(). That
            function needs to be careful to avoid using the scratch register because the FTL will call it
            in disallow-scratch-register mode.

            * JavaScriptCore.xcodeproj/project.pbxproj:
            * Sources.txt:
            * b3/B3LowerToAir.cpp:
            * b3/B3PatchpointSpecial.cpp:
            (JSC::B3::PatchpointSpecial::admitsStack):
            * b3/B3StackmapSpecial.cpp:
            (JSC::B3::StackmapSpecial::forEachArgImpl):
            (JSC::B3::StackmapSpecial::isArgValidForRep):
            * b3/B3StackmapValue.cpp:
            (JSC::B3::StackmapValue::appendSomeRegisterWithClobber):
            * b3/B3StackmapValue.h:
            * b3/B3Validate.cpp:
            * b3/B3ValueRep.cpp:
            (JSC::B3::ValueRep::addUsedRegistersTo const):
            (JSC::B3::ValueRep::dump const):
            (WTF::printInternal):
            * b3/B3ValueRep.h:
            (JSC::B3::ValueRep::ValueRep):
            * bytecode/AccessCase.cpp:
            (JSC::AccessCase::generateImpl):
            * bytecode/ObjectAllocationProfile.h:
            (JSC::ObjectAllocationProfile::ObjectAllocationProfile):
            (JSC::ObjectAllocationProfile::clear):
            * bytecode/ObjectAllocationProfileInlines.h:
            (JSC::ObjectAllocationProfile::initializeProfile):
            * dfg/DFGSpeculativeJIT.cpp:
            (JSC::DFG::SpeculativeJIT::emitAllocateRawObject):
            (JSC::DFG::SpeculativeJIT::compileMakeRope):
            (JSC::DFG::SpeculativeJIT::compileAllocatePropertyStorage):
            (JSC::DFG::SpeculativeJIT::compileReallocatePropertyStorage):
            (JSC::DFG::SpeculativeJIT::compileCreateThis):
            (JSC::DFG::SpeculativeJIT::compileNewObject):
            * dfg/DFGSpeculativeJIT.h:
            (JSC::DFG::SpeculativeJIT::emitAllocateJSCell):
            (JSC::DFG::SpeculativeJIT::emitAllocateJSObject):
            * ftl/FTLAbstractHeapRepository.h:
            * ftl/FTLLowerDFGToB3.cpp:
            (JSC::FTL::DFG::LowerDFGToB3::compileMakeRope):
            (JSC::FTL::DFG::LowerDFGToB3::compileMaterializeNewObject):
            (JSC::FTL::DFG::LowerDFGToB3::allocatePropertyStorageWithSizeImpl):
            (JSC::FTL::DFG::LowerDFGToB3::allocateHeapCell):
            (JSC::FTL::DFG::LowerDFGToB3::allocateObject):
            (JSC::FTL::DFG::LowerDFGToB3::allocatorForSize):
            (JSC::FTL::DFG::LowerDFGToB3::allocateVariableSizedObject):
            (JSC::FTL::DFG::LowerDFGToB3::allocateVariableSizedCell):
            * heap/Allocator.cpp: Added.
            (JSC::Allocator::cellSize const):
            * heap/Allocator.h: Added.
            (JSC::Allocator::Allocator):
            (JSC::Allocator::offset const):
            (JSC::Allocator::operator== const):
            (JSC::Allocator::operator!= const):
            (JSC::Allocator::operator bool const):
            * heap/AllocatorInlines.h: Added.
            (JSC::Allocator::allocate const):
            (JSC::Allocator::tryAllocate const):
            * heap/BlockDirectory.cpp:
            (JSC::BlockDirectory::BlockDirectory):
            (JSC::BlockDirectory::findBlockForAllocation):
            (JSC::BlockDirectory::stopAllocating):
            (JSC::BlockDirectory::prepareForAllocation):
            (JSC::BlockDirectory::stopAllocatingForGood):
            (JSC::BlockDirectory::resumeAllocating):
            (JSC::BlockDirectory::endMarking):
            (JSC::BlockDirectory::isFreeListedCell):
            (JSC::BlockDirectory::didConsumeFreeList): Deleted.
            (JSC::BlockDirectory::tryAllocateWithoutCollecting): Deleted.
            (JSC::BlockDirectory::allocateIn): Deleted.
            (JSC::BlockDirectory::tryAllocateIn): Deleted.
            (JSC::BlockDirectory::doTestCollectionsIfNeeded): Deleted.
            (JSC::BlockDirectory::allocateSlowCase): Deleted.
            * heap/BlockDirectory.h:
            (JSC::BlockDirectory::cellKind const):
            (JSC::BlockDirectory::allocator const):
            (JSC::BlockDirectory::freeList const): Deleted.
            (JSC::BlockDirectory::offsetOfFreeList): Deleted.
            (JSC::BlockDirectory::offsetOfCellSize): Deleted.
            * heap/BlockDirectoryInlines.h:
            (JSC::BlockDirectory::isFreeListedCell const): Deleted.
            (JSC::BlockDirectory::allocate): Deleted.
            * heap/CompleteSubspace.cpp:
            (JSC::CompleteSubspace::CompleteSubspace):
            (JSC::CompleteSubspace::allocatorFor):
            (JSC::CompleteSubspace::allocate):
            (JSC::CompleteSubspace::allocateNonVirtual):
            (JSC::CompleteSubspace::allocatorForSlow):
            (JSC::CompleteSubspace::allocateSlow):
            (JSC::CompleteSubspace::tryAllocateSlow):
            * heap/CompleteSubspace.h:
            (JSC::CompleteSubspace::allocatorForSizeStep):
            (JSC::CompleteSubspace::allocatorForNonVirtual):
            * heap/FreeList.h:
            * heap/GCDeferralContext.h:
            * heap/Heap.cpp:
            (JSC::Heap::Heap):
            (JSC::Heap::lastChanceToFinalize):
            * heap/Heap.h:
            (JSC::Heap::threadLocalCacheLayout):
            * heap/IsoCellSet.h:
            * heap/IsoSubspace.cpp:
            (JSC::IsoSubspace::IsoSubspace):
            (JSC::IsoSubspace::allocatorFor):
            (JSC::IsoSubspace::allocate):
            (JSC::IsoSubspace::allocateNonVirtual):
            * heap/IsoSubspace.h:
            (JSC::IsoSubspace::allocatorForNonVirtual):
            * heap/LocalAllocator.cpp: Added.
            (JSC::LocalAllocator::LocalAllocator):
            (JSC::LocalAllocator::reset):
            (JSC::LocalAllocator::~LocalAllocator):
            (JSC::LocalAllocator::stopAllocating):
            (JSC::LocalAllocator::resumeAllocating):
            (JSC::LocalAllocator::prepareForAllocation):
            (JSC::LocalAllocator::stopAllocatingForGood):
            (JSC::LocalAllocator::allocateSlowCase):
            (JSC::LocalAllocator::didConsumeFreeList):
            (JSC::LocalAllocator::tryAllocateWithoutCollecting):
            (JSC::LocalAllocator::allocateIn):
            (JSC::LocalAllocator::tryAllocateIn):
            (JSC::LocalAllocator::doTestCollectionsIfNeeded):
            (JSC::LocalAllocator::isFreeListedCell const):
            * heap/LocalAllocator.h: Added.
            (JSC::LocalAllocator::offsetOfFreeList):
            (JSC::LocalAllocator::offsetOfCellSize):
            * heap/LocalAllocatorInlines.h: Added.
            (JSC::LocalAllocator::allocate):
            * heap/MarkedSpace.cpp:
            (JSC::MarkedSpace::stopAllocatingForGood):
            * heap/MarkedSpace.h:
            * heap/SlotVisitor.cpp:
            * heap/SlotVisitor.h:
            * heap/Subspace.h:
            * heap/ThreadLocalCache.cpp: Added.
            (JSC::ThreadLocalCache::create):
            (JSC::ThreadLocalCache::ThreadLocalCache):
            (JSC::ThreadLocalCache::~ThreadLocalCache):
            (JSC::ThreadLocalCache::allocateData):
            (JSC::ThreadLocalCache::destroyData):
            (JSC::ThreadLocalCache::installSlow):
            (JSC::ThreadLocalCache::installData):
            (JSC::ThreadLocalCache::allocatorSlow):
            (JSC::ThreadLocalCache::destructor):
            * heap/ThreadLocalCache.h: Added.
            (JSC::ThreadLocalCache::offsetOfSize):
            (JSC::ThreadLocalCache::offsetOfFirstAllocator):
            * heap/ThreadLocalCacheInlines.h: Added.
            (JSC::ThreadLocalCache::getImpl):
            (JSC::ThreadLocalCache::get):
            (JSC::ThreadLocalCache::install):
            (JSC::ThreadLocalCache::allocator):
            (JSC::ThreadLocalCache::tryGetAllocator):
            * heap/ThreadLocalCacheLayout.cpp: Added.
            (JSC::ThreadLocalCacheLayout::ThreadLocalCacheLayout):
            (JSC::ThreadLocalCacheLayout::~ThreadLocalCacheLayout):
            (JSC::ThreadLocalCacheLayout::allocateOffset):
            (JSC::ThreadLocalCacheLayout::snapshot):
            (JSC::ThreadLocalCacheLayout::directory):
            * heap/ThreadLocalCacheLayout.h: Added.
            * jit/AssemblyHelpers.cpp:
            (JSC::AssemblyHelpers::emitAllocateWithNonNullAllocator):
            (JSC::AssemblyHelpers::emitAllocate):
            (JSC::AssemblyHelpers::emitAllocateVariableSized):
            * jit/AssemblyHelpers.h:
            (JSC::AssemblyHelpers::vm):
            (JSC::AssemblyHelpers::emitAllocateJSCell):
            (JSC::AssemblyHelpers::emitAllocateJSObject):
            (JSC::AssemblyHelpers::emitAllocateJSObjectWithKnownSize):
            (JSC::AssemblyHelpers::emitAllocateWithNonNullAllocator): Deleted.
            (JSC::AssemblyHelpers::emitAllocate): Deleted.
            (JSC::AssemblyHelpers::emitAllocateVariableSized): Deleted.
            * jit/JITOpcodes.cpp:
            (JSC::JIT::emit_op_new_object):
            (JSC::JIT::emit_op_create_this):
            * jit/JITOpcodes32_64.cpp:
            (JSC::JIT::emit_op_new_object):
            (JSC::JIT::emit_op_create_this):
            * runtime/ButterflyInlines.h:
            (JSC::Butterfly::createUninitialized):
            (JSC::Butterfly::tryCreate):
            (JSC::Butterfly::growArrayRight):
            * runtime/DirectArguments.cpp:
            (JSC::DirectArguments::overrideThings):
            * runtime/GenericArgumentsInlines.h:
            (JSC::GenericArguments<Type>::initModifiedArgumentsDescriptor):
            * runtime/HashMapImpl.h:
            (JSC::HashMapBuffer::create):
            * runtime/JSArray.cpp:
            (JSC::JSArray::tryCreateUninitializedRestricted):
            (JSC::JSArray::unshiftCountSlowCase):
            * runtime/JSArray.h:
            (JSC::JSArray::tryCreate):
            * runtime/JSArrayBufferView.cpp:
            (JSC::JSArrayBufferView::ConstructionContext::ConstructionContext):
            * runtime/JSCellInlines.h:
            (JSC::tryAllocateCellHelper):
            * runtime/JSGlobalObject.cpp:
            (JSC::JSGlobalObject::JSGlobalObject):
            * runtime/JSGlobalObject.h:
            (JSC::JSGlobalObject::threadLocalCache const):
            * runtime/JSLock.cpp:
            (JSC::JSLock::didAcquireLock):
            * runtime/Options.h:
            * runtime/RegExpMatchesArray.h:
            (JSC::tryCreateUninitializedRegExpMatchesArray):
            * runtime/VM.cpp:
            (JSC::VM::VM):
            * runtime/VM.h:
            * runtime/VMEntryScope.cpp:
            (JSC::VMEntryScope::VMEntryScope):

2018-01-30  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r226783. rdar://problem/37077980

    2018-01-04  Filip Pizlo  <fpizlo@apple.com>

            CodeBlocks should be in IsoSubspaces
            https://bugs.webkit.org/show_bug.cgi?id=180884

            Reviewed by Saam Barati.

            This moves CodeBlocks into IsoSubspaces. Doing so means that we no longer need to have the
            special CodeBlockSet HashSets of new and old CodeBlocks. We also no longer use
            WeakReferenceHarvester or UnconditionalFinalizer. Instead:

            - Code block sweeping is now just eager sweeping. This means that it automatically takes
              advantage of our unswept set, which roughly corresponds to what CodeBlockSet used to use
              its eden set for.

            - Those idea of Executable "weakly visiting" the CodeBlock is replaced by Executable
              marking a ExecutableToCodeBlockEdge object. That object being marked corresponds to what
              we used to call CodeBlock "having been weakly visited". This means that CodeBlockSet no
              longer has to clear the set of weakly visited code blocks. This also means that
              determining CodeBlock liveness, propagating CodeBlock transitions, and jettisoning
              CodeBlocks during GC are now the edge's job. The edge is also in an IsoSubspace and it
              has IsoCellSets to tell us which edges have output constraints (what we used to call
              CodeBlock's weak reference harvester) and which have unconditional finalizers.

            - CodeBlock now uses an IsoCellSet to tell if it has an unconditional finalizer.

            - CodeBlockSet still exists!  It has one unified HashSet of CodeBlocks that we use to
              handle requests from the sampler, debugger, and other facilities. They may want to ask
              if some pointer corresponds to a CodeBlock during stages of execution during which the
              GC is unable to answer isLive() queries. The trickiest is the sampling profiler thread.
              There is no way that the GC's isLive could tell us of a CodeBlock that had already been
              allocated has now been full constructed.

            Rolling this back in because it was rolled out by mistake. There was a flaky crash that was
            happening before and after this change, but we misread the revision numbers at first and
            thought that this was the cause.

            * JavaScriptCore.xcodeproj/project.pbxproj:
            * Sources.txt:
            * bytecode/CodeBlock.cpp:
            (JSC::CodeBlock::CodeBlock):
            (JSC::CodeBlock::finishCreation):
            (JSC::CodeBlock::finishCreationCommon):
            (JSC::CodeBlock::~CodeBlock):
            (JSC::CodeBlock::visitChildren):
            (JSC::CodeBlock::propagateTransitions):
            (JSC::CodeBlock::determineLiveness):
            (JSC::CodeBlock::finalizeUnconditionally):
            (JSC::CodeBlock::stronglyVisitStrongReferences):
            (JSC::CodeBlock::hasInstalledVMTrapBreakpoints const):
            (JSC::CodeBlock::installVMTrapBreakpoints):
            (JSC::CodeBlock::dumpMathICStats):
            (JSC::CodeBlock::visitWeakly): Deleted.
            (JSC::CodeBlock::WeakReferenceHarvester::visitWeakReferences): Deleted.
            (JSC::CodeBlock::UnconditionalFinalizer::finalizeUnconditionally): Deleted.
            * bytecode/CodeBlock.h:
            (JSC::CodeBlock::subspaceFor):
            (JSC::CodeBlock::ownerEdge const):
            (JSC::CodeBlock::clearVisitWeaklyHasBeenCalled): Deleted.
            * bytecode/EvalCodeBlock.h:
            (JSC::EvalCodeBlock::create): Deleted.
            (JSC::EvalCodeBlock::createStructure): Deleted.
            (JSC::EvalCodeBlock::variable): Deleted.
            (JSC::EvalCodeBlock::numVariables): Deleted.
            (JSC::EvalCodeBlock::functionHoistingCandidate): Deleted.
            (JSC::EvalCodeBlock::numFunctionHoistingCandidates): Deleted.
            (JSC::EvalCodeBlock::EvalCodeBlock): Deleted.
            (JSC::EvalCodeBlock::unlinkedEvalCodeBlock const): Deleted.
            * bytecode/ExecutableToCodeBlockEdge.cpp: Added.
            (JSC::ExecutableToCodeBlockEdge::createStructure):
            (JSC::ExecutableToCodeBlockEdge::create):
            (JSC::ExecutableToCodeBlockEdge::visitChildren):
            (JSC::ExecutableToCodeBlockEdge::visitOutputConstraints):
            (JSC::ExecutableToCodeBlockEdge::finalizeUnconditionally):
            (JSC::ExecutableToCodeBlockEdge::activate):
            (JSC::ExecutableToCodeBlockEdge::deactivate):
            (JSC::ExecutableToCodeBlockEdge::deactivateAndUnwrap):
            (JSC::ExecutableToCodeBlockEdge::wrap):
            (JSC::ExecutableToCodeBlockEdge::wrapAndActivate):
            (JSC::ExecutableToCodeBlockEdge::ExecutableToCodeBlockEdge):
            (JSC::ExecutableToCodeBlockEdge::runConstraint):
            * bytecode/ExecutableToCodeBlockEdge.h: Added.
            (JSC::ExecutableToCodeBlockEdge::subspaceFor):
            (JSC::ExecutableToCodeBlockEdge::codeBlock const):
            (JSC::ExecutableToCodeBlockEdge::unwrap):
            * bytecode/FunctionCodeBlock.h:
            (JSC::FunctionCodeBlock::subspaceFor):
            (JSC::FunctionCodeBlock::createStructure):
            * bytecode/ModuleProgramCodeBlock.h:
            (JSC::ModuleProgramCodeBlock::create): Deleted.
            (JSC::ModuleProgramCodeBlock::createStructure): Deleted.
            (JSC::ModuleProgramCodeBlock::ModuleProgramCodeBlock): Deleted.
            * bytecode/ProgramCodeBlock.h:
            (JSC::ProgramCodeBlock::create): Deleted.
            (JSC::ProgramCodeBlock::createStructure): Deleted.
            (JSC::ProgramCodeBlock::ProgramCodeBlock): Deleted.
            * debugger/Debugger.cpp:
            (JSC::Debugger::SetSteppingModeFunctor::operator() const):
            (JSC::Debugger::ToggleBreakpointFunctor::operator() const):
            (JSC::Debugger::ClearCodeBlockDebuggerRequestsFunctor::operator() const):
            (JSC::Debugger::ClearDebuggerRequestsFunctor::operator() const):
            * heap/CodeBlockSet.cpp:
            (JSC::CodeBlockSet::contains):
            (JSC::CodeBlockSet::dump const):
            (JSC::CodeBlockSet::add):
            (JSC::CodeBlockSet::remove):
            (JSC::CodeBlockSet::promoteYoungCodeBlocks): Deleted.
            (JSC::CodeBlockSet::clearMarksForFullCollection): Deleted.
            (JSC::CodeBlockSet::lastChanceToFinalize): Deleted.
            (JSC::CodeBlockSet::deleteUnmarkedAndUnreferenced): Deleted.
            * heap/CodeBlockSet.h:
            * heap/CodeBlockSetInlines.h:
            (JSC::CodeBlockSet::iterate):
            (JSC::CodeBlockSet::iterateViaSubspaces):
            * heap/ConservativeRoots.cpp:
            (JSC::ConservativeRoots::genericAddPointer):
            (JSC::DummyMarkHook::markKnownJSCell):
            (JSC::CompositeMarkHook::mark):
            (JSC::CompositeMarkHook::markKnownJSCell):
            * heap/ConservativeRoots.h:
            * heap/Heap.cpp:
            (JSC::Heap::lastChanceToFinalize):
            (JSC::Heap::finalizeMarkedUnconditionalFinalizers):
            (JSC::Heap::finalizeUnconditionalFinalizers):
            (JSC::Heap::beginMarking):
            (JSC::Heap::deleteUnmarkedCompiledCode):
            (JSC::Heap::sweepInFinalize):
            (JSC::Heap::forEachCodeBlockImpl):
            (JSC::Heap::forEachCodeBlockIgnoringJITPlansImpl):
            (JSC::Heap::addCoreConstraints):
            (JSC::Heap::finalizeUnconditionalFinalizersInIsoSubspace): Deleted.
            * heap/Heap.h:
            * heap/HeapCell.h:
            * heap/HeapCellInlines.h:
            (JSC::HeapCell::subspace const):
            * heap/HeapInlines.h:
            (JSC::Heap::forEachCodeBlock):
            (JSC::Heap::forEachCodeBlockIgnoringJITPlans):
            * heap/HeapUtil.h:
            (JSC::HeapUtil::findGCObjectPointersForMarking):
            * heap/IsoCellSet.cpp:
            (JSC::IsoCellSet::parallelNotEmptyMarkedBlockSource):
            * heap/IsoCellSet.h:
            * heap/IsoCellSetInlines.h:
            (JSC::IsoCellSet::forEachMarkedCellInParallel):
            (JSC::IsoCellSet::forEachLiveCell):
            * heap/LargeAllocation.h:
            (JSC::LargeAllocation::subspace const):
            * heap/MarkStackMergingConstraint.cpp:
            (JSC::MarkStackMergingConstraint::executeImpl):
            * heap/MarkStackMergingConstraint.h:
            * heap/MarkedAllocator.cpp:
            (JSC::MarkedAllocator::parallelNotEmptyBlockSource):
            * heap/MarkedBlock.cpp:
            (JSC::MarkedBlock::Handle::didAddToAllocator):
            (JSC::MarkedBlock::Handle::didRemoveFromAllocator):
            * heap/MarkedBlock.h:
            (JSC::MarkedBlock::subspace const):
            * heap/MarkedBlockInlines.h:
            (JSC::MarkedBlock::Handle::forEachLiveCell):
            * heap/MarkedSpaceInlines.h:
            (JSC::MarkedSpace::forEachLiveCell):
            * heap/MarkingConstraint.cpp:
            (JSC::MarkingConstraint::execute):
            (JSC::MarkingConstraint::doParallelWork):
            (JSC::MarkingConstraint::finishParallelWork): Deleted.
            (JSC::MarkingConstraint::doParallelWorkImpl): Deleted.
            (JSC::MarkingConstraint::finishParallelWorkImpl): Deleted.
            * heap/MarkingConstraint.h:
            * heap/MarkingConstraintSet.cpp:
            (JSC::MarkingConstraintSet::add):
            * heap/MarkingConstraintSet.h:
            (JSC::MarkingConstraintSet::add):
            * heap/MarkingConstraintSolver.cpp:
            (JSC::MarkingConstraintSolver::execute):
            (JSC::MarkingConstraintSolver::addParallelTask):
            (JSC::MarkingConstraintSolver::runExecutionThread):
            (JSC::MarkingConstraintSolver::didExecute): Deleted.
            * heap/MarkingConstraintSolver.h:
            (JSC::MarkingConstraintSolver::TaskWithConstraint::TaskWithConstraint):
            (JSC::MarkingConstraintSolver::TaskWithConstraint::operator== const):
            * heap/SimpleMarkingConstraint.cpp:
            (JSC::SimpleMarkingConstraint::SimpleMarkingConstraint):
            (JSC::SimpleMarkingConstraint::executeImpl):
            * heap/SimpleMarkingConstraint.h:
            (JSC::SimpleMarkingConstraint::SimpleMarkingConstraint):
            * heap/SlotVisitor.cpp:
            (JSC::SlotVisitor::addParallelConstraintTask):
            * heap/SlotVisitor.h:
            * heap/Subspace.cpp:
            (JSC::Subspace::sweep):
            * heap/Subspace.h:
            * heap/SubspaceInlines.h:
            (JSC::Subspace::forEachLiveCell):
            * llint/LowLevelInterpreter.asm:
            * runtime/EvalExecutable.cpp:
            (JSC::EvalExecutable::visitChildren):
            * runtime/EvalExecutable.h:
            (JSC::EvalExecutable::codeBlock):
            * runtime/FunctionExecutable.cpp:
            (JSC::FunctionExecutable::baselineCodeBlockFor):
            (JSC::FunctionExecutable::visitChildren):
            * runtime/FunctionExecutable.h:
            * runtime/JSType.h:
            * runtime/ModuleProgramExecutable.cpp:
            (JSC::ModuleProgramExecutable::visitChildren):
            * runtime/ModuleProgramExecutable.h:
            * runtime/ProgramExecutable.cpp:
            (JSC::ProgramExecutable::visitChildren):
            * runtime/ProgramExecutable.h:
            * runtime/ScriptExecutable.cpp:
            (JSC::ScriptExecutable::installCode):
            (JSC::ScriptExecutable::newReplacementCodeBlockFor):
            * runtime/VM.cpp:
            (JSC::VM::VM):
            * runtime/VM.h:
            (JSC::VM::SpaceAndFinalizerSet::SpaceAndFinalizerSet):
            (JSC::VM::SpaceAndFinalizerSet::finalizerSetFor):
            (JSC::VM::forEachCodeBlockSpace):
            * runtime/VMTraps.cpp:
            (JSC::VMTraps::handleTraps):
            * tools/VMInspector.cpp:
            (JSC::VMInspector::codeBlockForMachinePC):
            (JSC::VMInspector::isValidCodeBlock):

2018-01-31  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r227874. rdar://problem/37059537

    2018-01-30  Mark Lam  <mark.lam@apple.com>

            Apply poisoning to TypedArray vector pointers.
            https://bugs.webkit.org/show_bug.cgi?id=182155
            <rdar://problem/36286266>

            Reviewed by JF Bastien.

            The TypeArray's vector pointer is now poisoned.  The poison value is chosen based
            on a TypeArray's jsType.  The JSType must be between FirstTypedArrayType and
            LastTypedArrayType.  At runtime, we enforce that the index is well-behaved by
            masking it against TypedArrayPoisonIndexMask.  TypedArrayPoisonIndexMask (16) is
            the number of TypedArray types (10) rounded up to the next power of 2.
            Accordingly, we reserve an array of TypedArrayPoisonIndexMask poisons so that we
            can use index masking on the index, and be guaranteed that the masked index will
            be within bounds of the poisons array.

            1. Fixed both DFG and FTL versions of compileGetTypedArrayByteOffset() to not
               do any unnecessary work if the TypedArray vector is null.

               FTL's cagedMayBeNull() is no longer needed because it is only used by
               compileGetTypedArrayByteOffset(), and we need to enhance it to handle unpoisoning
               in a TypedArray specific way.  So, might as well do the work inline in
               compileGetTypedArrayByteOffset() instead.

            2. Removed an unnecessary null-check in DFGSpeculativeJIT's compileNewTypedArrayWithSize()
               because there's already a null check above it that ensures that sizeGPR is
               never null.

            3. In LLInt's _llint_op_get_by_val, move the TypedArray length check before the
               loading of the vector for unpoisoning and uncaging.  We don't need the vector
               if the length is 0.

            Implementation notes on the need to null check the TypeArray vector:

            1. DFG::SpeculativeJIT::jumpForTypedArrayIsNeuteredIfOutOfBounds() does not need a
               m_poisonedVector null check because the function is a null check.

            2. DFG::SpeculativeJIT::compileGetIndexedPropertyStorage() does not need a
               m_poisonedVector null check because it is followed by a call to
               cageTypedArrayStorage() which assumes that storageReg cannot be null.

            3. DFG::SpeculativeJIT::compileGetTypedArrayByteOffset() already has a
               m_poisonedVector null check.

            4. DFG::SpeculativeJIT::compileNewTypedArrayWithSize() does not need a vector null
               check because the poisoning code is preceded by a sizeGPR null check, which
               ensures that the storageGPR (vector to be poisoned) is not null.

            5. FTL's compileGetIndexedPropertyStorage() does not need a m_poisonedVector null
               check because it is followed by a call to caged() which assumes that the
               vector cannot be null.

            6. FTL's compileGetTypedArrayByteOffset() already has a m_poisonedVector null check.

            7. FTL's compileNewTypedArray() does not need a vector null check because the
               poisoning code is preceded by a size null check, which ensures that the
               storage (vector to be poisoned) is not null.

            8. FTL's speculateTypedArrayIsNotNeutered() does not need a
               m_poisonedVector null check because the function is a null check.

            9. IntrinsicGetterAccessCase::emitIntrinsicGetter()'s TypedArrayByteOffsetIntrinsic
               case needs a null check so that it does not try to unpoison a null vector.

            10. JIT::emitIntTypedArrayGetByVal() does not need a vector null check because
                we already do a length check even before loading the vector.

            11. JIT::emitFloatTypedArrayGetByVal() does not need a vector null check because
                we already do a length check even before loading the vector.

            12. JIT::emitIntTypedArrayPutByVal() does not need a vector null check because
                we already do a length check even before loading the vector.

            13. JIT::emitFloatTypedArrayPutByVal() does not need a vector null check because
                we already do a length check even before loading the vector.

            14. LLInt's loadTypedArrayCaged() does not need a vector null check because its
                client will do a TypedArray length check before calling it.

            * dfg/DFGFixupPhase.cpp:
            (JSC::DFG::FixupPhase::checkArray):
            * dfg/DFGNode.h:
            (JSC::DFG::Node::hasArrayMode):
            * dfg/DFGSpeculativeJIT.cpp:
            (JSC::DFG::SpeculativeJIT::jumpForTypedArrayIsNeuteredIfOutOfBounds):
            (JSC::DFG::SpeculativeJIT::compileGetIndexedPropertyStorage):
            (JSC::DFG::SpeculativeJIT::compileGetTypedArrayByteOffset):
            (JSC::DFG::SpeculativeJIT::compileNewTypedArrayWithSize):
            * ftl/FTLAbstractHeapRepository.h:
            * ftl/FTLLowerDFGToB3.cpp:
            (JSC::FTL::DFG::LowerDFGToB3::compileGetIndexedPropertyStorage):
            (JSC::FTL::DFG::LowerDFGToB3::compileGetTypedArrayByteOffset):
            (JSC::FTL::DFG::LowerDFGToB3::compileNewTypedArray):
            (JSC::FTL::DFG::LowerDFGToB3::speculateTypedArrayIsNotNeutered):
            (JSC::FTL::DFG::LowerDFGToB3::cagedMayBeNull): Deleted.
            * jit/IntrinsicEmitter.cpp:
            (JSC::IntrinsicGetterAccessCase::emitIntrinsicGetter):
            * jit/JITPropertyAccess.cpp:
            (JSC::JIT::emitIntTypedArrayGetByVal):
            (JSC::JIT::emitFloatTypedArrayGetByVal):
            (JSC::JIT::emitIntTypedArrayPutByVal):
            (JSC::JIT::emitFloatTypedArrayPutByVal):
            * llint/LowLevelInterpreter.asm:
            * llint/LowLevelInterpreter64.asm:
            * offlineasm/arm64.rb:
            * offlineasm/x86.rb:
            * runtime/CagedBarrierPtr.h:
            * runtime/JSArrayBufferView.cpp:
            (JSC::JSArrayBufferView::JSArrayBufferView):
            (JSC::JSArrayBufferView::finalize):
            (JSC::JSArrayBufferView::neuter):
            * runtime/JSArrayBufferView.h:
            (JSC::JSArrayBufferView::vector const):
            (JSC::JSArrayBufferView::offsetOfPoisonedVector):
            (JSC::JSArrayBufferView::poisonFor):
            (JSC::JSArrayBufferView::Poison::key):
            (JSC::JSArrayBufferView::offsetOfVector): Deleted.
            * runtime/JSCPoison.cpp:
            (JSC::initializePoison):
            * runtime/JSCPoison.h:
            * runtime/JSGenericTypedArrayViewInlines.h:
            (JSC::JSGenericTypedArrayView<Adaptor>::estimatedSize):
            (JSC::JSGenericTypedArrayView<Adaptor>::visitChildren):
            (JSC::JSGenericTypedArrayView<Adaptor>::slowDownAndWasteMemory):
            * runtime/JSObject.h:

2018-01-30  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r227649. rdar://problem/37019344

    2018-01-25  Yusuke Suzuki  <utatane.tea@gmail.com>

            imported/w3c/web-platform-tests/html/semantics/scripting-1/the-script-element/module/errorhandling.html crashes
            https://bugs.webkit.org/show_bug.cgi?id=181980

            Reviewed by Ryosuke Niwa.

            We accidentally failed to propagate errored promise in instantiate and satify phase if entry.{instantiate,satisfy}
            promises are set. Since we just returned `entry`, it becomes succeeded promise even if the dependent fetch, instantiate,
            and satisfy promises are failed. This patch fixes error propagation by returning `entry.instantiate` and `entry.satisfy`
            correctly.

            * builtins/ModuleLoaderPrototype.js:
            (requestInstantiate):
            (requestSatisfy):

2018-01-30  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r227742. rdar://problem/37019360

    2018-01-29  Michael Saboff  <msaboff@apple.com>

            REGRESSION (r227341): DFG_ASSERT failure at JSC::DFG::AtTailAbstractState::forNode()
            https://bugs.webkit.org/show_bug.cgi?id=182249

            Reviewed by Keith Miller.

            Changed clobberize() handling of CompareEq, et al to properly handle comparisons between
            Untyped and Object values when compared against built in types.  Such comparisons can
            invoke toNumber() or other methods.

            * dfg/DFGClobberize.h:
            (JSC::DFG::clobberize):

2018-01-30  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r227716. rdar://problem/37019460

    2018-01-27  Yusuke Suzuki  <utatane.tea@gmail.com>

            DFG strength reduction fails to convert NumberToStringWithValidRadixConstant for 0 to constant '0'
            https://bugs.webkit.org/show_bug.cgi?id=182213

            Reviewed by Mark Lam.

            toStringWithRadixInternal is originally used for the slow path if the given value is larger than radix or negative.
            As a result, it does not accept 0 correctly, and produces an empty string. Since DFGStrengthReductionPhase uses
            this function, it accidentally converts NumberToStringWithValidRadixConstant(0, radix) to an empty string.
            This patch fixes toStringWithRadixInternal to accept 0. This change fixes twitch.tv's issue.

            We also add a careful cast to avoid `-INT32_MIN`. It does not produce incorrect value in x86 in practice,
            but it is UB, and a compiler may assume that the given value is never INT32_MIN and could do an incorrect optimization.

            * runtime/NumberPrototype.cpp:
            (JSC::toStringWithRadixInternal):

2018-01-30  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r227644. rdar://problem/37019367

    2018-01-25  Mark Lam  <mark.lam@apple.com>

            Gardening: fix 32-bit build after r227643.
            https://bugs.webkit.org/show_bug.cgi?id=182086

            Not reviewed.

            * jit/AssemblyHelpers.cpp:
            (JSC::AssemblyHelpers::emitDynamicPoisonOnLoadedType):

2018-01-30  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r227643. rdar://problem/37019367

    2018-01-24  Filip Pizlo  <fpizlo@apple.com>

            DirectArguments should protect itself using dynamic poisoning and precise index masking
            https://bugs.webkit.org/show_bug.cgi?id=182086

            Reviewed by Saam Barati.

            This implements dynamic poisoning and precise index masking in DirectArguments, using the
            helpers from <wtf/MathExtras.h> and helpers in AssemblyHelpers and FTL::LowerDFGToB3.

            We use dynamic poisoning for DirectArguments since this object did not have any additional
            indirection inside it that could have been poisoned. So, we use the xor of the expected type
            and the actual type as an additional input into the pointer.

            We use precise index masking for bounds checks, because it's not worth doing index masking
            unless we know that precise index masking is too slow.

            * assembler/MacroAssembler.h:
            (JSC::MacroAssembler::lshiftPtr):
            (JSC::MacroAssembler::rshiftPtr):
            * dfg/DFGSpeculativeJIT.cpp:
            (JSC::DFG::SpeculativeJIT::compileGetByValOnDirectArguments):
            * ftl/FTLLowerDFGToB3.cpp:
            (JSC::FTL::DFG::LowerDFGToB3::compileGetByVal):
            (JSC::FTL::DFG::LowerDFGToB3::compileGetMyArgumentByVal):
            (JSC::FTL::DFG::LowerDFGToB3::preciseIndexMask64):
            (JSC::FTL::DFG::LowerDFGToB3::preciseIndexMask32):
            (JSC::FTL::DFG::LowerDFGToB3::dynamicPoison):
            (JSC::FTL::DFG::LowerDFGToB3::dynamicPoisonOnLoadedType):
            (JSC::FTL::DFG::LowerDFGToB3::dynamicPoisonOnType):
            * jit/AssemblyHelpers.cpp:
            (JSC::AssemblyHelpers::emitPreciseIndexMask32):
            (JSC::AssemblyHelpers::emitDynamicPoison):
            (JSC::AssemblyHelpers::emitDynamicPoisonOnLoadedType):
            (JSC::AssemblyHelpers::emitDynamicPoisonOnType):
            * jit/AssemblyHelpers.h:
            * jit/JITPropertyAccess.cpp:
            (JSC::JIT::emitDirectArgumentsGetByVal):
            * runtime/DirectArguments.h:
            (JSC::DirectArguments::getIndexQuickly const):
            (JSC::DirectArguments::setIndexQuickly):
            (JSC::DirectArguments::argument):
            * runtime/GenericArgumentsInlines.h:

2018-01-30  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r227636. rdar://problem/37019363

    2018-01-25  Mark Lam  <mark.lam@apple.com>

            Rename some local vars from type to typedArrayType for greater clarity.
            https://bugs.webkit.org/show_bug.cgi?id=182148
            <rdar://problem/36882310>

            Reviewed by Saam Barati.

            * dfg/DFGSpeculativeJIT.cpp:
            (JSC::DFG::SpeculativeJIT::compileNewTypedArrayWithSize):
            * ftl/FTLLowerDFGToB3.cpp:
            (JSC::FTL::DFG::LowerDFGToB3::compileNewTypedArray):

2018-01-25  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r227435. rdar://problem/36873349

    2018-01-23  Robin Morisset  <rmorisset@apple.com>

            Rollout r219636
            https://bugs.webkit.org/show_bug.cgi?id=181997
            <rdar://problem/35883022>

            Unreviewed, as it is a rollout.

            * dfg/DFGSpeculativeJIT.cpp:
            (JSC::DFG::SpeculativeJIT::emitAllocateRawObject):
            * runtime/JSArray.cpp:
            (JSC::JSArray::tryCreateUninitializedRestricted):
            * runtime/JSArray.h:
            (JSC::JSArray::tryCreate):
            * runtime/JSObject.cpp:
            (JSC::JSObject::ensureLengthSlow):

2018-01-25  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r227410. rdar://problem/36873404

    2018-01-23  Robin Morisset  <rmorisset@apple.com>

            Update the argument count in DFGByteCodeParser::handleRecursiveCall
            https://bugs.webkit.org/show_bug.cgi?id=181739
            <rdar://problem/36627662>

            Reviewed by Saam Barati.

            When calling a function, its number of arguments is set on the stack. When we turn a recursive tail call
            into a jump, we should update that stack slot as there is no guarantee that the function was originally
            called with the same number of arguments. Forgetting to do this is observable through 'arguments.length'.

            It required adding a new DFG node: 'SetArgumentCountIncludingThis', that takes an unsigned int
            as its first OpInfo field, and stores it to the stack at the right place.

            We must be a bit careful in where we put this new node, as it ClobbersExit.
            We must also fix DFGArgumentsEliminationPhase and DFGPutStackSinkingPhase as they assumed that any node that writes to the stack must write to either an argument or a local.

            * dfg/DFGAbstractInterpreterInlines.h:
            (JSC::DFG::AbstractInterpreter<AbstractStateType>::executeEffects):
            * dfg/DFGArgumentsEliminationPhase.cpp:
            * dfg/DFGByteCodeParser.cpp:
            (JSC::DFG::ByteCodeParser::handleRecursiveTailCall):
            * dfg/DFGClobberize.h:
            (JSC::DFG::clobberize):
            * dfg/DFGDoesGC.cpp:
            (JSC::DFG::doesGC):
            * dfg/DFGFixupPhase.cpp:
            (JSC::DFG::FixupPhase::fixupNode):
            * dfg/DFGMayExit.cpp:
            * dfg/DFGNode.h:
            (JSC::DFG::Node::argumentCountIncludingThis):
            * dfg/DFGNodeType.h:
            * dfg/DFGPredictionPropagationPhase.cpp:
            * dfg/DFGPutStackSinkingPhase.cpp:
            * dfg/DFGSafeToExecute.h:
            (JSC::DFG::safeToExecute):
            * dfg/DFGSpeculativeJIT.cpp:
            (JSC::DFG::SpeculativeJIT::compileSetArgumentCountIncludingThis):
            * dfg/DFGSpeculativeJIT.h:
            * dfg/DFGSpeculativeJIT32_64.cpp:
            (JSC::DFG::SpeculativeJIT::compile):
            * dfg/DFGSpeculativeJIT64.cpp:
            (JSC::DFG::SpeculativeJIT::compile):
            * ftl/FTLCapabilities.cpp:
            (JSC::FTL::canCompile):
            * ftl/FTLLowerDFGToB3.cpp:
            (JSC::FTL::DFG::LowerDFGToB3::compileNode):
            (JSC::FTL::DFG::LowerDFGToB3::compileSetArgumentCountIncludingThis):

2018-01-24  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r227527. rdar://problem/36830339

    2018-01-23  Mark Lam  <mark.lam@apple.com>

            Update Poisoned pointers to take a Poison class instead of a uintptr_t&.
            https://bugs.webkit.org/show_bug.cgi?id=182017
            <rdar://problem/36795513>

            Reviewed by Filip Pizlo and JF Bastien.

            Removed the POISON() macro.  Now that we have Poison types, we can just use the
            the Poison type instead and make the code a bit nicer to read.

            * API/JSAPIWrapperObject.h:
            * API/JSCallbackFunction.h:
            * API/JSCallbackObject.h:
            * b3/B3LowerMacros.cpp:
            * b3/testb3.cpp:
            (JSC::B3::testInterpreter):
            * bytecode/CodeBlock.h:
            (JSC::CodeBlock::instructions):
            (JSC::CodeBlock::instructions const):
            * dfg/DFGOSRExitCompilerCommon.h:
            (JSC::DFG::adjustFrameAndStackInOSRExitCompilerThunk):
            * dfg/DFGSpeculativeJIT.cpp:
            (JSC::DFG::SpeculativeJIT::compileCheckSubClass):
            (JSC::DFG::SpeculativeJIT::emitSwitchIntJump):
            * ftl/FTLLowerDFGToB3.cpp:
            (JSC::FTL::DFG::LowerDFGToB3::compileCheckSubClass):
            * jit/JIT.h:
            * jit/ThunkGenerators.cpp:
            (JSC::virtualThunkFor):
            (JSC::nativeForGenerator):
            (JSC::boundThisNoArgsFunctionCallGenerator):
            * parser/UnlinkedSourceCode.h:
            * runtime/ArrayPrototype.h:
            * runtime/CustomGetterSetter.h:
            * runtime/DateInstance.h:
            * runtime/InternalFunction.h:
            * runtime/JSArrayBuffer.h:
            * runtime/JSCPoison.cpp:
            (JSC::initializePoison):
            * runtime/JSCPoison.h:
            * runtime/JSGlobalObject.h:
            * runtime/JSScriptFetchParameters.h:
            * runtime/JSScriptFetcher.h:
            * runtime/NativeExecutable.h:
            * runtime/StructureTransitionTable.h:
            * runtime/WriteBarrier.h:
            (JSC::WriteBarrier::poison): Deleted.
            * wasm/js/JSToWasm.cpp:
            (JSC::Wasm::createJSToWasmWrapper):
            * wasm/js/JSWebAssemblyCodeBlock.cpp:
            (JSC::JSWebAssemblyCodeBlock::JSWebAssemblyCodeBlock):
            * wasm/js/JSWebAssemblyCodeBlock.h:
            * wasm/js/JSWebAssemblyInstance.h:
            (JSC::JSWebAssemblyInstance::poison):
            * wasm/js/JSWebAssemblyMemory.h:
            * wasm/js/JSWebAssemblyModule.h:
            * wasm/js/JSWebAssemblyTable.h:
            * wasm/js/WasmToJS.cpp:
            (JSC::Wasm::handleBadI64Use):
            (JSC::Wasm::wasmToJS):
            * wasm/js/WebAssemblyFunctionBase.h:
            * wasm/js/WebAssemblyModuleRecord.h:
            * wasm/js/WebAssemblyToJSCallee.h:
            * wasm/js/WebAssemblyWrapperFunction.h:

2018-01-23  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r227462. rdar://problem/36807140

    2018-01-23  Filip Pizlo  <fpizlo@apple.com>

            Use precise index masking for FTL GetByArgumentByVal
            https://bugs.webkit.org/show_bug.cgi?id=182006

            Reviewed by Keith Miller.

            This protects speculative out-of-bounds on arguments[index].

            Making this work right involved fixing a possible overflow situation with
            numberOfArgumentsToSkip.

            * dfg/DFGByteCodeParser.cpp:
            (JSC::DFG::ByteCodeParser::findArgumentPositionForLocal):
            * dfg/DFGGraph.cpp:
            (JSC::DFG::Graph::dump):
            * dfg/DFGNode.h:
            (JSC::DFG::Node::hasNumberOfArgumentsToSkip):
            (JSC::DFG::Node::numberOfArgumentsToSkip):
            * dfg/DFGStackLayoutPhase.cpp:
            (JSC::DFG::StackLayoutPhase::run):
            * ftl/FTLLowerDFGToB3.cpp:
            (JSC::FTL::DFG::LowerDFGToB3::compileGetMyArgumentByVal):

2018-01-23  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r227434. rdar://problem/36791632

    2018-01-23  Mark Lam  <mark.lam@apple.com>

            Re-arrange TypedArray JSTypes to match the order of the TypedArrayType enum list.
            https://bugs.webkit.org/show_bug.cgi?id=181976
            <rdar://problem/36766936>

            Reviewed by Filip Pizlo.

            1. The order of TypedArray JSTypes now matches the order the TypedArrayType enum
               list.  I also added static asserts in TypedArrayType.h to enforce this.

               Also redefined FOR_EACH_TYPED_ARRAY_TYPE() in terms of

            2. Define 4 new values:
               a. FirstTypedArrayType
               b. LastTypedArrayType
               c. NumberOfTypedArrayTypesExcludingDataView
               d. NumberOfTypedArrayTypes

               Use these everywhere where we iterate or bisect the TypedArray JSTypes.

            3. Removed NUMBER_OF_TYPED_ARRAY_TYPES, and use NumberOfTypedArrayTypes instead.

            4. Simplify the code that converts between TypedArrayType and JSType.

               Changed typedArrayTypeForType() to be the mirror image of typeForTypedArrayType().
               Previously, typedArrayTypeForType() converts DataViewType to NotTypedArray
               instead of TypeDataView.  Now, it converts to TypeDataView.

               This does not result in any change of behavior because typedArrayTypeForType()
               is only called in Structure::hasIndexingHeader(), and its result is passed to
               isTypedView(), which handles TypeDataView correctly.

            5. Also fixed a bug in SpeculativeJIT::compileGetTypedArrayByteOffset().
               If the vector is null, we can skip the rest of the checks.  While the current
               code does not result in incorrect behavior, it is inefficient, and communicates
               wrong information to the reader i.e. implying that there's something in the
               dataGPR when there's not.  The dataGPR should also be null in this case.

            * dfg/DFGByteCodeParser.cpp:
            (JSC::DFG::ByteCodeParser::handleConstantInternalFunction):
            * dfg/DFGSpeculativeJIT.cpp:
            (JSC::DFG::SpeculativeJIT::compileIsTypedArrayView):
            (JSC::DFG::SpeculativeJIT::compileGetTypedArrayByteOffset):
            * ftl/FTLLowerDFGToB3.cpp:
            (JSC::FTL::DFG::LowerDFGToB3::isTypedArrayView):
            * ftl/FTLOSRExit.cpp:
            * llint/LowLevelInterpreter.asm:
            * llint/LowLevelInterpreter64.asm:
            * runtime/JSGlobalObject.cpp:
            (JSC::JSGlobalObject::visitChildren):
            * runtime/JSType.h:
            * runtime/TypedArrayType.cpp:
            (JSC::typeForTypedArrayType): Deleted.
            * runtime/TypedArrayType.h:
            (JSC::typedArrayTypeForType):
            (JSC::typeForTypedArrayType):

2018-01-23  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r227431. rdar://problem/36791656

    2018-01-23  Filip Pizlo  <fpizlo@apple.com>

            DFG should always flush `this`
            https://bugs.webkit.org/show_bug.cgi?id=181999

            Reviewed by Saam Barati and Mark Lam.

            This is going to make it possible to use precise index masking for arguments-on-the-stack
            accesses with an index adjusted so that 0 is this. Without this change, we would have no way
            of masking when the argument count is 0, unless we padded the argument area so that there was
            always an argument slot after `this` and it was always initialized.

            This is neutral on all benchmarks.

            * dfg/DFGByteCodeParser.cpp:
            (JSC::DFG::ByteCodeParser::flushImpl):
            (JSC::DFG::ByteCodeParser::flushForTerminalImpl):
            (JSC::DFG::ByteCodeParser::flush):
            (JSC::DFG::ByteCodeParser::flushForTerminal):
            (JSC::DFG::ByteCodeParser::parse):
            (JSC::DFG::flushImpl): Deleted.
            (JSC::DFG::flushForTerminalImpl): Deleted.
            * dfg/DFGPreciseLocalClobberize.h:
            (JSC::DFG::PreciseLocalClobberizeAdaptor::readTop):

2018-01-23  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r227424. rdar://problem/36791625

    2018-01-23  Filip Pizlo  <fpizlo@apple.com>

            JSC should use a speculation fence on VM entry/exit
            https://bugs.webkit.org/show_bug.cgi?id=181991

            Reviewed by JF Bastien and Mark Lam.

            This adds a WTF::speculationFence on VM entry and exit.

            For a microbenchmark that just calls a native function (supplied via an Objective-C block) in a
            tight loop from JS is a 0% regression on x86 and a 11% regression on ARM64.

            * runtime/JSLock.cpp:
            (JSC::JSLock::didAcquireLock):
            (JSC::JSLock::willReleaseLock):

2018-01-22  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r227341. rdar://problem/36746038

    2018-01-22  Michael Saboff  <msaboff@apple.com>

            DFG abstract interpreter needs to properly model effects of some Math ops
            https://bugs.webkit.org/show_bug.cgi?id=181886

            Reviewed by Saam Barati.

            Reviewed the processing of the various ArithXXX and CompareXXX and found that
            several nodes don't handle UntypedUse.  Added clobberWorld() for those cases.

            * dfg/DFGAbstractInterpreter.h:
            * dfg/DFGAbstractInterpreterInlines.h:
            (JSC::DFG::AbstractInterpreter<AbstractStateType>::executeEffects):
            (JSC::DFG::AbstractInterpreter<AbstractStateType>::executeDoubleUnaryOpEffects):

2018-01-22  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r227236. rdar://problem/36722544

    2018-01-19  Saam Barati  <sbarati@apple.com>

            Kill ArithNegate's ArithProfile assert inside BytecodeParser
            https://bugs.webkit.org/show_bug.cgi?id=181877
            <rdar://problem/36630552>

            Reviewed by Mark Lam.

            Before this patch, we used to assert that op_negate's result ArithProfile
            only produces number. It's logically true that negate only produces a number.
            However, the DFG may incorrectly pick this ArithProfile when doing OSR exit
            profiling. So we'll end up profiling something that's likely the input to
            negate. This patch removes the assert. We cede to the fact that Graph::methodOfGettingAValueProfileFor
            is entirely heuristic based, potentially leading to profiling results being imprecise.

            * dfg/DFGByteCodeParser.cpp:
            (JSC::DFG::ByteCodeParser::makeSafe):

2018-01-22  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r227229. rdar://problem/36722641

    2018-01-19  Saam Barati  <sbarati@apple.com>

            Spread's effects are modeled incorrectly both in AI and in Clobberize
            https://bugs.webkit.org/show_bug.cgi?id=181867
            <rdar://problem/36290415>

            Reviewed by Michael Saboff.

            * dfg/DFGAbstractInterpreterInlines.h:
            (JSC::DFG::AbstractInterpreter<AbstractStateType>::executeEffects):
            * dfg/DFGClobberize.h:
            (JSC::DFG::clobberize):

2018-01-22  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r227168. rdar://problem/36722591

    2018-01-18  JF Bastien  <jfbastien@apple.com>

            Set the minimum executable allocator size properly
            https://bugs.webkit.org/show_bug.cgi?id=181816
            <rdar://problem/36635533>

            Reviewed by Saam Barati.

            Executable allocator expects at least two page size's worth of
            allocation in certain conditions, and that causes some tests to
            now fail because they ask for less. Set that minimum correctly. We
            were already rounding up to a page size, so having a minimum of 2
            page sizes is fine.

            * jit/ExecutableAllocator.cpp:
            (JSC::FixedVMPoolExecutableAllocator::FixedVMPoolExecutableAllocator):

2018-01-22  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r227159. rdar://problem/36722618

    2018-01-18  Mark Lam  <mark.lam@apple.com>

            Poisons should be initialized after Options are initialized.
            https://bugs.webkit.org/show_bug.cgi?id=181807
            <rdar://problem/36629138>

            Reviewed by Keith Miller.

            This is because poison initialization may depend on options.

            * runtime/InitializeThreading.cpp:
            (JSC::initializeThreading):

2018-01-22  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r227136. rdar://problem/36722486

    2018-01-18  Commit Queue  <commit-queue@webkit.org>

            Unreviewed, rolling out r227096.
            https://bugs.webkit.org/show_bug.cgi?id=181788

            "it caused a 15% octane regression" (Requested by saamyjoon on
            #webkit).

            Reverted changeset:

            "Support MultiGetByOffset in the DFG"
            https://bugs.webkit.org/show_bug.cgi?id=181466
            https://trac.webkit.org/changeset/227096

2018-01-18  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r226956. rdar://problem/36598688

    2018-01-15  JF Bastien  <jfbastien@apple.com>

            Remove makePoisonedUnique
            https://bugs.webkit.org/show_bug.cgi?id=181630
            <rdar://problem/36498623>

            Reviewed by Mark Lam.

            I added a conversion from std::unique_ptr, so we can just use
            std::make_unique and it'll auto-poison when converted.

            * bytecode/CodeBlock.h:
            (JSC::CodeBlock::makePoisonedUnique): Deleted.
            * runtime/JSGlobalObject.cpp:
            (JSC::JSGlobalObject::init):
            * runtime/JSGlobalObject.h:
            (JSC::JSGlobalObject::makePoisonedUnique): Deleted.

2018-01-18  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r227165. rdar://problem/36628552

    2018-01-18  Michael Saboff  <msaboff@apple.com>

            Unreviewed build fix for Windows

            * interpreter/FrameTracers.h:
            (JSC::assertStackPointerIsAligned): Can't use gcc style inlined assembly
            on Windows.

2018-01-18  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r227152. rdar://problem/36628552

    2018-01-18  Michael Saboff  <msaboff@apple.com>

            REGRESSION (r226068): [X86] Crash in JavaScriptCore ShadowChicken when handling exceptions
            https://bugs.webkit.org/show_bug.cgi?id=181802

            Reviewed by Filip Pizlo.

            There where a few places where the stack isn't properly aligned for X86 when we call into C++ code.
            Two places are where we call into exception handling code, the LLInt and from nativeForGenerator.
            The other place was when we call into the operationOSRWriteBarrier().

            Added an assert check that the stack is aligned on X86 platforms in the native call tracing code.
            This helped find the other cases beyond the original problem.

            * dfg/DFGOSRExitCompilerCommon.cpp:
            (JSC::DFG::osrWriteBarrier):
            * interpreter/FrameTracers.h:
            (JSC::assertStackPointerIsAligned):
            (JSC::NativeCallFrameTracer::NativeCallFrameTracer):
            (JSC::NativeCallFrameTracerWithRestore::NativeCallFrameTracerWithRestore):
            * jit/ThunkGenerators.cpp:
            (JSC::nativeForGenerator):
            * llint/LowLevelInterpreter32_64.asm:

2018-01-17  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r227104. rdar://problem/36609536

    2018-01-17  Saam Barati  <sbarati@apple.com>

            Disable Atomics when SharedArrayBuffer isn’t enabled
            https://bugs.webkit.org/show_bug.cgi?id=181572
            <rdar://problem/36553206>

            Reviewed by Michael Saboff.

            * runtime/JSGlobalObject.cpp:
            (JSC::JSGlobalObject::init):
            (JSC::createAtomicsProperty): Deleted.

2018-01-17  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r227096. rdar://problem/36609546

    2018-01-17  Saam Barati  <sbarati@apple.com>

            Support MultiGetByOffset in the DFG
            https://bugs.webkit.org/show_bug.cgi?id=181466

            Reviewed by Keith Miller.

            This seems to benefit Speedometer in my local testing. It seems like this
            might be around a 0.5% improvement.

            * dfg/DFGAbstractInterpreterInlines.h:
            (JSC::DFG::AbstractInterpreter<AbstractStateType>::executeEffects):
            * dfg/DFGByteCodeParser.cpp:
            (JSC::DFG::ByteCodeParser::handleGetById):
            * dfg/DFGConstantFoldingPhase.cpp:
            (JSC::DFG::ConstantFoldingPhase::foldConstants):
            * dfg/DFGGraph.h:
            (JSC::DFG::Graph::supportsMultiGetByOffset):
            * dfg/DFGSpeculativeJIT64.cpp:
            (JSC::DFG::SpeculativeJIT::compile):

2018-01-17  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r227053. rdar://problem/36587231

    2018-01-17  Saam Barati  <sbarati@apple.com>

            DFG::Node::convertToConstant needs to clear the varargs flags
            https://bugs.webkit.org/show_bug.cgi?id=181697
            <rdar://problem/36497332>

            Reviewed by Yusuke Suzuki.

            * dfg/DFGNode.h:
            (JSC::DFG::Node::convertToConstant):

2018-01-17  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r227047. rdar://problem/36587246

    2018-01-16  JF Bastien  <jfbastien@apple.com>

            Allow dangerous disabling of poison
            https://bugs.webkit.org/show_bug.cgi?id=181685
            <rdar://problem/36546265>

            Reviewed by Keith Miller.

            Some tools such as leak detectors and such like to look at real
            pointers, and poisoned ones confuse them. Add a JSC option to
            disable poisoning, but log to the console when this is done.

            * runtime/JSCPoison.cpp:
            (JSC::initializePoison):
            * runtime/Options.h:

2018-01-17  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r226940. rdar://problem/36598019

    2018-01-13  Mark Lam  <mark.lam@apple.com>

            Replace all use of ConstExprPoisoned with Poisoned.
            https://bugs.webkit.org/show_bug.cgi?id=181542
            <rdar://problem/36442138>

            Reviewed by JF Bastien.

            1. All JSC poisons are now defined in JSCPoison.h.

            2. Change all clients to use the new poison values via the POISON() macro.

            3. The LLInt code has been updated to handle CodeBlock poison.  Some of this code
               uses the t5 temp register, which is not available on the Windows port.
               Fortunately, we don't currently do poisoning on the Windows port yet.  So,
               it will just work for now.

               When poisoning is enabled for the Windows port, this LLInt code will need a
               Windows specific implementation to workaround its lack of a t5 register.

            * API/JSAPIWrapperObject.h:
            * API/JSCallbackFunction.h:
            * API/JSCallbackObject.h:
            * JavaScriptCore.xcodeproj/project.pbxproj:
            * Sources.txt:
            * assembler/MacroAssemblerCodeRef.h:
            (JSC::MacroAssemblerCodePtr::emptyValue):
            (JSC::MacroAssemblerCodePtr::deletedValue):
            * b3/B3LowerMacros.cpp:
            * b3/testb3.cpp:
            (JSC::B3::testInterpreter):
            * bytecode/CodeBlock.h:
            (JSC::CodeBlock::instructions):
            (JSC::CodeBlock::instructions const):
            (JSC::CodeBlock::makePoisonedUnique):
            * dfg/DFGOSRExitCompilerCommon.h:
            (JSC::DFG::adjustFrameAndStackInOSRExitCompilerThunk):
            * dfg/DFGSpeculativeJIT.cpp:
            (JSC::DFG::SpeculativeJIT::compileCheckSubClass):
            (JSC::DFG::SpeculativeJIT::emitSwitchIntJump):
            * ftl/FTLLowerDFGToB3.cpp:
            (JSC::FTL::DFG::LowerDFGToB3::compileCheckSubClass):
            * jit/JIT.h:
            * jit/ThunkGenerators.cpp:
            (JSC::virtualThunkFor):
            (JSC::nativeForGenerator):
            (JSC::boundThisNoArgsFunctionCallGenerator):
            * llint/LowLevelInterpreter.asm:
            * llint/LowLevelInterpreter32_64.asm:
            * llint/LowLevelInterpreter64.asm:
            * parser/UnlinkedSourceCode.h:
            * runtime/ArrayPrototype.h:
            * runtime/CustomGetterSetter.h:
            * runtime/DateInstance.h:
            * runtime/InternalFunction.h:
            * runtime/JSArrayBuffer.h:
            * runtime/JSCPoison.cpp: Copied from Source/JavaScriptCore/runtime/JSCPoisonedPtr.cpp.
            (JSC::initializePoison):
            * runtime/JSCPoison.h:
            (): Deleted.
            * runtime/JSCPoisonedPtr.cpp: Removed.
            * runtime/JSCPoisonedPtr.h: Removed.
            * runtime/JSGlobalObject.h:
            (JSC::JSGlobalObject::makePoisonedUnique):
            * runtime/JSScriptFetchParameters.h:
            * runtime/JSScriptFetcher.h:
            * runtime/NativeExecutable.h:
            * runtime/StructureTransitionTable.h:
            (JSC::StructureTransitionTable::map const):
            (JSC::StructureTransitionTable::weakImpl const):
            * runtime/WriteBarrier.h:
            (JSC::WriteBarrier::poison):
            * wasm/js/JSToWasm.cpp:
            (JSC::Wasm::createJSToWasmWrapper):
            * wasm/js/JSWebAssemblyCodeBlock.cpp:
            (JSC::JSWebAssemblyCodeBlock::JSWebAssemblyCodeBlock):
            * wasm/js/JSWebAssemblyCodeBlock.h:
            * wasm/js/JSWebAssemblyInstance.h:
            * wasm/js/JSWebAssemblyMemory.h:
            * wasm/js/JSWebAssemblyModule.h:
            * wasm/js/JSWebAssemblyTable.h:
            * wasm/js/WasmToJS.cpp:
            (JSC::Wasm::handleBadI64Use):
            (JSC::Wasm::wasmToJS):
            * wasm/js/WebAssemblyFunctionBase.h:
            * wasm/js/WebAssemblyModuleRecord.h:
            * wasm/js/WebAssemblyToJSCallee.h:
            * wasm/js/WebAssemblyWrapperFunction.h:

2018-01-17  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r226752. rdar://problem/36601128

    2018-01-10  JF Bastien  <jfbastien@apple.com>

            Poison small JSObject derivatives which only contain pointers
            https://bugs.webkit.org/show_bug.cgi?id=181483
            <rdar://problem/36407127>

            Reviewed by Mark Lam.

            I wrote a script that finds interesting things to poison or
            generally harden. These stood out because they derive from
            JSObject and only contain a few pointer or pointer-like fields,
            and could therefore just be poisoned. This also requires some
            template "improvements" to our poisoning machinery. Worth noting
            is that I'm making PoisonedUniquePtr move-assignable and
            move-constructible from unique_ptr, which makes it a better
            drop-in replacement because we don't need to use
            makePoisonedUniquePtr. This means function-locals can be
            unique_ptr and get the nice RAII pattern, and once the function is
            done you can just move to the class' PoisonedUniquePtr without
            worrying.

            * API/JSAPIWrapperObject.h:
            (JSC::JSAPIWrapperObject::wrappedObject):
            * API/JSAPIWrapperObject.mm:
            (JSC::JSAPIWrapperObject::JSAPIWrapperObject):
            * API/JSCallbackObject.h:
            * runtime/ArrayPrototype.h:
            * runtime/DateInstance.h:
            * runtime/JSArrayBuffer.cpp:
            (JSC::JSArrayBuffer::finishCreation):
            (JSC::JSArrayBuffer::isShared const):
            (JSC::JSArrayBuffer::sharingMode const):
            * runtime/JSArrayBuffer.h:
            * runtime/JSCPoison.h:

2018-01-16  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r226942. rdar://problem/36567945

    2018-01-14  Saam Barati  <sbarati@apple.com>

            Unreviewed. r226928 broke the CLOOP build. This patch fixes the CLOOP build.

            * bytecode/CallLinkStatus.cpp:
            (JSC::CallLinkStatus::computeFromLLInt):
            (JSC::CallLinkStatus::computeExitSiteData):

2018-01-16  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r226928. rdar://problem/36567945

    2018-01-12  Saam Barati  <sbarati@apple.com>

            Move ExitProfile to UnlinkedCodeBlock so it can be shared amongst CodeBlocks backed by the same UnlinkedCodeBlock
            https://bugs.webkit.org/show_bug.cgi?id=181545

            Reviewed by Michael Saboff.

            This patch follows the theme of putting optimization profiling information on
            UnlinkedCodeBlock. This allows the unlinked code cache to remember OSR exit data.
            This often leads to the first compile of a CodeBlock, backed by an UnlinkedCodeBlock
            pulled from the code cache, making better compilation decisions, usually
            resulting in fewer exits, and fewer recompilations.

            This is a 1% Speedometer progression in my testing.

            * bytecode/BytecodeDumper.cpp:
            (JSC::BytecodeDumper<CodeBlock>::dumpProfilesForBytecodeOffset):
            * bytecode/CallLinkStatus.cpp:
            (JSC::CallLinkStatus::computeFromLLInt):
            (JSC::CallLinkStatus::computeFor):
            (JSC::CallLinkStatus::computeExitSiteData):
            (JSC::CallLinkStatus::computeDFGStatuses):
            * bytecode/CallLinkStatus.h:
            * bytecode/CodeBlock.h:
            (JSC::CodeBlock::addFrequentExitSite): Deleted.
            (JSC::CodeBlock::hasExitSite const): Deleted.
            (JSC::CodeBlock::exitProfile): Deleted.
            * bytecode/DFGExitProfile.cpp:
            (JSC::DFG::ExitProfile::add):
            (JSC::DFG::QueryableExitProfile::initialize):
            * bytecode/DFGExitProfile.h:
            (JSC::DFG::ExitProfile::hasExitSite const):
            * bytecode/GetByIdStatus.cpp:
            (JSC::GetByIdStatus::hasExitSite):
            (JSC::GetByIdStatus::computeFor):
            (JSC::GetByIdStatus::computeForStubInfo):
            * bytecode/GetByIdStatus.h:
            * bytecode/PutByIdStatus.cpp:
            (JSC::PutByIdStatus::hasExitSite):
            (JSC::PutByIdStatus::computeFor):
            (JSC::PutByIdStatus::computeForStubInfo):
            * bytecode/PutByIdStatus.h:
            * bytecode/UnlinkedCodeBlock.cpp:
            (JSC::UnlinkedCodeBlock::livenessAnalysisSlow):
            * bytecode/UnlinkedCodeBlock.h:
            (JSC::UnlinkedCodeBlock::hasExitSite const):
            (JSC::UnlinkedCodeBlock::hasExitSite):
            (JSC::UnlinkedCodeBlock::exitProfile):
            * dfg/DFGByteCodeParser.cpp:
            (JSC::DFG::ByteCodeParser::InlineStackEntry::InlineStackEntry):
            * dfg/DFGGraph.h:
            (JSC::DFG::Graph::hasGlobalExitSite):
            (JSC::DFG::Graph::hasExitSite):
            * dfg/DFGLICMPhase.cpp:
            (JSC::DFG::LICMPhase::attemptHoist):
            * dfg/DFGOSRExitBase.cpp:
            (JSC::DFG::OSRExitBase::considerAddingAsFrequentExitSiteSlow):

2018-01-16  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r226920. rdar://problem/36567951

    2018-01-12  JF Bastien  <jfbastien@apple.com>

            PoisonedWriteBarrier
            https://bugs.webkit.org/show_bug.cgi?id=181599
            <rdar://problem/36474351>

            Reviewed by Mark Lam.

            Allow poisoning of WriteBarrier objects, and use this for
            WebAssembly because it is perf-neutral, at least on WasmBench on
            my MBP. If it indeed is perf-neutral according to the bots, start
            using it in more performance-sensitive places.

            * heap/HandleTypes.h:
            * heap/SlotVisitor.h:
            * heap/SlotVisitorInlines.h:
            (JSC::SlotVisitor::append):
            (JSC::SlotVisitor::appendHidden):
            * runtime/JSCJSValue.h:
            * runtime/JSCPoison.h:
            * runtime/Structure.h:
            * runtime/StructureInlines.h:
            (JSC::Structure::setPrototypeWithoutTransition):
            (JSC::Structure::setGlobalObject):
            (JSC::Structure::setPreviousID):
            * runtime/WriteBarrier.h:
            (JSC::WriteBarrierBase::copyFrom):
            (JSC::WriteBarrierBase::get const):
            (JSC::WriteBarrierBase::operator* const):
            (JSC::WriteBarrierBase::operator-> const):
            (JSC::WriteBarrierBase::clear):
            (JSC::WriteBarrierBase::slot):
            (JSC::WriteBarrierBase::operator bool const):
            (JSC::WriteBarrierBase::setWithoutWriteBarrier):
            (JSC::WriteBarrierBase::unvalidatedGet const):
            (JSC::operator==):
            * runtime/WriteBarrierInlines.h:
            (JSC::Traits>::set):
            (JSC::Traits>::setMayBeNull):
            (JSC::Traits>::setEarlyValue):
            (JSC::DumbValueTraits<Unknown>>::set):
            * wasm/WasmInstance.h:
            * wasm/js/JSWebAssemblyInstance.cpp:
            (JSC::JSWebAssemblyInstance::JSWebAssemblyInstance):
            (JSC::JSWebAssemblyInstance::finishCreation):
            (JSC::JSWebAssemblyInstance::visitChildren):
            (JSC::JSWebAssemblyInstance::create):
            * wasm/js/JSWebAssemblyInstance.h:
            (JSC::JSWebAssemblyInstance::offsetOfPoisonedCallee):
            * wasm/js/JSWebAssemblyMemory.h:
            * wasm/js/JSWebAssemblyModule.h:
            * wasm/js/JSWebAssemblyTable.cpp:
            (JSC::JSWebAssemblyTable::JSWebAssemblyTable):
            (JSC::JSWebAssemblyTable::grow):
            (JSC::JSWebAssemblyTable::clearFunction):
            * wasm/js/JSWebAssemblyTable.h:
            * wasm/js/WasmToJS.cpp:
            (JSC::Wasm::materializeImportJSCell):
            (JSC::Wasm::handleBadI64Use):
            (JSC::Wasm::wasmToJS):
            * wasm/js/WebAssemblyFunctionBase.h:
            * wasm/js/WebAssemblyModuleRecord.cpp:
            (JSC::WebAssemblyModuleRecord::link):
            (JSC::WebAssemblyModuleRecord::evaluate):
            * wasm/js/WebAssemblyModuleRecord.h:
            * wasm/js/WebAssemblyToJSCallee.h:
            * wasm/js/WebAssemblyWrapperFunction.h:

2018-01-16  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r226907. rdar://problem/36567949

    2018-01-12  Saam Barati  <sbarati@apple.com>

            CheckStructure can be incorrectly subsumed by CheckStructureOrEmpty
            https://bugs.webkit.org/show_bug.cgi?id=181177
            <rdar://problem/36205704>

            Reviewed by Yusuke Suzuki.

            The semantics of CheckStructure are such that it does not allow the empty value to flow through it.
            However, we may eliminate a CheckStructure if it's preceded by a CheckStructureOrEmpty. This doesn't
            have semantic consequences when validation is turned off. However, with validation on, this trips up
            our OSR exit machinery that says when an exit is allowed to happen.

            Consider the following IR:

            a: GetClosureVar // Or any other node that produces BytecodeTop
            ...
            c: CheckStructure(Cell:@a, {s2})
            d: PutByOffset(KnownCell:@a, KnownCell:@a, @value)

            In the TypeCheckHoistingPhase, we may insert CheckStructureOrEmptys like this:
            a: GetClosureVar
            e: CheckStructureOrEmpty(@a, {s1})
            ...
            f: CheckStructureOrEmpty(@a, {s2})
            c: CheckStructure(Cell:@a, {s2})
            d: PutByOffset(KnownCell:@a, KnownCell:@a, @value)

            This will cause constant folding to change the IR to:
            a: GetClosureVar
            e: CheckStructureOrEmpty(@a, {s1})
            ...
            f: CheckStructureOrEmpty(@a, {s2})
            d: PutByOffset(KnownCell:@a, KnownCell:@a, @value)

            Our mayExit analysis determines that the PutByOffset should not exit. Note
            that AI will determine the only value the PutByOffset can see in @a is
            the empty value. Because KnownCell filters SpecCell and not SpecCellCheck,
            when lowering the PutByOffset, we reach a contradiction in AI and emit
            an OSR exit. However, because mayExit said we couldn't exit, we assert.

            Note that if we did not run the TypeCheckHoistingPhase on this IR, AI
            would have determined we would OSR exit at the second CheckStructure.

            This patch makes it so constant folding produces the following IR:
            a: GetClosureVar
            e: CheckStructureOrEmpty(@a, {s1})
            g: AssertNotEmpty(@a)
            ...
            f: CheckStructureOrEmpty(@a, {s2})
            h: AssertNotEmpty(@a)
            d: PutByOffset(KnownCell:@a, KnownCell:@a, @value)

            This modification will cause AI to know we will OSR exit before even reaching
            the PutByOffset. Note that in the original IR, the GetClosureVar won't
            actually produce the TDZ value. If it did, bytecode would have caused us
            to emit a CheckNotEmpty before the CheckStructure/PutByOffset combo. That's
            why this bug is about IR bookkeeping and not an actual error in IR analysis.
            This patch introduces AssertNotEmpty instead of using CheckNotEmpty to be
            more congruous with CheckStructure's semantics of crashing on the empty value
            as input (on 64 bit platforms).

            * dfg/DFGAbstractInterpreterInlines.h:
            (JSC::DFG::AbstractInterpreter<AbstractStateType>::executeEffects):
            * dfg/DFGClobberize.h:
            (JSC::DFG::clobberize):
            * dfg/DFGConstantFoldingPhase.cpp:
            (JSC::DFG::ConstantFoldingPhase::foldConstants):
            * dfg/DFGDoesGC.cpp:
            (JSC::DFG::doesGC):
            * dfg/DFGFixupPhase.cpp:
            (JSC::DFG::FixupPhase::fixupNode):
            * dfg/DFGNodeType.h:
            * dfg/DFGPredictionPropagationPhase.cpp:
            * dfg/DFGSafeToExecute.h:
            (JSC::DFG::safeToExecute):
            * dfg/DFGSpeculativeJIT32_64.cpp:
            (JSC::DFG::SpeculativeJIT::compile):
            * dfg/DFGSpeculativeJIT64.cpp:
            (JSC::DFG::SpeculativeJIT::compile):
            * ftl/FTLCapabilities.cpp:
            (JSC::FTL::canCompile):
            * ftl/FTLLowerDFGToB3.cpp:
            (JSC::FTL::DFG::LowerDFGToB3::compileNode):
            (JSC::FTL::DFG::LowerDFGToB3::compileAssertNotEmpty):

2018-01-16  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r226895. rdar://problem/36568085

    2018-01-12  Joseph Pecoraro  <pecoraro@apple.com>

            Web Inspector: Remove unnecessary raw pointer in InspectorConsoleAgent
            https://bugs.webkit.org/show_bug.cgi?id=181579
            <rdar://problem/36193759>

            Reviewed by Brian Burg.

            * inspector/agents/InspectorConsoleAgent.h:
            * inspector/agents/InspectorConsoleAgent.cpp:
            (Inspector::InspectorConsoleAgent::clearMessages):
            (Inspector::InspectorConsoleAgent::addConsoleMessage):
            Switch from a raw pointer to m_consoleMessages.last().
            Also move the expiration check into the if block since it can only
            happen inside here when the number of console messages changes.

            (Inspector::InspectorConsoleAgent::discardValues):
            Also clear the expired message count when messages are cleared.

2018-01-16  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r226881. rdar://problem/36567948

    2018-01-12  Saam Barati  <sbarati@apple.com>

            Each variant of a polymorphic inlined call should be exitOK at the top of the block
            https://bugs.webkit.org/show_bug.cgi?id=181562
            <rdar://problem/36445624>

            Reviewed by Yusuke Suzuki.

            Before this patch, the very first block in the switch for polymorphic call
            inlining will have exitOK at the top. The others are not guaranteed to.
            That was just a bug. They're all exitOK at the top. This will lead to crashes
            in FixupPhase because we won't have a node in a block that has ExitOK, so
            when we fixup various type checks, we assert out.

            * dfg/DFGByteCodeParser.cpp:
            (JSC::DFG::ByteCodeParser::handleInlining):

2018-01-16  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r226806. rdar://problem/36567946

    2018-01-11  Saam Barati  <sbarati@apple.com>

            JITMathIC code in the FTL is wrong when code gets duplicated
            https://bugs.webkit.org/show_bug.cgi?id=181525
            <rdar://problem/36351993>

            Reviewed by Michael Saboff and Keith Miller.

            B3/Air may duplicate code for various reasons. Patchpoint generators inside
            FTLLower must be aware that they can be called multiple times because of this.
            The patchpoint for math ICs was not aware of this, and shared state amongst
            all invocations of the patchpoint's generator. This patch fixes this bug so
            that each invocation of the patchpoint's generator gets a unique math IC.

            * bytecode/CodeBlock.h:
            (JSC::CodeBlock::addMathIC):
            * ftl/FTLLowerDFGToB3.cpp:
            (JSC::FTL::DFG::LowerDFGToB3::compileValueAdd):
            (JSC::FTL::DFG::LowerDFGToB3::compileUnaryMathIC):
            (JSC::FTL::DFG::LowerDFGToB3::compileBinaryMathIC):
            (JSC::FTL::DFG::LowerDFGToB3::compileArithAddOrSub):
            (JSC::FTL::DFG::LowerDFGToB3::compileArithMul):
            (JSC::FTL::DFG::LowerDFGToB3::compileArithNegate):
            (JSC::FTL::DFG::LowerDFGToB3::compileMathIC): Deleted.
            * jit/JITMathIC.h:
            (JSC::isProfileEmpty):

2018-01-12  Jason Marcell  <jmarcell@apple.com>

        Apply patch. rdar://problem/36303061

    Disable WebKit features we don't want to ship after branching
    <rdar://problem/36303061>

    2018-01-12  Maciej Stachowiak  <mjs@apple.com>

            Disable WebKit features we don't want to ship after branching
            <rdar://problem/36303061>

            Reviewed by Maciej Stachowiak.

            * Configurations/FeatureDefines.xcconfig:

2018-01-12  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r226840. rdar://problem/36479468

    2018-01-11  Michael Saboff  <msaboff@apple.com>

            REGRESSION(226788): AppStore Crashed @ JavaScriptCore: JSC::MacroAssemblerARM64::pushToSaveImmediateWithoutTouchingRegisters
            https://bugs.webkit.org/show_bug.cgi?id=181570

            Reviewed by Keith Miller.

            * assembler/MacroAssemblerARM64.h:
            (JSC::MacroAssemblerARM64::abortWithReason):
            Reverting these functions to use dataTempRegister and memoryTempRegister as they are
            JIT release asserts that will crash the program.

            (JSC::MacroAssemblerARM64::pushToSaveImmediateWithoutTouchingRegisters):
            Changed this so that it invalidates any cached dataTmpRegister contents if temp register
            caching is enabled.

2018-01-12  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r226822. rdar://problem/36458924

    2018-01-11  Filip Pizlo  <fpizlo@apple.com>

            Rename MarkedAllocator to BlockDirectory and AllocatorAttributes to CellAttributes
            https://bugs.webkit.org/show_bug.cgi?id=181543

            Rubber stamped by Michael Saboff.

            In a world that has thread-local caches, the thing we now call the "MarkedAllocator" doesn't
            really have anything to do with allocation anymore. The allocation will be done by something
            in the TLC. When you move the allocation logic out of MarkedAllocator, it becomes just a
            place to find blocks (a "block directory").

            Once we do that renaming, the term "allocator attributes" becomes weird. Those are really the
            attributes of the HeapCellType. So let's call them CellAttributes.

            * JavaScriptCore.xcodeproj/project.pbxproj:
            * Sources.txt:
            * bytecode/AccessCase.cpp:
            (JSC::AccessCase::generateImpl):
            * bytecode/ObjectAllocationProfile.h:
            * bytecode/ObjectAllocationProfileInlines.h:
            (JSC::ObjectAllocationProfile::initializeProfile):
            * dfg/DFGSpeculativeJIT.cpp:
            (JSC::DFG::SpeculativeJIT::emitAllocateRawObject):
            (JSC::DFG::SpeculativeJIT::compileMakeRope):
            (JSC::DFG::SpeculativeJIT::compileAllocatePropertyStorage):
            (JSC::DFG::SpeculativeJIT::compileReallocatePropertyStorage):
            (JSC::DFG::SpeculativeJIT::compileNewObject):
            * dfg/DFGSpeculativeJIT.h:
            (JSC::DFG::SpeculativeJIT::emitAllocateJSCell):
            (JSC::DFG::SpeculativeJIT::emitAllocateJSObject):
            * ftl/FTLAbstractHeapRepository.h:
            * ftl/FTLLowerDFGToB3.cpp:
            (JSC::FTL::DFG::LowerDFGToB3::compileMakeRope):
            (JSC::FTL::DFG::LowerDFGToB3::compileMaterializeNewObject):
            (JSC::FTL::DFG::LowerDFGToB3::allocatePropertyStorageWithSizeImpl):
            (JSC::FTL::DFG::LowerDFGToB3::allocateHeapCell):
            (JSC::FTL::DFG::LowerDFGToB3::allocateObject):
            (JSC::FTL::DFG::LowerDFGToB3::allocatorForSize):
            * heap/AlignedMemoryAllocator.cpp:
            (JSC::AlignedMemoryAllocator::registerDirectory):
            (JSC::AlignedMemoryAllocator::registerAllocator): Deleted.
            * heap/AlignedMemoryAllocator.h:
            (JSC::AlignedMemoryAllocator::firstDirectory const):
            (JSC::AlignedMemoryAllocator::firstAllocator const): Deleted.
            * heap/AllocatorAttributes.cpp: Removed.
            * heap/AllocatorAttributes.h: Removed.
            * heap/BlockDirectory.cpp: Copied from Source/JavaScriptCore/heap/MarkedAllocator.cpp.
            (JSC::BlockDirectory::BlockDirectory):
            (JSC::BlockDirectory::setSubspace):
            (JSC::BlockDirectory::isPagedOut):
            (JSC::BlockDirectory::findEmptyBlockToSteal):
            (JSC::BlockDirectory::didConsumeFreeList):
            (JSC::BlockDirectory::tryAllocateWithoutCollecting):
            (JSC::BlockDirectory::allocateIn):
            (JSC::BlockDirectory::tryAllocateIn):
            (JSC::BlockDirectory::doTestCollectionsIfNeeded):
            (JSC::BlockDirectory::allocateSlowCase):
            (JSC::BlockDirectory::blockSizeForBytes):
            (JSC::BlockDirectory::tryAllocateBlock):
            (JSC::BlockDirectory::addBlock):
            (JSC::BlockDirectory::removeBlock):
            (JSC::BlockDirectory::stopAllocating):
            (JSC::BlockDirectory::prepareForAllocation):
            (JSC::BlockDirectory::lastChanceToFinalize):
            (JSC::BlockDirectory::resumeAllocating):
            (JSC::BlockDirectory::beginMarkingForFullCollection):
            (JSC::BlockDirectory::endMarking):
            (JSC::BlockDirectory::snapshotUnsweptForEdenCollection):
            (JSC::BlockDirectory::snapshotUnsweptForFullCollection):
            (JSC::BlockDirectory::findBlockToSweep):
            (JSC::BlockDirectory::sweep):
            (JSC::BlockDirectory::shrink):
            (JSC::BlockDirectory::assertNoUnswept):
            (JSC::BlockDirectory::parallelNotEmptyBlockSource):
            (JSC::BlockDirectory::dump const):
            (JSC::BlockDirectory::dumpBits):
            (JSC::BlockDirectory::markedSpace const):
            (JSC::MarkedAllocator::MarkedAllocator): Deleted.
            (JSC::MarkedAllocator::setSubspace): Deleted.
            (JSC::MarkedAllocator::isPagedOut): Deleted.
            (JSC::MarkedAllocator::findEmptyBlockToSteal): Deleted.
            (JSC::MarkedAllocator::didConsumeFreeList): Deleted.
            (JSC::MarkedAllocator::tryAllocateWithoutCollecting): Deleted.
            (JSC::MarkedAllocator::allocateIn): Deleted.
            (JSC::MarkedAllocator::tryAllocateIn): Deleted.
            (JSC::MarkedAllocator::doTestCollectionsIfNeeded): Deleted.
            (JSC::MarkedAllocator::allocateSlowCase): Deleted.
            (JSC::MarkedAllocator::blockSizeForBytes): Deleted.
            (JSC::MarkedAllocator::tryAllocateBlock): Deleted.
            (JSC::MarkedAllocator::addBlock): Deleted.
            (JSC::MarkedAllocator::removeBlock): Deleted.
            (JSC::MarkedAllocator::stopAllocating): Deleted.
            (JSC::MarkedAllocator::prepareForAllocation): Deleted.
            (JSC::MarkedAllocator::lastChanceToFinalize): Deleted.
            (JSC::MarkedAllocator::resumeAllocating): Deleted.
            (JSC::MarkedAllocator::beginMarkingForFullCollection): Deleted.
            (JSC::MarkedAllocator::endMarking): Deleted.
            (JSC::MarkedAllocator::snapshotUnsweptForEdenCollection): Deleted.
            (JSC::MarkedAllocator::snapshotUnsweptForFullCollection): Deleted.
            (JSC::MarkedAllocator::findBlockToSweep): Deleted.
            (JSC::MarkedAllocator::sweep): Deleted.
            (JSC::MarkedAllocator::shrink): Deleted.
            (JSC::MarkedAllocator::assertNoUnswept): Deleted.
            (JSC::MarkedAllocator::parallelNotEmptyBlockSource): Deleted.
            (JSC::MarkedAllocator::dump const): Deleted.
            (JSC::MarkedAllocator::dumpBits): Deleted.
            (JSC::MarkedAllocator::markedSpace const): Deleted.
            * heap/BlockDirectory.h: Copied from Source/JavaScriptCore/heap/MarkedAllocator.h.
            (JSC::BlockDirectory::attributes const):
            (JSC::BlockDirectory::forEachBitVector):
            (JSC::BlockDirectory::forEachBitVectorWithName):
            (JSC::BlockDirectory::nextDirectory const):
            (JSC::BlockDirectory::nextDirectoryInSubspace const):
            (JSC::BlockDirectory::nextDirectoryInAlignedMemoryAllocator const):
            (JSC::BlockDirectory::setNextDirectory):
            (JSC::BlockDirectory::setNextDirectoryInSubspace):
            (JSC::BlockDirectory::setNextDirectoryInAlignedMemoryAllocator):
            (JSC::BlockDirectory::offsetOfFreeList):
            (JSC::BlockDirectory::offsetOfCellSize):
            (JSC::MarkedAllocator::cellSize const): Deleted.
            (JSC::MarkedAllocator::attributes const): Deleted.
            (JSC::MarkedAllocator::needsDestruction const): Deleted.
            (JSC::MarkedAllocator::destruction const): Deleted.
            (JSC::MarkedAllocator::cellKind const): Deleted.
            (JSC::MarkedAllocator::heap): Deleted.
            (JSC::MarkedAllocator::bitvectorLock): Deleted.
            (JSC::MarkedAllocator::forEachBitVector): Deleted.
            (JSC::MarkedAllocator::forEachBitVectorWithName): Deleted.
            (JSC::MarkedAllocator::nextAllocator const): Deleted.
            (JSC::MarkedAllocator::nextAllocatorInSubspace const): Deleted.
            (JSC::MarkedAllocator::nextAllocatorInAlignedMemoryAllocator const): Deleted.
            (JSC::MarkedAllocator::setNextAllocator): Deleted.
            (JSC::MarkedAllocator::setNextAllocatorInSubspace): Deleted.
            (JSC::MarkedAllocator::setNextAllocatorInAlignedMemoryAllocator): Deleted.
            (JSC::MarkedAllocator::subspace const): Deleted.
            (JSC::MarkedAllocator::freeList const): Deleted.
            (JSC::MarkedAllocator::offsetOfFreeList): Deleted.
            (JSC::MarkedAllocator::offsetOfCellSize): Deleted.
            * heap/BlockDirectoryInlines.h: Copied from Source/JavaScriptCore/heap/MarkedAllocatorInlines.h.
            (JSC::BlockDirectory::isFreeListedCell const):
            (JSC::BlockDirectory::allocate):
            (JSC::BlockDirectory::forEachBlock):
            (JSC::BlockDirectory::forEachNotEmptyBlock):
            (JSC::MarkedAllocator::isFreeListedCell const): Deleted.
            (JSC::MarkedAllocator::allocate): Deleted.
            (JSC::MarkedAllocator::forEachBlock): Deleted.
            (JSC::MarkedAllocator::forEachNotEmptyBlock): Deleted.
            * heap/CellAttributes.cpp: Copied from Source/JavaScriptCore/heap/AllocatorAttributes.cpp.
            (JSC::CellAttributes::dump const):
            (JSC::AllocatorAttributes::dump const): Deleted.
            * heap/CellAttributes.h: Copied from Source/JavaScriptCore/heap/AllocatorAttributes.h.
            (JSC::CellAttributes::CellAttributes):
            (JSC::AllocatorAttributes::AllocatorAttributes): Deleted.
            * heap/CompleteSubspace.cpp:
            (JSC::CompleteSubspace::allocatorFor):
            (JSC::CompleteSubspace::allocateNonVirtual):
            (JSC::CompleteSubspace::allocatorForSlow):
            (JSC::CompleteSubspace::tryAllocateSlow):
            * heap/CompleteSubspace.h:
            (JSC::CompleteSubspace::allocatorForSizeStep):
            (JSC::CompleteSubspace::allocatorForNonVirtual):
            * heap/GCDeferralContext.h:
            * heap/Heap.cpp:
            (JSC::Heap::updateAllocationLimits):
            * heap/Heap.h:
            * heap/HeapCell.h:
            * heap/HeapCellInlines.h:
            (JSC::HeapCell::cellAttributes const):
            (JSC::HeapCell::destructionMode const):
            (JSC::HeapCell::cellKind const):
            (JSC::HeapCell::allocatorAttributes const): Deleted.
            * heap/HeapCellType.cpp:
            (JSC::HeapCellType::HeapCellType):
            * heap/HeapCellType.h:
            (JSC::HeapCellType::attributes const):
            * heap/IncrementalSweeper.cpp:
            (JSC::IncrementalSweeper::IncrementalSweeper):
            (JSC::IncrementalSweeper::sweepNextBlock):
            (JSC::IncrementalSweeper::startSweeping):
            (JSC::IncrementalSweeper::stopSweeping):
            * heap/IncrementalSweeper.h:
            * heap/IsoCellSet.cpp:
            (JSC::IsoCellSet::IsoCellSet):
            (JSC::IsoCellSet::parallelNotEmptyMarkedBlockSource):
            (JSC::IsoCellSet::addSlow):
            (JSC::IsoCellSet::didRemoveBlock):
            (JSC::IsoCellSet::sweepToFreeList):
            * heap/IsoCellSetInlines.h:
            (JSC::IsoCellSet::forEachMarkedCell):
            (JSC::IsoCellSet::forEachLiveCell):
            * heap/IsoSubspace.cpp:
            (JSC::IsoSubspace::IsoSubspace):
            (JSC::IsoSubspace::allocatorFor):
            (JSC::IsoSubspace::allocateNonVirtual):
            * heap/IsoSubspace.h:
            (JSC::IsoSubspace::allocatorForNonVirtual):
            * heap/LargeAllocation.h:
            (JSC::LargeAllocation::attributes const):
            * heap/MarkedAllocator.cpp: Removed.
            * heap/MarkedAllocator.h: Removed.
            * heap/MarkedAllocatorInlines.h: Removed.
            * heap/MarkedBlock.cpp:
            (JSC::MarkedBlock::Handle::~Handle):
            (JSC::MarkedBlock::Handle::setIsFreeListed):
            (JSC::MarkedBlock::Handle::stopAllocating):
            (JSC::MarkedBlock::Handle::lastChanceToFinalize):
            (JSC::MarkedBlock::Handle::resumeAllocating):
            (JSC::MarkedBlock::aboutToMarkSlow):
            (JSC::MarkedBlock::Handle::didConsumeFreeList):
            (JSC::MarkedBlock::noteMarkedSlow):
            (JSC::MarkedBlock::Handle::removeFromDirectory):
            (JSC::MarkedBlock::Handle::didAddToDirectory):
            (JSC::MarkedBlock::Handle::didRemoveFromDirectory):
            (JSC::MarkedBlock::Handle::dumpState):
            (JSC::MarkedBlock::Handle::subspace const):
            (JSC::MarkedBlock::Handle::sweep):
            (JSC::MarkedBlock::Handle::isFreeListedCell const):
            (JSC::MarkedBlock::Handle::removeFromAllocator): Deleted.
            (JSC::MarkedBlock::Handle::didAddToAllocator): Deleted.
            (JSC::MarkedBlock::Handle::didRemoveFromAllocator): Deleted.
            * heap/MarkedBlock.h:
            (JSC::MarkedBlock::Handle::directory const):
            (JSC::MarkedBlock::Handle::attributes const):
            (JSC::MarkedBlock::attributes const):
            (JSC::MarkedBlock::Handle::allocator const): Deleted.
            * heap/MarkedBlockInlines.h:
            (JSC::MarkedBlock::Handle::isAllocated):
            (JSC::MarkedBlock::Handle::isLive):
            (JSC::MarkedBlock::Handle::specializedSweep):
            (JSC::MarkedBlock::Handle::isEmpty):
            * heap/MarkedSpace.cpp:
            (JSC::MarkedSpace::lastChanceToFinalize):
            (JSC::MarkedSpace::sweep):
            (JSC::MarkedSpace::stopAllocating):
            (JSC::MarkedSpace::resumeAllocating):
            (JSC::MarkedSpace::isPagedOut):
            (JSC::MarkedSpace::freeBlock):
            (JSC::MarkedSpace::shrink):
            (JSC::MarkedSpace::beginMarking):
            (JSC::MarkedSpace::endMarking):
            (JSC::MarkedSpace::snapshotUnswept):
            (JSC::MarkedSpace::assertNoUnswept):
            (JSC::MarkedSpace::dumpBits):
            (JSC::MarkedSpace::addBlockDirectory):
            (JSC::MarkedSpace::addMarkedAllocator): Deleted.
            * heap/MarkedSpace.h:
            (JSC::MarkedSpace::firstDirectory const):
            (JSC::MarkedSpace::directoryLock):
            (JSC::MarkedSpace::forEachBlock):
            (JSC::MarkedSpace::forEachDirectory):
            (JSC::MarkedSpace::firstAllocator const): Deleted.
            (JSC::MarkedSpace::allocatorLock): Deleted.
            (JSC::MarkedSpace::forEachAllocator): Deleted.
            * heap/MarkedSpaceInlines.h:
            * heap/Subspace.cpp:
            (JSC::Subspace::initialize):
            (JSC::Subspace::prepareForAllocation):
            (JSC::Subspace::findEmptyBlockToSteal):
            (JSC::Subspace::parallelDirectorySource):
            (JSC::Subspace::parallelNotEmptyMarkedBlockSource):
            (JSC::Subspace::sweep):
            (JSC::Subspace::parallelAllocatorSource): Deleted.
            * heap/Subspace.h:
            (JSC::Subspace::attributes const):
            (JSC::Subspace::didCreateFirstDirectory):
            (JSC::Subspace::didCreateFirstAllocator): Deleted.
            * heap/SubspaceInlines.h:
            (JSC::Subspace::forEachDirectory):
            (JSC::Subspace::forEachMarkedBlock):
            (JSC::Subspace::forEachNotEmptyMarkedBlock):
            (JSC::Subspace::forEachAllocator): Deleted.
            * jit/AssemblyHelpers.h:
            (JSC::AssemblyHelpers::emitAllocateWithNonNullAllocator):
            (JSC::AssemblyHelpers::emitAllocate):
            (JSC::AssemblyHelpers::emitAllocateJSCell):
            (JSC::AssemblyHelpers::emitAllocateJSObject):
            (JSC::AssemblyHelpers::emitAllocateJSObjectWithKnownSize):
            * jit/JIT.h:
            * jit/JITOpcodes.cpp:
            (JSC::JIT::emit_op_new_object):
            * jit/JITOpcodes32_64.cpp:
            (JSC::JIT::emit_op_new_object):
            * runtime/JSDestructibleObjectHeapCellType.cpp:
            (JSC::JSDestructibleObjectHeapCellType::JSDestructibleObjectHeapCellType):
            * runtime/JSSegmentedVariableObjectHeapCellType.cpp:
            (JSC::JSSegmentedVariableObjectHeapCellType::JSSegmentedVariableObjectHeapCellType):
            * runtime/JSStringHeapCellType.cpp:
            (JSC::JSStringHeapCellType::JSStringHeapCellType):
            * runtime/VM.cpp:
            (JSC::VM::VM):
            * wasm/js/JSWebAssemblyCodeBlockHeapCellType.cpp:
            (JSC::JSWebAssemblyCodeBlockHeapCellType::JSWebAssemblyCodeBlockHeapCellType):

2018-01-11  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r226811. rdar://problem/36458907

    2018-01-11  Saam Barati  <sbarati@apple.com>

            When inserting Unreachable in byte code parser we need to flush all the right things
            https://bugs.webkit.org/show_bug.cgi?id=181509
            <rdar://problem/36423110>

            Reviewed by Mark Lam.

            I added code in r226655 that had its own mechanism for preserving liveness when
            inserting Unreachable nodes after ForceOSRExit. There are two ways to preserve
            liveness: PhantomLocal and Flush. Certain values *must* be flushed to the stack.
            I got some of these values wrong, which was leading to a crash when recovering the
            callee value from an inlined frame. Instead of making the same mistake and repeating
            similar code again, this patch refactors this logic to be shared with the other
            liveness preservation code in the DFG bytecode parser. This is what I should have
            done in my initial patch.

            * bytecode/InlineCallFrame.h:
            (JSC::remapOperand):
            * dfg/DFGByteCodeParser.cpp:
            (JSC::DFG::flushImpl):
            (JSC::DFG::flushForTerminalImpl):
            (JSC::DFG::ByteCodeParser::flush):
            (JSC::DFG::ByteCodeParser::flushForTerminal):
            (JSC::DFG::ByteCodeParser::parse):

2018-01-11  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r226788. rdar://problem/36450828

    2018-01-11  Michael Saboff  <msaboff@apple.com>

            Ensure there are no unsafe uses of MacroAssemblerARM64::dataTempRegister
            https://bugs.webkit.org/show_bug.cgi?id=181512

            Reviewed by Saam Barati.

            * assembler/MacroAssemblerARM64.h:
            (JSC::MacroAssemblerARM64::abortWithReason):
            (JSC::MacroAssemblerARM64::pushToSaveImmediateWithoutTouchingRegisters):
            All current uses of dataTempRegister in these functions are safe, but it makes sense to
            fix them in case they might be used elsewhere.

2018-01-11  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r226778. rdar://problem/36450800

    2018-01-11  Michael Saboff  <msaboff@apple.com>

            Add a DOM gadget for Spectre testing
            https://bugs.webkit.org/show_bug.cgi?id=181351

            Reviewed by Ryosuke Niwa.

            * runtime/Options.h:

2018-01-11  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r226767. rdar://problem/36450818

    2018-01-11  Saam Barati  <sbarati@apple.com>

            Our for-in caching is wrong when we add indexed properties on things in the prototype chain
            https://bugs.webkit.org/show_bug.cgi?id=181508

            Reviewed by Yusuke Suzuki.

            Our for-in caching would cache structure chains that had prototypes with
            indexed properties. Clearly this is wrong. This caching breaks when a prototype
            adds new indexed properties. We would continue to enumerate the old cached
            state of properties, and not include the new indexed properties.

            The old code used to prevent caching only if the base structure had
            indexed properties. This patch extends it to prevent caching if the
            base, or any structure in the prototype chain, has indexed properties.

            * runtime/Structure.cpp:
            (JSC::Structure::canCachePropertyNameEnumerator const):

2018-01-11  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r226655. rdar://problem/36450822

    2018-01-09  Saam Barati  <sbarati@apple.com>

            Reduce graph size by replacing terminal nodes in blocks that have a ForceOSRExit with Unreachable
            https://bugs.webkit.org/show_bug.cgi?id=181409

            Reviewed by Keith Miller.

            When I was looking at profiler data for Speedometer, I noticed that one of
            the hottest functions in Speedometer is around 1100 bytecode operations long.
            Only about 100 of those bytecode ops ever execute. However, we ended up
            spending a lot of time compiling basic blocks that never executed. We often
            plant ForceOSRExit nodes when we parse bytecodes that have a null value profile.
            This is the case when such a node never executes.

            This patch makes it so that anytime a block has a ForceOSRExit, we replace its
            terminal node with an Unreachable node (and remove all nodes after the
            ForceOSRExit). This will cut down on graph size when such a block dominates
            other blocks in the CFG. This allows us to get rid of huge chunks of the CFG
            in certain programs. When doing this transformation, we also insert
            Flushes/PhantomLocals to ensure we can recover values that are bytecode
            live-in to the ForceOSRExit.

            Using ForceOSRExit as the signal for this is a bit of a hack. It definitely
            does not get rid of all the CFG that it could. If we decide it's worth
            it, we could use additional inputs into this mechanism. For example, we could
            profile if a basic block ever executes inside the LLInt/Baseline, and
            remove parts of the CFG based on that.

            When running Speedometer with the concurrent JIT turned off, this patch
            improves DFG/FTL compile times by around 5%.

            * dfg/DFGByteCodeParser.cpp:
            (JSC::DFG::ByteCodeParser::addToGraph):
            (JSC::DFG::ByteCodeParser::parse):

2018-01-11  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r226650. rdar://problem/36429150

    2018-01-09  Mark Lam  <mark.lam@apple.com>

            ASSERTION FAILED: pair.second->m_type & PropertyNode::Getter
            https://bugs.webkit.org/show_bug.cgi?id=181388
            <rdar://problem/36349351>

            Reviewed by Saam Barati.

            When there are duplicate setters or getters, we may end up overwriting a getter
            with a setter, or vice versa.  This patch adds tracking for getters/setters that
            have been overwritten with duplicates and ignore them.

            * bytecompiler/NodesCodegen.cpp:
            (JSC::PropertyListNode::emitBytecode):
            * parser/NodeConstructors.h:
            (JSC::PropertyNode::PropertyNode):
            * parser/Nodes.h:
            (JSC::PropertyNode::isOverriddenByDuplicate const):
            (JSC::PropertyNode::setIsOverriddenByDuplicate):

2018-01-09  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r226672. rdar://problem/36397330

    2018-01-09  Keith Miller  <keith_miller@apple.com>

            and32 with an Address source on ARM64 did not invalidate dataTempRegister
            https://bugs.webkit.org/show_bug.cgi?id=181467

            Reviewed by Michael Saboff.

            * assembler/MacroAssemblerARM64.h:
            (JSC::MacroAssemblerARM64::and32):

2018-01-09  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r226615. rdar://problem/36392328

    2018-01-08  JF Bastien  <jfbastien@apple.com>

            WebAssembly: mask indexed accesses to Table
            https://bugs.webkit.org/show_bug.cgi?id=181412
            <rdar://problem/36363236>

            Reviewed by Saam Barati.

            WebAssembly Table indexed accesses are user-controlled and
            bounds-checked. Force allocations of Table data to be a
            power-of-two, and explicitly mask accesses after bounds-check
            branches.

            Rename misleading usage of "size" when "length" of a Table was
            intended.

            Rename the Spectre option from "disable" to "enable".

            * dfg/DFGSpeculativeJIT.cpp:
            (JSC::DFG::SpeculativeJIT::SpeculativeJIT):
            * ftl/FTLLowerDFGToB3.cpp:
            (JSC::FTL::DFG::LowerDFGToB3::LowerDFGToB3):
            * jit/JIT.cpp:
            (JSC::JIT::JIT):
            * runtime/Options.h:
            * wasm/WasmB3IRGenerator.cpp:
            (JSC::Wasm::B3IRGenerator::emitCheckAndPreparePointer):
            (JSC::Wasm::B3IRGenerator::addCallIndirect):
            * wasm/WasmTable.cpp:
            (JSC::Wasm::Table::allocatedLength):
            (JSC::Wasm::Table::setLength):
            (JSC::Wasm::Table::create):
            (JSC::Wasm::Table::Table):
            (JSC::Wasm::Table::grow):
            (JSC::Wasm::Table::clearFunction):
            (JSC::Wasm::Table::setFunction):
            * wasm/WasmTable.h:
            (JSC::Wasm::Table::length const):
            (JSC::Wasm::Table::offsetOfLength):
            (JSC::Wasm::Table::offsetOfMask):
            (JSC::Wasm::Table::mask const):
            (JSC::Wasm::Table::isValidLength):
            * wasm/js/JSWebAssemblyInstance.cpp:
            (JSC::JSWebAssemblyInstance::create):
            * wasm/js/JSWebAssemblyTable.cpp:
            (JSC::JSWebAssemblyTable::JSWebAssemblyTable):
            (JSC::JSWebAssemblyTable::visitChildren):
            (JSC::JSWebAssemblyTable::grow):
            (JSC::JSWebAssemblyTable::getFunction):
            (JSC::JSWebAssemblyTable::clearFunction):
            (JSC::JSWebAssemblyTable::setFunction):
            * wasm/js/JSWebAssemblyTable.h:
            (JSC::JSWebAssemblyTable::isValidLength):
            (JSC::JSWebAssemblyTable::length const):
            (JSC::JSWebAssemblyTable::allocatedLength const):
            * wasm/js/WebAssemblyModuleRecord.cpp:
            (JSC::WebAssemblyModuleRecord::evaluate):
            * wasm/js/WebAssemblyTablePrototype.cpp:
            (JSC::webAssemblyTableProtoFuncLength):
            (JSC::webAssemblyTableProtoFuncGrow):
            (JSC::webAssemblyTableProtoFuncGet):
            (JSC::webAssemblyTableProtoFuncSet):

2018-01-09  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r226556. rdar://problem/36392331

    2018-01-08  Mark Lam  <mark.lam@apple.com>

            Rename CodeBlock::m_vm to CodeBlock::m_poisonedVM.
            https://bugs.webkit.org/show_bug.cgi?id=181403
            <rdar://problem/36359789>

            Rubber-stamped by JF Bastien.

            * bytecode/CodeBlock.cpp:
            (JSC::CodeBlock::CodeBlock):
            (JSC::CodeBlock::~CodeBlock):
            (JSC::CodeBlock::setConstantRegisters):
            (JSC::CodeBlock::propagateTransitions):
            (JSC::CodeBlock::finalizeLLIntInlineCaches):
            (JSC::CodeBlock::jettison):
            (JSC::CodeBlock::predictedMachineCodeSize):
            * bytecode/CodeBlock.h:
            (JSC::CodeBlock::vm const):
            (JSC::CodeBlock::addConstant):
            (JSC::CodeBlock::heap const):
            (JSC::CodeBlock::replaceConstant):
            * llint/LowLevelInterpreter.asm:
            * llint/LowLevelInterpreter32_64.asm:
            * llint/LowLevelInterpreter64.asm:

2018-01-09  Jason Marcell  <jmarcell@apple.com>

        Cherry-pick r226530. rdar://problem/36392325

    2018-01-07  Mark Lam  <mark.lam@apple.com>

            Apply poisoning to more pointers in JSC.
            https://bugs.webkit.org/show_bug.cgi?id=181096
            <rdar://problem/36182970>

            Reviewed by JF Bastien.

            * assembler/MacroAssembler.h:
            (JSC::MacroAssembler::xorPtr):
            * assembler/MacroAssemblerARM64.h:
            (JSC::MacroAssemblerARM64::xor64):
            * assembler/MacroAssemblerX86_64.h:
            (JSC::MacroAssemblerX86_64::xor64):
            - Add xorPtr implementation.

            * bytecode/CodeBlock.cpp:
            (JSC::CodeBlock::inferredName const):
            (JSC::CodeBlock::CodeBlock):
            (JSC::CodeBlock::finishCreation):
            (JSC::CodeBlock::~CodeBlock):
            (JSC::CodeBlock::setConstantRegisters):
            (JSC::CodeBlock::visitWeakly):
            (JSC::CodeBlock::visitChildren):
            (JSC::CodeBlock::propagateTransitions):
            (JSC::CodeBlock::WeakReferenceHarvester::visitWeakReferences):
            (JSC::CodeBlock::finalizeLLIntInlineCaches):
            (JSC::CodeBlock::finalizeBaselineJITInlineCaches):
            (JSC::CodeBlock::UnconditionalFinalizer::finalizeUnconditionally):
            (JSC::CodeBlock::jettison):
            (JSC::CodeBlock::predictedMachineCodeSize):
            (JSC::CodeBlock::findPC):
            * bytecode/CodeBlock.h:
            (JSC::CodeBlock::UnconditionalFinalizer::UnconditionalFinalizer):
            (JSC::CodeBlock::WeakReferenceHarvester::WeakReferenceHarvester):
            (JSC::CodeBlock::stubInfoBegin):
            (JSC::CodeBlock::stubInfoEnd):
            (JSC::CodeBlock::callLinkInfosBegin):
            (JSC::CodeBlock::callLinkInfosEnd):
            (JSC::CodeBlock::instructions):
            (JSC::CodeBlock::instructions const):
            (JSC::CodeBlock::vm const):
            * dfg/DFGOSRExitCompilerCommon.h:
            (JSC::DFG::adjustFrameAndStackInOSRExitCompilerThunk):
            * jit/JIT.h:
            * llint/LLIntOfflineAsmConfig.h:
            * llint/LowLevelInterpreter.asm:
            * llint/LowLevelInterpreter64.asm:
            * parser/UnlinkedSourceCode.h:
            * runtime/JSCPoison.h:
            * runtime/JSGlobalObject.cpp:
            (JSC::JSGlobalObject::init):
            * runtime/JSGlobalObject.h:
            * runtime/JSScriptFetchParameters.h:
            * runtime/JSScriptFetcher.h:
            * runtime/StructureTransitionTable.h:
            * wasm/js/JSWebAssemblyCodeBlock.cpp:
            (JSC::JSWebAssemblyCodeBlock::JSWebAssemblyCodeBlock):
            (JSC::JSWebAssemblyCodeBlock::visitChildren):
            (JSC::JSWebAssemblyCodeBlock::UnconditionalFinalizer::finalizeUnconditionally):
            * wasm/js/JSWebAssemblyCodeBlock.h:

2018-01-06  Yusuke Suzuki  <utatane.tea@gmail.com>

        Object.getOwnPropertyNames includes "arguments" and "caller" for bound functions
        https://bugs.webkit.org/show_bug.cgi?id=181321

        Reviewed by Saam Barati.

        According to ECMA262 16.2[1], functions created using the bind method must not have
        "caller" and "arguments" own properties.

        [1]: https://tc39.github.io/ecma262/#sec-forbidden-extensions

        * runtime/JSBoundFunction.cpp:
        (JSC::JSBoundFunction::finishCreation):

2018-01-05  JF Bastien  <jfbastien@apple.com>

        WebAssembly: poison JS object's secrets
        https://bugs.webkit.org/show_bug.cgi?id=181339
        <rdar://problem/36325001>

        Reviewed by Mark Lam.

        Separating WebAssembly's JS objects from their non-JS
        implementation means that all interesting information lives
        outside of the JS object itself. This patch poisons each JS
        object's pointer to non-JS implementation using the poisoning
        mechanism and a unique key per JS object type origin.

        * runtime/JSCPoison.h:
        * wasm/js/JSToWasm.cpp:
        (JSC::Wasm::createJSToWasmWrapper): JS -> wasm stores the JS
        object in a stack slot when fast TLS is disabled. This requires
        that we unpoison the Wasm::Instance.
        * wasm/js/JSWebAssemblyCodeBlock.h:
        * wasm/js/JSWebAssemblyInstance.h:
        (JSC::JSWebAssemblyInstance::offsetOfPoisonedInstance): renamed to
        be explicit that the pointer is poisoned.
        * wasm/js/JSWebAssemblyMemory.h:
        * wasm/js/JSWebAssemblyModule.h:
        * wasm/js/JSWebAssemblyTable.h:

2018-01-05  Michael Saboff  <msaboff@apple.com>

        Add ability to disable indexed property masking for testing
        https://bugs.webkit.org/show_bug.cgi?id=181350

        Reviewed by Keith Miller.

        Made the masking of indexed properties runtime controllable via a new JSC::Option
        named disableSpectreMitigations.  This is done to test the efficacy of that mitigation.

        The new option has a generic name as it will probably be used to disable future mitigations.

        * dfg/DFGSpeculativeJIT.cpp:
        (JSC::DFG::SpeculativeJIT::SpeculativeJIT):
        (JSC::DFG::SpeculativeJIT::loadFromIntTypedArray):
        (JSC::DFG::SpeculativeJIT::compileGetByValOnFloatTypedArray):
        * dfg/DFGSpeculativeJIT.h:
        * dfg/DFGSpeculativeJIT64.cpp:
        (JSC::DFG::SpeculativeJIT::compile):
        * ftl/FTLLowerDFGToB3.cpp:
        (JSC::FTL::DFG::LowerDFGToB3::LowerDFGToB3):
        (JSC::FTL::DFG::LowerDFGToB3::maskedIndex):
        (JSC::FTL::DFG::LowerDFGToB3::pointerIntoTypedArray):
        * jit/JIT.cpp:
        (JSC::JIT::JIT):
        * jit/JIT.h:
        * jit/JITPropertyAccess.cpp:
        (JSC::JIT::emitDoubleLoad):
        (JSC::JIT::emitContiguousLoad):
        (JSC::JIT::emitArrayStorageLoad):
        * runtime/Options.h:
        * wasm/WasmB3IRGenerator.cpp:
        (JSC::Wasm::B3IRGenerator::emitCheckAndPreparePointer):

2018-01-05  Michael Saboff  <msaboff@apple.com>

        Allow JSC Config Files to set Restricted Options
        https://bugs.webkit.org/show_bug.cgi?id=181352

        Reviewed by Mark Lam.

        * runtime/ConfigFile.cpp:
        (JSC::ConfigFile::parse):

2018-01-04  Keith Miller  <keith_miller@apple.com>

        TypedArrays and Wasm should use index masking.
        https://bugs.webkit.org/show_bug.cgi?id=181313

        Reviewed by Michael Saboff.

        We should have index masking for our TypedArray code in the
        DFG/FTL and for Wasm when doing bounds checking. Index masking for
        Wasm is added to the WasmBoundsCheckValue. Since we don't CSE any
        WasmBoundsCheckValues we don't need to worry about combining a
        bounds check for a load and a store. I went with fusing the
        pointer masking in the WasmBoundsCheckValue since it should reduce
        additional compiler overhead.

        * b3/B3LowerToAir.cpp:
        * b3/B3Validate.cpp:
        * b3/B3WasmBoundsCheckValue.cpp:
        (JSC::B3::WasmBoundsCheckValue::WasmBoundsCheckValue):
        (JSC::B3::WasmBoundsCheckValue::dumpMeta const):
        * b3/B3WasmBoundsCheckValue.h:
        (JSC::B3::WasmBoundsCheckValue::pinnedIndexingMask const):
        * b3/air/AirCustom.h:
        (JSC::B3::Air::WasmBoundsCheckCustom::generate):
        * b3/testb3.cpp:
        (JSC::B3::testWasmBoundsCheck):
        * dfg/DFGSpeculativeJIT.cpp:
        (JSC::DFG::SpeculativeJIT::emitAllocateRawObject):
        (JSC::DFG::SpeculativeJIT::loadFromIntTypedArray):
        (JSC::DFG::SpeculativeJIT::compileGetByValOnIntTypedArray):
        (JSC::DFG::SpeculativeJIT::compileGetByValOnFloatTypedArray):
        (JSC::DFG::SpeculativeJIT::compileNewTypedArrayWithSize):
        * dfg/DFGSpeculativeJIT.h:
        * dfg/DFGSpeculativeJIT64.cpp:
        (JSC::DFG::SpeculativeJIT::compile):
        * ftl/FTLLowerDFGToB3.cpp:
        (JSC::FTL::DFG::LowerDFGToB3::compileAtomicsReadModifyWrite):
        (JSC::FTL::DFG::LowerDFGToB3::compileGetByVal):
        (JSC::FTL::DFG::LowerDFGToB3::compileNewTypedArray):
        (JSC::FTL::DFG::LowerDFGToB3::pointerIntoTypedArray):
        * jit/JITPropertyAccess.cpp:
        (JSC::JIT::emitIntTypedArrayGetByVal):
        * runtime/Butterfly.h:
        (JSC::Butterfly::computeIndexingMask const):
        (JSC::Butterfly::computeIndexingMaskForVectorLength): Deleted.
        * runtime/JSArrayBufferView.cpp:
        (JSC::JSArrayBufferView::JSArrayBufferView):
        * wasm/WasmB3IRGenerator.cpp:
        (JSC::Wasm::B3IRGenerator::B3IRGenerator):
        (JSC::Wasm::B3IRGenerator::restoreWebAssemblyGlobalState):
        (JSC::Wasm::B3IRGenerator::emitCheckAndPreparePointer):
        (JSC::Wasm::B3IRGenerator::load):
        (JSC::Wasm::B3IRGenerator::store):
        (JSC::Wasm::B3IRGenerator::addCallIndirect):
        * wasm/WasmBinding.cpp:
        (JSC::Wasm::wasmToWasm):
        * wasm/WasmMemory.cpp:
        (JSC::Wasm::Memory::Memory):
        (JSC::Wasm::Memory::grow):
        * wasm/WasmMemory.h:
        (JSC::Wasm::Memory::offsetOfIndexingMask):
        * wasm/WasmMemoryInformation.cpp:
        (JSC::Wasm::PinnedRegisterInfo::get):
        (JSC::Wasm::PinnedRegisterInfo::PinnedRegisterInfo):
        * wasm/WasmMemoryInformation.h:
        (JSC::Wasm::PinnedRegisterInfo::toSave const):
        * wasm/js/JSToWasm.cpp:
        (JSC::Wasm::createJSToWasmWrapper):

2018-01-05  Commit Queue  <commit-queue@webkit.org>

        Unreviewed, rolling out r226434.
        https://bugs.webkit.org/show_bug.cgi?id=181322

        32bit JSC failure in x86 (Requested by yusukesuzuki on
        #webkit).

        Reverted changeset:

        "[DFG] Unify ToNumber implementation in 32bit and 64bit by
        changing 32bit Int32Tag and LowestTag"
        https://bugs.webkit.org/show_bug.cgi?id=181134
        https://trac.webkit.org/changeset/226434

2018-01-04  Devin Rousso  <webkit@devinrousso.com>

        Web Inspector: replace HTMLCanvasElement with CanvasRenderingContext for instrumentation logic
        https://bugs.webkit.org/show_bug.cgi?id=180770

        Reviewed by Joseph Pecoraro.

        * inspector/protocol/Canvas.json:

2018-01-04  Commit Queue  <commit-queue@webkit.org>

        Unreviewed, rolling out r226405.
        https://bugs.webkit.org/show_bug.cgi?id=181318

        Speculative rollout due to Octane/SplayLatency,Octane/Splay
        regressions (Requested by yusukesuzuki on #webkit).

        Reverted changeset:

        "[JSC] Create parallel SlotVisitors apriori"
        https://bugs.webkit.org/show_bug.cgi?id=180907
        https://trac.webkit.org/changeset/226405

2018-01-04  Saam Barati  <sbarati@apple.com>

        Do value profiling in to_this
        https://bugs.webkit.org/show_bug.cgi?id=181299

        Reviewed by Filip Pizlo.

        This patch adds value profiling to to_this. We use the result of the value
        profiling only for strict mode code when we don't predict that the input is
        of a specific type. This helps when the input is SpecCellOther. Such cells
        might implement a custom ToThis, which can produce an arbitrary result. Before
        this patch, in prediction propagation, we were saying that a ToThis with a
        SpecCellOther input also produced SpecCellOther. However, this is incorrect,
        given that the input may implement ToThis that produces an arbitrary result.
        This is seen inside Speedometer. This patch fixes an OSR exit loop in Speedometer.
        
        Interestingly, this patch only does value profiling on the slow path. The fast
        path of to_this in the LLInt/baseline just perform a structure check. If it
        passes, the result is the same as the input. Therefore, doing value profiling
        from the fast path wouldn't actually produce new information for the ValueProfile.

        * bytecode/BytecodeDumper.cpp:
        (JSC::BytecodeDumper<Block>::dumpBytecode):
        * bytecode/BytecodeList.json:
        * bytecode/CodeBlock.cpp:
        (JSC::CodeBlock::finishCreation):
        * bytecompiler/BytecodeGenerator.cpp:
        (JSC::BytecodeGenerator::BytecodeGenerator):
        (JSC::BytecodeGenerator::emitToThis):
        * bytecompiler/BytecodeGenerator.h:
        * dfg/DFGByteCodeParser.cpp:
        (JSC::DFG::ByteCodeParser::parseBlock):
        * dfg/DFGNode.h:
        (JSC::DFG::Node::hasHeapPrediction):
        * dfg/DFGPredictionPropagationPhase.cpp:
        * runtime/CommonSlowPaths.cpp:
        (JSC::SLOW_PATH_DECL):

2018-01-04  Yusuke Suzuki  <utatane.tea@gmail.com>

        [DFG] Unify ToNumber implementation in 32bit and 64bit by changing 32bit Int32Tag and LowestTag
        https://bugs.webkit.org/show_bug.cgi?id=181134

        Reviewed by Mark Lam.

        We would like to unify DFG ToNumber implementation in 32bit and 64bit. One problem is that
        branchIfNumber signature is different between 32bit and 64bit. 32bit implementation requires
        an additional scratch register. We do not want to allocate an unnecessary register in 64bit
        implementation.

        This patch removes the additional register in branchIfNumber/branchIfNotNumber in both 32bit
        and 64bit implementation. To achieve this goal, we change Int32Tag and LowestTag order. By
        setting Int32Tag as LowestTag, we can query whether the given tag is a number by checking
        `<= LowestTag(Int32Tag)`.

        We also change the order of UndefinedTag, NullTag, and BooleanTag to keep `(UndefinedTag | 1) == NullTag`.

        We also clean up speculateMisc implementation by adding branchIfMisc/branchIfNotMisc.

        * dfg/DFGSpeculativeJIT.cpp:
        (JSC::DFG::SpeculativeJIT::compileValueToInt32):
        (JSC::DFG::SpeculativeJIT::compileDoubleRep):
        (JSC::DFG::SpeculativeJIT::speculateNumber):
        (JSC::DFG::SpeculativeJIT::speculateMisc):
        (JSC::DFG::SpeculativeJIT::compileNormalizeMapKey):
        (JSC::DFG::SpeculativeJIT::compileToNumber):
        * dfg/DFGSpeculativeJIT.h:
        * dfg/DFGSpeculativeJIT32_64.cpp:
        (JSC::DFG::SpeculativeJIT::nonSpeculativeNonPeepholeCompareNullOrUndefined):
        (JSC::DFG::SpeculativeJIT::nonSpeculativePeepholeBranchNullOrUndefined):
        (JSC::DFG::SpeculativeJIT::compileObjectOrOtherLogicalNot):
        (JSC::DFG::SpeculativeJIT::emitObjectOrOtherBranch):
        (JSC::DFG::SpeculativeJIT::compile):
        * dfg/DFGSpeculativeJIT64.cpp:
        (JSC::DFG::SpeculativeJIT::compile):
        * jit/AssemblyHelpers.cpp:
        (JSC::AssemblyHelpers::branchIfNotType):
        (JSC::AssemblyHelpers::jitAssertIsJSNumber):
        (JSC::AssemblyHelpers::emitConvertValueToBoolean):
        * jit/AssemblyHelpers.h:
        (JSC::AssemblyHelpers::branchIfMisc):
        (JSC::AssemblyHelpers::branchIfNotMisc):
        (JSC::AssemblyHelpers::branchIfNumber):
        (JSC::AssemblyHelpers::branchIfNotNumber):
        (JSC::AssemblyHelpers::branchIfNotDoubleKnownNotInt32):
        (JSC::AssemblyHelpers::emitTypeOf):
        * jit/JITAddGenerator.cpp:
        (JSC::JITAddGenerator::generateFastPath):
        * jit/JITArithmetic32_64.cpp:
        (JSC::JIT::emitBinaryDoubleOp):
        * jit/JITDivGenerator.cpp:
        (JSC::JITDivGenerator::loadOperand):
        * jit/JITMulGenerator.cpp:
        (JSC::JITMulGenerator::generateInline):
        (JSC::JITMulGenerator::generateFastPath):
        * jit/JITNegGenerator.cpp:
        (JSC::JITNegGenerator::generateInline):
        (JSC::JITNegGenerator::generateFastPath):
        * jit/JITOpcodes32_64.cpp:
        (JSC::JIT::emit_op_is_number):
        (JSC::JIT::emit_op_jeq_null):
        (JSC::JIT::emit_op_jneq_null):
        (JSC::JIT::emit_op_to_number):
        (JSC::JIT::emit_op_profile_type):
        * jit/JITRightShiftGenerator.cpp:
        (JSC::JITRightShiftGenerator::generateFastPath):
        * jit/JITSubGenerator.cpp:
        (JSC::JITSubGenerator::generateInline):
        (JSC::JITSubGenerator::generateFastPath):
        * llint/LLIntData.cpp:
        (JSC::LLInt::Data::performAssertions):
        * llint/LowLevelInterpreter.asm:
        * llint/LowLevelInterpreter32_64.asm:
        * runtime/JSCJSValue.h:

2018-01-04  JF Bastien  <jfbastien@apple.com>

        Add assembler support for x86 lfence and sfence
        https://bugs.webkit.org/show_bug.cgi?id=181311
        <rdar://problem/36301780>

        Reviewed by Michael Saboff.

        Useful for testing performance of serializing instructions (hint:
        it's not good).

        * assembler/MacroAssemblerX86Common.h:
        (JSC::MacroAssemblerX86Common::lfence):
        (JSC::MacroAssemblerX86Common::sfence):
        * assembler/X86Assembler.h:
        (JSC::X86Assembler::lfence):
        (JSC::X86Assembler::sfence):

2018-01-04  Saam Barati  <sbarati@apple.com>

        Add a new pattern matching rule to Graph::methodOfGettingAValueProfileFor for SetLocal(@nodeWithHeapPrediction)
        https://bugs.webkit.org/show_bug.cgi?id=181296

        Reviewed by Filip Pizlo.

        Inside Speedometer's Ember test, there is a recompile loop like:
        a: GetByVal(..., semanticOriginX)
        b: SetLocal(Cell:@a, semanticOriginX)
        
        where the cell check always fails. For reasons I didn't investigate, the
        baseline JIT's value profiling doesn't accurately capture the GetByVal's
        result.
        
        However, when compiling this cell speculation check in the DFG, we get a null
        MethodOfGettingAValueProfile inside Graph::methodOfGettingAValueProfileFor for
        this IR pattern because both @a and @b have the same semantic origin. We
        should not follow the same semantic origin heuristic when dealing with
        SetLocal since SetLocal(@nodeWithHeapPrediction) is such a common IR pattern.
        For patterns like this, we introduce a new heuristic: @NodeThatDoesNotProduceAValue(@nodeWithHeapPrediction).
        For this IR pattern, we will update the value profile for the semantic origin
        for @nodeWithHeapPrediction. So, for the Speedometer example above, we
        will correctly update the GetByVal's value profile, which will prevent
        an OSR exit loop.

        * dfg/DFGGraph.cpp:
        (JSC::DFG::Graph::methodOfGettingAValueProfileFor):

2018-01-04  Keith Miller  <keith_miller@apple.com>

        Array Storage operations sometimes did not update the indexing mask correctly.
        https://bugs.webkit.org/show_bug.cgi?id=181301

        Reviewed by Mark Lam.

        I will add tests in a follow up patch. See: https://bugs.webkit.org/show_bug.cgi?id=181303

        * runtime/JSArray.cpp:
        (JSC::JSArray::shiftCountWithArrayStorage):
        * runtime/JSObject.cpp:
        (JSC::JSObject::increaseVectorLength):

2018-01-04  Yusuke Suzuki  <utatane.tea@gmail.com>

        [DFG] Define defs for MapSet/SetAdd to participate in CSE
        https://bugs.webkit.org/show_bug.cgi?id=179911

        Reviewed by Saam Barati.

        With this patch, our MapSet and SetAdd DFG nodes participate in CSE.
        To handle a bit tricky DFG Map operation nodes, MapSet and SetAdd
        produce added bucket as its result. Subsequent GetMapBucket will
        be removed by CSE.

        * dfg/DFGAbstractInterpreterInlines.h:
        (JSC::DFG::AbstractInterpreter<AbstractStateType>::executeEffects):
        * dfg/DFGClobberize.h:
        (JSC::DFG::clobberize):
        * dfg/DFGNodeType.h:
        * dfg/DFGOperations.cpp:
        * dfg/DFGOperations.h:
        * dfg/DFGPredictionPropagationPhase.cpp:
        * dfg/DFGSpeculativeJIT.cpp:
        (JSC::DFG::SpeculativeJIT::compileSetAdd):
        (JSC::DFG::SpeculativeJIT::compileMapSet):
        * dfg/DFGSpeculativeJIT.h:
        (JSC::DFG::SpeculativeJIT::callOperation):
        * ftl/FTLLowerDFGToB3.cpp:
        (JSC::FTL::DFG::LowerDFGToB3::compileSetAdd):
        (JSC::FTL::DFG::LowerDFGToB3::compileMapSet):
        * jit/JITOperations.h:
        * runtime/HashMapImpl.h:
        (JSC::HashMapImpl::addNormalized):
        (JSC::HashMapImpl::addNormalizedInternal):

2018-01-04  Yusuke Suzuki  <utatane.tea@gmail.com>

        [JSC] Remove LocalScope
        https://bugs.webkit.org/show_bug.cgi?id=181206

        Reviewed by Geoffrey Garen.

        The last user of HandleStack and LocalScope is JSON. But MarkedArgumentBuffer is enough for their use.
        This patch changes JSON parsing and stringifying to using MarkedArgumentBuffer. And remove HandleStack
        and LocalScope.

        We make Stringifier and Walker WTF_FORBID_HEAP_ALLOCATION to place them on the stack. So they can hold
        JSObject* directly in their fields.

        * JavaScriptCore.xcodeproj/project.pbxproj:
        * Sources.txt:
        * heap/HandleStack.cpp: Removed.
        * heap/HandleStack.h: Removed.
        * heap/Heap.cpp:
        (JSC::Heap::addCoreConstraints):
        * heap/Heap.h:
        (JSC::Heap::handleSet):
        (JSC::Heap::handleStack): Deleted.
        * heap/Local.h: Removed.
        * heap/LocalScope.h: Removed.
        * runtime/JSONObject.cpp:
        (JSC::Stringifier::Holder::object const):
        (JSC::gap):
        (JSC::Stringifier::Stringifier):
        (JSC::Stringifier::stringify):
        (JSC::Stringifier::appendStringifiedValue):
        (JSC::Stringifier::Holder::Holder):
        (JSC::Stringifier::Holder::appendNextProperty):
        (JSC::Walker::Walker):
        (JSC::Walker::callReviver):
        (JSC::Walker::walk):
        (JSC::JSONProtoFuncParse):
        (JSC::JSONProtoFuncStringify):
        (JSC::JSONParse):
        (JSC::JSONStringify):

2018-01-04  Yusuke Suzuki  <utatane.tea@gmail.com>

        [FTL] Optimize ObjectAllocationSinking mergePointerSets by using removeIf
        https://bugs.webkit.org/show_bug.cgi?id=180238

        Reviewed by Saam Barati.

        We can optimize ObjectAllocationSinking a bit by using removeIf.

        * dfg/DFGObjectAllocationSinkingPhase.cpp:

2018-01-04  Yusuke Suzuki  <utatane.tea@gmail.com>

        [JSC] Create parallel SlotVisitors apriori
        https://bugs.webkit.org/show_bug.cgi?id=180907

        Reviewed by Saam Barati.

        The number of SlotVisitors are capped with the number of HeapHelperPool's threads + 2.
        If we create these SlotVisitors apriori, we do not need to create SlotVisitors dynamically.
        Then we do not need to grab locks while iterating all the SlotVisitors.

        In addition, we do not need to consider the case that the number of SlotVisitors increases
        after setting up VisitCounters in MarkingConstraintSolver since the number of SlotVisitors
        does not increase any more.

        * heap/Heap.cpp:
        (JSC::Heap::Heap):
        (JSC::Heap::runBeginPhase):
        * heap/Heap.h:
        * heap/HeapInlines.h:
        (JSC::Heap::forEachSlotVisitor):
        (JSC::Heap::numberOfSlotVisitors): Deleted.
        * heap/MarkingConstraintSolver.cpp:
        (JSC::MarkingConstraintSolver::didVisitSomething const):

2018-01-03  Ting-Wei Lan  <lantw44@gmail.com>

        Replace hard-coded paths in shebangs with #!/usr/bin/env
        https://bugs.webkit.org/show_bug.cgi?id=181040

        Reviewed by Alex Christensen.

        * Scripts/UpdateContents.py:
        * Scripts/cssmin.py:
        * Scripts/generate-combined-inspector-json.py:
        * Scripts/xxd.pl:
        * create_hash_table:
        * generate-bytecode-files:
        * wasm/generateWasm.py:
        * wasm/generateWasmOpsHeader.py:
        * yarr/generateYarrCanonicalizeUnicode:

2018-01-03  Michael Saboff  <msaboff@apple.com>

        Disable SharedArrayBuffers from Web API
        https://bugs.webkit.org/show_bug.cgi?id=181266

        Reviewed by Saam Barati.

        Removed SharedArrayBuffer prototype and structure from GlobalObject creation
        to disable.

        * runtime/JSGlobalObject.cpp:
        (JSC::JSGlobalObject::init):
        (JSC::JSGlobalObject::visitChildren):
        * runtime/JSGlobalObject.h:
        (JSC::JSGlobalObject::arrayBufferPrototype const):
        (JSC::JSGlobalObject::arrayBufferStructure const):

2018-01-03  Michael Saboff  <msaboff@apple.com>

        Add "noInline" to $vm
        https://bugs.webkit.org/show_bug.cgi?id=181265

        Reviewed by Mark Lam.

        This would be useful for web based tests.

        * tools/JSDollarVM.cpp:
        (JSC::getExecutableForFunction):
        (JSC::functionNoInline):
        (JSC::JSDollarVM::finishCreation):

2018-01-03  Michael Saboff  <msaboff@apple.com>

        Remove unnecessary flushing of Butterfly pointer in functionCpuClflush()
        https://bugs.webkit.org/show_bug.cgi?id=181263

        Reviewed by Mark Lam.

        Flushing the butterfly pointer provides no benefit and slows this function.

        * tools/JSDollarVM.cpp:
        (JSC::functionCpuClflush):

2018-01-03  Saam Barati  <sbarati@apple.com>

        Fix BytecodeParser op_catch assert to work with useProfiler=1
        https://bugs.webkit.org/show_bug.cgi?id=181260

        Reviewed by Keith Miller.

        op_catch was asserting that the current block was empty. This is only true
        if the profiler isn't enabled. When the profiler is enabled, we will
        insert a CountExecution node before each bytecode. This patch fixes the
        assert to work with the profiler.

        * dfg/DFGByteCodeParser.cpp:
        (JSC::DFG::ByteCodeParser::parseBlock):

2018-01-03  Per Arne Vollan  <pvollan@apple.com>

        [Win][Debug] testapi link error.
        https://bugs.webkit.org/show_bug.cgi?id=181247
        <rdar://problem/36166729>

        Reviewed by Brent Fulgham.

        Do not set the runtime library compile flag for C files, it is already set to the correct value.
 
        * shell/PlatformWin.cmake:

2018-01-03  Robin Morisset  <rmorisset@apple.com>

        Inlining of a function that ends in op_unreachable crashes
        https://bugs.webkit.org/show_bug.cgi?id=181027

        Reviewed by Filip Pizlo.

        * dfg/DFGByteCodeParser.cpp:
        (JSC::DFG::ByteCodeParser::allocateTargetableBlock):
        (JSC::DFG::ByteCodeParser::inlineCall):

2018-01-02  Saam Barati  <sbarati@apple.com>

        Incorrect assertion inside AccessCase
        https://bugs.webkit.org/show_bug.cgi?id=181200
        <rdar://problem/35494754>

        Reviewed by Yusuke Suzuki.

        Consider a PutById compiled to a setter in a function like so:
        
        ```
        function foo(o) { o.f = o; }
        ```
        
        The DFG will often assign the same registers to the baseGPR (o in o.f) and the
        valueRegsPayloadGPR (o in the RHS). The code totally works when these are assigned
        to the same register. However, we're asserting that they're not the same register.
        This patch just removes this invalid assertion.

        * bytecode/AccessCase.cpp:
        (JSC::AccessCase::generateImpl):

2018-01-02  Caio Lima  <ticaiolima@gmail.com>

        [ESNext][BigInt] Implement BigIntConstructor and BigIntPrototype
        https://bugs.webkit.org/show_bug.cgi?id=175359

        Reviewed by Yusuke Suzuki.

        This patch is implementing BigIntConstructor and BigIntPrototype
        following spec[1, 2]. As addition, we are also implementing BigIntObject
        warapper to handle ToObject(v) abstract operation when "v" is a BigInt
        primitive. With these classes, now it's possible to syntetize
        BigInt.prototype and then call "toString", "valueOf" and
        "toLocaleString" when the primitive is a BigInt.
        BigIntConstructor exposes an API to parse other primitives such as
        Number, Boolean and String to BigInt.
        We decided to skip parseInt implementation, since it was removed from
        spec.

        [1] - https://tc39.github.io/proposal-bigint/#sec-bigint-constructor
        [2] - https://tc39.github.io/proposal-bigint/#sec-properties-of-the-bigint-prototype-object 

        * CMakeLists.txt:
        * DerivedSources.make:
        * JavaScriptCore.xcodeproj/project.pbxproj:
        * Sources.txt:
        * jsc.cpp:
        * runtime/BigIntConstructor.cpp: Added.
        (JSC::BigIntConstructor::BigIntConstructor):
        (JSC::BigIntConstructor::finishCreation):
        (JSC::isSafeInteger):
        (JSC::toBigInt):
        (JSC::callBigIntConstructor):
        (JSC::bigIntConstructorFuncAsUintN):
        (JSC::bigIntConstructorFuncAsIntN):
        * runtime/BigIntConstructor.h: Added.
        (JSC::BigIntConstructor::create):
        (JSC::BigIntConstructor::createStructure):
        * runtime/BigIntObject.cpp: Added.
        (JSC::BigIntObject::BigIntObject):
        (JSC::BigIntObject::finishCreation):
        (JSC::BigIntObject::toStringName):
        (JSC::BigIntObject::defaultValue):
        * runtime/BigIntObject.h: Added.
        (JSC::BigIntObject::create):
        (JSC::BigIntObject::internalValue const):
        (JSC::BigIntObject::createStructure):
        * runtime/BigIntPrototype.cpp: Added.
        (JSC::BigIntPrototype::BigIntPrototype):
        (JSC::BigIntPrototype::finishCreation):
        (JSC::toThisBigIntValue):
        (JSC::bigIntProtoFuncToString):
        (JSC::bigIntProtoFuncToLocaleString):
        (JSC::bigIntProtoFuncValueOf):
        * runtime/BigIntPrototype.h: Added.
        (JSC::BigIntPrototype::create):
        (JSC::BigIntPrototype::createStructure):
        * runtime/IntlCollator.cpp:
        (JSC::IntlCollator::initializeCollator):
        * runtime/IntlNumberFormat.cpp:
        (JSC::IntlNumberFormat::initializeNumberFormat):
        * runtime/JSBigInt.cpp:
        (JSC::JSBigInt::createFrom):
        (JSC::JSBigInt::parseInt):
        (JSC::JSBigInt::toObject const):
        * runtime/JSBigInt.h:
        * runtime/JSCJSValue.cpp:
        (JSC::JSValue::synthesizePrototype const):
        * runtime/JSCPoisonedPtr.cpp:
        * runtime/JSCell.cpp:
        (JSC::JSCell::toObjectSlow const):
        * runtime/JSGlobalObject.cpp:
        (JSC::JSGlobalObject::init):
        (JSC::JSGlobalObject::visitChildren):
        * runtime/JSGlobalObject.h:
        (JSC::JSGlobalObject::bigIntPrototype const):
        (JSC::JSGlobalObject::bigIntObjectStructure const):
        * runtime/StructureCache.h:
        * runtime/StructureInlines.h:
        (JSC::prototypeForLookupPrimitiveImpl):

2018-01-02  Tim Horton  <timothy_horton@apple.com>

        Fix the MathCommon build with a recent compiler
        https://bugs.webkit.org/show_bug.cgi?id=181216

        Reviewed by Sam Weinig.

        * runtime/MathCommon.cpp:
        (JSC::fdlibmPow):
        This cast drops the 'const' qualifier from the pointer to 'one',
        but it doesn't have to, and it makes the compiler sad.

== Rolled over to ChangeLog-2018-01-01 ==
