
PASS RTCPeerConnection.length 
PASS new RTCPeerConnection() 
PASS new RTCPeerConnection(null) 
PASS new RTCPeerConnection(undefined) 
PASS new RTCPeerConnection({}) 
PASS new RTCPeerConnection({ iceServers: null }) 
PASS new RTCPeerConnection({ iceServers: undefined }) 
PASS new RTCPeerConnection({ iceServers: [] }) 
PASS new RTCPeerConnection({ iceServers: [{}] }) 
PASS new RTCPeerConnection({ iceServers: [null] }) 
PASS new RTCPeerConnection({ iceServers: [undefined] }) 
PASS new RTCPeerConnection({ iceServers: [{ urls: "stun:stun1.example.net" }] }) 
PASS new RTCPeerConnection({ iceServers: [{ urls: [] }] }) 
PASS new RTCPeerConnection({ iceServers: [{ urls: ["stun:stun1.example.net"] }] }) 
PASS new RTCPeerConnection({ iceServers: [{ urls: ["stun:stun1.example.net", "stun:stun2.example.net"] }] }) 
PASS new RTCPeerConnection({ iceServers: [{ urls: "turns:turn.example.org", username: "user", credential: "cred" }] }) 
PASS new RTCPeerConnection({ iceServers: [{ urls: "turn:turn.example.net", username: "user", credential: "cred" }] }) 
FAIL new RTCPeerConnection({ iceServers: [{ urls: "turns:turn.example.org", username: "", credential: "" }] }) Bad Configuration Parameters
FAIL new RTCPeerConnection({ iceServers: [{ urls: "turn:turn.example.net", username: "", credential: "" }] }) Bad Configuration Parameters
PASS new RTCPeerConnection({ iceServers: [{ urls: ["turns:turn.example.org", "turn:turn.example.net"], username: "user", credential: "cred" }] }) 
PASS new RTCPeerConnection({ iceServers: [{ urls: "stun:stun1.example.net", credentialType: "password" }] }) 
PASS new RTCPeerConnection({ iceServers: [{ urls: "stun:stun1.example.net", credentialType: "token" }] }) 
PASS new RTCPeerConnection({ iceServers: [{ urls: "turn:turn.example.net" }] }) 
PASS new RTCPeerConnection({ iceServers: [{ urls: "turn:turn.example.net", username: "user" }] }) 
PASS new RTCPeerConnection({ iceServers: [{ urls: "turn:turn.example.net", credential: "cred" }] }) 
PASS new RTCPeerConnection({ iceServers: [{ urls: "turns:turn.example.org" }] }) 
PASS new RTCPeerConnection({ iceServers: [{ urls: "turns:turn.example.org", username: "user" }] }) 
PASS new RTCPeerConnection({ iceServers: [{ urls: "turns:turn.example.org", credential: "cred" }] }) 
FAIL new RTCPeerConnection({ iceServers: [{ urls: "relative-url" }] }) assert_throws: function "function () {
        eval(expr);
      }" threw object "NotSupportedError: ICE server protocol not supported" that is not a DOMException SyntaxError: property "code" is equal to 9, expected 12
FAIL new RTCPeerConnection({ iceServers: [{ urls: "http://example.com" }] }) assert_throws: function "function () {
        eval(expr);
      }" threw object "NotSupportedError: ICE server protocol not supported" that is not a DOMException SyntaxError: property "code" is equal to 9, expected 12
PASS new RTCPeerConnection({ iceServers: [{ urls: [], credentialType: "password" }] }) 
PASS new RTCPeerConnection({ iceServers: [{ urls: [], credentialType: "token" }] }) 
FAIL new RTCPeerConnection({ iceServers: [{ urls: [], credentialType: "invalid" }] }) assert_throws: function "function () {
        eval(expr);
      }" did not throw
PASS new RTCPeerConnection({ iceServers: [{ url: "stun:stun1.example.net" }] }) 
PASS new RTCPeerConnection({ iceTransportPolicy: null }) 
PASS new RTCPeerConnection({ iceTransportPolicy: undefined }) 
PASS new RTCPeerConnection({ iceTransportPolicy: "relay" }) 
PASS new RTCPeerConnection({ iceTransportPolicy: "all" }) 
PASS new RTCPeerConnection({ iceTransportPolicy: "invalid" }) 
PASS new RTCPeerConnection({ iceTransportPolicy: "none" }) 
PASS new RTCPeerConnection({ iceTransports: "invalid" }) 
PASS new RTCPeerConnection({ iceTransports: "none" }) 
PASS new RTCPeerConnection({ bundlePolicy: null }) 
PASS new RTCPeerConnection({ bundlePolicy: undefined }) 
PASS new RTCPeerConnection({ bundlePolicy: "balanced" }) 
PASS new RTCPeerConnection({ bundlePolicy: "max-compat" }) 
PASS new RTCPeerConnection({ bundlePolicy: "max-bundle" }) 
PASS new RTCPeerConnection({ bundlePolicy: "invalid" }) 
PASS new RTCPeerConnection({ rtcpMuxPolicy: null }) 
PASS new RTCPeerConnection({ rtcpMuxPolicy: undefined }) 
PASS new RTCPeerConnection({ rtcpMuxPolicy: "negotiate" }) 
PASS new RTCPeerConnection({ rtcpMuxPolicy: "require" }) 
PASS new RTCPeerConnection({ rtcpMuxPolicy: "invalid" }) 
FAIL new RTCPeerConnection({ peerIdentity: toStringThrows }) assert_throws: function "function () {
        eval(expr);
      }" did not throw
PASS new RTCPeerConnection({ certificates: null }) 
PASS new RTCPeerConnection({ certificates: undefined }) 
PASS new RTCPeerConnection({ certificates: [] }) 
PASS new RTCPeerConnection({ certificates: [null] }) 
PASS new RTCPeerConnection({ certificates: [undefined] }) 
PASS new RTCPeerConnection({ iceCandidatePoolSize: toNumberThrows }) 
PASS new RTCPeerConnection({ certificates: [certificate] }) 
PASS new RTCPeerConnection({ certificates: [expiredCertificate] }) 
PASS localDescription initial value 
PASS currentLocalDescription initial value 
PASS pendingLocalDescription initial value 
PASS remoteDescription initial value 
PASS currentRemoteDescription initial value 
PASS pendingRemoteDescription initial value 
PASS signalingState initial value 
PASS iceGatheringState initial value 
PASS iceConnectionState initial value 
PASS connectionState initial value 
FAIL canTrickleIceCandidates initial value assert_equals: expected (object) null but got (undefined) undefined

