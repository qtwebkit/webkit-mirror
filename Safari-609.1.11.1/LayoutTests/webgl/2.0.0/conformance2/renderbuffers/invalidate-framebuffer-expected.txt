This test runs the WebGL Test listed below in an iframe and reports PASS or FAIL.

Test: ../../resources/webgl_test_files/conformance2/renderbuffers/invalidate-framebuffer.html
[ 1: PASS ] context exists
[ 2: PASS ] gl.checkFramebufferStatus(gl.FRAMEBUFFER) is gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT
[ 3: PASS ] getError was expected value: NO_ERROR : calling invalidateSubFramebuffer to invalidate an incomplete attachment will be ignored. There should be no errors
[ 4: PASS ] getError was expected value: NO_ERROR : calling invalidateFramebuffer to invalidate an incomplete attachment will be ignored. There should be no errors.
[ 5: PASS ] getError was expected value: NO_ERROR : should be no errors after attaching a multi-sampled renderbuffer to fbo.
[ 6: PASS ] gl.checkFramebufferStatus(gl.FRAMEBUFFER) is gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT
[ 7: PASS ] getError was expected value: NO_ERROR : calling invalidateSubFramebuffer to invalidate an incomplete attachment will be ignored. There should be no errors
[ 8: PASS ] getError was expected value: NO_ERROR : calling invalidateFramebuffer to invalidate an incomplete attachment will be ignored. There should be no errors.
[ 9: PASS ] getError was expected value: NO_ERROR : should be no errors after attaching a renderbuffer to fbo.
[ 10: PASS ] getError was expected value: NO_ERROR : calling invalidateSubFramebuffer to invalidate a specified attachment that does not exist will be ignored. There should be no errors.
[ 11: PASS ] getError was expected value: NO_ERROR : calling invalidateSubFramebuffer should succeed.
[ 12: FAIL ] getError expected: INVALID_VALUE. Was NO_ERROR : calling invalidateSubFramebuffer should generate INVALID_VALUE if width < 0 or height < 0.
[ 13: PASS ] getError was expected value: NO_ERROR : calling invalidateSubFramebuffer should succeed, even the invalidated pixels may be outside of the framebuffer allocated to current context. These pixels are ignored.
[ 14: PASS ] getError was expected value: NO_ERROR : calling invalidateSubFramebuffer should succeed, even the invalidated pixels may be outside of the framebuffer allocated to current context. These pixels are ignored.
[ 15: PASS ] getError was expected value: NO_ERROR : calling invalidateFramebuffer to invalidate a specified attachment that does not exist will be ignored. There should be no errors.
[ 16: PASS ] getError was expected value: NO_ERROR : calling invalidateFramebuffer should succeed.
[ 17: PASS ] getError was expected value: NO_ERROR : should be no errors after attaching a renderbuffer to fbo.
[ 18: PASS ] getError was expected value: NO_ERROR : should be no errors after bliting framebuffer.
[ 19: PASS ] getError was expected value: NO_ERROR : calling invalidateSubFramebuffer to invalidate a specified attachment that does not exist will be ignored. There should be no errors.
[ 20: PASS ] getError was expected value: NO_ERROR : calling invalidateSubFramebuffer should succeed.
[ 21: FAIL ] getError expected: INVALID_VALUE. Was NO_ERROR : calling invalidateSubFramebuffer should generate INVALID_VALUE if width < 0 or height < 0.
[ 22: PASS ] getError was expected value: NO_ERROR : calling invalidateSubFramebuffer should succeed, even the invalidated pixels may be outside of the framebuffer allocated to current context. These pixels are ignored.
[ 23: PASS ] getError was expected value: NO_ERROR : calling invalidateSubFramebuffer should succeed, even the invalidated pixels may be outside of the framebuffer allocated to current context. These pixels are ignored.
[ 24: PASS ] getError was expected value: NO_ERROR : calling invalidateFramebuffer to invalidate a specified attachment that does not exist will be ignored. There should be no errors.
[ 25: PASS ] getError was expected value: NO_ERROR : calling invalidateFramebuffer should succeed.
[ 26: FAIL ] getError expected one of: INVALID_OPERATION or INVALID_ENUM. Was NO_ERROR : calling invalidateSubFramebuffer to invalidate a COLOR_ATTACHMENT that exceeds MAX_COLOR_ATTACHMENT should generate INVALID_ENUM or INVALID_OPERATION.
[ 27: FAIL ] getError expected one of: INVALID_OPERATION or INVALID_ENUM. Was NO_ERROR : calling invalidateFramebuffer to invalidate a COLOR_ATTACHMENT that exceeds MAX_COLOR_ATTACHMENT should generate INVALID_ENUM or INVALID_OPERATION.
[ 28: PASS ] getError was expected value: NO_ERROR : calling invalidateSubFramebuffer to invalidate a specified attachment that does not exist will be ignored. There should be no errors.
[ 29: PASS ] getError was expected value: NO_ERROR : calling invalidateSubFramebuffer should succeed.
[ 30: FAIL ] getError expected: INVALID_VALUE. Was NO_ERROR : calling invalidateSubFramebuffer should generate INVALID_VALUE if width < 0 or height < 0.
[ 31: PASS ] getError was expected value: NO_ERROR : calling invalidateSubFramebuffer should succeed, even the invalidated pixels may be outside of the framebuffer allocated to current context. These pixels are ignored.
[ 32: PASS ] getError was expected value: NO_ERROR : calling invalidateSubFramebuffer should succeed, even the invalidated pixels may be outside of the framebuffer allocated to current context. These pixels are ignored.
[ 33: PASS ] getError was expected value: NO_ERROR : calling invalidateFramebuffer to invalidate a specified attachment that does not exist will be ignored. There should be no errors.
[ 34: PASS ] getError was expected value: NO_ERROR : calling invalidateFramebuffer should succeed.
[ 35: PASS ] successfullyParsed is true
[ FAIL ] 5 failures reported

