This test runs the WebGL Test listed below in an iframe and reports PASS or FAIL.

Test: ../../resources/webgl_test_files/conformance/state/gl-object-get-calls.html
[ 1: PASS ] gl.getBufferParameter(gl.ARRAY_BUFFER, gl.BUFFER_SIZE) is 16
[ 2: PASS ] gl.getBufferParameter(gl.ARRAY_BUFFER, gl.BUFFER_USAGE) is gl.DYNAMIC_DRAW
[ 3: PASS ] getBufferParameter correctly handled invalid parameter enums
[ 4: PASS ] gl.getBufferParameter(gl.ELEMENT_ARRAY_BUFFER, gl.BUFFER_SIZE) is 16
[ 5: PASS ] gl.getBufferParameter(gl.ELEMENT_ARRAY_BUFFER, gl.BUFFER_USAGE) is gl.DYNAMIC_DRAW
[ 6: PASS ] getBufferParameter correctly handled invalid parameter enums
[ 7: PASS ] getBufferParameter correctly handled invalid target enums
[ 8: PASS ] getError was expected value: NO_ERROR :
[ 9: PASS ] getError was expected value: NO_ERROR :
[ 10: PASS ] getError was expected value: NO_ERROR :
[ 11: PASS ] getError was expected value: NO_ERROR :
[ 12: PASS ] gl.checkFramebufferStatus(gl.FRAMEBUFFER) is gl.FRAMEBUFFER_COMPLETE
[ 13: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + 0, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE) is gl.TEXTURE
[ 14: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + 0, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME) is texture
[ 15: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + 0, gl.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL) is 0
[ 16: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + 0, gl.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE) is 0
[ 17: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE) is gl.RENDERBUFFER
[ 18: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME) is renderbuffer
[ 19: PASS ] getFramebufferAttachmentParameter correctly handled invalid parameter enums
[ 20: PASS ] getFramebufferAttachmentParameter correctly handled invalid target enums
[ 21: PASS ] getFramebufferAttachmentParameter correctly handled invalid attachment enums
[ 22: PASS ] getError was expected value: NO_ERROR :
[ 23: PASS ] getError was expected value: NO_ERROR :
[ 24: PASS ] getError was expected value: NO_ERROR :
[ 25: PASS ] gl.checkFramebufferStatus(gl.FRAMEBUFFER) is gl.FRAMEBUFFER_COMPLETE
[ 26: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + 0, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE) is gl.TEXTURE
[ 27: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + 0, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME) is texture
[ 28: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + 0, gl.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL) is 0
[ 29: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + 0, gl.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE) is 0
[ 30: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE) is gl.RENDERBUFFER
[ 31: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME) is renderbuffer
[ 32: PASS ] getFramebufferAttachmentParameter correctly handled invalid parameter enums
[ 33: PASS ] getFramebufferAttachmentParameter correctly handled invalid target enums
[ 34: PASS ] getFramebufferAttachmentParameter correctly handled invalid attachment enums
[ 35: PASS ] getError was expected value: NO_ERROR :
[ 36: PASS ] shaders.length is 2
[ 37: PASS ] shaders[0] == standardVert && shaders[1] == standardFrag || shaders[1] == standardVert && shaders[0] == standardFrag is true
[ 38: PASS ] getError was expected value: NO_ERROR :
[ 39: FAIL ] gl.getAttachedShaders(null) should throw an exception. Was null.
[ 40: FAIL ] getError expected: NO_ERROR. Was INVALID_VALUE :
[ 41: PASS ] gl.getAttachedShaders(standardVert) threw exception TypeError: Argument 1 ('program') to WebGLRenderingContext.getAttachedShaders must be an instance of WebGLProgram.
[ 42: PASS ] getError was expected value: NO_ERROR :
[ 43: PASS ] gl.getProgramParameter(standardProgram, gl.DELETE_STATUS) is false
[ 44: PASS ] gl.getProgramParameter(standardProgram, gl.LINK_STATUS) is true
[ 45: PASS ] typeof gl.getProgramParameter(standardProgram, gl.VALIDATE_STATUS) is "boolean"
[ 46: PASS ] gl.getProgramParameter(standardProgram, gl.ATTACHED_SHADERS) is 2
[ 47: PASS ] gl.getProgramParameter(standardProgram, gl.ACTIVE_ATTRIBUTES) is 2
[ 48: PASS ] gl.getProgramParameter(standardProgram, gl.ACTIVE_UNIFORMS) is 1
[ 49: PASS ] getProgramParameter correctly handled invalid parameter enums
[ 50: PASS ] getError was expected value: NO_ERROR :
[ 51: PASS ] gl.getRenderbufferParameter(gl.RENDERBUFFER, gl.RENDERBUFFER_WIDTH) is 2
[ 52: PASS ] gl.getRenderbufferParameter(gl.RENDERBUFFER, gl.RENDERBUFFER_HEIGHT) is 2
[ 53: PASS ] gl.getRenderbufferParameter(gl.RENDERBUFFER, gl.RENDERBUFFER_INTERNAL_FORMAT) is non-zero.
[ 54: PASS ] gl.getRenderbufferParameter(gl.RENDERBUFFER, gl.RENDERBUFFER_DEPTH_SIZE) is non-zero.
[ 55: PASS ] getError was expected value: NO_ERROR :
[ 56: PASS ] getError was expected value: NO_ERROR :
[ 57: PASS ] gl.getRenderbufferParameter(gl.RENDERBUFFER, gl.RENDERBUFFER_RED_SIZE) is non-zero.
[ 58: PASS ] gl.getRenderbufferParameter(gl.RENDERBUFFER, gl.RENDERBUFFER_GREEN_SIZE) is non-zero.
[ 59: PASS ] gl.getRenderbufferParameter(gl.RENDERBUFFER, gl.RENDERBUFFER_BLUE_SIZE) is non-zero.
[ 60: PASS ] gl.getRenderbufferParameter(gl.RENDERBUFFER, gl.RENDERBUFFER_ALPHA_SIZE) is non-zero.
[ 61: PASS ] getRenderbufferParameter correctly handled invalid parameter enums
[ 62: PASS ] getRenderbufferParameter correctly handled invalid target enums
[ 63: PASS ] getError was expected value: NO_ERROR :
[ 64: PASS ] gl.getShaderParameter(standardVert, gl.SHADER_TYPE) is gl.VERTEX_SHADER
[ 65: PASS ] gl.getShaderParameter(standardVert, gl.DELETE_STATUS) is false
[ 66: PASS ] gl.getShaderParameter(standardVert, gl.COMPILE_STATUS) is true
[ 67: PASS ] getShaderParameter correctly handled invalid parameter enums
[ 68: PASS ] getError was expected value: NO_ERROR :
[ 69: PASS ] gl.getTexParameter(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER) is gl.NEAREST
[ 70: PASS ] gl.getTexParameter(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER) is gl.NEAREST
[ 71: PASS ] gl.getTexParameter(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S) is gl.CLAMP_TO_EDGE
[ 72: PASS ] gl.getTexParameter(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T) is gl.CLAMP_TO_EDGE
[ 73: PASS ] getTexParameter correctly handled invalid parameter enums
[ 74: PASS ] getTexParameter correctly handled invalid target enums
[ 75: PASS ] getError was expected value: NO_ERROR :
[ 76: PASS ] gl.getProgramParameter(boolProgram, gl.LINK_STATUS) is true
[ 77: PASS ] getError was expected value: NO_ERROR :
[ 78: PASS ] gl.getUniform(boolProgram, bvalLoc) is true
[ 79: PASS ] gl.getUniform(boolProgram, bval2Loc) is [true, false]
[ 80: PASS ] gl.getUniform(boolProgram, bval3Loc) is [true, false, true]
[ 81: PASS ] gl.getUniform(boolProgram, bval4Loc) is [true, false, true, false]
[ 82: PASS ] getError was expected value: NO_ERROR :
[ 83: PASS ] gl.getProgramParameter(intProgram, gl.LINK_STATUS) is true
[ 84: PASS ] getError was expected value: NO_ERROR :
[ 85: PASS ] gl.getUniform(intProgram, ivalLoc) is 1
[ 86: PASS ] gl.getUniform(intProgram, ival2Loc) is [2, 3]
[ 87: PASS ] gl.getUniform(intProgram, ival3Loc) is [4, 5, 6]
[ 88: PASS ] gl.getUniform(intProgram, ival4Loc) is [7, 8, 9, 10]
[ 89: PASS ] getError was expected value: NO_ERROR :
[ 90: PASS ] gl.getProgramParameter(floatProgram, gl.LINK_STATUS) is true
[ 91: PASS ] getError was expected value: NO_ERROR :
[ 92: PASS ] gl.getUniform(floatProgram, fvalLoc) is 11
[ 93: PASS ] gl.getUniform(floatProgram, fval2Loc) is [12, 13]
[ 94: PASS ] gl.getUniform(floatProgram, fval3Loc) is [14, 15, 16]
[ 95: PASS ] gl.getUniform(floatProgram, fval4Loc) is [17, 18, 19, 20]
[ 96: PASS ] getError was expected value: NO_ERROR :
[ 97: PASS ] gl.getProgramParameter(samplerProgram, gl.LINK_STATUS) is true
[ 98: PASS ] getError was expected value: NO_ERROR :
[ 99: PASS ] gl.getUniform(samplerProgram, s2DValLoc) is 0
[ 100: PASS ] gl.getUniform(samplerProgram, sCubeValLoc) is 1
[ 101: PASS ] getError was expected value: NO_ERROR :
[ 102: PASS ] gl.getProgramParameter(matProgram, gl.LINK_STATUS) is true
[ 103: PASS ] getError was expected value: NO_ERROR :
[ 104: PASS ] gl.getUniform(matProgram, mval2Loc) is [1, 2, 3, 4]
[ 105: PASS ] gl.getUniform(matProgram, mval3Loc) is [5, 6, 7, 8, 9, 10, 11, 12, 13]
[ 106: PASS ] gl.getUniform(matProgram, mval4Loc) is [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]
[ 107: PASS ] getError was expected value: NO_ERROR :
[ 108: PASS ] gl.getVertexAttrib(1, gl.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING) is buffer
[ 109: PASS ] gl.getVertexAttrib(1, gl.VERTEX_ATTRIB_ARRAY_ENABLED) is true
[ 110: PASS ] gl.getVertexAttrib(1, gl.VERTEX_ATTRIB_ARRAY_SIZE) is 4
[ 111: PASS ] gl.getVertexAttrib(1, gl.VERTEX_ATTRIB_ARRAY_STRIDE) is 0
[ 112: PASS ] gl.getVertexAttrib(1, gl.VERTEX_ATTRIB_ARRAY_TYPE) is gl.FLOAT
[ 113: PASS ] gl.getVertexAttrib(1, gl.VERTEX_ATTRIB_ARRAY_NORMALIZED) is false
[ 114: PASS ] gl.getVertexAttrib(1, gl.VERTEX_ATTRIB_ARRAY_STRIDE) is 36
[ 115: PASS ] gl.getVertexAttribOffset(1, gl.VERTEX_ATTRIB_ARRAY_POINTER) is 12
[ 116: PASS ] gl.getVertexAttrib(1, gl.VERTEX_ATTRIB_ARRAY_ENABLED) is false
[ 117: PASS ] gl.getVertexAttrib(1, gl.CURRENT_VERTEX_ATTRIB) is [5, 6, 7, 8]
[ 118: PASS ] getError was expected value: NO_ERROR :
[ 119: PASS ] getVertexAttrib correctly handled invalid parameter enums
[ 120: PASS ] getError was expected value: INVALID_VALUE : after evaluating: gl.getVertexAttrib(16, gl.CURRENT_VERTEX_ATTRIB)
[ 121: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE) is gl.NONE
[ 122: FAIL ] getError expected: INVALID_OPERATION. Was NO_ERROR :
[ 123: PASS ] gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE) is gl.NONE
[ 124: PASS ] gl.getVertexAttrib(1, gl.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING) is null
[ 125: PASS ] getError was expected value: NO_ERROR :
[ 126: PASS ] getError was expected value: NO_ERROR :
[ 127: PASS ] successfullyParsed is true
[ FAIL ] 3 failures reported

