2019-10-09  Alan Coon  <alancoon@apple.com>

        Cherry-pick r250887. rdar://problem/56105002

    Partially undo r250811
    https://bugs.webkit.org/show_bug.cgi?id=202715
    <rdar://problem/56084287>
    
    Reviewed by Chris Dumez.
    
    Source/WebCore:
    
    This patch changes the SerializedScriptValue to always wrap CryptoKey objects again.
    CryptoKey objects could belong to an array or another object. In those cases, IDBObjectStore
    cannot set the flag for the embedded Cryptokey objects. Neither can postMessage to unset
    the flag. Therefore, there is no way to separate the serialization process into two and
    this patch restores the old behaviour. However, the hardening part of r250811 is kept
    and therefore the crash should still be prevented.
    
    No new test, updated existing test
    
    * Modules/indexeddb/IDBObjectStore.cpp:
    (WebCore::IDBObjectStore::putOrAdd):
    (WebCore::JSC::setIsWrappingRequiredForCryptoKey): Deleted.
    * bindings/js/SerializedScriptValue.cpp:
    (WebCore::CloneSerializer::dumpIfTerminal):
    (WebCore::CloneDeserializer::readTerminal):
    * crypto/CryptoKey.h:
    (WebCore::CryptoKey::allows const):
    (WebCore::CryptoKey::isWrappingRequired const): Deleted.
    (WebCore::CryptoKey::setIsWrappingRequired): Deleted.
    (): Deleted.
    * dom/ScriptExecutionContext.h:
    
    Tools:
    
    * TestWebKitAPI/Tests/WebKit/navigation-client-default-crypto.html:
    Modified to crash if SerializedScriptValue doesn't wrap CryptoKey objects.
    
    LayoutTests:
    
    Some rebaselines.
    
    * crypto/workers/subtle/ec-postMessage-worker-expected.txt:
    * crypto/workers/subtle/hrsa-postMessage-worker-expected.txt:
    * crypto/workers/subtle/rsa-postMessage-worker-expected.txt:
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@250887 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-10-08  Jiewen Tan  <jiewen_tan@apple.com>

            Partially undo r250811
            https://bugs.webkit.org/show_bug.cgi?id=202715
            <rdar://problem/56084287>

            Reviewed by Chris Dumez.

            * TestWebKitAPI/Tests/WebKit/navigation-client-default-crypto.html:
            Modified to crash if SerializedScriptValue doesn't wrap CryptoKey objects.

2019-10-09  Alan Coon  <alancoon@apple.com>

        Cherry-pick r250811. rdar://problem/56061124

    Only wrapping CryptoKeys for IDB during serialization
    https://bugs.webkit.org/show_bug.cgi?id=202500
    <rdar://problem/52445927>
    
    Reviewed by Chris Dumez.
    
    Source/WebCore:
    
    Wrapping CryptoKeys during IDB serialization is a legacy request from Netflix when WebKit was an
    early adopter. It is not necessary for other kinds of serialization. However, given existing keys
    stored in users' idb are wrapped, the wrapping/unwrapping mechanism cannot be easily discarded.
    Therefore, this patch restricts the wrapping/unwrapping mechanism to idb only.
    
    To do so, a isWrappingRequired flag is added to CryptoKey such that whenever idb sees a CryptoKey,
    it can set it. SerializedScriptValue will then only wrap a CryptoKey when this flag is set. Otherwise,
    a new tag UnwrappedCryptoKeyTag is used to store unwrapped CryptoKeys in order to keep the old CryptoKeyTag
    binaries intact. For deserialization, each type will be deserialized differently.
    
    Besides the above, this patch also hardens WorkerGlobalScope::wrapCryptoKey/unwrapCryptoKey for
    any potential racy issues. CryptoBooleanContainer is introduced to capture boolean in the lambda.
    workerGlobalScope is replaced with workerMessagingProxy. Now, every variables captured in the lambdas
    should be either a copy or a thread safe ref of the original object.
    
    Test: crypto/workers/subtle/aes-indexeddb.html
    
    * Modules/indexeddb/IDBObjectStore.cpp:
    (WebCore::JSC::setIsWrappingRequiredForCryptoKey):
    (WebCore::IDBObjectStore::putOrAdd):
    * bindings/js/SerializedScriptValue.cpp:
    (WebCore::CloneSerializer::dumpIfTerminal):
    (WebCore::CloneDeserializer::readTerminal):
    * crypto/CryptoKey.h:
    (WebCore::CryptoKey::isWrappingRequired const):
    (WebCore::CryptoKey::setIsWrappingRequired):
    * dom/ScriptExecutionContext.h:
    * workers/WorkerGlobalScope.cpp:
    (WebCore::CryptoBooleanContainer::create):
    (WebCore::CryptoBooleanContainer::boolean const):
    (WebCore::CryptoBooleanContainer::setBoolean):
    (WebCore::WorkerGlobalScope::wrapCryptoKey):
    (WebCore::WorkerGlobalScope::unwrapCryptoKey):
    * workers/WorkerGlobalScope.h:
    * workers/WorkerLoaderProxy.h:
    (WebCore::WorkerLoaderProxy::isWorkerMessagingProxy const):
    * workers/WorkerMessagingProxy.h:
    (isType):
    
    Tools:
    
    Modifies IndexedDB.StructuredCloneBackwardCompatibility test to include CryptoKeys.
    
    * TestWebKitAPI/Tests/WebKitCocoa/IndexedDBStructuredCloneBackwardCompatibility.mm:
    (-[StructuredCloneBackwardCompatibilityNavigationDelegate _webCryptoMasterKeyForWebView:]):
    (TEST):
    * TestWebKitAPI/Tests/WebKitCocoa/IndexedDBStructuredCloneBackwardCompatibility.sqlite3:
    * TestWebKitAPI/Tests/WebKitCocoa/IndexedDBStructuredCloneBackwardCompatibility.sqlite3-shm:
    * TestWebKitAPI/Tests/WebKitCocoa/IndexedDBStructuredCloneBackwardCompatibility.sqlite3-wal:
    * TestWebKitAPI/Tests/WebKitCocoa/IndexedDBStructuredCloneBackwardCompatibilityRead.html:
    * TestWebKitAPI/Tests/WebKitCocoa/IndexedDBStructuredCloneBackwardCompatibilityWrite.html:
    
    LayoutTests:
    
    Adds a new test aes-indexeddb.html to do idb in workers and makes
    other tests more deterministic.
    
    * crypto/workers/subtle/aes-indexeddb-expected.txt: Added.
    * crypto/workers/subtle/aes-indexeddb.html: Added.
    * crypto/workers/subtle/ec-postMessage-worker-expected.txt:
    * crypto/workers/subtle/ec-postMessage-worker.html:
    * crypto/workers/subtle/hrsa-postMessage-worker-expected.txt:
    * crypto/workers/subtle/hrsa-postMessage-worker.html:
    * crypto/workers/subtle/resources/aes-indexeddb.js: Added.
    * crypto/workers/subtle/rsa-postMessage-worker-expected.txt:
    * crypto/workers/subtle/rsa-postMessage-worker.html:
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@250811 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-10-07  Jiewen Tan  <jiewen_tan@apple.com>

            Only wrapping CryptoKeys for IDB during serialization
            https://bugs.webkit.org/show_bug.cgi?id=202500
            <rdar://problem/52445927>

            Reviewed by Chris Dumez.

            Modifies IndexedDB.StructuredCloneBackwardCompatibility test to include CryptoKeys.

            * TestWebKitAPI/Tests/WebKitCocoa/IndexedDBStructuredCloneBackwardCompatibility.mm:
            (-[StructuredCloneBackwardCompatibilityNavigationDelegate _webCryptoMasterKeyForWebView:]):
            (TEST):
            * TestWebKitAPI/Tests/WebKitCocoa/IndexedDBStructuredCloneBackwardCompatibility.sqlite3:
            * TestWebKitAPI/Tests/WebKitCocoa/IndexedDBStructuredCloneBackwardCompatibility.sqlite3-shm:
            * TestWebKitAPI/Tests/WebKitCocoa/IndexedDBStructuredCloneBackwardCompatibility.sqlite3-wal:
            * TestWebKitAPI/Tests/WebKitCocoa/IndexedDBStructuredCloneBackwardCompatibilityRead.html:
            * TestWebKitAPI/Tests/WebKitCocoa/IndexedDBStructuredCloneBackwardCompatibilityWrite.html:

2019-09-29  Alan Coon  <alancoon@apple.com>

        Cherry-pick r250345. rdar://problem/55825352

    [iPadOS] [DataActivation] Focus moves away after focusing input fields on www.att.com
    https://bugs.webkit.org/show_bug.cgi?id=202167
    <rdar://problem/55185021>
    
    Reviewed by Tim Horton.
    
    Source/WebCore:
    
    Adds a new site-specific quirk. See WebKit ChangeLog for more details.
    
    * page/Quirks.cpp:
    (WebCore::Quirks::shouldUseLegacySelectPopoverDismissalBehaviorInDataActivation const):
    * page/Quirks.h:
    * platform/RuntimeApplicationChecks.h:
    * platform/cocoa/RuntimeApplicationChecksCocoa.mm:
    (WebCore::IOSApplication::isDataActivation):
    
    Source/WebKit:
    
    When using the data activation page on www.att.com, one of the sections on the page contains several select
    elements; in the case where the user agent:
    
    1. contains the string "iPad", and
    2. does not contain the string "Safari"
    
    ...www.att.com's data activation page will opt into a mode where it adds blur event listeners to the select
    elements; in this blur event listener, www.att.com proceeds to programmatically focus a non-editable div element
    after a 1 second timeout. The reasons for this behavior remain unclear to me, though it's worth noting that the
    blur event handler name is "screenReaderFocus", which suggests that this is in place to ensure compatibility
    with screen readers.
    
    In iOS 12, dismissing the popover would blur the focused select menu with an animation. Since the animation
    would take a slightly less than 1 second, www.att.com's logic would have the effect of moving focus to the div
    element shortly after dismissing the select menu. However, after r243808, we no longer attempt to blur the
    focused select element when dismissing the popover. This means that the select element is only blurred the next
    time the user activates another focused element, such as one of the input fields on the page, or a different
    select element. Consequently, the logic to move focus into a div element now occurs only after a different
    element has already been focused; this results in focus moving away from newly focused elements after 1 second
    in the case where a select element has previously focused.
    
    To mitigate this, restore iOS 12 behavior behind a site- and app-specific quirk. See comments below for more
    details.
    
    * Shared/FocusedElementInformation.cpp:
    (WebKit::FocusedElementInformation::encode const):
    (WebKit::FocusedElementInformation::decode):
    * Shared/FocusedElementInformation.h:
    
    Add a new behavioral quirk flag to FocusedElementInformation to determine whether we should use "legacy" select
    popover dismissal behavior (i.e. blurring the focused select element when dismissing the select popover, as well
    as dismissing the popover with animation).
    
    * Shared/WebPreferences.yaml:
    
    Enable site-specific quirks by default in WKWebView. With regards to this bug, this change allows for
    site-specific hacks (namely, legacy select popover dismissal) in DataActivation. However, this also fixes
    various known bugs that are otherwise addressed in Safari only, via site-specific quirks.
    
    * UIProcess/API/Cocoa/WKWebView.mm:
    (-[WKWebView _initializeWithConfiguration:]):
    
    For apps linked on or before iOS 13 and macOS 10.15, revert the default of value of NeedsSiteSpecificQuirks to
    false. This is done here instead of in a default value function in WebPreferencesDefaultValues to prevent the
    default values of NeedsSiteSpecificQuirks in the web process and UI process from going out of sync, since the
    web process is not necessarily linked against the same SDK as the application.
    
    * UIProcess/Cocoa/VersionChecks.h:
    
    Add a new DYLD version check for the first version of iOS and macOS where site-specific quirks are enabled by
    default.
    
    * UIProcess/ios/WKContentViewInteraction.h:
    * UIProcess/ios/WKContentViewInteraction.mm:
    (-[WKContentView endEditingAndUpdateFocusAppearanceWithReason:]):
    (-[WKContentView _elementDidBlur]):
    (-[WKContentView _shouldUseLegacySelectPopoverDismissalBehavior]):
    
    We only use "legacy" select popover dismissal behavior in the case where the site-specific quirk flag is on, a
    select popover is used (i.e. the device is an iPad and a select element is focused), and the application bundle
    is "com.apple.DataActivation".
    
    * UIProcess/ios/forms/WKFormSelectPopover.mm:
    (-[WKSelectTableViewController shouldDismissWithAnimation]):
    
    Keyed off of _shouldUseLegacySelectPopoverDismissalBehavior.
    
    (-[WKSelectPopover controlEndEditing]):
    * WebProcess/WebPage/ios/WebPageIOS.mm:
    (WebKit::WebPage::getFocusedElementInformation):
    
    Source/WTF:
    
    Declare DYLD_IOS_VERSION_13_2.
    
    * wtf/spi/darwin/dyldSPI.h:
    
    Tools:
    
    Rebaseline an API test.
    
    * TestWebKitAPI/Tests/WebKit/WKPreferences.cpp:
    (TestWebKitAPI::TEST):
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@250345 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-09-25  Wenson Hsieh  <wenson_hsieh@apple.com>

            [iPadOS] [DataActivation] Focus moves away after focusing input fields on www.att.com
            https://bugs.webkit.org/show_bug.cgi?id=202167
            <rdar://problem/55185021>

            Reviewed by Tim Horton.

            Rebaseline an API test.

            * TestWebKitAPI/Tests/WebKit/WKPreferences.cpp:
            (TestWebKitAPI::TEST):

2019-09-29  Alan Coon  <alancoon@apple.com>

        Cherry-pick r249893. rdar://problem/55825342

    Expose misspelling ranges for editable content to accessibility clients.
    https://bugs.webkit.org/show_bug.cgi?id=201752
    <rdar://problem/49556828>
    
    Patch by Andres Gonzalez <andresg_22@apple.com> on 2019-09-16
    Reviewed by Chris Fleizach.
    
    Source/WebCore:
    
    Test: accessibility/misspelling-range.html
    
    Added [WebAccessibilityObjectWrapper misspellingTextMarkerRange] and
    underlying AccessibilityObject implementation to expose misspellings to
    accessibility clients that provide an alternative user interface to
    spell checking.
    * accessibility/AccessibilityObject.cpp:
    (WebCore::AccessibilityObject::getMisspellingRange const):
    * accessibility/AccessibilityObject.h:
    * accessibility/ios/WebAccessibilityObjectWrapperIOS.mm:
    (-[WebAccessibilityObjectWrapper misspellingTextMarkerRange:direction:]):
    * accessibility/mac/WebAccessibilityObjectWrapperMac.mm:
    (accessibilityMisspellingSearchCriteriaForParameterizedAttribute):
    (-[WebAccessibilityObjectWrapper accessibilityAttributeValue:forParameter:]):
    
    Tools:
    
    Test code needed for LayoutTests/accessibility/misspelling-range.html.
    * WebKitTestRunner/InjectedBundle/AccessibilityUIElement.h:
    * WebKitTestRunner/InjectedBundle/Bindings/AccessibilityUIElement.idl:
    * WebKitTestRunner/InjectedBundle/ios/AccessibilityUIElementIOS.mm:
    (WTR::AccessibilityUIElement::misspellingTextMarkerRange):
    (WTR::AccessibilityUIElement::indexForTextMarker):
    * WebKitTestRunner/InjectedBundle/mac/AccessibilityUIElementMac.mm:
    (WTR::misspellingSearchParameterizedAttributeForCriteria):
    (WTR::AccessibilityUIElement::misspellingTextMarkerRange):
    
    LayoutTests:
    
    * accessibility/misspelling-range-expected.txt: Added.
    * accessibility/misspelling-range.html: Added.
    * platform/ios-simulator/TestExpectations:
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@249893 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-09-16  Andres Gonzalez  <andresg_22@apple.com>

            Expose misspelling ranges for editable content to accessibility clients.
            https://bugs.webkit.org/show_bug.cgi?id=201752
            <rdar://problem/49556828>

            Reviewed by Chris Fleizach.

            Test code needed for LayoutTests/accessibility/misspelling-range.html.
            * WebKitTestRunner/InjectedBundle/AccessibilityUIElement.h:
            * WebKitTestRunner/InjectedBundle/Bindings/AccessibilityUIElement.idl:
            * WebKitTestRunner/InjectedBundle/ios/AccessibilityUIElementIOS.mm:
            (WTR::AccessibilityUIElement::misspellingTextMarkerRange):
            (WTR::AccessibilityUIElement::indexForTextMarker):
            * WebKitTestRunner/InjectedBundle/mac/AccessibilityUIElementMac.mm:
            (WTR::misspellingSearchParameterizedAttributeForCriteria):
            (WTR::AccessibilityUIElement::misspellingTextMarkerRange):

2019-09-29  Babak Shafiei  <bshafiei@apple.com>

        Apply patch. rdar://problem/55801087

    2019-09-29  John Wilander  <wilander@apple.com>

            Cherry-pick r250413.

            Patch by Kate Cheney <katherine_cheney@apple.com> on 2019-09-26.

            Resource Load Statistics: Downgrade all third-party referrer headers
            https://bugs.webkit.org/show_bug.cgi?id=201353
            <rdar://problem/54895650>

            Majority of this patch was written by John Wilander <wilander@apple.com>.

            Reviewed by Brent Fulgham.

            The changes to the TestRunner facilitates an opt-out for test cases
            that either test the referrer mechanism explicitly or tests that
            rely on the full referrer to be sent.

            The new boolean variable and early return in
            TestRunner::setStatisticsShouldDowngradeReferrer() prevent the same
            event from trying to set multiple TestRunner callbacks.

            * TestWebKitAPI/WKWebViewConfigurationExtras.h:
                Fixed a build error.
            * WebKitTestRunner/InjectedBundle/Bindings/TestRunner.idl:
            * WebKitTestRunner/InjectedBundle/InjectedBundle.cpp:
            (WTR::InjectedBundle::didReceiveMessageToPage):
            * WebKitTestRunner/InjectedBundle/TestRunner.cpp:
            (WTR::TestRunner::setStatisticsShouldDowngradeReferrer):
            (WTR::TestRunner::statisticsCallDidSetShouldDowngradeReferrerCallback):
            * WebKitTestRunner/InjectedBundle/TestRunner.h:
            * WebKitTestRunner/TestController.cpp:
            (WTR::TestController::setStatisticsShouldDowngradeReferrer):
            * WebKitTestRunner/TestController.h:
            * WebKitTestRunner/TestInvocation.cpp:
            (WTR::TestInvocation::didReceiveSynchronousMessageFromInjectedBundle):
            (WTR::TestInvocation::didSetShouldDowngradeReferrer):
            * WebKitTestRunner/TestInvocation.h:

2019-09-27  Alan Coon  <alancoon@apple.com>

        Cherry-pick r250401. rdar://problem/55770702

    ContextMenu on a link in an email no longer shows web preview
    https://bugs.webkit.org/show_bug.cgi?id=201120
    <rdar://54353617>
    
    Reviewed by Wenson Hsieh.
    
    Source/WebKit:
    
    Only go down the image path if we are not also a link.
    
    * UIProcess/ios/WKContentViewInteraction.mm:
    (-[WKContentView continueContextMenuInteraction:]):
    
    Tools:
    
    Test context menus on a link that is also an image.
    
    * TestWebKitAPI/Tests/WebKitCocoa/ContextMenus.mm:
    (contextMenuWebViewDriver):
    (-[TestContextMenuImageWithoutConfigurationUIDelegate webView:contextMenuConfigurationForElement:completionHandler:]):
    (-[TestContextMenuImageWithoutConfigurationUIDelegate webView:contextMenuWillPresentForElement:]):
    (-[TestContextMenuImageWithoutConfigurationUIDelegate webView:contextMenuForElement:willCommitWithAnimator:]):
    (-[TestContextMenuImageWithoutConfigurationUIDelegate webView:contextMenuDidEndForElement:]):
    (TEST):
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@250401 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-09-26  Dean Jackson  <dino@apple.com>

            ContextMenu on a link in an email no longer shows web preview
            https://bugs.webkit.org/show_bug.cgi?id=201120
            <rdar://54353617>

            Reviewed by Wenson Hsieh.

            Test context menus on a link that is also an image.

            * TestWebKitAPI/Tests/WebKitCocoa/ContextMenus.mm:
            (contextMenuWebViewDriver):
            (-[TestContextMenuImageWithoutConfigurationUIDelegate webView:contextMenuConfigurationForElement:completionHandler:]):
            (-[TestContextMenuImageWithoutConfigurationUIDelegate webView:contextMenuWillPresentForElement:]):
            (-[TestContextMenuImageWithoutConfigurationUIDelegate webView:contextMenuForElement:willCommitWithAnimator:]):
            (-[TestContextMenuImageWithoutConfigurationUIDelegate webView:contextMenuDidEndForElement:]):
            (TEST):

2019-09-27  Alan Coon  <alancoon@apple.com>

        Cherry-pick r250391. rdar://problem/55770728

    TestWebKitAPI.WebKit.ReloadWithDifferingInitialScale is failing consistently
    https://bugs.webkit.org/show_bug.cgi?id=202273
    
    Reviewed by Aakash Jain.
    
    The content width scaling limits added in r250361 prevent this test from scaling down the content width (2000px
    wide) to fit the viewport (375px). To avoid this issue, change the content width from 2000px to 1500px, which is
    still a very wide content width for a web page.
    
    * TestWebKitAPI/Tests/WebKitCocoa/ReloadWithDifferingInitialScale.mm:
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@250391 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-09-26  Wenson Hsieh  <wenson_hsieh@apple.com>

            TestWebKitAPI.WebKit.ReloadWithDifferingInitialScale is failing consistently
            https://bugs.webkit.org/show_bug.cgi?id=202273

            Reviewed by Aakash Jain.

            The content width scaling limits added in r250361 prevent this test from scaling down the content width (2000px
            wide) to fit the viewport (375px). To avoid this issue, change the content width from 2000px to 1500px, which is
            still a very wide content width for a web page.

            * TestWebKitAPI/Tests/WebKitCocoa/ReloadWithDifferingInitialScale.mm:

2019-09-27  Alan Coon  <alancoon@apple.com>

        Apply patch. rdar://problem/55608016

    2019-09-27  Brent Fulgham  <bfulgham@apple.com>

            Create InjectedBundle SPI to better support NSSecureCoding
            https://bugs.webkit.org/show_bug.cgi?id=201810
            <rdar://problem/55265713>

            The encoding/decoding routines used by WebKit’s InjectedBundles are based on NSCoding.
            While we have changed WebKit internals to use NSSecureCoding, there are a number of
            injected bundles that need to serialize custom classes between the InjectedBundle and
            the relevant WebKit UIProcess.

            We need to lock down this communications channel by enforcing NSSecureCoding.

            This patch creates new SPI to allow the UIProcess to specify classes that it will accept
            in messages from the WebContet Process (and Injected Bundle).

            It adds the following property to the WKProcessPoolConfiguration:

                @property (nonatomic, copy) NSSet<Class> *customClassesForParameterCoder;

            If no custom classes are specified, the standard serialization primitives are supported:
                NSArray, NSData, NSDate, NSDictionary, NSNull, NSNumber, NSSet, NSString,
                NSTimeZone, NSURL, and NSUUID.

            Reviewed by Brady Eidson.

            * TestWebKitAPI/TestWebKitAPI.xcodeproj/project.pbxproj:
            * TestWebKitAPI/Tests/WebKitCocoa/BundleFormDelegate.mm: Added.
            (-[BundleFormDelegateRemoteObject didGetFocus]):
            (-[FormInputDelegate _webView:decidePolicyForFocusedElement:]):
            (TEST):
            * TestWebKitAPI/Tests/WebKitCocoa/BundleFormDelegatePlugIn.mm: Added.
            (-[BundleFormDelegatePlugIn webProcessPlugIn:didCreateBrowserContextController:]):
            (-[BundleFormDelegatePlugIn _webProcessPlugInBrowserContextController:willBeginInputSessionForElement:inFrame:userIsInteracting:]):
            (-[BundleFormDelegatePlugIn _webProcessPlugInBrowserContextController:didFocusTextField:inFrame:]):
            * TestWebKitAPI/Tests/WebKitCocoa/BundleFormDelegateProtocol.h: Copied from Tools/TestWebKitAPI/WKWebViewConfigurationExtras.h.
            * TestWebKitAPI/Tests/WebKitCocoa/WKProcessPoolConfiguration.mm:
            (TEST):
            * TestWebKitAPI/WKWebViewConfigurationExtras.h:
            * TestWebKitAPI/WKWebViewConfigurationExtras.mm:
            (+[WKWebViewConfiguration _test_configurationWithTestPlugInClassName:configureJSCForTesting:]):
            (+[WKWebViewConfiguration _test_configurationWithTestPlugInClassName:configureJSCForTesting:andCustomParameterClasses:]):

2019-09-24  Kocsen Chung  <kocsen_chung@apple.com>

        Cherry-pick r250256. rdar://problem/55644660

    [iOS] Drop animation when dragging images from Photos to WebKit2 Mail compose is incorrect
    https://bugs.webkit.org/show_bug.cgi?id=201674
    <rdar://problem/51250952>
    
    Reviewed by Tim Horton.
    
    Source/WebCore:
    
    Adds new helper methods on DragController to support the new image placeholder drop codepath. See WebKit
    ChangeLog for more details.
    
    Tests:  WKAttachmentTestsIOS.TargetedPreviewsWhenDroppingImages
            WKAttachmentTestsIOS.TargetedPreviewIsClippedWhenDroppingTallImage
    
    * editing/WebContentReader.h:
    
    Fix the Windows build after including WebContentReader.h in DragController.cpp.
    
    * html/HTMLImageElement.h:
    (WebCore::HTMLImageElement::isDroppedImagePlaceholder const):
    (WebCore::HTMLImageElement::setIsDroppedImagePlaceholder):
    
    Add a flag to HTMLImageElement, indicating whether it is a dropped image placeholder. If so, we have special
    logic to remove some temporary inline style properties from the image after it has finished loading (see
    finalizeDroppedImagePlaceholder).
    
    Note that this doesn't increase the size of HTMLImageElement.
    
    * page/DragController.cpp:
    (WebCore::DragController::dragEnded):
    
    Clean up any stale placeholders after the drag ends.
    
    (WebCore::DragController::performDragOperation):
    (WebCore::DragController::removeAllDroppedImagePlaceholders):
    
    Add a private helper to clean up any dropped image placeholders after failing to update dropped image
    placeholders for any reason.
    
    (WebCore::DragController::tryToUpdateDroppedImagePlaceholders):
    
    Invoked when performing the drag operation, after image data has been loaded; this function attempts to update
    the list of image placeholder elements tracked by DragController that were previously inserted using
    insertDroppedImagePlaceholdersAtCaret, and updates the source attribute of each element (as well as any backed
    attachment element, if attachment elements are enabled). It achieves this by reading the dropped data as web
    content, and matching up the images in the resulting fragment against the placeholder images. If each image in
    the fragment can correspond to exactly one placeholder, we update the source of each placeholder image,
    migrate attachment elements over to the placeholder images if needed, and finally discard the fragment.
    
    A return value of false indicates that this process failed, in which case we clean up the placeholders and fall
    back to handling the drop normally.
    
    (WebCore::DragController::insertDroppedImagePlaceholdersAtCaret):
    
    Invoked when handling the drop, before any image data has been loaded; this function takes a list of sizes
    representing the preferred presentation sizes of each item provider that will be loaded as an image, and uses
    ReplaceSelectionCommand to insert a list of (initially blank) placeholder images at the drop caret, sized
    accordingly to each item provider's preferredPresentationSize.
    
    To make this compatible with Mail compose (and all other known internal clients that use the _editable SPI), we
    additionally enforce a max-width of 100% on each image and preserve the aspect ratio of the image by adjusting
    the height if needed.
    
    (WebCore::DragController::finalizeDroppedImagePlaceholder):
    * page/DragController.h:
    
    Have DragController keep track of the list of dropped image placeholders (in DOM order), as well as the dropped
    image placeholder range. This information is used once item provider data arrives and the drag operation is
    being performed, to update the source of each dropped image placeholder.
    
    (WebCore::DragController::droppedImagePlaceholders const):
    (WebCore::DragController::droppedImagePlaceholderRange const):
    * platform/network/mac/UTIUtilities.h:
    
    Mark an existing helper function as WEBCORE_EXPORT.
    
    Source/WebKit:
    
    Our current logic for handling dropped content in editable elements on iOS works like this in the ideal case:
    
    (1)     UIKit asks us for a targeted preview for each UIDragItem. We don't know (and can't determine this
            synchronously without blocking on the web process) so we simply retarget the preview to animate to the
            last known caret location.
    
    (2)     Soonafter, UIKit hands us a drop preview update block, which may be used to retarget the drop preview
            once, as long as the drop animation is less than 90% complete. We stash these update blocks for now.
    
    (3)     -dropInteraction:performDrop: is then called, and we start loading item provider data right away.
    
    (4)     When the data has finished loading, we perform the drop in the web process. After any inserted images
            have finished loading, we take snapshots (of the dropped content as well as surrounding web content
            minus the dropped content), and deliver these images to the UI process via TextIndicatorData.
    
    (5)     Upon receiving the TextIndicatorData sent in (4), we use the image data to create updated targeted drag
            previews, and use these to invoke the preview update blocks we stored earlier in (2). We also obscure
            the entire web view with a snapshot of the view minus any dropped content, such that the updated drop
            previews may animate into place without also showing the final content.
    
    (6)     When the drop animation ends, we remove the unselected content snapshot view added in (5) simultaneously
            as the targeted previews disappear, revealing the actual dropped content on the page. The drop is now
            complete.
    
    However, note that the drag update block we invoke in (5) doesn't work if the drop animation is already more
    than 90% complete. Since the lifecycle of the drop animation is distinct from that of item provider loading, if
    the delay between (3) and (4) exceeds 90% of the total drop animation time, we'll fail to update the targeted
    previews, such that the user only sees the initial drag preview fly on top of the caret and disappear. While we
    typically win this race for data dragged from other WebKit apps, we almost always lose when dragging from Photos
    and end up with a janky drop animation. This is especially true for any images that aren't locally available,
    and need to be fetched from iCloud. An additional problem is that in step (5), we use the same final snapshot to
    update the drop preview of every item, since we don't have a snapshot for the fragment corresponding to each
    individual dropped item.
    
    To address these issues for Mail in the case where the user drops images with known sizes (i.e. -[NSItemProvider
    preferredPresentationSize] is specified), we introduce an alternate codepath for handling dropped images that
    performs the drop immediately upon receiving -dropInteraction:performDrop: in the UI process. Since the data has
    yet to arrive, we instead handle the drop by inserting placeholder image elements at the drag caret position,
    which initially have no source but are sized to fit their expected final image sizes. After doing so, we
    snapshot the page (minus the dropped content range, as usual) and deliver this snapshot to the UI process, along
    with the rects (in root view coordinates) of each placeholder image that was inserted. In the UI process, we
    then take this snapshot and obscure the content view with it, and also use each of the placeholder rects to
    provide an updated target for each drag preview, such that the drop previews now animate to their final
    locations on the page.
    
    When the data eventually arrives, we handle the drop by detecting the placeholder elements we inserted earlier,
    and using the dropped data to update the source attribute and attachment backing for each of these placeholder
    elements instead of attempting to insert new content.
    
    Note that this codepath is currently only enabled for SPI clients that set -[WKWebView _editable] to YES, since
    it involves us performing the editing action for the drop (thus changing the DOM) prior to the preventable drop
    event, and prior to us having any data at all. However, the drop event can't come before the editing action,
    since we need to have already loaded data from the item providers to expose it via the dataTransfer of the drop
    event. This contradiction means that this image placeholder hack is only for _editable SPI clients that, at the
    very least, will not require preventing default behavior when dropping only images with predetermined sizes.
    
    Covered by 2 new API tests. See comments below for more detail.
    
    * UIProcess/WebPageProxy.h:
    * UIProcess/ios/DragDropInteractionState.h:
    * UIProcess/ios/DragDropInteractionState.mm:
    (WebKit::DragDropInteractionState::setDefaultDropPreview):
    
    Add a way to keep track of default drop previews that we observed during each call to
    -dropInteraction:previewForDroppingItem:withDefault:. In the image placeholder drop scenario, we use these
    default drop previews later on to create retargeted drop previews after the placeholders have been inserted.
    
    (WebKit::DragDropInteractionState::defaultDropPreview const):
    (WebKit::DragDropInteractionState::deliverDelayedDropPreview):
    
    Add an alternate version of deliverDelayedDropPreview that is used when inserting image placeholders. Rather
    than use text indicator data of the final dropped content on the page, use the root-view-coordinate rects of
    each of the placeholder elements to reposition the default drop previews.
    
    There's additional logic here to handle the case where the final image is taller than the height of the
    unobscured content rect, in which case we clip the drop preview using UIDragPreviewParameter's visiblePath to
    prevent the drop preview from being shown outside of the bounds of the web view.
    
    * UIProcess/ios/WKContentViewInteraction.h:
    * UIProcess/ios/WKContentViewInteraction.mm:
    (-[WKContentView _deliverDelayedDropPreviewIfPossible:]):
    (sizesOfPlaceholderElementsToInsertWhenDroppingItems):
    
    Collects the list of expected image sizes for the dropped item providers, or an empty list in the case where
    any of the item providers may not be represented as inline images or do not have predetermined sizes.
    
    (-[WKContentView _handleDropByInsertingImagePlaceholders:session:]):
    
    If possible, handles the drop by inserting image placeholders instead of waiting for the data to finish loading
    before dropping. Returns whether or not we decided to proceed with the image placeholder drop.
    
    (-[WKContentView dropInteraction:performDrop:]):
    (-[WKContentView dropInteraction:item:willAnimateDropWithAnimator:]):
    
    Fixes a bug where the unselected content snapshot view could linger around on the web view forever after a drop
    where the data doesn't load in time for the drop to finish by keeping track of whether there is an actively
    animating drag item, and only applying the unselected content snapshot if so.
    
    (-[WKContentView dropInteraction:previewForDroppingItem:withDefault:]):
    
    Stash the default drop preview away here.
    
    * UIProcess/ios/WebPageProxyIOS.mm:
    (WebKit::WebPageProxy::insertDroppedImagePlaceholders):
    * WebProcess/WebPage/WebPage.h:
    * WebProcess/WebPage/WebPage.messages.in:
    * WebProcess/WebPage/ios/WebPageIOS.mm:
    (WebKit::WebPage::insertDroppedImagePlaceholders):
    
    See WebCore ChangeLog for more information.
    
    (WebKit::WebPage::didFinishLoadingImageForElement):
    
    If the image that finished loading is a dropped image placeholder, allow DragController to "finalize" it by
    stripping away some styles that were temporarily added.
    
    Tools:
    
    Add a couple of new API tests to exercise the new image placeholder drop codepath, in addition to testing
    infrastructure to simulate the timing of drop animation delegate calls.
    
    * TestWebKitAPI/TestWebKitAPI.xcodeproj/project.pbxproj:
    * TestWebKitAPI/Tests/WebKitCocoa/WKAttachmentTests.mm:
    (-[NSArray _attachmentWithName:]):
    (-[TestWKWebView allBoundingClientRects:]):
    
    Add some new API testing helper methods.
    
    (TestWebKitAPI::targetedImageDragPreview):
    (TestWebKitAPI::TEST):
    
    Add two new tests, to:
    (1) verify that images are dropped as attachment-backed placeholder image elements when the web view is editable
        and enables attachment elements, and
    (2) verify that when dropping an image taller than the web view, the bottom portion of the drop preview is
        clipped using the targeted preview parameter's visiblePath.
    
    * TestWebKitAPI/Tests/ios/DragAndDropTestsIOS.mm:
    (-[NSItemProvider registerDataRepresentationForTypeIdentifier:withData:]): Deleted.
    * TestWebKitAPI/cocoa/DragAndDropSimulator.h:
    * TestWebKitAPI/cocoa/NSItemProviderAdditions.h: Added.
    * TestWebKitAPI/cocoa/NSItemProviderAdditions.mm: Added.
    
    Move some common helpers for registering data on a NSItemProvider to a separate file, so that it can be used in
    both WKAttachmentTests and DragAndDropTests.
    
    (-[NSItemProvider registerDataRepresentationForTypeIdentifier:withData:]):
    (-[NSItemProvider registerDataRepresentationForTypeIdentifier:withData:loadingDelay:]):
    * TestWebKitAPI/ios/DragAndDropSimulatorIOS.mm:
    (-[DragAndDropSimulator initWithWebView:]):
    (-[DragAndDropSimulator _concludeDropAndPerformOperationIfNecessary]):
    (-[DragAndDropSimulator clearExternalDragInformation]):
    (-[DragAndDropSimulator setExternalItemProviders:defaultDropPreviews:]):
    
    Add a new method to allow tests to specify both a list of externally dragged item providers, as well as default
    targeted previews for each of the corresponding items. These default previews are used when invoking the drop
    interaction delegate's preview generation methods.
    
    (-[DragAndDropSimulator addAnimations:]):
    
    Not implemented yet; for now, this simply asserts.
    
    (-[DragAndDropSimulator addCompletion:]):
    
    Queues a completion handler, which is invoked when the drop animation for each item completes. Depending on the
    value of DragAndDropSimulator's -dropAnimationTiming, this may occur either before or after handling the drop.
    By default, these will be invoked after the drop completes, which represents the common case where data can be
    loaded quickly relative to the drop animation.
    
    (-[DragAndDropSimulator _invokeDropAnimationCompletionBlocksAndConcludeDrop]):
    (-[DragAndDropSimulator _webView:dataInteractionOperationWasHandled:forSession:itemProviders:]):
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@250256 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-09-23  Wenson Hsieh  <wenson_hsieh@apple.com>

            [iOS] Drop animation when dragging images from Photos to WebKit2 Mail compose is incorrect
            https://bugs.webkit.org/show_bug.cgi?id=201674
            <rdar://problem/51250952>

            Reviewed by Tim Horton.

            Add a couple of new API tests to exercise the new image placeholder drop codepath, in addition to testing
            infrastructure to simulate the timing of drop animation delegate calls.

            * TestWebKitAPI/TestWebKitAPI.xcodeproj/project.pbxproj:
            * TestWebKitAPI/Tests/WebKitCocoa/WKAttachmentTests.mm:
            (-[NSArray _attachmentWithName:]):
            (-[TestWKWebView allBoundingClientRects:]):

            Add some new API testing helper methods.

            (TestWebKitAPI::targetedImageDragPreview):
            (TestWebKitAPI::TEST):

            Add two new tests, to:
            (1) verify that images are dropped as attachment-backed placeholder image elements when the web view is editable
                and enables attachment elements, and
            (2) verify that when dropping an image taller than the web view, the bottom portion of the drop preview is
                clipped using the targeted preview parameter's visiblePath.

            * TestWebKitAPI/Tests/ios/DragAndDropTestsIOS.mm:
            (-[NSItemProvider registerDataRepresentationForTypeIdentifier:withData:]): Deleted.
            * TestWebKitAPI/cocoa/DragAndDropSimulator.h:
            * TestWebKitAPI/cocoa/NSItemProviderAdditions.h: Added.
            * TestWebKitAPI/cocoa/NSItemProviderAdditions.mm: Added.

            Move some common helpers for registering data on a NSItemProvider to a separate file, so that it can be used in
            both WKAttachmentTests and DragAndDropTests.

            (-[NSItemProvider registerDataRepresentationForTypeIdentifier:withData:]):
            (-[NSItemProvider registerDataRepresentationForTypeIdentifier:withData:loadingDelay:]):
            * TestWebKitAPI/ios/DragAndDropSimulatorIOS.mm:
            (-[DragAndDropSimulator initWithWebView:]):
            (-[DragAndDropSimulator _concludeDropAndPerformOperationIfNecessary]):
            (-[DragAndDropSimulator clearExternalDragInformation]):
            (-[DragAndDropSimulator setExternalItemProviders:defaultDropPreviews:]):

            Add a new method to allow tests to specify both a list of externally dragged item providers, as well as default
            targeted previews for each of the corresponding items. These default previews are used when invoking the drop
            interaction delegate's preview generation methods.

            (-[DragAndDropSimulator addAnimations:]):

            Not implemented yet; for now, this simply asserts.

            (-[DragAndDropSimulator addCompletion:]):

            Queues a completion handler, which is invoked when the drop animation for each item completes. Depending on the
            value of DragAndDropSimulator's -dropAnimationTiming, this may occur either before or after handling the drop.
            By default, these will be invoked after the drop completes, which represents the common case where data can be
            loaded quickly relative to the drop animation.

            (-[DragAndDropSimulator _invokeDropAnimationCompletionBlocksAndConcludeDrop]):
            (-[DragAndDropSimulator _webView:dataInteractionOperationWasHandled:forSession:itemProviders:]):

2019-09-24  Tim Horton  <timothy_horton@apple.com>

        Fix the macOS branch build

        * TestRunnerShared/UIScriptContext/UIScriptController.cpp:
        (WTR::UIScriptController::twoFingerSingleTapAtPoint):
        Untested and unreviewed. Introduce a empty implementation of
        twoFingerSingleTapAtPoint for non-iOS targets. No longer
        necessary on trunk because of r247898.

2019-09-23  Kocsen Chung  <kocsen_chung@apple.com>

        Cherry-pick r250015. rdar://problem/55579794

    Remove the "Show Link Previews" and "Hide Link Previews" action menus in the preview platter
    https://bugs.webkit.org/show_bug.cgi?id=201864
    <rdar://55190038>
    
    Reviewed by Simon Fraser.
    
    Source/WebKit:
    
    * UIProcess/ios/WKActionSheetAssistant.mm: Remove the toggle action from the
    default values.
    (-[WKActionSheetAssistant defaultActionsForLinkSheet:]):
    * UIProcess/ios/WKContentViewInteraction.mm: No longer try to add a toggle when
    it isn't there.
    (-[WKContentView assignLegacyDataForContextMenuInteraction]):
    (menuWithShowLinkPreviewAction): Deleted.
    
    Tools:
    
    Test for the suggested actions.
    
    * TestWebKitAPI/Tests/WebKitCocoa/ContextMenus.mm:
    (-[TestContextMenuSuggestedActionsUIDelegate webView:contextMenuConfigurationForElement:completionHandler:]):
    (-[TestContextMenuSuggestedActionsUIDelegate webView:contextMenuWillPresentForElement:]):
    (TEST):
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@250015 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-09-17  Dean Jackson  <dino@apple.com>

            Remove the "Show Link Previews" and "Hide Link Previews" action menus in the preview platter
            https://bugs.webkit.org/show_bug.cgi?id=201864
            <rdar://55190038>

            Reviewed by Simon Fraser.

            Test for the suggested actions.

            * TestWebKitAPI/Tests/WebKitCocoa/ContextMenus.mm:
            (-[TestContextMenuSuggestedActionsUIDelegate webView:contextMenuConfigurationForElement:completionHandler:]):
            (-[TestContextMenuSuggestedActionsUIDelegate webView:contextMenuWillPresentForElement:]):
            (TEST):

2019-09-17  Kocsen Chung  <kocsen_chung@apple.com>

        Cherry-pick r249701. rdar://problem/55291696

    Tap and hold on Facebook sometimes creates a tall empty selection.
    https://bugs.webkit.org/show_bug.cgi?id=201618
    rdar://53630145
    
    Reviewed by Megan Gardner.
    
    Source/WebCore:
    
    API Test: SelectionTests.ByWordAtEndOfDocument
    
    * editing/VisibleUnits.cpp:
    (WebCore::wordRangeFromPosition):
    Remove special case code for the possibility of an empty paragraph and at the end
    of the document. This is no longer needed and was causing a large selection to be
    created on Facebook due to large areas of non-selectable content on the page.
    
    Tools:
    
    * TestWebKitAPI/TestWebKitAPI.xcodeproj/project.pbxproj:
    * TestWebKitAPI/Tests/ios/SelectionByWord.mm: Added.
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@249701 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-09-09  Timothy Hatcher  <timothy@apple.com>

            Tap and hold on Facebook sometimes creates a tall empty selection.
            https://bugs.webkit.org/show_bug.cgi?id=201618
            rdar://53630145

            Reviewed by Megan Gardner.

            * TestWebKitAPI/TestWebKitAPI.xcodeproj/project.pbxproj:
            * TestWebKitAPI/Tests/ios/SelectionByWord.mm: Added.

2019-09-09  Ryosuke Niwa  <rniwa@webkit.org>

        REGRESSION (iOS 13): Bulleted list copied from Notes to Mail results in Times New Roman
        https://bugs.webkit.org/show_bug.cgi?id=201490

        Reviewed by Daniel Bates.

        Added a test.

        * TestWebKitAPI/TestWebKitAPI.xcodeproj/project.pbxproj:
        * TestWebKitAPI/Tests/WebKitCocoa/PasteHTML.mm:
        * TestWebKitAPI/Tests/WebKitCocoa/cocoa-writer-markup-with-lists.html: Added.

2019-09-09  Kocsen Chung  <kocsen_chung@apple.com>

        Cherry-pick r249605. rdar://problem/55182896

    Incorrect selection rect revealed after pasting images in a contenteditable element
    https://bugs.webkit.org/show_bug.cgi?id=201549
    <rdar://problem/50956429>
    
    Reviewed by Simon Fraser.
    
    Source/WebCore:
    
    Editor::replaceSelectionWithFragment currently scrolls to reveal the selection after inserting the given
    DocumentFragment. However, this scrolling occurs before any inserted images have loaded yet, which causes the
    wrong caret rect to be revealed, since all image elements inserted during paste will be empty.
    
    To fix this, we defer revealing the selection after inserting the fragment until after all images that have
    been inserted are done loading. While waiting for images to load, if any layers which may be scrolled as a
    result of revealing the selection are scrolled, we additionally cancel the deferred selection reveal. See
    comments below for more detail.
    
    Tests: editing/pasteboard/do-not-reveal-selection-after-programmatic-scroll.html
           editing/pasteboard/reveal-selection-after-pasting-images.html
           PasteImage.RevealSelectionAfterPastingImage
    
    * editing/Editing.cpp:
    (WebCore::visibleImageElementsInRangeWithNonLoadedImages):
    
    Add a new helper to iterate through a range and collect all image elements in that range, that contain cached
    images that have not finished loading yet.
    
    * editing/Editing.h:
    * editing/Editor.cpp:
    (WebCore::Editor::replaceSelectionWithFragment):
    
    Instead of always immediately revealing the selection after applying the ReplaceSelectionCommand, collect the
    image elements that were just inserted, and avoid immediately revealing the selection if any of these images
    have non-null cached images, but are not loaded yet. Instead, hold on to these images in a set, remove them once
    they finish loading using the new method below, and once all images are removed, reveal the selection.
    
    (WebCore::Editor::revealSelectionIfNeededAfterLoadingImageForElement):
    (WebCore::Editor::renderLayerDidScroll):
    
    Called whenever a scrollable RenderLayer is scrolled (or in the case of FrameView, the root layer). In the case
    where Editor is waiting to reveal the selection, we check to see if the scrolled layer is an ancestor of the
    layer enclosing the start of the selection.
    
    (WebCore::Editor::respondToChangedSelection):
    
    If the selection changes between pasting and waiting for pasted images to load, just cancel waiting to reveal
    the selection after pasting.
    
    * editing/Editor.h:
    * editing/ReplaceSelectionCommand.cpp:
    (WebCore::ReplaceSelectionCommand::insertedContentRange const):
    
    Add a helper method to grab the Range of content inserted after applying the command.
    
    * editing/ReplaceSelectionCommand.h:
    * page/FrameView.cpp:
    (WebCore::FrameView::scrollPositionChanged):
    * page/FrameView.h:
    * page/Page.cpp:
    (WebCore::Page::didFinishLoadingImageForElement):
    
    Notify Editor after an image finishes loading.
    
    * rendering/RenderLayer.cpp:
    (WebCore::RenderLayer::scrollTo):
    
    Source/WebKit:
    
    Tweak some existing logic to use the new visibleImageElementsInRangeWithNonLoadedImages helper function. See
    WebCore for more details.
    
    * WebProcess/WebPage/ios/WebPageIOS.mm:
    (WebKit::WebPage::didConcludeEditDrag):
    
    Tools:
    
    Add an API test to exercise the scenario where we scroll to reveal the selection after pasting an image that was
    directly written to the pasteboard.
    
    * TestWebKitAPI/Tests/WebKitCocoa/PasteImage.mm:
    
    LayoutTests:
    
    Add a couple of new layout tests.
    
    * editing/pasteboard/do-not-reveal-selection-after-programmatic-scroll-expected.txt: Added.
    * editing/pasteboard/do-not-reveal-selection-after-programmatic-scroll.html: Added.
    
    This test verifies that we don't try to scroll to reveal the caret after pasting, if the scroll position was
    changed before the images finished loading.
    
    * editing/pasteboard/reveal-selection-after-pasting-images-expected.txt: Added.
    * editing/pasteboard/reveal-selection-after-pasting-images.html: Added.
    * platform/ios/editing/pasteboard/reveal-selection-after-pasting-images-expected.txt: Added.
    
    This test verifies that we reveal the caret after loading multiple pasted images in a selection, and dispatch a
    scroll event in the process.
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@249605 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-09-06  Wenson Hsieh  <wenson_hsieh@apple.com>

            Incorrect selection rect revealed after pasting images in a contenteditable element
            https://bugs.webkit.org/show_bug.cgi?id=201549
            <rdar://problem/50956429>

            Reviewed by Simon Fraser.

            Add an API test to exercise the scenario where we scroll to reveal the selection after pasting an image that was
            directly written to the pasteboard.

            * TestWebKitAPI/Tests/WebKitCocoa/PasteImage.mm:

2019-09-09  Kocsen Chung  <kocsen_chung@apple.com>

        Cherry-pick r249584. rdar://problem/55202935

    Marking up a note on iOS results in a PDF with no contents
    https://bugs.webkit.org/show_bug.cgi?id=201530
    <rdar://problem/53686019>
    
    Reviewed by Andy Estes.
    
    Source/WebKit:
    
    * Platform/IPC/Connection.cpp:
    (IPC::Connection::Connection):
    (IPC::Connection::waitForMessage):
    (IPC::Connection::connectionDidClose):
    * Platform/IPC/Connection.h:
    If the main thread is blocked when the Web Content process dies, and
    something eventually calls waitForAndDispatchImmediately without
    returning control to the main run loop, we will wait for the full timeout,
    because a) the code to mark the connection invalid is dispatched
    to the main thread, and b) the secondary thread that is informed of
    the Web Content process dying did not yet have a "waiting for" message
    to mark as interrupted (because it wasn't waiting yet).
    
    Fix this race by adding a bit that is set under the waitForMessage lock
    on the secondary thread when the connection is invalidated, identically
    to m_shouldWaitForSyncReplies, which solves the same problem for sync
    messages.
    
    Read the new bit when we are about to start waiting, and bail if it is set.
    It's OK to not read it inside the loop because we are guaranteed to have
    waitForMessage set at that point, so the normal interruption bit will work.
    
    * UIProcess/ios/WKContentView.mm:
    (-[WKContentView _processDidExit]):
    Reset _isPrintingToPDF; the Web Content process is never going to get
    back to us if it crashes.
    
    (-[WKContentView _wk_pageCountForPrintFormatter:]):
    Do not bail from starting a printing operation if one is already occurring.
    This fixes the original bug, because Markup ends up invalidating the page
    count at least one extra time before asking for the printed document.
    Instead of maintaining the fragile requirement that you cannot recompute
    the page count while printing, just let it happen. In order to make this
    work safely, synchronously wait for the previous printed result before
    continuing with the next print.
    
    We could do more coalescing here if need be, but calls to -_recalcPageCount
    are not high in volume.
    
    Tools:
    
    * TestWebKitAPI/TestWebKitAPI.xcodeproj/project.pbxproj:
    * TestWebKitAPI/Tests/WebKitCocoa/WKWebViewPrintFormatter.mm:
    Add some tests for WKWebViewPrintFormatter; specifically that it is
    possible to _recalcPageCount twice in quick succession, and that
    we don't hang if we start painting the printed content immediately
    after a Web Content process crash.
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@249584 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-09-06  Tim Horton  <timothy_horton@apple.com>

            Marking up a note on iOS results in a PDF with no contents
            https://bugs.webkit.org/show_bug.cgi?id=201530
            <rdar://problem/53686019>

            Reviewed by Andy Estes.

            * TestWebKitAPI/TestWebKitAPI.xcodeproj/project.pbxproj:
            * TestWebKitAPI/Tests/WebKitCocoa/WKWebViewPrintFormatter.mm:
            Add some tests for WKWebViewPrintFormatter; specifically that it is
            possible to _recalcPageCount twice in quick succession, and that
            we don't hang if we start painting the printed content immediately
            after a Web Content process crash.

2019-09-09  Kocsen Chung  <kocsen_chung@apple.com>

        Cherry-pick r249514. rdar://problem/55182886

    MobileSafari may crash when invoking the C++ lambda in -[WKContentView _shareForWebView:]
    https://bugs.webkit.org/show_bug.cgi?id=201479
    <rdar://problem/51511834>
    
    Reviewed by Tim Horton.
    
    Source/WebKit:
    
    Fix the crash by making -_shareForWebView: robust in the case where there are no selection rects
    known in the UI process when -[WKContentView _share:] is invoked.
    
    * UIProcess/ios/WKContentViewInteraction.mm:
    (-[WKContentView _shareForWebView:]):
    
    Tools:
    
    Add a test to verify that the UI process doesn't crash when invoking `_share:` while there's no selection.
    
    * TestWebKitAPI/Tests/WebKitCocoa/WKContentViewEditingActions.mm:
    * TestWebKitAPI/ios/UIKitSPI.h:
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@249514 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-09-04  Wenson Hsieh  <wenson_hsieh@apple.com>

            MobileSafari may crash when invoking the C++ lambda in -[WKContentView _shareForWebView:]
            https://bugs.webkit.org/show_bug.cgi?id=201479
            <rdar://problem/51511834>

            Reviewed by Tim Horton.

            Add a test to verify that the UI process doesn't crash when invoking `_share:` while there's no selection.

            * TestWebKitAPI/Tests/WebKitCocoa/WKContentViewEditingActions.mm:
            * TestWebKitAPI/ios/UIKitSPI.h:

2019-09-05  Kocsen Chung  <kocsen_chung@apple.com>

        Apply patch. rdar://problem/55001140

    Treat a two-finger single tap as if the user tapped with the Cmd key pressed https://bugs.webkit.org/show_bug.cgi?id=201420 <rdar://problem/53207786>
    
    Reviewed by Simon Fraser.
    
    Source/WebKit:
    
    Set the metaKey modifier to true when generating a click event based on a two-finger single tap. This is important so that sites like Google and DuckDuckGo
    correctly open links in their search results page in a new tab in Safari on iOS. This currently doesn't work because those sites will call preventDefault()
    if the metaKey flag isn't set on a "click" event, and if it is set, they let the browser handle the navigation themselves.
    
    * UIProcess/ios/WKContentViewInteraction.mm:
    (-[WKContentView _twoFingerSingleTapGestureRecognized:]):
    
    Tools:
    
    Add a new twoFingerSingleTapAtPoint() method to UIScriptController, which just calls into the existing (but unused)
    -[HIDEventGenerator twoFingerTap:completionBlock:].
    
    * TestRunnerShared/UIScriptContext/Bindings/UIScriptController.idl:
    * TestRunnerShared/UIScriptContext/UIScriptController.h:
    (WTR::UIScriptController::twoFingerSingleTapAtPoint):
    * WebKitTestRunner/ios/UIScriptControllerIOS.h:
    * WebKitTestRunner/ios/UIScriptControllerIOS.mm:
    (WTR::UIScriptControllerIOS::twoFingerSingleTapAtPoint):
    
    LayoutTests:
    
    Add a new event that checks that a two-finger single tap on a clickable element yields a "click" event with the metaKey flag set to true.
    
    * fast/events/ios/click-event-two-finger-single-tap-meta-key-expected.txt: Added.
    * fast/events/ios/click-event-two-finger-single-tap-meta-key.html: Added.

    2019-09-03  Antoine Quint  <graouts@apple.com>

            [iOS] Treat a two-finger single tap as if the user tapped with the Cmd key pressed
            https://bugs.webkit.org/show_bug.cgi?id=201420
            <rdar://problem/53207786>

            Reviewed by Simon Fraser.

            Add a new twoFingerSingleTapAtPoint() method to UIScriptController, which just calls into the existing (but unused)
            -[HIDEventGenerator twoFingerTap:completionBlock:].

            * TestRunnerShared/UIScriptContext/Bindings/UIScriptController.idl:
            * TestRunnerShared/UIScriptContext/UIScriptController.h:
            (WTR::UIScriptController::twoFingerSingleTapAtPoint):
            * WebKitTestRunner/ios/UIScriptControllerIOS.h:
            * WebKitTestRunner/ios/UIScriptControllerIOS.mm:
            (WTR::UIScriptControllerIOS::twoFingerSingleTapAtPoint):

2019-09-04  Kocsen Chung  <kocsen_chung@apple.com>

        Cherry-pick r249368. rdar://problem/55001166

    Long presses that interrupt accelerated scrolling dispatch clicks on apps linked against iOS 12 or earlier
    https://bugs.webkit.org/show_bug.cgi?id=201346
    <rdar://problem/54885784>
    
    Reviewed by Dean Jackson.
    
    Source/WebKit:
    
    For apps that are linked on or after iOS 13, we add a context menu interaction to the content view, which
    requires us to disable (or avoid adding) the highlight long press gesture recognizer. However, for apps that are
    linked on the iOS 12 SDK or prior, this gesture is still present, and fires when long pressing for (roughly) up
    to 0.75 seconds if a tap gesture was not recognized instead. Firing this gesture sends a click event to the
    page; this brings back some form of <rdar://problem/53889373>, but only when holding for slightly longer than a
    normal tap, and also only in apps linked on iOS 12 or earlier. To fix this, we apply a similar solution as in
    r248433 and detect whether a long press gesture interrupted scroll view deceleration in
    -gestureRecognizerShouldBegin:. If so, we return NO to avoid clicking. See per-method comments below for more
    details.
    
    Testing this bug as-is was tricky, since there's no way in layout tests to simulate being linked on or before a
    given SDK version. Luckily, recall that:
    1. This bug occurs when the highlight gesture recognizer is enabled and added to the content view.
    2. The highlight gesture recognizer only needs to be disabled or removed when context menu interaction is added.
    As such, we should be able to restore the highlight gesture recognizer by suppressing the context menu
    interaction in an app linked-on-or-after iOS 13, by setting allowsLinkPreview to NO. Unfortunately, this doesn't
    quite work, since we currently always avoid adding the highlight gesture recognizer if the app is linked on
    iOS 13 or later.
    
    However, this means that the highlight gesture recognizer is absent from the content view in apps linked against
    iOS 13 that disable link previews, even though its absence is not required. This means that long pressing a
    clickable element in a web view that disables link previews does not show a tap highlight on iOS 13, whereas it
    would on iOS 12; this is a regression, albeit a very subtle one. To fix this subtle issue and make it possible
    to write a test for this bug, we refactor some logic for creating and configuring the highlight long press
    gesture, such that we now unconditionally add the highlight gesture, but only enable it in apps linked on or
    after iOS 13 if link previews (i.e. context menu interaction) are not allowed.
    
    Test: fast/scrolling/ios/click-events-after-long-press-during-momentum-scroll-in-overflow.html
    
    * SourcesCocoa.txt:
    * UIProcess/API/Cocoa/WKWebView.mm:
    (-[WKWebView setAllowsLinkPreview:]):
    * UIProcess/ios/WKContentViewInteraction.h:
    * UIProcess/ios/WKContentViewInteraction.mm:
    (-[WKContentView setupInteraction]):
    
    Refactor our gesture setup logic to always create and add the long press and highlight long press gestures, but
    conditionally disable them based on whether or not (1) the context menu is available, and (2) WKWebView's
    allowsLinkPreview property.
    
    (-[WKContentView _didChangeLinkPreviewAvailability]):
    (-[WKContentView _updateLongPressAndHighlightLongPressGestures]):
    
    Add a new helper to update the enabled state of the long press and highlight long press gestures, by consulting
    -_shouldUseContextMenu and -allowsLinkPreview. This is called when setting up the gestures, as well as whenever
    -allowsLinkPreview changes.
    
    (-[WKContentView gestureRecognizerShouldBegin:]):
    
    Factor out logic to ascend the view hierarchy in search of a UIScrollView that was interrupted while
    decelerating into a local lambda function; use this for both the highlight gesture and the single tap gesture,
    to determine whether they should begin.
    
    * UIProcess/ios/WKHighlightLongPressGestureRecognizer.h: Added.
    * UIProcess/ios/WKHighlightLongPressGestureRecognizer.mm: Added.
    
    In order to remember the UIScrollView (if any) tracked by the highlight long press gesture, we subclass
    _UIWebHighlightLongPressGestureRecognizer. While UILongPressGestureRecognizer does have SPI to ask for a list of
    UITouches, by the time the gesture has been recognized and the gesture delegates are invoked, these UITouches
    no longer correspond to UIViews. As such, the only time we have access to the list of UITouches with their
    UIViews is during the touches* subclass hooks.
    
    (-[WKHighlightLongPressGestureRecognizer reset]):
    
    Clear out the tracked UIScrollView here, when the gesture is reset (i.e. after ending, or being canceled).
    
    (-[WKHighlightLongPressGestureRecognizer touchesBegan:withEvent:]):
    
    Remember the last touched UIScrollView here.
    
    (-[WKHighlightLongPressGestureRecognizer lastTouchedScrollView]):
    * WebKit.xcodeproj/project.pbxproj:
    
    Tools:
    
    Add a new test option to allow tests to disable link previews.
    
    * WebKitTestRunner/TestController.cpp:
    (WTR::updateTestOptionsFromTestHeader):
    * WebKitTestRunner/TestOptions.h:
    
    Drive-by fix: also check enableLazyImageLoading when determining whether two TestOptions are the same.
    
    (WTR::TestOptions::hasSameInitializationOptions const):
    * WebKitTestRunner/cocoa/TestControllerCocoa.mm:
    (WTR::TestController::platformCreateWebView):
    
    LayoutTests:
    
    Add a couple of new layout tests to verify that using a long press gesture to interrupt momentum scrolling in a
    web view that uses API to disable link previews does not result in a click.
    
    * fast/scrolling/ios/click-events-after-long-press-during-momentum-scroll-in-main-frame-expected.txt: Added.
    * fast/scrolling/ios/click-events-after-long-press-during-momentum-scroll-in-main-frame.html: Added.
    * fast/scrolling/ios/click-events-after-long-press-during-momentum-scroll-in-overflow-expected.txt: Added.
    * fast/scrolling/ios/click-events-after-long-press-during-momentum-scroll-in-overflow.html: Added.
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@249368 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-09-01  Wenson Hsieh  <wenson_hsieh@apple.com>

            Long presses that interrupt accelerated scrolling dispatch clicks on apps linked against iOS 12 or earlier
            https://bugs.webkit.org/show_bug.cgi?id=201346
            <rdar://problem/54885784>

            Reviewed by Dean Jackson.

            Add a new test option to allow tests to disable link previews.

            * WebKitTestRunner/TestController.cpp:
            (WTR::updateTestOptionsFromTestHeader):
            * WebKitTestRunner/TestOptions.h:

            Drive-by fix: also check enableLazyImageLoading when determining whether two TestOptions are the same.

            (WTR::TestOptions::hasSameInitializationOptions const):
            * WebKitTestRunner/cocoa/TestControllerCocoa.mm:
            (WTR::TestController::platformCreateWebView):

2019-09-03  Kocsen Chung  <kocsen_chung@apple.com>

        Cherry-pick r249230. rdar://problem/55001168

    Reloading a web view with a fixed-width viewport and variable content width restores the previous page scale, shouldn't
    https://bugs.webkit.org/show_bug.cgi?id=201256
    <rdar://problem/54809509>
    
    Reviewed by Simon Fraser.
    
    Source/WebKit:
    
    * WebProcess/WebPage/ios/WebPageIOS.mm:
    (WebKit::WebPage::restorePageState):
    When restoring page state from a history item, if the saved scale was equal to the
    initial scale at the time it was saved, ignore the saved scale and use the current
    initial scale instead.
    
    Normally this doesn't matter because a given page's initial scale doesn't usually change
    between loads, but it totally can! See the test for one example of a way an API client
    might cause this; you could also imagine something similar happening if the actual
    page content changed.
    
    Tools:
    
    * TestWebKitAPI/TestWebKitAPI.xcodeproj/project.pbxproj:
    * TestWebKitAPI/Tests/WebKit/long-email-viewport.html: Added.
    * TestWebKitAPI/Tests/WebKitCocoa/ReloadWithDifferingInitialScale.mm: Added.
    (TestWebKitAPI::TEST):
    Add a test. I left many comments because I had a great deal of trouble
    writing this test and wanted to document my findings.
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@249230 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-08-28  Tim Horton  <timothy_horton@apple.com>

            Reloading a web view with a fixed-width viewport and variable content width restores the previous page scale, shouldn't
            https://bugs.webkit.org/show_bug.cgi?id=201256
            <rdar://problem/54809509>

            Reviewed by Simon Fraser.

            * TestWebKitAPI/TestWebKitAPI.xcodeproj/project.pbxproj:
            * TestWebKitAPI/Tests/WebKit/long-email-viewport.html: Added.
            * TestWebKitAPI/Tests/WebKitCocoa/ReloadWithDifferingInitialScale.mm: Added.
            (TestWebKitAPI::TEST):
            Add a test. I left many comments because I had a great deal of trouble
            writing this test and wanted to document my findings.

2019-09-03  Kocsen Chung  <kocsen_chung@apple.com>

        Cherry-pick r249115. rdar://problem/55001212

    Don't compute upconverted characters twice in buildQuery() in DataDetection.mm
    <https://webkit.org/b/201144>
    <rdar://problem/54689399>
    
    Reviewed by Brent Fulgham.
    
    Source/WebCore:
    
    * editing/cocoa/DataDetection.mm:
    (WebCore::buildQuery): Extract common variables to prevent double
    conversion for 8-bit strings.
    
    Tools:
    
    * TestWebKitAPI/TestWebKitAPI.xcodeproj/project.pbxproj: Add
    DataDetectorsTestIOS.mm to the project.
    * TestWebKitAPI/Tests/ios/DataDetectorsTestIOS.mm: Add a new
    test for Data Detectors for phone numbers.
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@249115 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-08-26  David Kilzer  <ddkilzer@apple.com>

            Don't compute upconverted characters twice in buildQuery() in DataDetection.mm
            <https://webkit.org/b/201144>
            <rdar://problem/54689399>

            Reviewed by Brent Fulgham.

            * TestWebKitAPI/TestWebKitAPI.xcodeproj/project.pbxproj: Add
            DataDetectorsTestIOS.mm to the project.
            * TestWebKitAPI/Tests/ios/DataDetectorsTestIOS.mm: Add a new
            test for Data Detectors for phone numbers.

2019-08-28  Kocsen Chung  <kocsen_chung@apple.com>

        Cherry-pick r249224. rdar://problem/54819205

    Null check webFrame when creating a print preview to prevent a crash.
    https://bugs.webkit.org/show_bug.cgi?id=201237
    <rdar://problem/51618863>
    
    Reviewed by Tim Horton.
    
    Source/WebKit:
    
    Move and expend a null check to keep from crashing when making a print preview.
    
    * UIProcess/mac/WKPrintingView.mm:
    (-[WKPrintingView _drawPreview:]):
    (-[WKPrintingView drawRect:]):
    
    Tools:
    
    Test to verify that if we don't have the WebPageProxy, we will not crash when making a print preview.
    
    * TestWebKitAPI/Tests/WebKitCocoa/UIDelegate.mm:
    (TEST):
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@249224 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-08-28  Megan Gardner  <megan_gardner@apple.com>

            Null check webFrame when creating a print preview to prevent a crash.
            https://bugs.webkit.org/show_bug.cgi?id=201237
            <rdar://problem/51618863>

            Reviewed by Tim Horton.

            Test to verify that if we don't have the WebPageProxy, we will not crash when making a print preview.

            * TestWebKitAPI/Tests/WebKitCocoa/UIDelegate.mm:
            (TEST):

2019-08-18  Babak Shafiei  <bshafiei@apple.com>

        Cherry-pick r248823. rdar://problem/54454713

    Source/WebKit:
    Use bundlePath SPI in AccessibilitySupport for WebProcessLoader
    https://bugs.webkit.org/show_bug.cgi?id=200367
    
    Patch by Eric Liang <ericliang@apple.com> on 2019-08-17
    Reviewed by Darin Adler.
    
    * Platform/spi/ios/AccessibilitySupportSPI.h:
    * WebProcess/cocoa/WebProcessCocoa.mm:
    (WebKit::accessibilityWebProcessLoaderBundlePath):
    (WebKit::registerWithAccessibility):
    
    Source/WTF:
    Added HAVE_ACCESSIBILITY_BUNDLES_PATH
    https://bugs.webkit.org/show_bug.cgi?id=200367
    
    Patch by Eric Liang <ericliang@apple.com> on 2019-08-17
    Reviewed by Darin Adler.
    
    * wtf/Platform.h:
    
    Tools:
    Tested that accessibility WebProcessLoader bundle is loaded for the correct path.
    https://bugs.webkit.org/show_bug.cgi?id=200367
    
    Patch by Eric Liang <ericliang@apple.com> on 2019-08-17
    Reviewed by Darin Adler.
    
    Added AccessibilityTestPlugin on the web process to report whether a bundle is loaded and its path, so that it can be tested on WKContentView.
    
    * TestWebKitAPI/TestWebKitAPI.xcodeproj/project.pbxproj:
    * TestWebKitAPI/Tests/WebKitCocoa/AccessibilityTestPlugin.mm: Added.
    (-[AccessibilityTestPlugin webProcessPlugIn:didCreateBrowserContextController:]):
    (-[AccessibilityTestPlugin checkAccessibilityWebProcessLoaderBundleIsLoaded:]):
    * TestWebKitAPI/Tests/WebKitCocoa/AccessibilityTestSupportProtocol.h: Added.
    * TestWebKitAPI/Tests/ios/AccessibilityTestsIOS.mm:
    (TestWebKitAPI::TEST):
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@248823 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-08-17  Eric Liang  <ericliang@apple.com>

            Tested that accessibility WebProcessLoader bundle is loaded for the correct path.
            https://bugs.webkit.org/show_bug.cgi?id=200367

            Reviewed by Darin Adler.

            Added AccessibilityTestPlugin on the web process to report whether a bundle is loaded and its path, so that it can be tested on WKContentView.

            * TestWebKitAPI/TestWebKitAPI.xcodeproj/project.pbxproj:
            * TestWebKitAPI/Tests/WebKitCocoa/AccessibilityTestPlugin.mm: Added.
            (-[AccessibilityTestPlugin webProcessPlugIn:didCreateBrowserContextController:]):
            (-[AccessibilityTestPlugin checkAccessibilityWebProcessLoaderBundleIsLoaded:]):
            * TestWebKitAPI/Tests/WebKitCocoa/AccessibilityTestSupportProtocol.h: Added.
            * TestWebKitAPI/Tests/ios/AccessibilityTestsIOS.mm:
            (TestWebKitAPI::TEST):

2019-08-18  Babak Shafiei  <bshafiei@apple.com>

        Cherry-pick r248776. rdar://problem/54455007

    REGRESSION (r248436): WKWebView doesn’t respect isOpaque setting in NIB.
    https://bugs.webkit.org/show_bug.cgi?id=200802
    rdar://problem/54357818
    
    Reviewed by Tim Horton.
    
    Source/WebKit:
    
    Tests: WKWebView.IsOpaqueDefault, WKWebView.SetOpaqueYes, WKWebView.SetOpaqueNo, WKWebView.IsOpaqueYesSubclassOverridden,
    WKWebView.IsOpaqueNoSubclassOverridden, WKWebView.IsOpaqueYesDecodedFromArchive, WKWebView.IsOpaqueNoDecodedFromArchive,
    WKWebView.IsOpaqueDrawsBackgroundYesConfiguration, WKWebView.IsOpaqueDrawsBackgroundNoConfiguration.
    
    * UIProcess/API/Cocoa/WKWebView.mm:
    (-[WKWebView _initializeWithConfiguration:]): Call _setOpaqueInternal:NO instead of self.opaque = NO.
    (-[WKWebView _setOpaqueInternal:]): Added. Moved code from setOpaque:.
    (-[WKWebView setOpaque:]): Call _setOpaqueInternal:.
    
    Tools:
    
    * TestWebKitAPI/TestWebKitAPI.xcodeproj/project.pbxproj: Added WKWebViewOpaque.mm.
    * TestWebKitAPI/Tests/ios/WKWebViewOpaque.mm: Added.
    (-[OpaqueTestWKWebView isOpaque]): Added.
    (-[NonOpaqueTestWKWebView isOpaque]): Added.
    (isOpaque): Added.
    (TEST): Added WKWebView.IsOpaqueDefault, WKWebView.SetOpaqueYes, WKWebView.SetOpaqueNo, WKWebView.IsOpaqueYesSubclassOverridden,
    WKWebView.IsOpaqueNoSubclassOverridden, WKWebView.IsOpaqueYesDecodedFromArchive, WKWebView.IsOpaqueNoDecodedFromArchive,
    WKWebView.IsOpaqueDrawsBackgroundYesConfiguration, WKWebView.IsOpaqueDrawsBackgroundNoConfiguration.
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@248776 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-08-16  Timothy Hatcher  <timothy@apple.com>

            REGRESSION (r248436): WKWebView doesn’t respect isOpaque setting in NIB.
            https://bugs.webkit.org/show_bug.cgi?id=200802
            rdar://problem/54357818

            Reviewed by Tim Horton.

            * TestWebKitAPI/TestWebKitAPI.xcodeproj/project.pbxproj: Added WKWebViewOpaque.mm.
            * TestWebKitAPI/Tests/ios/WKWebViewOpaque.mm: Added.
            (-[OpaqueTestWKWebView isOpaque]): Added.
            (-[NonOpaqueTestWKWebView isOpaque]): Added.
            (isOpaque): Added.
            (TEST): Added WKWebView.IsOpaqueDefault, WKWebView.SetOpaqueYes, WKWebView.SetOpaqueNo, WKWebView.IsOpaqueYesSubclassOverridden,
            WKWebView.IsOpaqueNoSubclassOverridden, WKWebView.IsOpaqueYesDecodedFromArchive, WKWebView.IsOpaqueNoDecodedFromArchive,
            WKWebView.IsOpaqueDrawsBackgroundYesConfiguration, WKWebView.IsOpaqueDrawsBackgroundNoConfiguration.

2019-08-15  Alan Coon  <alancoon@apple.com>

        Cherry-pick r248717. rdar://problem/54360854

    WKUIDelegate's webView:contextMenuDidEndForElement: should be called when context menus end
    https://bugs.webkit.org/show_bug.cgi?id=200750
    <rdar://problem/54232261> and <rdar://problem/52355829>
    
    Patch by Alex Christensen <achristensen@webkit.org> on 2019-08-15
    Reviewed by Tim Horton.
    
    Source/WebKit:
    
    * UIProcess/ios/WKContentViewInteraction.mm:
    (-[WKContentView contextMenuInteraction:willEndForConfiguration:animator:]):
    
    Tools:
    
    * TestWebKitAPI/Tests/WebKitCocoa/ContextMenus.mm:
    (-[TestContextMenuUIDelegate webView:contextMenuConfigurationForElement:completionHandler:]):
    (-[TestContextMenuUIDelegate webView:contextMenuForElement:willCommitWithAnimator:]):
    (-[TestContextMenuUIDelegate webView:contextMenuDidEndForElement:]):
    (contextMenuWebViewDriver):
    (TEST):
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@248717 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-08-15  Alex Christensen  <achristensen@webkit.org>

            WKUIDelegate's webView:contextMenuDidEndForElement: should be called when context menus end
            https://bugs.webkit.org/show_bug.cgi?id=200750
            <rdar://problem/54232261> and <rdar://problem/52355829>

            Reviewed by Tim Horton.

            * TestWebKitAPI/Tests/WebKitCocoa/ContextMenus.mm:
            (-[TestContextMenuUIDelegate webView:contextMenuConfigurationForElement:completionHandler:]):
            (-[TestContextMenuUIDelegate webView:contextMenuForElement:willCommitWithAnimator:]):
            (-[TestContextMenuUIDelegate webView:contextMenuDidEndForElement:]):
            (contextMenuWebViewDriver):
            (TEST):

2019-08-15  Alan Coon  <alancoon@apple.com>

        Cherry-pick r248701. rdar://problem/54333796

    [iOS](REGRESSION: r200487): WebKit.RequestActivatedElementInfoForRotatedImage fails on iOS 13
    https://bugs.webkit.org/show_bug.cgi?id=200726
    
    Patch by Said Abou-Hallawa <sabouhallawa@apple.com> on 2019-08-14
    Reviewed by Simon Fraser.
    
    To get the pixels as an array of colors, draw the image into a memory
    context. The backing memory buffer can then be accessed to get the image
    pixels' colors.
    
    * TestWebKitAPI/Tests/WebKitCocoa/WKRequestActivatedElementInfo.mm:
    (TestWebKitAPI::TEST):
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@248701 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-08-14  Said Abou-Hallawa  <sabouhallawa@apple.com>

            [iOS](REGRESSION: r200487): WebKit.RequestActivatedElementInfoForRotatedImage fails on iOS 13
            https://bugs.webkit.org/show_bug.cgi?id=200726

            Reviewed by Simon Fraser.

            To get the pixels as an array of colors, draw the image into a memory
            context. The backing memory buffer can then be accessed to get the image
            pixels' colors.

            * TestWebKitAPI/Tests/WebKitCocoa/WKRequestActivatedElementInfo.mm:
            (TestWebKitAPI::TEST):

2019-08-13  Alan Coon  <alancoon@apple.com>

        Cherry-pick r248598. rdar://problem/54282797

    Crash under IPC::Connection::markCurrentlyDispatchedMessageAsInvalid()
    https://bugs.webkit.org/show_bug.cgi?id=200674
    <rdar://problem/50692748>
    
    Reviewed by Geoff Garen.
    
    Source/WebKit:
    
    When the client terminates a provisional process (e.g. via the [WKWebView _killWebContentProcessAndResetState]
    SPI), the WebProcessProxy would notify its associated WebPageProxy objects that it had terminated but would fail
    to notify its associated ProvisionalPageProxy objects. As a result, those objects would not get destroyed and
    would still think that they were in the middle of a provisional load the next time a load started. This inconsistent
    state would lead to crashes such as the one in the radar.
    
    * UIProcess/ProvisionalPageProxy.cpp:
    (WebKit::ProvisionalPageProxy::cancel):
    * UIProcess/WebProcessProxy.cpp:
    (WebKit::WebProcessProxy::requestTermination):
    
    Tools:
    
    Add API test coverage.
    
    * TestWebKitAPI/Tests/WebKitCocoa/ProcessSwapOnNavigation.mm:
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@248598 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-08-13  Chris Dumez  <cdumez@apple.com>

            Crash under IPC::Connection::markCurrentlyDispatchedMessageAsInvalid()
            https://bugs.webkit.org/show_bug.cgi?id=200674
            <rdar://problem/50692748>

            Reviewed by Geoff Garen.

            Add API test coverage.

            * TestWebKitAPI/Tests/WebKitCocoa/ProcessSwapOnNavigation.mm:

2019-08-13  Ryan Haddad  <ryanhaddad@apple.com>

        Cherry-pick r248496. rdar://problem/54280310

    KeyboardInputTests.CaretSelectionRectAfterRestoringFirstResponder API tests time out on iPad
    https://bugs.webkit.org/show_bug.cgi?id=200604
    <rdar://problem/51273130>
    
    Reviewed by Megan Gardner.
    
    Tweak some API tests so that they work on iPad simulator. These tests checked that the final caret rect was
    {{16, 13}, {2, 15}}; however, this is only correct behavior on iPhone, where we will scale the page so that the
    focused element's font size is legible. Note that when the page is scaled, we scale the height but not the
    width of the caret, which is why the width of the caret (in content coordinates) decreases while the height
    remains the same.
    
    We don't have the same behavior on iPad, so the expected caret rect is {{16, 13}, {3, 15}}, which is equal to
    the caret rect at initial scale 1.
    
    * TestWebKitAPI/Tests/ios/KeyboardInputTestsIOS.mm:
    
    
    git-svn-id: http://svn.webkit.org/repository/webkit/trunk@248496 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-08-09  Wenson Hsieh  <wenson_hsieh@apple.com>

            KeyboardInputTests.CaretSelectionRectAfterRestoringFirstResponder API tests time out on iPad
            https://bugs.webkit.org/show_bug.cgi?id=200604
            <rdar://problem/51273130>

            Reviewed by Megan Gardner.

            Tweak some API tests so that they work on iPad simulator. These tests checked that the final caret rect was
            {{16, 13}, {2, 15}}; however, this is only correct behavior on iPhone, where we will scale the page so that the
            focused element's font size is legible. Note that when the page is scaled, we scale the height but not the
            width of the caret, which is why the width of the caret (in content coordinates) decreases while the height
            remains the same.

            We don't have the same behavior on iPad, so the expected caret rect is {{16, 13}, {3, 15}}, which is equal to
            the caret rect at initial scale 1.

            * TestWebKitAPI/Tests/ios/KeyboardInputTestsIOS.mm:

2019-08-13  Alan Coon  <alancoon@apple.com>

        Cherry-pick r248548. rdar://problem/54237813

    Fix Crash in Mail Search
    https://bugs.webkit.org/show_bug.cgi?id=200589
    Source/WebKit:
    
    <rdar://problem/53666720>
    
    Reviewed by Tim Horton.
    
    If we search in Mail backwards first, for AppKit reasons
    we get a -1 for the index of the found item.
    Do not try and insert data in this case.
    
    * UIProcess/mac/WKTextFinderClient.mm:
    
    Tools:
    
    Reviewed by Tim Horton.
    
    If you search backwards first in mail, we would crash,
    this tests that codepath.
    
    * TestWebKitAPI/Tests/WebKitCocoa/FindInPage.mm:
    (TEST):
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@248548 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-08-12  Megan Gardner  <megan_gardner@apple.com>

            Fix Crash in Mail Search
            https://bugs.webkit.org/show_bug.cgi?id=200589

            Reviewed by Tim Horton.

            If you search backwards first in mail, we would crash,
            this tests that codepath.

            * TestWebKitAPI/Tests/WebKitCocoa/FindInPage.mm:
            (TEST):

2019-08-13  Alan Coon  <alancoon@apple.com>

        Cherry-pick r248166. rdar://problem/54237837

    [macOS 10.15] Image dragged from Safari does not appear in Notes
    https://bugs.webkit.org/show_bug.cgi?id=188490
    <rdar://problem/39462717>
    
    Reviewed by Andy Estes.
    
    Source/WebKit:
    
    Removes some logic that clears out the cached promised drag image in the UI process when WebKit is asked to
    provide TIFF image data. This prevents the drop destination from asking for promised image data, if anything
    else (e.g. the system) also asks the web view to provide the same data. Additionally, this logic didn't
    previously guarantee that the promised image would be cleared anyways, since it is dependent on the drop target
    actually requesting the promised image in order to perform the cleanup.
    
    In lieu of clearing the promised drag image when it's requested, we instead clear it out upon mainframe
    navigation, in PageClientImpl::didCommitLoadForMainFrame.
    
    Test: DragAndDropTests.MultiplePromisedImageDataRequests
    
    * UIProcess/Cocoa/WebViewImpl.h:
    * UIProcess/Cocoa/WebViewImpl.mm:
    (WebKit::WebViewImpl::clearPromisedDragImage):
    (WebKit::WebViewImpl::pasteboardChangedOwner):
    (WebKit::WebViewImpl::provideDataForPasteboard):
    
    Fix the bug by not immediately clearing out the promised drag image.
    
    * UIProcess/mac/PageClientImplMac.mm:
    (WebKit::PageClientImpl::didCommitLoadForMainFrame):
    
    Tools:
    
    Add a test to verify that promised image data can be delivered to multiple pasteboards when performing a drop.
    
    * TestWebKitAPI/Tests/mac/DragAndDropTestsMac.mm:
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@248166 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-08-02  Wenson Hsieh  <wenson_hsieh@apple.com>

            [macOS 10.15] Image dragged from Safari does not appear in Notes
            https://bugs.webkit.org/show_bug.cgi?id=188490
            <rdar://problem/39462717>

            Reviewed by Andy Estes.

            Add a test to verify that promised image data can be delivered to multiple pasteboards when performing a drop.

            * TestWebKitAPI/Tests/mac/DragAndDropTestsMac.mm:

2019-08-13  Alan Coon  <alancoon@apple.com>

        Cherry-pick r248541. rdar://problem/54237768

    [iPadOS] Web pages sometimes load at half width in Safari
    https://bugs.webkit.org/show_bug.cgi?id=200624
    <rdar://problem/52694257>
    
    Reviewed by Simon Fraser.
    
    Source/WebKit:
    
    Whenever WKWebView's size changes, it normally notifies the web content process by calling into WebPageProxy::
    setViewportConfigurationViewLayoutSize, which remembers this view layout size using a member variable,
    m_viewportConfigurationViewLayoutSize. Later, m_viewportConfigurationViewLayoutSize is consulted as a part of
    constructing the creation parameters used to set up a new page.
    
    However, during animated resize, WKWebView avoids these calls to setViewportConfigurationViewLayoutSize via the
    dynamic viewport update mode check in -[WKWebView _frameOrBoundsChanged]. Instead, the new view layout size is
    pushed to the web process by calling WebPageProxy::dynamicViewportSizeUpdate.
    
    Since dynamicViewportSizeUpdate doesn't update m_viewportConfigurationViewLayoutSize, the next
    WebPageCreationParameters that are created with this WebPageProxy (e.g. after a process swap, or after
    reloading, if the process was terminated) will use the size of the WKWebView prior to the most recent animated
    resize.
    
    To fix the bug, we simply make sure that m_viewportConfigurationViewLayoutSize is updated in the dynamic
    viewport size update (i.e. animated resize) case as well.
    
    Test: WebKit.CreateWebPageAfterAnimatedResize
    
    * UIProcess/ios/WebPageProxyIOS.mm:
    (WebKit::WebPageProxy::dynamicViewportSizeUpdate):
    
    Tools:
    
    Add an API test to verify that after performing an animated resize and killing the web process, the subsequent
    web page is created using the post-animated-resize web view dimensions, rather than the original layout
    dimensions.
    
    * TestWebKitAPI/Tests/WebKitCocoa/AnimatedResize.mm:
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@248541 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-08-12  Wenson Hsieh  <wenson_hsieh@apple.com>

            [iPadOS] Web pages sometimes load at half width in Safari
            https://bugs.webkit.org/show_bug.cgi?id=200624
            <rdar://problem/52694257>

            Reviewed by Simon Fraser.

            Add an API test to verify that after performing an animated resize and killing the web process, the subsequent
            web page is created using the post-animated-resize web view dimensions, rather than the original layout
            dimensions.

            * TestWebKitAPI/Tests/WebKitCocoa/AnimatedResize.mm:

2019-08-13  Alan Coon  <alancoon@apple.com>

        Cherry-pick r248487. rdar://problem/54237679

    [iOS 13] Google Docs/Slides/Sheets: paste often doesn't work and sometimes produces an error
    https://bugs.webkit.org/show_bug.cgi?id=200591
    <rdar://problem/54102238>
    
    Reviewed by Ryosuke Niwa and Tim Horton.
    
    Source/WebKit:
    
    Adopts UIKit SPI to avoid incrementing the general pasteboard's change count whenever an editable element is
    focused. This is due to how, in iOS 13, UIKit temporarily writes an image to the pasteboard when showing the
    keyboard, to determine whether or not to show the Memojis in the input view.
    
    This causes UIPasteboard's changeCount to increment twice due to adding and then removing the image, which means
    that the changeCount sanity checks in the web process will race against the pasteboard gaining and then losing
    this temporary image.
    
    Instead, the new -supportsImagePaste SPI may be used to short-circuit this step, and avoid updating the
    changeCount when UIKeyboardImpl's delegate changes.
    
    * UIProcess/ios/WKContentViewInteraction.mm:
    (-[WKContentView supportsImagePaste]):
    
    Tools:
    
    Add a new API test to exercise -supportsImagePaste.
    
    * TestWebKitAPI/Tests/ios/KeyboardInputTestsIOS.mm:
    (TestWebKitAPI::TEST):
    * TestWebKitAPI/ios/UIKitSPI.h:
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@248487 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-08-09  Wenson Hsieh  <wenson_hsieh@apple.com>

            [iOS 13] Google Docs/Slides/Sheets: paste often doesn't work and sometimes produces an error
            https://bugs.webkit.org/show_bug.cgi?id=200591
            <rdar://problem/54102238>

            Reviewed by Ryosuke Niwa and Tim Horton.

            Add a new API test to exercise -supportsImagePaste.

            * TestWebKitAPI/Tests/ios/KeyboardInputTestsIOS.mm:
            (TestWebKitAPI::TEST):
            * TestWebKitAPI/ios/UIKitSPI.h:

2019-08-13  Alan Coon  <alancoon@apple.com>

        Cherry-pick r248281. rdar://problem/54237787

    iOS 13: Overflow:hidden on body prevents PDF scroll
    https://bugs.webkit.org/show_bug.cgi?id=200435
    rdar://problem/53942888
    
    Reviewed by Tim Horton.
    Source/WebKit:
    
    When we navigate from an overflow:hidden HTML page to a custom view (like PDF), we need
    to make sure that the scroll view is scrollable.
    
    * UIProcess/API/Cocoa/WKWebView.mm:
    (-[WKWebView _setHasCustomContentView:loadedMIMEType:]):
    
    Tools:
    
    When we navigate from an overflow:hidden HTML page to a custom view (like PDF), we need
    to make sure that the scroll view is scrollable.
    
    * TestWebKitAPI/Tests/ios/ScrollViewScrollabilityTests.mm:
    (TestWebKitAPI::TEST):
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@248281 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-08-05  Simon Fraser  <simon.fraser@apple.com>

            iOS 13: Overflow:hidden on body prevents PDF scroll
            https://bugs.webkit.org/show_bug.cgi?id=200435
            rdar://problem/53942888

            Reviewed by Tim Horton.

            When we navigate from an overflow:hidden HTML page to a custom view (like PDF), we need
            to make sure that the scroll view is scrollable.

            * TestWebKitAPI/Tests/ios/ScrollViewScrollabilityTests.mm:
            (TestWebKitAPI::TEST):

2019-08-13  Alan Coon  <alancoon@apple.com>

        Cherry-pick r248169. rdar://problem/54237663

    Add accessibility object method to determine whether an element is inside a table cell. Needed for iOS accessibility client.
    https://bugs.webkit.org/show_bug.cgi?id=200394
    <rdar://problem/52914964>
    
    Patch by Andres Gonzalez <andresg_22@apple.com> on 2019-08-02
    Reviewed by Chris Fleizach.
    
    Source/WebCore:
    
    Test: accessibility/ios-simulator/element-in-table-cell.html
    
    Added _accessibilityIsInTableCell needed for iOS accessibility client.
    * accessibility/ios/WebAccessibilityObjectWrapperIOS.mm:
    (-[WebAccessibilityObjectWrapper _accessibilityIsInTableCell]):
    
    Tools:
    
    Glue code to exercise new method [WebAccessibilityObjectWrapper _accessibilityIsInTableCell].
    
    * WebKitTestRunner/InjectedBundle/AccessibilityUIElement.cpp:
    (WTR::AccessibilityUIElement::isInTableCell const):
    * WebKitTestRunner/InjectedBundle/AccessibilityUIElement.h:
    * WebKitTestRunner/InjectedBundle/Bindings/AccessibilityUIElement.idl:
    * WebKitTestRunner/InjectedBundle/ios/AccessibilityUIElementIOS.mm:
    (WTR::AccessibilityUIElement::isInTableCell const):
    
    LayoutTests:
    
    New test that exercises [WebAccessibilityObjectWrapper _accessibilityIsInTableCell].
    
    * accessibility/ios-simulator/element-in-table-cell-expected.txt: Added.
    * accessibility/ios-simulator/element-in-table-cell.html: Added.
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@248169 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-08-02  Andres Gonzalez  <andresg_22@apple.com>

            Add accessibility object method to determine whether an element is inside a table cell. Needed for iOS accessibility client.
            https://bugs.webkit.org/show_bug.cgi?id=200394
            <rdar://problem/52914964>

            Reviewed by Chris Fleizach.

            Glue code to exercise new method [WebAccessibilityObjectWrapper _accessibilityIsInTableCell].

            * WebKitTestRunner/InjectedBundle/AccessibilityUIElement.cpp:
            (WTR::AccessibilityUIElement::isInTableCell const):
            * WebKitTestRunner/InjectedBundle/AccessibilityUIElement.h:
            * WebKitTestRunner/InjectedBundle/Bindings/AccessibilityUIElement.idl:
            * WebKitTestRunner/InjectedBundle/ios/AccessibilityUIElementIOS.mm:
            (WTR::AccessibilityUIElement::isInTableCell const):

2019-08-12  Alan Coon  <alancoon@apple.com>

        Cherry-pick r248491. rdar://problem/54130636

    Don't allow cross-origin iframes to autofocus
    https://bugs.webkit.org/show_bug.cgi?id=200515
    <rdar://problem/54092988>
    
    Reviewed by Ryosuke Niwa.
    
    Source/WebCore:
    
    According to Step 6 in the WhatWG Spec (https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofocusing-a-form-control:-the-autofocus-attribute),
    the 'autofocus' attribute shouldn't work for cross-origin iframes.
    
    This change is based on the Blink change (patch by <mustaq@chromium.org>):
    <https://chromium-review.googlesource.com/c/chromium/src/+/1593026>
    
    Also disallow cross-origin iframes from focusing programmatically without ever having
    had any user interaction.
    
    * dom/Element.cpp: Check if an invalid frame is trying to grab the focus.
    (WebCore::Element::focus):
    * html/HTMLFormControlElement.cpp: Check if the focus is moving to an invalid frame.
    (WebCore::shouldAutofocus):
    * page/DOMWindow.cpp: Check if an invalid frame is trying to grab the focus.
    (WebCore::DOMWindow::focus):
    
    Tools:
    
    Make WebKit.FocusedFrameAfterCrash use same-origin iframes instead
    of cross-origin iframes, since it depends on focusing one of the
    frames.
    
    * TestWebKitAPI/TestWebKitAPI.xcodeproj/project.pbxproj:
    * TestWebKitAPI/Tests/WebKit/ReloadPageAfterCrash.cpp:
    (TestWebKitAPI::TEST):
    * TestWebKitAPI/Tests/WebKit/many-same-origin-iframes.html: Added.
    
    LayoutTests:
    
    Add test coverage, and simulate user interaction in existing tests
    that require focusing a cross-origin frame.
    
    * http/tests/security/clipboard/resources/copy-html.html:
    * http/tests/security/clipboard/resources/copy-mso-list.html:
    * http/tests/security/clipboard/resources/copy-url.html:
    * http/wpt/html/interaction/focus/no-cross-origin-element-focus-expected.txt: Added.
    * http/wpt/html/interaction/focus/no-cross-origin-element-focus.html: Added.
    * http/wpt/html/interaction/focus/no-cross-origin-window-focus-expected.txt: Added.
    * http/wpt/html/interaction/focus/no-cross-origin-window-focus.html: Added.
    * http/wpt/html/interaction/focus/resources/child-focus-element.html: Added.
    * http/wpt/html/interaction/focus/resources/child-focus-window.html: Added.
    * http/wpt/html/semantics/forms/autofocus/no-cross-origin-autofocus.sub-expected.txt: Added.
    * http/wpt/html/semantics/forms/autofocus/no-cross-origin-autofocus.sub.html: Added.
    * http/wpt/html/semantics/forms/autofocus/resources/child-autofocus.html: Added.
    * http/wpt/webauthn/resources/last-layer-frame.https.html:
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@248491 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-08-09  Ali Juma  <ajuma@chromium.org>

            Don't allow cross-origin iframes to autofocus
            https://bugs.webkit.org/show_bug.cgi?id=200515
            <rdar://problem/54092988>

            Reviewed by Ryosuke Niwa.

            Make WebKit.FocusedFrameAfterCrash use same-origin iframes instead
            of cross-origin iframes, since it depends on focusing one of the
            frames.

            * TestWebKitAPI/TestWebKitAPI.xcodeproj/project.pbxproj:
            * TestWebKitAPI/Tests/WebKit/ReloadPageAfterCrash.cpp:
            (TestWebKitAPI::TEST):
            * TestWebKitAPI/Tests/WebKit/many-same-origin-iframes.html: Added.

2019-08-12  Alan Coon  <alancoon@apple.com>

        Cherry-pick r248438. rdar://problem/54093220

    [iOS] Position image information should respect the image orientation
    https://bugs.webkit.org/show_bug.cgi?id=200487
    
    Patch by Said Abou-Hallawa <sabouhallawa@apple.com> on 2019-08-08
    Reviewed by Simon Fraser.
    
    Source/WebCore:
    
    Re-factor CachedImage::imageSizeForRenderer() into another overriding
    function which does not scale the imageSize. Therefore the new function
    returns FloatSize while the original function returns LayoutSize.
    
    * loader/cache/CachedImage.cpp:
    (WebCore::CachedImage::imageSizeForRenderer const):
    * loader/cache/CachedImage.h:
    * rendering/RenderElement.h:
    
    Source/WebKit:
    
    imagePositionInformation() should respect the image orientation when
    drawing an Image to a ShareableBitmap context.
    
    boundsPositionInformation() already takes care of the image orientation
    because it gets RenderImage::enclosingBoundingBox().
    
    * WebProcess/WebPage/ios/WebPageIOS.mm:
    (WebKit::imagePositionInformation):
    
    Tools:
    
    Add an API test to verify the position image information is drawn rotated
    because of respecting its image orientation.
    
    * TestWebKitAPI/TestWebKitAPI.xcodeproj/project.pbxproj:
    * TestWebKitAPI/Tests/WebKitCocoa/WKRequestActivatedElementInfo.mm:
    (TestWebKitAPI::TEST):
    * TestWebKitAPI/Tests/WebKitCocoa/exif-orientation-8-llo.jpg: Added.
    * TestWebKitAPI/Tests/WebKitCocoa/img-with-rotated-image.html: Added.
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@248438 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-08-08  Said Abou-Hallawa  <sabouhallawa@apple.com>

            [iOS] Position image information should respect the image orientation
            https://bugs.webkit.org/show_bug.cgi?id=200487

            Reviewed by Simon Fraser.

            Add an API test to verify the position image information is drawn rotated
            because of respecting its image orientation.

            * TestWebKitAPI/TestWebKitAPI.xcodeproj/project.pbxproj:
            * TestWebKitAPI/Tests/WebKitCocoa/WKRequestActivatedElementInfo.mm:
            (TestWebKitAPI::TEST):
            * TestWebKitAPI/Tests/WebKitCocoa/exif-orientation-8-llo.jpg: Added.
            * TestWebKitAPI/Tests/WebKitCocoa/img-with-rotated-image.html: Added.

2019-08-12  Alan Coon  <alancoon@apple.com>

        Cherry-pick r248410. rdar://problem/54084721

    Do not allow navigations of frames about to get replaced by the result of evaluating javascript: URLs
    <rdar://problem/53788893> and https://bugs.webkit.org/show_bug.cgi?id=198786
    
    Reviewed by Geoff Garen.
    
    Source/WebCore:
    
    Covered by API Test
    
    Add a "willReplaceWithResultOfExecutingJavascriptURL" flag which is respected inside FrameLoader::isNavigationAllowed
    
    * bindings/js/ScriptController.cpp:
    (WebCore::ScriptController::executeIfJavaScriptURL):
    * bindings/js/ScriptController.h:
    (WebCore::ScriptController::willReplaceWithResultOfExecutingJavascriptURL const):
    
    * loader/FrameLoader.cpp:
    (WebCore::FrameLoader::isNavigationAllowed const):
    
    Tools:
    
    * TestWebKitAPI/TestWebKitAPI.xcodeproj/project.pbxproj:
    * TestWebKitAPI/Tests/mac/JavascriptURLNavigation.mm: Added.
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@248410 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-08-08  Brady Eidson  <beidson@apple.com>

            Do not allow navigations of frames about to get replaced by the result of evaluating javascript: URLs
            <rdar://problem/53788893> and https://bugs.webkit.org/show_bug.cgi?id=198786

            Reviewed by Geoff Garen.

            * TestWebKitAPI/TestWebKitAPI.xcodeproj/project.pbxproj:
            * TestWebKitAPI/Tests/mac/JavascriptURLNavigation.mm: Added.

2019-08-12  Alan Coon  <alancoon@apple.com>

        Cherry-pick r248265. rdar://problem/54017842

    Ping loads should not prevent page caching
    https://bugs.webkit.org/show_bug.cgi?id=200418
    <rdar://problem/53901632>
    
    Reviewed by Darin Adler.
    
    Source/WebCore:
    
    We normally prevent page caching if there were any pending subresource loads when navigating,
    to avoid caching partial / broken content. However, this should not apply to Ping / Beacon
    loads since those do not impact page rendering and can outlive the page.
    
    Tests: http/tests/navigation/page-cache-pending-ping-load-cross-origin.html
           http/tests/navigation/page-cache-pending-ping-load-same-origin.html
    
    * history/PageCache.cpp:
    (WebCore::PageCache::addIfCacheable):
    After we've fired the 'pagehide' event in each frame, stop all the loads again. This is needed
    since pages are allowed to start ping / beacon loads in their 'pagehide' handlers. If we do not
    stop those loads, then the next call to canCachePage() would fail because the DocumentLoader is
    still loading. Note that we're not actually preventing these ping loads from hitting the server
    since we never cancel page loads and those can outlive their page.
    
    * loader/DocumentLoader.cpp:
    (WebCore::shouldPendingCachedResourceLoadPreventPageCache):
    (WebCore::areAllLoadersPageCacheAcceptable):
    Make sure that Ping / Beacon / Prefetches / Icon loads do not prevent page caching.
    
    (WebCore::DocumentLoader::addSubresourceLoader):
    Tweak assertion that was incorrect since we actually allow ping / beacon loads when the
    document is about to enter PageCache (while firing pagehide event).
    
    Tools:
    
    Add TestOption to enable PageCache at UIProcess-level so that we can test
    page caching when navigating cross-origin with PSON enabled.
    
    * WebKitTestRunner/TestController.cpp:
    (WTR::TestController::resetPreferencesToConsistentValues):
    (WTR::updateTestOptionsFromTestHeader):
    * WebKitTestRunner/TestOptions.h:
    (WTR::TestOptions::hasSameInitializationOptions const):
    
    LayoutTests:
    
    Add layout test coverage.
    
    * http/tests/navigation/page-cache-pending-ping-load-cross-origin-expected.txt: Added.
    * http/tests/navigation/page-cache-pending-ping-load-cross-origin.html: Added.
    * http/tests/navigation/page-cache-pending-ping-load-same-origin-expected.txt: Added.
    * http/tests/navigation/page-cache-pending-ping-load-same-origin.html: Added.
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@248265 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-08-04  Chris Dumez  <cdumez@apple.com>

            Ping loads should not prevent page caching
            https://bugs.webkit.org/show_bug.cgi?id=200418
            <rdar://problem/53901632>

            Reviewed by Darin Adler.

            Add TestOption to enable PageCache at UIProcess-level so that we can test
            page caching when navigating cross-origin with PSON enabled.

            * WebKitTestRunner/TestController.cpp:
            (WTR::TestController::resetPreferencesToConsistentValues):
            (WTR::updateTestOptionsFromTestHeader):
            * WebKitTestRunner/TestOptions.h:
            (WTR::TestOptions::hasSameInitializationOptions const):

2019-08-12  Alan Coon  <alancoon@apple.com>

        Cherry-pick r248104. rdar://problem/53836566

    UserMediaPermissionRequestManagerProxy should not use audio+video denied requests to deny audio-only or video-only requests
    https://bugs.webkit.org/show_bug.cgi?id=200317
    
    Reviewed by Eric Carlson.
    
    Source/WebKit:
    
    Only match audio+video denied requests with new audio+video requests.
    That will ensure that audio can still be captured if user denied access to the camera through preferences
    and website started with a getUserMedia({audio: true, video: true}) call.
    Covered by added API test.
    
    * UIProcess/UserMediaPermissionRequestManagerProxy.cpp:
    (WebKit::UserMediaPermissionRequestManagerProxy::wasRequestDenied):
    
    Tools:
    
    * TestWebKitAPI/Tests/WebKit/getUserMediaAudioVideoCapture.html: Added
    * TestWebKitAPI/TestWebKitAPI.xcodeproj/project.pbxproj:
    * TestWebKitAPI/Tests/WebKit/GetUserMediaReprompt.mm:
    (-[GetUserMediaOnlyAudioUIDelegate _webView:requestMediaCaptureAuthorization:decisionHandler:]):
    (-[GetUserMediaOnlyAudioUIDelegate _webView:checkUserMediaPermissionForURL:mainFrameURL:frameIdentifier:decisionHandler:]):
    (TestWebKitAPI::TEST):
    
    LayoutTests:
    
    Update existing test with new behavior.
    Added new test for the case where video is blocked but not audio.
    
    * fast/mediastream/getUserMedia-deny-persistency3-expected.txt:
    * fast/mediastream/getUserMedia-deny-persistency3.html:
    * fast/mediastream/getUserMedia-deny-persistency4-expected.txt: Added.
    * fast/mediastream/getUserMedia-deny-persistency4.html: Added.
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@248104 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-08-01  Youenn Fablet  <youenn@apple.com>

            UserMediaPermissionRequestManagerProxy should not use audio+video denied requests to deny audio-only or video-only requests
            https://bugs.webkit.org/show_bug.cgi?id=200317

            Reviewed by Eric Carlson.

            * TestWebKitAPI/Tests/WebKit/getUserMediaAudioVideoCapture.html: Added
            * TestWebKitAPI/TestWebKitAPI.xcodeproj/project.pbxproj:
            * TestWebKitAPI/Tests/WebKit/GetUserMediaReprompt.mm:
            (-[GetUserMediaOnlyAudioUIDelegate _webView:requestMediaCaptureAuthorization:decisionHandler:]):
            (-[GetUserMediaOnlyAudioUIDelegate _webView:checkUserMediaPermissionForURL:mainFrameURL:frameIdentifier:decisionHandler:]):
            (TestWebKitAPI::TEST):

2019-08-12  Alan Coon  <alancoon@apple.com>

        Cherry-pick r248095. rdar://problem/53820658

    REGRESSION (r240942): first visually non-empty layout milestone is not reached in media documents until after the video finishes loading
    https://bugs.webkit.org/show_bug.cgi?id=200293
    <rdar://problem/52937749>
    
    Reviewed by Alex Christensen.
    
    Source/WebCore:
    
    r240942 changed FrameView::qualifiesAsVisuallyNonEmpty() to consider only documents in the
    Interactive or Complete ready states as "finished parsing". Documents considered finished
    parsing can qualify as visually non-empty even without exceeding the visual character or
    pixel thresholds, but documents considered not finished must first exceed one of these
    thresholds in order to qualify as visually non-empty.
    
    HTMLDocuments are placed in the Interactive ready state by their HTMLDocumentParsers.
    However, HTMLDocument subclasses like ImageDocument and MediaDocument use their own custom
    parsers that never set the Interactive ready state on their documents; these documents go
    from Loading directly to Complete.
    
    In order for these HTMLDocument subclasses to be considered visually non-empty before they
    finish loading they must render something that exceeds the visual character or pixel
    thresholds. For image documents, rendering the image is usually enough to cross the
    threshold, but for media documents the visual pixel threshold was never crossed because
    videos did not contribute to the visually non-empty pixel count.
    
    As a result, media documents are not considered visually non-empty until the main resource
    finishes loading. On iOS this means that the layer tree remains frozen until this point,
    even though the media might have started autoplaying with audio long before it finished
    loading.
    
    Fix this by teaching RenderVideo to contribute the video player's size to FrameView's
    visually non-empty pixel count once the video player has loaded enough data to determine its
    intrinsic size. Videos that render more than 1024 pixels will qualify a media document as
    visually non-empty even when it is still loading its main resource.
    
    Added a new API test.
    
    * rendering/RenderImage.cpp:
    (WebCore::RenderImage::imageChanged):
    (WebCore::RenderImage::incrementVisuallyNonEmptyPixelCountIfNeeded):
    * rendering/RenderImage.h:
    * rendering/RenderVideo.cpp:
    (WebCore::RenderVideo::updateIntrinsicSize):
    
    Tools:
    
    * TestWebKitAPI/TestWebKitAPI.xcodeproj/project.pbxproj:
    * TestWebKitAPI/Tests/WebKitCocoa/FirstVisuallyNonEmptyMilestone.mm: Renamed from Tools/TestWebKitAPI/Tests/WebKit/FirstVisuallyNonEmptyMilestoneWithDeferredScript.mm.
    (-[FirstPaintMessageHandler userContentController:didReceiveScriptMessage:]):
    (-[RenderingProgressNavigationDelegate _webView:renderingProgressDidChange:]):
    (-[RenderingProgressNavigationDelegate webView:didFinishNavigation:]):
    (TEST):
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@248095 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-07-31  Andy Estes  <aestes@apple.com>

            REGRESSION (r240942): first visually non-empty layout milestone is not reached in media documents until after the video finishes loading
            https://bugs.webkit.org/show_bug.cgi?id=200293
            <rdar://problem/52937749>

            Reviewed by Alex Christensen.

            * TestWebKitAPI/TestWebKitAPI.xcodeproj/project.pbxproj:
            * TestWebKitAPI/Tests/WebKitCocoa/FirstVisuallyNonEmptyMilestone.mm: Renamed from Tools/TestWebKitAPI/Tests/WebKit/FirstVisuallyNonEmptyMilestoneWithDeferredScript.mm.
            (-[FirstPaintMessageHandler userContentController:didReceiveScriptMessage:]):
            (-[RenderingProgressNavigationDelegate _webView:renderingProgressDidChange:]):
            (-[RenderingProgressNavigationDelegate webView:didFinishNavigation:]):
            (TEST):

2019-08-06  Alan Coon  <alancoon@apple.com>

        Apply patch. rdar://problem/53992160

    2019-08-06  Per Arne Vollan  <pvollan@apple.com>

            [Win] Fix AppleWin build
            https://bugs.webkit.org/show_bug.cgi?id=200414

            Reviewed by Brent Fulgham.

            * DumpRenderTree/CMakeLists.txt:
            * DumpRenderTree/PlatformWin.cmake:
            * MiniBrowser/win/CMakeLists.txt:
            * TestWebKitAPI/CMakeLists.txt:
            * TestWebKitAPI/PlatformGTK.cmake:
            * TestWebKitAPI/PlatformMac.cmake:
            * TestWebKitAPI/PlatformPlayStation.cmake:
            * TestWebKitAPI/PlatformWPE.cmake:
            * TestWebKitAPI/PlatformWin.cmake:
            * TestWebKitAPI/glib/CMakeLists.txt:
            * WebKitTestRunner/CMakeLists.txt:
            * WebKitTestRunner/PlatformGTK.cmake:
            * WebKitTestRunner/PlatformWin.cmake:

2019-08-01  Ryan Haddad  <ryanhaddad@apple.com>

        Cherry-pick r248116. rdar://problem/53829168

    Improve flakiness of SOAuthorizationRedirect tests
    https://bugs.webkit.org/show_bug.cgi?id=200320
    <rdar://problem/53767057>
    
    Reviewed by Alex Christensen.
    
    This patch replaces Util::sleep(0.5) in tests that expect a SOAuthorization session to wait when the corresponding WKWebView
    is out of the window with a more precise boolean indicator: navigationPolicyDecided. The new boolean indicator is working and
    better because the authorizationPerformed should be set in the same runloop when NavigationState::decidePolicyForNavigationAction
    is executed.
    
    * TestWebKitAPI/Tests/WebKitCocoa/TestSOAuthorization.mm:
    (-[TestSOAuthorizationDelegate webView:decidePolicyForNavigationAction:decisionHandler:]):
    (resetState):
    (TestWebKitAPI::TEST):
    
    
    git-svn-id: http://svn.webkit.org/repository/webkit/trunk@248116 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-08-01  Jiewen Tan  <jiewen_tan@apple.com>

            Improve flakiness of SOAuthorizationRedirect tests
            https://bugs.webkit.org/show_bug.cgi?id=200320
            <rdar://problem/53767057>

            Reviewed by Alex Christensen.

            This patch replaces Util::sleep(0.5) in tests that expect a SOAuthorization session to wait when the corresponding WKWebView
            is out of the window with a more precise boolean indicator: navigationPolicyDecided. The new boolean indicator is working and
            better because the authorizationPerformed should be set in the same runloop when NavigationState::decidePolicyForNavigationAction
            is executed.

            * TestWebKitAPI/Tests/WebKitCocoa/TestSOAuthorization.mm:
            (-[TestSOAuthorizationDelegate webView:decidePolicyForNavigationAction:decisionHandler:]):
            (resetState):
            (TestWebKitAPI::TEST):

2019-08-01  Ryan Haddad  <ryanhaddad@apple.com>

        Cherry-pick r248072. rdar://problem/52355829

    Unreviewed test gardening, disable failing test for rdar://52355829.
    
    * TestWebKitAPI/Tests/WebKitCocoa/ContextMenus.mm:
    (TEST):
    
    git-svn-id: http://svn.webkit.org/repository/webkit/trunk@248072 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-07-31  Ryan Haddad  <ryanhaddad@apple.com>

            Unreviewed test gardening, disable failing test for rdar://52355829.

            * TestWebKitAPI/Tests/WebKitCocoa/ContextMenus.mm:
            (TEST):

2019-08-01  Ryan Haddad  <ryanhaddad@apple.com>

        Cherry-pick r248082. rdar://problem/51752593

    Unreviewed test gardening, disable failing test for rdar://51752593.
    
    * TestWebKitAPI/Tests/WebKitCocoa/WKAttachmentTests.mm:
    
    git-svn-id: http://svn.webkit.org/repository/webkit/trunk@248082 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-07-31  Ryan Haddad  <ryanhaddad@apple.com>

            Unreviewed test gardening, disable failing test for rdar://51752593.

            * TestWebKitAPI/Tests/WebKitCocoa/WKAttachmentTests.mm:

2019-07-31  Alan Coon  <alancoon@apple.com>

        Cherry-pick r248039. rdar://problem/53788996

    [iOS 13] Safari crashes when closing a tab with a focused element if the unified field has focus
    https://bugs.webkit.org/show_bug.cgi?id=200291
    <rdar://problem/53717946>
    
    Reviewed by Megan Gardner.
    
    Source/WebKit:
    
    Makes -requestAutocorrectionContextWithCompletionHandler: robust in the case where the web page has been closed,
    and there is no Connection object to use when waiting for a sync IPC response.
    
    Test: AutocorrectionTests.RequestAutocorrectionContextAfterClosingPage
    
    * UIProcess/ios/WKContentViewInteraction.mm:
    (-[WKContentView requestAutocorrectionContextWithCompletionHandler:]):
    
    Tools:
    
    Add an API test to exercise the scenario of synchronously requesting the autocorrection context immediately
    after closing the web view, while the web view's content view isn't the first responder.
    
    * TestWebKitAPI/Tests/ios/AutocorrectionTestsIOS.mm:
    * TestWebKitAPI/ios/UIKitSPI.h:
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@248039 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-07-31  Wenson Hsieh  <wenson_hsieh@apple.com>

            [iOS 13] Safari crashes when closing a tab with a focused element if the unified field has focus
            https://bugs.webkit.org/show_bug.cgi?id=200291
            <rdar://problem/53717946>

            Reviewed by Megan Gardner.

            Add an API test to exercise the scenario of synchronously requesting the autocorrection context immediately
            after closing the web view, while the web view's content view isn't the first responder.

            * TestWebKitAPI/Tests/ios/AutocorrectionTestsIOS.mm:
            * TestWebKitAPI/ios/UIKitSPI.h:

2019-07-29  Alan Coon  <alancoon@apple.com>

        Cherry-pick r247673. rdar://problem/53449723

    Speed up HashTable decoding by reserving capacity and avoiding rehashing
    https://bugs.webkit.org/show_bug.cgi?id=199982
    
    Reviewed by Saam Barati.
    
    Source/WebKit:
    
    Use HashMap::reserveInitialCapacity() in the HashMap IPC decoder for
    performance. I measured a ~35% improvement when decoding a very large
    HashMap of Strings (~160k entries) in the context of the
    StorageManager::GetValues IPC.
    
    * Platform/IPC/ArgumentCoders.h:
    * Shared/API/c/WKDictionary.cpp:
    (WKDictionaryCreate):
    
    Source/WTF:
    
    Introduce reserveInitialCapacity() on HashMap to reserve capacity on a
    HashMap and cut down on rehashing cost when possible.
    
    * wtf/HashMap.h:
    * wtf/HashTable.h:
    (WTF::HashTable::reserveInitialCapacity):
    
    * wtf/persistence/PersistentCoders.h:
    Use HashMap::reserveInitialCapacity() in the HashMap persistent decoder for
    performance.
    
    Tools:
    
    Add API test coverage.
    
    * TestWebKitAPI/Tests/WTF/HashMap.cpp:
    (TestWebKitAPI::TEST):
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@247673 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-07-20  Chris Dumez  <cdumez@apple.com>

            Speed up HashTable decoding by reserving capacity and avoiding rehashing
            https://bugs.webkit.org/show_bug.cgi?id=199982

            Reviewed by Saam Barati.

            Add API test coverage.

            * TestWebKitAPI/Tests/WTF/HashMap.cpp:
            (TestWebKitAPI::TEST):

2019-07-29  Alan Coon  <alancoon@apple.com>

        Cherry-pick r247885. rdar://problem/53648025

    NavigationSOAuthorizationSession should check the active URL of the responding page after waking up from waiting
    https://bugs.webkit.org/show_bug.cgi?id=200150
    <rdar://problem/53280170>
    
    Reviewed by Brent Fulgham.
    
    Source/WebKit:
    
    NavigationSOAuthorizationSession should check the active URL of the responding page after waking up from waiting
    as the page might have already changed the location.
    
    * UIProcess/Cocoa/SOAuthorization/NavigationSOAuthorizationSession.h:
    * UIProcess/Cocoa/SOAuthorization/NavigationSOAuthorizationSession.mm:
    (WebKit::NavigationSOAuthorizationSession::shouldStartInternal):
    (WebKit::NavigationSOAuthorizationSession::webViewDidMoveToWindow):
    (WebKit::NavigationSOAuthorizationSession::pageActiveURLDidChangeDuringWaiting const):
    * UIProcess/Cocoa/SOAuthorization/SubFrameSOAuthorizationSession.mm:
    (WebKit::SubFrameSOAuthorizationSession::abortInternal):
    
    Tools:
    
    * TestWebKitAPI/Tests/WebKitCocoa/TestSOAuthorization.mm:
    (TestWebKitAPI::TEST):
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@247885 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-07-26  Jiewen Tan  <jiewen_tan@apple.com>

            NavigationSOAuthorizationSession should check the active URL of the responding page after waking up from waiting
            https://bugs.webkit.org/show_bug.cgi?id=200150
            <rdar://problem/53280170>

            Reviewed by Brent Fulgham.

            * TestWebKitAPI/Tests/WebKitCocoa/TestSOAuthorization.mm:
            (TestWebKitAPI::TEST):

2019-07-29  Alan Coon  <alancoon@apple.com>

        Cherry-pick r247851. rdar://problem/53648225

    WebPageProxy::receivedPolicyDecision should check navigation ID before clear pendingAPIRequest
    https://bugs.webkit.org/show_bug.cgi?id=200108
    <rdar://problem/53521238>
    
    Reviewed by Chris Dumez.
    
    Source/WebKit:
    
    Assuming there are two loads happening one after another. There is an issue when clients save
    the first decisionHandler and then call WKNavigationActionPolicyCancel for it right after the
    second decisionHandler received, -[WKWebView URL] could return a null string even though it is
    loading the second one.
    
    To solve that, this patch pairs a navigationID with the pendingAPIRequestURL such that
    WebPageProxy::receivedPolicyDecision could clear the pendingAPIRequestURL only if
    the passed navigation ID matches the current one.
    
    * UIProcess/PageLoadState.cpp:
    (WebKit::PageLoadState::reset):
    (WebKit::PageLoadState::activeURL):
    (WebKit::PageLoadState::estimatedProgress):
    (WebKit::PageLoadState::pendingAPIRequestURL const):
    (WebKit::PageLoadState::pendingAPIRequest const):
    (WebKit::PageLoadState::setPendingAPIRequest):
    (WebKit::PageLoadState::clearPendingAPIRequest):
    (WebKit::PageLoadState::isLoading):
    (WebKit::PageLoadState::setPendingAPIRequestURL): Deleted.
    (WebKit::PageLoadState::clearPendingAPIRequestURL): Deleted.
    * UIProcess/PageLoadState.h:
    (WebKit::PageLoadState::setPendingAPIRequest):
    (WebKit::PageLoadState::setPendingAPIRequestURL): Deleted.
    * UIProcess/WebPageProxy.cpp:
    (WebKit::WebPageProxy::launchProcessForReload):
    (WebKit::WebPageProxy::loadRequestWithNavigationShared):
    (WebKit::WebPageProxy::loadFile):
    (WebKit::WebPageProxy::loadDataWithNavigationShared):
    (WebKit::WebPageProxy::loadAlternateHTML):
    (WebKit::WebPageProxy::loadWebArchiveData):
    (WebKit::WebPageProxy::reload):
    (WebKit::WebPageProxy::goToBackForwardItem):
    (WebKit::WebPageProxy::receivedPolicyDecision):
    (WebKit::WebPageProxy::continueNavigationInNewProcess):
    (WebKit::WebPageProxy::didStartProvisionalLoadForFrameShared):
    (WebKit::WebPageProxy::didSameDocumentNavigationForFrame):
    (WebKit::WebPageProxy::decidePolicyForNavigationAction):
    
    Tools:
    
    Added an API test.
    
    * TestWebKitAPI/Tests/WebKitCocoa/DecidePolicyForNavigationAction.mm:
    (-[DecidePolicyForNavigationActionController webView:decidePolicyForNavigationAction:decisionHandler:]):
    (TEST):
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@247851 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-07-24  Jiewen Tan  <jiewen_tan@apple.com>

            WebPageProxy::receivedPolicyDecision should check navigation ID before clear pendingAPIRequest
            https://bugs.webkit.org/show_bug.cgi?id=200108
            <rdar://problem/53521238>

            Reviewed by Chris Dumez.

            Added an API test.

            * TestWebKitAPI/Tests/WebKitCocoa/DecidePolicyForNavigationAction.mm:
            (-[DecidePolicyForNavigationActionController webView:decidePolicyForNavigationAction:decisionHandler:]):
            (TEST):

2019-07-29  Alan Coon  <alancoon@apple.com>

        Cherry-pick r247780. rdar://problem/53647618

    ASSERTION FAILED: settings().textAutosizingEnabled() && settings().textAutosizingUsesIdempotentMode() in WebCore::Page::recomputeTextAutoSizingInAllFrames()
    https://bugs.webkit.org/show_bug.cgi?id=200079
    <rdar://problem/53474325>
    
    Reviewed by Wenson Hsieh.
    
    Source/WebKit:
    
    Do not reset idempotent values when the text autosizing is off.
    
    * UIProcess/API/C/WKPreferences.cpp:
    (WKPreferencesSetTextAutosizingUsesIdempotentMode):
    (WKPreferencesGetTextAutosizingUsesIdempotentMode):
    * UIProcess/API/C/WKPreferencesRef.h:
    * WebProcess/WebPage/ios/WebPageIOS.mm:
    (WebKit::WebPage::resetIdempotentTextAutosizingIfNeeded):
    
    Tools:
    
    Reset textAutosizingUsesIdempotentMode when transitioning to a new test.
    
    * WebKitTestRunner/ios/TestControllerIOS.mm:
    (WTR::TestController::platformResetPreferencesToConsistentValues):
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@247780 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-07-24  Zalan Bujtas  <zalan@apple.com>

            ASSERTION FAILED: settings().textAutosizingEnabled() && settings().textAutosizingUsesIdempotentMode() in WebCore::Page::recomputeTextAutoSizingInAllFrames()
            https://bugs.webkit.org/show_bug.cgi?id=200079
            <rdar://problem/53474325>

            Reviewed by Wenson Hsieh.

            Reset textAutosizingUsesIdempotentMode when transitioning to a new test.

            * WebKitTestRunner/ios/TestControllerIOS.mm:
            (WTR::TestController::platformResetPreferencesToConsistentValues):

2019-07-29  Alan Coon  <alancoon@apple.com>

        Cherry-pick r247722. rdar://problem/53647293

    [macOS 10.15] Web process crashes when attempting to show the font panel via Font > Show Fonts
    https://bugs.webkit.org/show_bug.cgi?id=200021
    <rdar://problem/53301325>
    
    Reviewed by Ryosuke Niwa.
    
    Source/WebCore:
    
    In macOS 10.15, attempting to access ~/Library/FontCollections/ from the web process causes a Sandbox violation
    and a subsequent crash. This can be triggered by trying to show the font panel via Font > Show Fonts in the
    context menu after right clicking.
    
    In the (near) future, we should fix this by moving logic to show the font panel, color panel and styles panel
    from the Editor in the web process to the UI process in WebKit2. However, for the time being, we can just work
    around this by adding a new EditorClient hook to determine whether to allow the font panel to show; this returns
    true in the legacy macOS WebKit port, and false everywhere else.
    
    Test: editing/mac/style/do-not-crash-when-showing-font-panel.html
    
    * editing/mac/EditorMac.mm:
    (WebCore::Editor::showFontPanel):
    * loader/EmptyClients.cpp:
    * page/EditorClient.h:
    
    Source/WebKit:
    
    Always return false from canShowFontPanel in WebKit2.
    
    * WebProcess/WebCoreSupport/WebEditorClient.h:
    
    Source/WebKitLegacy/mac:
    
    Implement a new editing client hook. In WebKit1, this always returns true on macOS and false on iOS.
    
    * WebCoreSupport/WebEditorClient.h:
    
    Source/WebKitLegacy/win:
    
    Implement a new editing client hook.
    
    * WebCoreSupport/WebEditorClient.h:
    
    Tools:
    
    Add support for grabbing the child menu items of a context menu item.
    
    * WebKitTestRunner/InjectedBundle/EventSendingController.cpp:
    (WTR::getMenuItemChildrenCallback):
    
    LayoutTests:
    
    Add a new layout test to verify that attempting to show the font panel doesn't crash the web process in WebKit2.
    This test is skipped in WebKit1, since EventSender::contextClick() in WebKit1 only returns an array of strings
    corresponding to the titles of each menu item.
    
    * editing/mac/style/do-not-crash-when-showing-font-panel-expected.txt: Added.
    * editing/mac/style/do-not-crash-when-showing-font-panel.html: Added.
    * platform/mac-wk1/TestExpectations:
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@247722 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-07-23  Wenson Hsieh  <wenson_hsieh@apple.com>

            [macOS 10.15] Web process crashes when attempting to show the font panel via Font > Show Fonts
            https://bugs.webkit.org/show_bug.cgi?id=200021
            <rdar://problem/53301325>

            Reviewed by Ryosuke Niwa.

            Add support for grabbing the child menu items of a context menu item.

            * WebKitTestRunner/InjectedBundle/EventSendingController.cpp:
            (WTR::getMenuItemChildrenCallback):

2019-07-29  Alan Coon  <alancoon@apple.com>

        Cherry-pick r247720. rdar://problem/53647897

    WebKit should strip away system font names from the pasted content
    https://bugs.webkit.org/show_bug.cgi?id=199975
    <rdar://problem/53336353>
    
    Reviewed by Darin Adler.
    
    Source/WebCore:
    
    Cocoa HTML Writer sometimes generate system font names such as ".AppleSystemUIFont", ".SFUI-Regular", and ".SF UI Mono".
    We need to strip away these font names upon paste to avoid these font names falling back to Times New Roman.
    
    Added the code to strip these font names away in EditingStyle::mergeStyleFromRulesForSerialization, which is used by
    StylizedMarkupAccumulator to generate HTML during copy. This works because WebContentReader::readWebArchive invokes
    sanitizeMarkupWithArchive which inserts the pasteboard content into a temporary document then re-serializes back to HTML
    using StylizedMarkupAccumulator before the actual pasting happens.
    
    This approach has a few benefits over stripping away these font names in ReplaceSelectionCommand:
    
    1. It would only affect clients that opts-in to copy & paste sanitization. e.g. it won't affect legacy WebKit clients
    and those that opt out of pasteboard content sanitization.
    
    2. It preserves font names such as ".SF Blah" that a website may insert as some kind of house keeping purposes if ever.
    While we don't have any evidence that there is any such a website but it's a real risk nonetheless. The copy side fix would
    only affect cross-site and cross-app pasting, which is rare and less likely to affect real user scenarios.
    
    3. It avoids exposing bogus .Apple* or .SF* font names to websites that directly use event.clipboardData.getData.
    Indeed stripping away bogus markup like this is one of the key features / benefit of using copy & paste sanitization.
    
    Test: editing/pasteboard/paste-cocoa-writer-markup-with-system-fonts.html
    
    * editing/EditingStyle.cpp:
    (WebCore::usesForbiddenSystemFontAsOnlyFontFamilyName): Added.
    (WebCore::EditingStyle::mergeStyleFromRulesForSerialization): Added the code to remove font-family property when needed.
    * platform/graphics/FontCache.h:
    * platform/graphics/cocoa/FontCacheCoreText.cpp:
    (WebCore::isSystemFont): Moved.
    (WebCore::FontCache::isSystemFontForbiddenForEditing): Added.
    * platform/graphics/freetype/FontCacheFreeType.cpp:
    (WebCore::FontCache::isSystemFontForbiddenForEditing): Added. Always returns false.
    * platform/graphics/win/FontCacheWin.cpp:
    (WebCore::FontCache::isSystemFontForbiddenForEditing): Ditto.
    
    Tools:
    
    Added a test to strip away system font names such as ".AppleSystemUIFont", ".SFUI-Regular", and ".SF UI Mono".
    
    * TestWebKitAPI/TestWebKitAPI.xcodeproj/project.pbxproj:
    * TestWebKitAPI/Tests/WebKitCocoa/PasteHTML.mm:
    * TestWebKitAPI/Tests/WebKitCocoa/cocoa-writer-markup-with-system-fonts.html: Added.
    
    LayoutTests:
    
    Added a test for ClipboardData.getData returning the original markup and execCommand('insertHTML', ~)
    not stripping away system font names.
    
    * editing/pasteboard/paste-cocoa-writer-markup-with-system-fonts-expected.txt: Added.
    * editing/pasteboard/paste-cocoa-writer-markup-with-system-fonts.html: Added.
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@247720 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-07-23  Ryosuke Niwa  <rniwa@webkit.org>

            WebKit should strip away system font names from the pasted content
            https://bugs.webkit.org/show_bug.cgi?id=199975
            <rdar://problem/53336353>

            Reviewed by Darin Adler.

            Added a test to strip away system font names such as ".AppleSystemUIFont", ".SFUI-Regular", and ".SF UI Mono".

            * TestWebKitAPI/TestWebKitAPI.xcodeproj/project.pbxproj:
            * TestWebKitAPI/Tests/WebKitCocoa/PasteHTML.mm:
            * TestWebKitAPI/Tests/WebKitCocoa/cocoa-writer-markup-with-system-fonts.html: Added.

2019-07-29  Alan Coon  <alancoon@apple.com>

        Cherry-pick r247702. rdar://problem/53575409

    [iOS] [WK1] UIWebView always jumps to the top left corner when scrolling to reveal the selection
    https://bugs.webkit.org/show_bug.cgi?id=200013
    <rdar://problem/52526901>
    
    Reviewed by Simon Fraser.
    
    Source/WebCore:
    
    After <https://trac.webkit.org/r244141>, we no longer attempt to scroll to reveal the text selection in
    UIWebView after changing the selection, due to how we use the legacy document view rect in legacy WebKit when
    computing the visual viewport. This causes the viewRect in RenderLayer::scrollRectToVisible to be the same size
    as the content size, which then causes us to always scroll to the origin when revealing the selection.
    
    To make selection revealing work again in legacy WebKit, conditionally restore the old behavior of using the
    unobscured content rect as the view rect, only in the case where scrolling is delegated and the platform widget
    is present.
    
    Test: WebKitLegacy.ScrollToRevealSelection
    
    * page/FrameView.cpp:
    (WebCore::FrameView::viewRectExpandedByContentInsets const):
    (WebCore::FrameView::visualViewportRectExpandedByContentInsets const): Deleted.
    
    Additionally rename visualViewportRectExpandedByContentInsets to viewRectExpandedByContentInsets, to reflect the
    fact that this may either be the visual viewport rect or unobscured content rect.
    
    * page/FrameView.h:
    * rendering/RenderLayer.cpp:
    (WebCore::RenderLayer::scrollRectToVisible):
    
    Tools:
    
    Add a new API test to verify that inserting text in UIWebView causes the document to scroll.
    
    * TestWebKitAPI/TestWebKitAPI.xcodeproj/project.pbxproj:
    * TestWebKitAPI/Tests/WebKitLegacy/ios/ScrollToRevealSelection.mm: Added.
    (-[LegacyLoadingDelegate webViewDidFinishLoad:]):
    (-[LegacyLoadingDelegate waitForDidFinishLoad]):
    * TestWebKitAPI/ios/UIKitSPI.h:
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@247702 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-07-22  Wenson Hsieh  <wenson_hsieh@apple.com>

            [iOS] [WK1] UIWebView always jumps to the top left corner when scrolling to reveal the selection
            https://bugs.webkit.org/show_bug.cgi?id=200013
            <rdar://problem/52526901>

            Reviewed by Simon Fraser.

            Add a new API test to verify that inserting text in UIWebView causes the document to scroll.

            * TestWebKitAPI/TestWebKitAPI.xcodeproj/project.pbxproj:
            * TestWebKitAPI/Tests/WebKitLegacy/ios/ScrollToRevealSelection.mm: Added.
            (-[LegacyLoadingDelegate webViewDidFinishLoad:]):
            (-[LegacyLoadingDelegate waitForDidFinishLoad]):
            * TestWebKitAPI/ios/UIKitSPI.h:

2019-07-29  Alan Coon  <alancoon@apple.com>

        Cherry-pick r247695. rdar://problem/53648210

    REGRESSION(rUnknown): YouTube playback pauses when switching to a new tab
    https://bugs.webkit.org/show_bug.cgi?id=199971
    <rdar://problem/51951218>
    
    Reviewed by Alex Christensen.
    
    Source/WebKit:
    
    When we get a message notifying us that the view has been removed from the window, we unconditionally
    ask the fullscreen manager to exit fullscreen, which has the side effect (on iOS) of pausing the video
    unconditionally. Only ask the fullscreen manager to exit fullscreen if there is actually a video in
    fullscreen mode.
    
    * UIProcess/WebPageProxy.cpp:
    (WebKit::WebPageProxy::viewDidLeaveWindow):
    
    Tools:
    
    * TestWebKitAPI/TestWebKitAPI.xcodeproj/project.pbxproj:
    * TestWebKitAPI/Tests/WebKitCocoa/NoPauseWhenSwitchingTabs.mm: Added.
    (TestWebKitAPI::TEST):
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@247695 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-07-22  Jer Noble  <jer.noble@apple.com>

            REGRESSION(rUnknown): YouTube playback pauses when switching to a new tab
            https://bugs.webkit.org/show_bug.cgi?id=199971
            <rdar://problem/51951218>

            Reviewed by Alex Christensen.

            * TestWebKitAPI/TestWebKitAPI.xcodeproj/project.pbxproj:
            * TestWebKitAPI/Tests/WebKitCocoa/NoPauseWhenSwitchingTabs.mm: Added.
            (TestWebKitAPI::TEST):

2019-07-29  Alan Coon  <alancoon@apple.com>

        Cherry-pick r247692. rdar://problem/53519917

    Disable MediaRecorder for legacy WebKit
    https://bugs.webkit.org/show_bug.cgi?id=200001
    <rdar://problem/53400030>
    
    Reviewed by Eric Carlson.
    
    Source/WebKitLegacy/mac:
    
    Disable MediaRecorder by default in legacy WebKit.
    Add SPI to set/get this preference.
    
    * WebView/WebPreferences.mm:
    (+[WebPreferences initialize]):
    (-[WebPreferences _mediaRecorderEnabled]):
    (-[WebPreferences _setMediaRecorderEnabled:]):
    * WebView/WebPreferencesPrivate.h:
    
    Tools:
    
    Enable MediaRecorder for testing purposes.
    
    * DumpRenderTree/mac/DumpRenderTree.mm:
    (createWebViewAndOffscreenWindow):
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@247692 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-07-22  Youenn Fablet  <youenn@apple.com>

            Disable MediaRecorder for legacy WebKit
            https://bugs.webkit.org/show_bug.cgi?id=200001
            <rdar://problem/53400030>

            Reviewed by Eric Carlson.

            Enable MediaRecorder for testing purposes.

            * DumpRenderTree/mac/DumpRenderTree.mm:
            (createWebViewAndOffscreenWindow):

2019-07-29  Alan Coon  <alancoon@apple.com>

        Cherry-pick r247679. rdar://problem/53648080

    [iOS] [WebKit2] Add limited support for -isPosition:atBoundary:inDirection: in WKContentView
    https://bugs.webkit.org/show_bug.cgi?id=199993
    <rdar://problem/49523528>
    
    Reviewed by Beth Dakin.
    
    Source/WebKit:
    
    Add support for -isPosition:atBoundary:inDirection:, only in the cases where the given position is the start or
    and position and the given granularity is UITextGranularityParagraph.
    
    Test: EditorStateTests.ParagraphBoundary
    
    * Shared/EditorState.cpp:
    (WebKit::EditorState::PostLayoutData::encode const):
    (WebKit::EditorState::PostLayoutData::decode):
    * Shared/EditorState.h:
    
    Add a couple of bits to indicate whether the selection start or end positions are at paragraph boundaries.
    
    * UIProcess/ios/WKContentViewInteraction.mm:
    (-[WKContentView isPosition:atBoundary:inDirection:]):
    
    Implement this to return selectionStartIsAtParagraphBoundary or selectionEndIsAtParagraphBoundary.
    
    * WebProcess/WebPage/ios/WebPageIOS.mm:
    (WebKit::WebPage::platformEditorState const):
    
    Tools:
    
    Add a new API test to verify the behavior of -isPosition:atBoundary:inDirection:.
    
    * TestWebKitAPI/Tests/WebKitCocoa/EditorStateTests.mm:
    (TestWebKitAPI::TEST):
    * TestWebKitAPI/cocoa/TestWKWebView.h:
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@247679 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-07-21  Wenson Hsieh  <wenson_hsieh@apple.com>

            [iOS] [WebKit2] Add limited support for -isPosition:atBoundary:inDirection: in WKContentView
            https://bugs.webkit.org/show_bug.cgi?id=199993
            <rdar://problem/49523528>

            Reviewed by Beth Dakin.

            Add a new API test to verify the behavior of -isPosition:atBoundary:inDirection:.

            * TestWebKitAPI/Tests/WebKitCocoa/EditorStateTests.mm:
            (TestWebKitAPI::TEST):
            * TestWebKitAPI/cocoa/TestWKWebView.h:

2019-07-24  Kocsen Chung  <kocsen_chung@apple.com>

        Cherry-pick r247671. rdar://problem/53501836

    Add accessibilityInsertText for text insertion in edit fields.
    https://bugs.webkit.org/show_bug.cgi?id=199973
    
    Patch by Andres Gonzalez <andresg_22@apple.com> on 2019-07-20
    Reviewed by Chris Fleizach.
    
    Source/WebCore:
    
    Tests: accessibility/insert-newline.html
           accessibility/ios-simulator/insert-newline.html
    
    Accessibility clients like VoiceOver and Voice Control were entering
    text in text fields by replacing the entire content of the field
    (SetValue) and then setting the insertion point to the appropriate
    offset (SetSelectedTextRange). accessibilityInsertText gives a simpler
    interface to clients to insert text at the insertion point location.
    In addition, this provides a workaround for the issue encountered with
    the previous method when inserting a linebreak.
    
    * accessibility/AccessibilityObject.cpp:
    (WebCore::AccessibilityObject::insertText):
    * accessibility/AccessibilityObject.h:
    * accessibility/ios/WebAccessibilityObjectWrapperIOS.mm:
    (-[WebAccessibilityObjectWrapper accessibilityInsertText:]):
    * accessibility/mac/WebAccessibilityObjectWrapperMac.mm:
    (-[WebAccessibilityObjectWrapper accessibilityInsertText:]):
    
    Tools:
    
    Glue code to run new LayoutTests.
    * WebKitTestRunner/InjectedBundle/AccessibilityUIElement.h:
    * WebKitTestRunner/InjectedBundle/Bindings/AccessibilityUIElement.idl:
    * WebKitTestRunner/InjectedBundle/atk/AccessibilityUIElementAtk.cpp:
    (WTR::AccessibilityUIElement::insertText):
    * WebKitTestRunner/InjectedBundle/ios/AccessibilityUIElementIOS.mm:
    (WTR::AccessibilityUIElement::insertText):
    * WebKitTestRunner/InjectedBundle/mac/AccessibilityUIElementMac.mm:
    (WTR::AccessibilityUIElement::insertText):
    * WebKitTestRunner/InjectedBundle/win/AccessibilityUIElementWin.cpp:
    (WTR::AccessibilityUIElement::insertText):
    
    LayoutTests:
    
    Tests for inserting a newline in the middle of a text line and checking
    that the insertion point and text ranges are correct.
    * accessibility/insert-newline-expected.txt: Added.
    * accessibility/insert-newline.html: Added.
    * accessibility/ios-simulator/insert-newline-expected.txt: Added.
    * accessibility/ios-simulator/insert-newline.html: Added.
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@247671 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-07-20  Andres Gonzalez  <andresg_22@apple.com>

            Add accessibilityInsertText for text insertion in edit fields.
            https://bugs.webkit.org/show_bug.cgi?id=199973

            Reviewed by Chris Fleizach.

            Glue code to run new LayoutTests.
            * WebKitTestRunner/InjectedBundle/AccessibilityUIElement.h:
            * WebKitTestRunner/InjectedBundle/Bindings/AccessibilityUIElement.idl:
            * WebKitTestRunner/InjectedBundle/atk/AccessibilityUIElementAtk.cpp:
            (WTR::AccessibilityUIElement::insertText):
            * WebKitTestRunner/InjectedBundle/ios/AccessibilityUIElementIOS.mm:
            (WTR::AccessibilityUIElement::insertText):
            * WebKitTestRunner/InjectedBundle/mac/AccessibilityUIElementMac.mm:
            (WTR::AccessibilityUIElement::insertText):
            * WebKitTestRunner/InjectedBundle/win/AccessibilityUIElementWin.cpp:
            (WTR::AccessibilityUIElement::insertText):

2019-07-24  Alan Coon  <alancoon@apple.com>

        Apply patch. rdar://problem/53483188

    Disable ENABLE_LAYOUT_FORMATTING_CONTEXT https://bugs.webkit.org/show_bug.cgi?id=200038 <rdar://problem/53457282>
    
    Reviewed by Zalan Bujtas.
    
    This feature is not complete. It is enabled for the trunk, but needs
    to be disabled in branches for shipping products.
    
    Source/JavaScriptCore:
    
    * Configurations/FeatureDefines.xcconfig:
    
    Source/WebCore:
    
    No new tests -- this change does not add any new functionality.
    
    * Configurations/FeatureDefines.xcconfig:
    
    Source/WebCore/PAL:
    
    * Configurations/FeatureDefines.xcconfig:
    
    Source/WebKit:
    
    * Configurations/FeatureDefines.xcconfig:
    
    Source/WebKitLegacy/mac:
    
    * Configurations/FeatureDefines.xcconfig:
    
    Tools:
    
    * TestWebKitAPI/Configurations/FeatureDefines.xcconfig:

    2019-07-23  Keith Rollin  <krollin@apple.com>

            Disable ENABLE_LAYOUT_FORMATTING_CONTEXT
            https://bugs.webkit.org/show_bug.cgi?id=200038
            <rdar://problem/53457282>

            Reviewed by Zalan Bujtas.

            This feature is not complete. It is enabled for the trunk, but needs
            to be disabled in branches for shipping products.

            * TestWebKitAPI/Configurations/FeatureDefines.xcconfig:

2019-07-23  Alan Coon  <alancoon@apple.com>

        Revert r247673. rdar://problem/53449723

2019-07-23  Alan Coon  <alancoon@apple.com>

        Cherry-pick r247673. rdar://problem/53449723

    Speed up HashTable decoding by reserving capacity and avoiding rehashing
    https://bugs.webkit.org/show_bug.cgi?id=199982
    
    Reviewed by Saam Barati.
    
    Source/WebKit:
    
    Use HashMap::reserveInitialCapacity() in the HashMap IPC decoder for
    performance. I measured a ~35% improvement when decoding a very large
    HashMap of Strings (~160k entries) in the context of the
    StorageManager::GetValues IPC.
    
    * Platform/IPC/ArgumentCoders.h:
    * Shared/API/c/WKDictionary.cpp:
    (WKDictionaryCreate):
    
    Source/WTF:
    
    Introduce reserveInitialCapacity() on HashMap to reserve capacity on a
    HashMap and cut down on rehashing cost when possible.
    
    * wtf/HashMap.h:
    * wtf/HashTable.h:
    (WTF::HashTable::reserveInitialCapacity):
    
    * wtf/persistence/PersistentCoders.h:
    Use HashMap::reserveInitialCapacity() in the HashMap persistent decoder for
    performance.
    
    Tools:
    
    Add API test coverage.
    
    * TestWebKitAPI/Tests/WTF/HashMap.cpp:
    (TestWebKitAPI::TEST):
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@247673 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-07-20  Chris Dumez  <cdumez@apple.com>

            Speed up HashTable decoding by reserving capacity and avoiding rehashing
            https://bugs.webkit.org/show_bug.cgi?id=199982

            Reviewed by Saam Barati.

            Add API test coverage.

            * TestWebKitAPI/Tests/WTF/HashMap.cpp:
            (TestWebKitAPI::TEST):

2019-07-18  Alan Coon  <alancoon@apple.com>

        Cherry-pick r247566. rdar://problem/53279081

    Make sure to set kCTFontFallbackOptionAttribute to kCTFontFallbackOptionSystem for system fonts
    https://bugs.webkit.org/show_bug.cgi?id=199769
    <rdar://problem/49390297>
    
    Reviewed by Myles C. Maxfield.
    
    Source/WebCore:
    
    When getting a system font, set the appropriate attribute so that it
    does not fallback to a user initiated font.
    Add an ASSERT that checks that the font in use is not a user font if
    policy is to not use user installed fonts.
    
    Tests: fast/text/user-installed-fonts/extended-character-with-user-font.html
           fast/text/user-installed-fonts/extended-character.html
    
    * platform/graphics/Font.h:
    * platform/graphics/FontCascadeFonts.cpp:
    (WebCore::FontCascadeFonts::glyphDataForSystemFallback):
    * platform/graphics/cocoa/FontCacheCoreText.cpp:
    (WebCore::preparePlatformFont):
    (WebCore::FontDatabase::singletonAllowingUserInstalledFonts):
    (WebCore::FontDatabase::singletonDisallowingUserInstalledFonts):
    (WebCore::addAttributesForInstalledFonts):
    (WebCore::addAttributesForWebFonts):
    (WebCore::installedFontMandatoryAttributes):
    * platform/graphics/mac/SimpleFontDataCoreText.cpp:
    (WebCore::Font::isUserInstalledFont const):
    
    Source/WTF:
    
    * wtf/Platform.h:
    
    Tools:
    
    Add a font containing one extended character not found in system fonts.
    
    * WebKitTestRunner/WebKitTestRunner.xcodeproj/project.pbxproj:
    * WebKitTestRunner/fonts/FakeHelvetica-SingleExtendedCharacter.ttf: Added.
    
    LayoutTests:
    
    Tests require WTR and recent MacOS, hence why they are disabled elsewhere.
    
    * TestExpectations:
    * platform/mac-wk2/TestExpectations:
    * fast/text/user-installed-fonts/extended-character-expected.html: Added.
    * fast/text/user-installed-fonts/extended-character-with-user-font-expected-mismatch.html: Added.
    * fast/text/user-installed-fonts/extended-character-with-user-font.html: Added.
    * fast/text/user-installed-fonts/extended-character.html: Added.
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@247566 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-07-18  Youenn Fablet  <youenn@apple.com>

            Make sure to set kCTFontFallbackOptionAttribute to kCTFontFallbackOptionSystem for system fonts
            https://bugs.webkit.org/show_bug.cgi?id=199769
            <rdar://problem/49390297>

            Reviewed by Myles C. Maxfield.

            Add a font containing one extended character not found in system fonts.

            * WebKitTestRunner/WebKitTestRunner.xcodeproj/project.pbxproj:
            * WebKitTestRunner/fonts/FakeHelvetica-SingleExtendedCharacter.ttf: Added.

2019-07-17  Kocsen Chung  <kocsen_chung@apple.com>

        Cherry-pick r247536. rdar://problem/53229635

    Remove the file superfluously added in r247535.
    
    * TestWebKitAPI/Tests/ios/SelectionModifyByParagraphBoundary.h: Removed.
    * TestWebKitAPI/Tests/ios/SelectionModifyByParagraphBoundary.mm:
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@247536 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-07-17  Ryosuke Niwa  <rniwa@webkit.org>

            Remove the file superfluously added in r247535.

            * TestWebKitAPI/Tests/ios/SelectionModifyByParagraphBoundary.h: Removed.
            * TestWebKitAPI/Tests/ios/SelectionModifyByParagraphBoundary.mm:

2019-07-17  Kocsen Chung  <kocsen_chung@apple.com>

        Cherry-pick r247524. rdar://problem/53229635

    [iOS] Option + Up or Down Arrow key doesn’t move cursor past paragraph boundaries in WebKit2
    https://bugs.webkit.org/show_bug.cgi?id=199851
    
    Reviewed by Wenson Hsieh.
    
    Source/WebKit:
    
    The bug was caused by the difference in the way AppKit and UIKit responds to Option + Up / Down.
    
    On macOS, AppKit sends moveForward before sending moveToStartOfParagraph and moveBackward
    before sending moveToEndOfParagraph. As a result, when Option + Down is pressed when we are at
    the end of a line, we would first move to the beginning of the next line (i.e. after the line break)
    before moving or extending selection with the paragraph boundary granurality.
    
    On iOS, UIKit only calls _moveToStartOfParagraph without moving forward by a character. As a result,
    moving forward by the paragraph boundary granurality immediately stops when we're starting at the
    end of a line when Option + Down is pressed. Option + Up case is similar.
    
    Fix the bug on iOS by emulating what happens on macOS. Namely, move the selection forward or backward
    by the character granurality before moving by the paragraph boundary granurality.
    
    * UIProcess/ios/WKContentViewInteraction.mm:
    (-[WKContentView _moveToStartOfParagraph:withHistory:]):
    (-[WKContentView _moveToEndOfParagraph:withHistory:]):
    
    Tools:
    
    Added a regression test for iOS. Unfortunately, event sender, etc... doesn't work because
    this code is getting directly triggered from UIKeyboard's code.
    
    * TestWebKitAPI/TestWebKitAPI.xcodeproj/project.pbxproj:
    * TestWebKitAPI/Tests/ios/SelectionModifyByParagraphBoundary.h: Added.
    * TestWebKitAPI/Tests/ios/SelectionModifyByParagraphBoundary.mm: Added.
    * TestWebKitAPI/ios/UIKitSPI.h:
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@247524 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-07-17  Ryosuke Niwa  <rniwa@webkit.org>

            [iOS] Option + Up or Down Arrow key doesn’t move cursor past paragraph boundaries in WebKit2
            https://bugs.webkit.org/show_bug.cgi?id=199851

            Reviewed by Wenson Hsieh.

            Added a regression test for iOS. Unfortunately, event sender, etc... doesn't work because
            this code is getting directly triggered from UIKeyboard's code.

            * TestWebKitAPI/TestWebKitAPI.xcodeproj/project.pbxproj:
            * TestWebKitAPI/Tests/ios/SelectionModifyByParagraphBoundary.h: Added.
            * TestWebKitAPI/Tests/ios/SelectionModifyByParagraphBoundary.mm: Added.
            * TestWebKitAPI/ios/UIKitSPI.h:

2019-07-17  Kocsen Chung  <kocsen_chung@apple.com>

        Cherry-pick r247490. rdar://problem/53229559

    NSTextFinder holes don't scroll with the page
    https://bugs.webkit.org/show_bug.cgi?id=199815
    <rdar://problem/52280514>
    
    Reviewed by Simon Fraser.
    
    Source/WebCore:
    
    * rendering/ScrollAlignment.h:
    
    Source/WebKit:
    
    * UIProcess/API/Cocoa/WKWebView.mm:
    (-[WKWebView _usePlatformFindUI]):
    (-[WKWebView _setUsePlatformFindUI:]):
    (-[WKWebView _ensureTextFinderClient]):
    Add a bit so that clients can choose whether they want our find UI,
    which respects scrolling, or the system find UI, which works when
    doing multi-document searches. Right now you can't have both.
    
    (-[WKWebView scrollFindMatchToVisible:]):
    Implement and plumb scrollFindMatchToVisible.
    
    * UIProcess/API/Cocoa/WKWebViewPrivate.h:
    * UIProcess/WebPageProxy.cpp:
    (WebKit::WebPageProxy::indicateFindMatch):
    * UIProcess/WebPageProxy.h:
    * WebProcess/WebPage/WebPage.cpp:
    (WebKit::WebPage::indicateFindMatch):
    * WebProcess/WebPage/WebPage.h:
    * WebProcess/WebPage/WebPage.messages.in:
    Plumb indicateFindMatch to FindController.
    
    * UIProcess/mac/WKTextFinderClient.h:
    * UIProcess/mac/WKTextFinderClient.mm:
    (-[WKTextFinderClient initWithPage:view:usePlatformFindUI:]):
    Store whether or not we are using the platform find UI.
    
    (-[WKTextFinderClient findMatchesForString:relativeToMatch:findOptions:maxResults:resultCollector:]):
    If using WebKit find UI, turn on our UI in the options passed to findString[Matches].
    
    (-[WKTextFinderClient scrollFindMatchToVisible:]):
    If using WebKit find UI, when the platform tells us to reveal a find match, indicate it.
    
    (-[WKTextFinderClient didFindStringMatchesWithRects:didWrapAround:]):
    If using WebKit find UI, lie to the platform and return no rects so that it doesn't paint a yellow rectangle.
    
    (-[WKTextFinderClient getImageForMatchResult:completionHandler:]):
    If using WebKit find UI, lie to the platform and return no image so that it doesn't paint a yellow rectangle.
    
    (-[WKTextFinderClient initWithPage:view:]): Deleted.
    
    * WebProcess/WebPage/FindController.cpp:
    (WebKit::FindController::updateFindUIAfterPageScroll):
    Make it possible to use our find UI with 'findStringMatches'; since the platform
    find infrastrucutre depends on knowing about all matches up front, we need
    to use 'findStringMatches' instead of 'findString', but we had never combined
    that with our UI. Don't throw away the other matches when we indicate one, and
    don't send DidFindString in the case we are coming from 'findStringMatches'.
    This all needs a bit of cleanup in the future.
    
    (WebKit::FindController::findString):
    Tell updateFindUIAfterPageScroll that we are 'findString' so that it uses its normal behavior.
    
    (WebKit::FindController::findStringMatches):
    Tell updateFindUIAfterPageScroll that we are 'findStringMatches' so that it uses the adjusted behavior.
    
    (WebKit::FindController::indicateFindMatch):
    Add 'indicateFindMatch', which both selects the match and moves the indicator there.
    
    * WebProcess/WebPage/FindController.h:
    
    Tools:
    
    * MiniBrowser/mac/WK2BrowserWindowController.m:
    (-[MiniBrowserNSTextFinder performAction:]):
    (-[WK2BrowserWindowController awakeFromNib]):
    Adopt the WebKit UI in MiniBrowser. Also, override NSTextFinder's
    -performAction: so that we can intercept the close action and
    hide our own find UI, since there is no delegate for that action yet.
    
    * TestWebKitAPI/Tests/WebKitCocoa/FindInPage.mm:
    (TEST):
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@247490 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-07-16  Tim Horton  <timothy_horton@apple.com>

            NSTextFinder holes don't scroll with the page
            https://bugs.webkit.org/show_bug.cgi?id=199815
            <rdar://problem/52280514>

            Reviewed by Simon Fraser.

            * MiniBrowser/mac/WK2BrowserWindowController.m:
            (-[MiniBrowserNSTextFinder performAction:]):
            (-[WK2BrowserWindowController awakeFromNib]):
            Adopt the WebKit UI in MiniBrowser. Also, override NSTextFinder's
            -performAction: so that we can intercept the close action and
            hide our own find UI, since there is no delegate for that action yet.

            * TestWebKitAPI/Tests/WebKitCocoa/FindInPage.mm:
            (TEST):

2019-07-17  Kocsen Chung  <kocsen_chung@apple.com>

        Cherry-pick r247474. rdar://problem/53229615

    JSGlobalObject type macros should support feature flags and WeakRef should have one
    https://bugs.webkit.org/show_bug.cgi?id=199601
    
    Reviewed by Mark Lam.
    
    Source/JavaScriptCore:
    
    This patch refactors the various builtin type macros to have a
    parameter, which is the feature flag enabling it.  Since most
    builtin types are enabled by default this patch adds a new global
    bool typeExposedByDefault for clarity. Note, because static hash
    tables have no concept of feature flags we can't use feature flags
    with lazy properties. This is probably not a big deal as features
    that are off by default won't be allocated anywhere we care about
    memory usage anyway.
    
    * runtime/CommonIdentifiers.h:
    * runtime/JSGlobalObject.cpp:
    (JSC::JSGlobalObject::init):
    (JSC::JSGlobalObject::visitChildren):
    * runtime/JSGlobalObject.h:
    (JSC::JSGlobalObject::stringObjectStructure const):
    (JSC::JSGlobalObject::bigIntObjectStructure const): Deleted.
    * runtime/Options.h:
    * wasm/js/JSWebAssembly.cpp:
    
    Tools:
    
    JSC options need to be set before the window is created for the test.
    
    * DumpRenderTree/mac/DumpRenderTree.mm:
    (resetWebViewToConsistentStateBeforeTesting):
    * DumpRenderTree/win/DumpRenderTree.cpp:
    (setJSCOptions):
    (resetWebViewToConsistentStateBeforeTesting):
    
    LayoutTests:
    
    Add JSC option requirements for WeakRef tests.
    
    * js/script-tests/weakref-async-is-collected.js:
    * js/script-tests/weakref-eventually-collects-values.js:
    * js/script-tests/weakref-microtasks-dont-collect.js:
    * js/script-tests/weakref-weakset-consistency.js:
    * js/weakref-async-is-collected.html:
    * js/weakref-eventually-collects-values.html:
    * js/weakref-microtasks-dont-collect.html:
    * js/weakref-weakset-consistency.html:
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@247474 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-07-15  Keith Miller  <keith_miller@apple.com>

            JSGlobalObject type macros should support feature flags and WeakRef should have one
            https://bugs.webkit.org/show_bug.cgi?id=199601

            Reviewed by Mark Lam.

            JSC options need to be set before the window is created for the test.

            * DumpRenderTree/mac/DumpRenderTree.mm:
            (resetWebViewToConsistentStateBeforeTesting):
            * DumpRenderTree/win/DumpRenderTree.cpp:
            (setJSCOptions):
            (resetWebViewToConsistentStateBeforeTesting):

2019-07-17  Kocsen Chung  <kocsen_chung@apple.com>

        Cherry-pick r247466. rdar://problem/53228860

    [ Mojave WK1 ] Some Image tests are flakey failures and are failing in tandem with zoomed in or blank image results
    https://bugs.webkit.org/show_bug.cgi?id=193108
    
    Patch by Said Abou-Hallawa <sabouhallawa@apple.com> on 2019-07-15
    Reviewed by Simon Fraser.
    
    Add a workaround for <rdar://problem/17084993> in createBitmapContextFromWebView().
    Re-request the snapshot at kCGWindowImageNominalResolution if it was captured
    at the wrong scale.
    
    * DumpRenderTree/mac/PixelDumpSupportMac.mm:
    (takeWindowSnapshot):
    (createBitmapContextFromWebView):
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@247466 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-07-15  Said Abou-Hallawa  <sabouhallawa@apple.com>

            [ Mojave WK1 ] Some Image tests are flakey failures and are failing in tandem with zoomed in or blank image results
            https://bugs.webkit.org/show_bug.cgi?id=193108

            Reviewed by Simon Fraser.

            Add a workaround for <rdar://problem/17084993> in createBitmapContextFromWebView().
            Re-request the snapshot at kCGWindowImageNominalResolution if it was captured
            at the wrong scale.

            * DumpRenderTree/mac/PixelDumpSupportMac.mm:
            (takeWindowSnapshot):
            (createBitmapContextFromWebView):

2019-07-17  Kocsen Chung  <kocsen_chung@apple.com>

        Cherry-pick r247461. rdar://problem/53229637

    Make WKURLSchemeTask thread safe.
    <rdar://problem/50471863> and https://bugs.webkit.org/show_bug.cgi?id=199764
    
    Reviewed by Alex Christensen.
    
    Source/WebKit:
    
    Punt most of the WKURLSchemeTask operations back to the main thread.
    Make accessing the NSURLRequest be thread safe with lock protection.
    
    * UIProcess/API/Cocoa/WKURLSchemeTask.mm:
    (getExceptionTypeFromMainRunLoop):
    (-[WKURLSchemeTaskImpl dealloc]):
    (-[WKURLSchemeTaskImpl request]):
    (-[WKURLSchemeTaskImpl _requestOnlyIfCached]):
    (-[WKURLSchemeTaskImpl didReceiveResponse:]):
    (-[WKURLSchemeTaskImpl didReceiveData:]):
    (-[WKURLSchemeTaskImpl didFinish]):
    (-[WKURLSchemeTaskImpl didFailWithError:]):
    (-[WKURLSchemeTaskImpl _didPerformRedirection:newRequest:]):
    
    * UIProcess/WebURLSchemeTask.cpp:
    (WebKit::WebURLSchemeTask::WebURLSchemeTask):
    (WebKit::WebURLSchemeTask::~WebURLSchemeTask):
    (WebKit::WebURLSchemeTask::didPerformRedirection):
    (WebKit::WebURLSchemeTask::didReceiveResponse):
    (WebKit::WebURLSchemeTask::didReceiveData):
    (WebKit::WebURLSchemeTask::didComplete):
    (WebKit::WebURLSchemeTask::pageDestroyed):
    (WebKit::WebURLSchemeTask::stop):
    (WebKit::WebURLSchemeTask::nsRequest const):
    
    * UIProcess/WebURLSchemeTask.h:
    (WebKit::WebURLSchemeTask::identifier const):
    (WebKit::WebURLSchemeTask::pageID const):
    (WebKit::WebURLSchemeTask::process):
    (WebKit::WebURLSchemeTask::process const): Deleted.
    (WebKit::WebURLSchemeTask::request const): Deleted.
    
    Source/WTF:
    
    * wtf/MainThread.cpp:
    (WTF::callOnMainAndWait):
    (WTF::callOnMainRunLoopAndWait):
    (WTF::callOnMainThreadAndWait):
    * wtf/MainThread.h:
    
    Tools:
    
    * TestWebKitAPI/Tests/WebKitCocoa/WKURLSchemeHandler-1.mm:
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@247461 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-07-15  Brady Eidson  <beidson@apple.com>

            Make WKURLSchemeTask thread safe.
            <rdar://problem/50471863> and https://bugs.webkit.org/show_bug.cgi?id=199764

            Reviewed by Alex Christensen.

            * TestWebKitAPI/Tests/WebKitCocoa/WKURLSchemeHandler-1.mm:

2019-07-17  Kocsen Chung  <kocsen_chung@apple.com>

        Cherry-pick r247458. rdar://problem/53229545

    Unreviewed, a build fix after r247437
    
    * TestWebKitAPI/Tests/WebKitCocoa/TestSOAuthorization.mm:
    Added platform guard towards -[WKUIDelegate _presentingViewControllerForWebView:].
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@247458 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-07-15  Jiewen Tan  <jiewen_tan@apple.com>

            Unreviewed, a build fix after r247437

            * TestWebKitAPI/Tests/WebKitCocoa/TestSOAuthorization.mm:
            Added platform guard towards -[WKUIDelegate _presentingViewControllerForWebView:].

2019-07-17  Kocsen Chung  <kocsen_chung@apple.com>

        Cherry-pick r247439. rdar://problem/53229628

    [macOS 10.15] Cannot unbold selected text when the system font is used
    https://bugs.webkit.org/show_bug.cgi?id=199788
    <rdar://problem/52142570>
    
    Reviewed by Tim Horton.
    
    Source/WebKit:
    
    In macOS 10.15, +[NSFont fontWithName:size:] no longer recognizes system fonts (of name
    ".SFNS-*") and returns nil instead. However, our existing implementation of
    WebPageProxy::fontAtSelection works by grabbing the font name in the web process, and
    sending it over to the UI process, where it is mapped to an NSFont. As a result, this always
    results in a nil font in macOS 10.15, which causes us to never update NSFontManager's
    selected font. In turn, this means that once selected text is bolded, it can't be unbolded
    via NSFontManager, since NSFontManager thinks that the text is still not bold.
    
    To fix this, we simply encode and send a platform FontInfo instead of sending the font name.
    This allows the UI process to reconstruct NSFonts from font attribute dictionaries instead,
    and update the font manager.
    
    * UIProcess/Cocoa/WebViewImpl.mm:
    (WebKit::WebViewImpl::updateFontManagerIfNeeded):
    * UIProcess/WebPageProxy.h:
    * UIProcess/WebPageProxy.messages.in:
    * UIProcess/mac/WebPageProxyMac.mm:
    (WebKit::WebPageProxy::fontAtSelection):
    
    Refactor this to send a FontInfo (containing a font attribute dictionary) instead of a font
    name.
    
    (WebKit::WebPageProxy::fontAtSelectionCallback): Deleted.
    * WebProcess/WebPage/WebPage.h:
    * WebProcess/WebPage/WebPage.messages.in:
    
    Change FontAtSelection to use sendWithAsyncReply instead of sending a callback ID. This also
    allows us to remove FontAtSelectionCallback.
    
    * WebProcess/WebPage/mac/WebPageMac.mm:
    (WebKit::WebPage::fontAtSelection):
    
    Tools:
    
    Add a new API test to verify that bolding and unbolding updates the
    shared font manager's selected font.
    
    * TestWebKitAPI/Tests/mac/FontManagerTests.mm:
    (TestWebKitAPI::TEST):
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@247439 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-07-15  Wenson Hsieh  <wenson_hsieh@apple.com>

            [macOS 10.15] Cannot unbold selected text when the system font is used
            https://bugs.webkit.org/show_bug.cgi?id=199788
            <rdar://problem/52142570>

            Reviewed by Tim Horton.

            Add a new API test to verify that bolding and unbolding updates the
            shared font manager's selected font.

            * TestWebKitAPI/Tests/mac/FontManagerTests.mm:
            (TestWebKitAPI::TEST):

2019-07-17  Kocsen Chung  <kocsen_chung@apple.com>

        Cherry-pick r247437. rdar://problem/53229545

    [iOS] SOAuthorizationSession should tell AppSSO whether the UIClient is capable of showing the extension UI
    https://bugs.webkit.org/show_bug.cgi?id=199790
    <rdar://problem/52790112>
    
    Reviewed by Brent Fulgham.
    
    Source/WebKit:
    
    On iOS, WebKit relies on a SPI -[WKUIDelegatePrivate _presentingViewControllerForWebView:] to present the
    extension UI. However, third party clients often don't implement this SPI. Therefore, WebKit will not be
    able to present the extension UI for them.
    
    To be able to show the extension UI for third party WebKit clients, WebKit should unset SOAuthorization.enableEmbeddedAuthorizationViewController
    whenever clients don't implement the above SPI such that AppSSO could show the UI in their UI process.
    
    * UIProcess/Cocoa/SOAuthorization/SOAuthorizationSession.mm:
    (WebKit::SOAuthorizationSession::start):
    
    Tools:
    
    Add tests to check SOAuthorization.enableEmbeddedAuthorizationViewController accordingly.
    
    * TestWebKitAPI/Tests/WebKitCocoa/TestSOAuthorization.mm:
    (-[TestSOAuthorizationDelegate _presentingViewControllerForWebView:]):
    (configureSOAuthorizationWebView):
    (TestWebKitAPI::TEST):
    (-[TestSOAuthorizationNavigationDelegate init]): Deleted.
    (-[TestSOAuthorizationNavigationDelegate webView:didFinishNavigation:]): Deleted.
    (-[TestSOAuthorizationNavigationDelegate webView:decidePolicyForNavigationAction:decisionHandler:]): Deleted.
    (-[TestSOAuthorizationNavigationDelegate webView:createWebViewWithConfiguration:forNavigationAction:windowFeatures:]): Deleted.
    (-[TestSOAuthorizationNavigationDelegate _webView:decidePolicyForSOAuthorizationLoadWithCurrentPolicy:forExtension:completionHandler:]): Deleted.
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@247437 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-07-15  Jiewen Tan  <jiewen_tan@apple.com>

            [iOS] SOAuthorizationSession should tell AppSSO whether the UIClient is capable of showing the extension UI
            https://bugs.webkit.org/show_bug.cgi?id=199790
            <rdar://problem/52790112>

            Reviewed by Brent Fulgham.

            Add tests to check SOAuthorization.enableEmbeddedAuthorizationViewController accordingly.

            * TestWebKitAPI/Tests/WebKitCocoa/TestSOAuthorization.mm:
            (-[TestSOAuthorizationDelegate _presentingViewControllerForWebView:]):
            (configureSOAuthorizationWebView):
            (TestWebKitAPI::TEST):
            (-[TestSOAuthorizationNavigationDelegate init]): Deleted.
            (-[TestSOAuthorizationNavigationDelegate webView:didFinishNavigation:]): Deleted.
            (-[TestSOAuthorizationNavigationDelegate webView:decidePolicyForNavigationAction:decisionHandler:]): Deleted.
            (-[TestSOAuthorizationNavigationDelegate webView:createWebViewWithConfiguration:forNavigationAction:windowFeatures:]): Deleted.
            (-[TestSOAuthorizationNavigationDelegate _webView:decidePolicyForSOAuthorizationLoadWithCurrentPolicy:forExtension:completionHandler:]): Deleted.

2019-07-17  Kocsen Chung  <kocsen_chung@apple.com>

        Cherry-pick r247434. rdar://problem/53229565

    window.openDatabase is not writable
    https://bugs.webkit.org/show_bug.cgi?id=199737
    <rdar://problem/52551332>
    
    Reviewed by Chris Dumez.
    
    Source/WebCore:
    
    In r246707 we made openDatabase an undetectable attribute of window, and it was set to be read-only. This broke
    some sites which replace window.openDatabase with their own implementation when window.openDatabase does not
    exists or WebSQL is not implemented.
    
    This patch removes the readonly property and adds a setter for openDatabase.
    
    * Modules/webdatabase/DOMWindowWebDatabase.idl:
    * bindings/js/JSDOMWindowCustom.cpp:
    (WebCore::JSDOMWindow::setOpenDatabase):
    
    Tools:
    
    * TestWebKitAPI/Tests/WebKitCocoa/WebSQLBasics.mm:
    (TEST):
    * TestWebKitAPI/Tests/WebKitCocoa/opendatabase-always-exists.html:
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@247434 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-07-15  Sihui Liu  <sihui_liu@apple.com>

            window.openDatabase is not writable
            https://bugs.webkit.org/show_bug.cgi?id=199737
            <rdar://problem/52551332>

            Reviewed by Chris Dumez.

            * TestWebKitAPI/Tests/WebKitCocoa/WebSQLBasics.mm:
            (TEST):
            * TestWebKitAPI/Tests/WebKitCocoa/opendatabase-always-exists.html:

2019-07-15  Aakash Jain  <aakash_jain@apple.com>

        [ews-build] Parse and display layout test failures
        https://bugs.webkit.org/show_bug.cgi?id=199709

        Rubber-stamped by Jonathan Bedard.

        * BuildSlaveSupport/ews-build/steps.py:
        (RunWebKitTests.start): Initialize log_observer.
        (RunWebKitTests._strip_python_logging_prefix): Copied from similar code in build.webkit.org buildbot config.
        (RunWebKitTests._parseRunWebKitTestsOutput): Ditto.
        (RunWebKitTests.commandComplete): Gather and parse the stdout and stderr logs.
        (RunWebKitTests.evaluateResult): Analyze the results and decide build status.
        (RunWebKitTests.getResultSummary): Update build and step summary.
        * BuildSlaveSupport/ews-build/steps_unittest.py: Added and updated unit-tests.

2019-07-15  Commit Queue  <commit-queue@webkit.org>

        Unreviewed, rolling out r247393.
        https://bugs.webkit.org/show_bug.cgi?id=199797

        broke mips and arm EWS (Requested by guijemont on #webkit).

        Reverted changeset:

        "run-javascriptcore-tests won't report test results for
        testmasm, testair, testb3, testdfg and test api"
        https://bugs.webkit.org/show_bug.cgi?id=199489
        https://trac.webkit.org/changeset/247393

2019-07-12  Andy Estes  <aestes@apple.com>

        [Cocoa] -loadFileURL:allowingReadAccessToURL: should fully resolve file URLs
        https://bugs.webkit.org/show_bug.cgi?id=199768
        <rdar://problem/52002206>

        Reviewed by Geoffrey Garen.

        * TestWebKitAPI/Tests/WebKitCocoa/LoadFileURL.mm:
        (TEST):

2019-07-12  Aakash Jain  <aakash_jain@apple.com>

        [ews-build] Remove wincairo queue from old EWS and dashboard
        https://bugs.webkit.org/show_bug.cgi?id=199776

        Reviewed by Don Olmstead.

        * BuildSlaveSupport/build.webkit.org-config/public_html/dashboard/Scripts/BubbleQueueServer.js:
        * QueueStatusServer/config/queues.py:

2019-07-12  Aakash Jain  <aakash_jain@apple.com>

        [ews-build] Enable wincairo queue on new EWS
        https://bugs.webkit.org/show_bug.cgi?id=199593

        Reviewed by Don Olmstead.

        * BuildSlaveSupport/ews-build/config.json: Enabled the triggers for wincairo builder.
        * BuildSlaveSupport/ews-build/factories.py: Added required build steps for wincairo factory.
        * BuildSlaveSupport/ews-app/ews/views/statusbubble.py:
        (StatusBubble): Enable wincairo status-bubble.

2019-07-12  Aakash Jain  <aakash_jain@apple.com>

        [ews-app] Enable logging for clicking SubmitToEWS button
        https://bugs.webkit.org/show_bug.cgi?id=199757

        Unreviewed minor infrastructure fix.

        * BuildSlaveSupport/ews-app/ews/views/submittoews.py:
        (SubmitToEWS.post): Change logging level from debug to info.

2019-07-12  Alex Christensen  <achristensen@webkit.org>

        Enable client certificate authentication unit test
        https://bugs.webkit.org/show_bug.cgi?id=199735

        Reviewed by Chris Dumez.

        * TestWebKitAPI/Tests/WebKitCocoa/Challenge.mm:
        (TEST):
        I originally wrote this in https://bugs.webkit.org/show_bug.cgi?id=197800 but it was disabled because it crashed.
        I found what was crashing.  I was reading out of bounds on my vector of 2 strings :(

2019-07-12  Alex Christensen  <achristensen@webkit.org>

        Begin unifying TestWebKitAPI build
        https://bugs.webkit.org/show_bug.cgi?id=199728

        Reviewed by Keith Miller.

        * TestWebKitAPI/Configurations/Base.xcconfig:
        * TestWebKitAPI/Scripts/generate-unified-sources.sh: Added.
        * TestWebKitAPI/Sources.txt: Added.
        * TestWebKitAPI/SourcesCocoa.txt: Added.
        * TestWebKitAPI/TestWebKitAPI.xcodeproj/project.pbxproj:

2019-07-12  Zhifei Fang  <zhifei_fang@apple.com>

        run-javascriptcore-tests won't report test results for testmasm, testair, testb3, testdfg and test api
        https://bugs.webkit.org/show_bug.cgi?id=199489
        <rdar://problem/47891081>

        Reviewed by Aakash Jain.

        * BuildSlaveSupport/build.webkit.org-config/steps.py:
        (RunJavaScriptCoreTests.countFailures):
        * BuildSlaveSupport/build.webkit.org-config/steps_unittest.py:
        * Scripts/run-javascriptcore-tests:
        (runTest):
        (reportTestFailures):
        (runJSCStressTests):

2019-07-12  Aakash Jain  <aakash_jain@apple.com>

        [ews-build] Make layout-tests' full_results.json accessible in Buildbot
        https://bugs.webkit.org/show_bug.cgi?id=199743

        Reviewed by Jonathan Bedard.

        * BuildSlaveSupport/ews-build/steps.py:
        * BuildSlaveSupport/ews-build/steps_unittest.py: Updated unit-tests.

2019-07-11  Aakash Jain  <aakash_jain@apple.com>

        Unreviewed follow-up fix to r247364.
        [ews-build] Add build step to clean up .git/index.lock file
        https://bugs.webkit.org/show_bug.cgi?id=199722

        * BuildSlaveSupport/ews-build/steps.py:
        (CheckOutSource): CheckOutSource should not haltOnFailure since CleanUpGitIndexLock step needs
        to be run after this step.

2019-07-11  Yusuke Suzuki  <ysuzuki@apple.com>

        Flaky API Test TestWTF.bmalloc.ScavengedMemoryShouldBeReused
        https://bugs.webkit.org/show_bug.cgi?id=199524
        <rdar://problem/52783816>

        Reviewed by Saam Barati.

        This test is white-box one and it has strong assumption how IsoHeap allocates pages.
        But this test has several problems.

        1. IsoPage::numObjects is not the exact number of how many we allocate objects. This
           number is calculated by pageSize / sizeof(T), and this does not account the header
           size of IsoPage. So, # of objects per IsoPage is less than numObjects. Since sizeof(double)
           is very small, we can have many objects in one IsoPage. As a result, we need a large
           bitmap in IsoPage. This reduces # of objects in IsoPage largely. So, `ptrs.size()` becomes
           less than numObjects.

        2. We now have lower tier of allocation in IsoHeap. It means that we allocate 8 objects in
           shared page (page is shared, but memory is pinned for a specific type) before using IsoHeap's
           page. This also makes the intention of this test wrong.

        Due to (1), we access OoB of ptrs vector, passing a garbage to IsoHeap::deallocate, and crashing.

        We make this test robust while we still keep this test white-box one to test the critical feature
        of IsoHeap. We first exhaust lower tier of IsoHeap, and after that, start testing the memory. We
        allocate many pointers, deallocate them, allocate one pointer while keeping pointers in the lower
        tier live, and check whether the deallocated memory is reused.

        * TestWebKitAPI/Tests/WTF/bmalloc/IsoHeap.cpp:
        (TEST):

2019-07-11  Pablo Saavedra  <psaavedra@igalia.com>

        [WPE][GTK] Build failure with ENABLE_ACCESSIBILITY=OFF
        https://bugs.webkit.org/show_bug.cgi?id=199625

        Added ENABLE(ACCESSIBILITY) and replaced HAVE(ACCESSIBILITY)
        with ENABLE(ACCESSIBILITY) in the code.

        Additionally, the TestRunner code generator now honors the
        Conditional IDL format.

        Reviewed by Konstantin Tokarev.

        * WebKitTestRunner/InjectedBundle/AccessibilityController.cpp:
        * WebKitTestRunner/InjectedBundle/AccessibilityTextMarker.cpp:
        * WebKitTestRunner/InjectedBundle/AccessibilityTextMarkerRange.cpp:
        * WebKitTestRunner/InjectedBundle/AccessibilityUIElement.cpp:
        * WebKitTestRunner/InjectedBundle/Bindings/AccessibilityController.idl:
        * WebKitTestRunner/InjectedBundle/Bindings/AccessibilityTextMarker.idl:
        * WebKitTestRunner/InjectedBundle/Bindings/AccessibilityTextMarkerRange.idl:
        * WebKitTestRunner/InjectedBundle/Bindings/AccessibilityUIElement.idl:
        * WebKitTestRunner/InjectedBundle/Bindings/CodeGeneratorTestRunner.pm:
        (_generateImplementationFile):

2019-07-11  Aakash Jain  <aakash_jain@apple.com>

        [ews-build] Add build step to clean up .git/index.lock file
        https://bugs.webkit.org/show_bug.cgi?id=199722

        Reviewed by Jonathan Bedard.

        * BuildSlaveSupport/ews-build/steps.py:
        (CheckOutSource.getResultSummary): Run CleanUpGitIndexLock step when CheckOutSource fails.
        (CleanUpGitIndexLock.__init__): Configure timeout and logEnviron.
        (CleanUpGitIndexLock.evaluateCommand): Always RETRY the build after this step is run.
        * BuildSlaveSupport/ews-build/steps_unittest.py: Added unit-tests.

2019-07-11  Jonathan Bedard  <jbedard@apple.com>

        [iOS 13] Enable WebKit build
        https://bugs.webkit.org/show_bug.cgi?id=199481
        <rdar://problem/52619048>

        Reviewed by Tim Horton.

        * TestWebKitAPI/Configurations/TestWebKitAPI.xcconfig: Add iOS framework stubs.

2019-07-11  Ryan Haddad  <ryanhaddad@apple.com>

        Add test expectations and baselines for iOS 13
        https://bugs.webkit.org/show_bug.cgi?id=199329

        Reviewed by Jonathan Bedard.

        * Scripts/webkitpy/port/ios.py:
        (IOSPort): Increment current version to 13.
        * Scripts/webkitpy/port/ios_device_unittest.py: Update unit tests.
        (IOSDeviceTest.test_layout_test_searchpath_with_apple_additions):
        (IOSDeviceTest.test_layout_test_searchpath_without_apple_additions):
        (IOSDeviceTest.test_layout_searchpath_wih_device_type):
        * Scripts/webkitpy/port/ios_simulator_unittest.py: Ditto.
        (IOSSimulatorTest.make_port):
        (IOSSimulatorTest.test_layout_test_searchpath_with_apple_additions):
        (IOSSimulatorTest.test_layout_test_searchpath_without_apple_additions):
        (IOSSimulatorTest.test_layout_searchpath_wih_device_type):
        * Scripts/webkitpy/port/ios_testcase.py: Ditto.
        (IOSTest.make_port):

2019-07-11  Joanmarie Diggs  <jdiggs@igalia.com>

        AX: Implement support for ARIA roles insertion, deletion, subscript, superscript, and time
        https://bugs.webkit.org/show_bug.cgi?id=199692

        Reviewed by Chris Fleizach.

        Add support for output of AXDeletion and AXInsertion roles for tests.
        Update GTK and WPE jhbuild modules to use version of ATK and AT-SPI2
        which include ROLE_CONTENT_DELETION and ROLE_CONTENT_INSERTION.

        * WebKitTestRunner/InjectedBundle/atk/AccessibilityUIElementAtk.cpp:
        * gtk/jhbuild.modules:
        * wpe/jhbuild.modules:

2019-07-11  Adrian Perez de Castro  <aperez@igalia.com>

        [ews-build] Remove workers {ltilve,tanty}-gtk-wk2-ews from configuration
        https://bugs.webkit.org/show_bug.cgi?id=199707

        Reviewed by Aakash Jain.

        * BuildSlaveSupport/ews-build/config.json: Remove old unused workers.

2019-07-10  Simon Fraser  <simon.fraser@apple.com>

        [iOS WK2] With modal overlay and body overflow:hidden, can't access all the content
        https://bugs.webkit.org/show_bug.cgi?id=199693
        rdar://problem/51930364

        Reviewed by Tim Horton.
        
        New API tests that test scrollability with various combinations of content, insets,
        input accessory bars etc.

        * TestWebKitAPI/TestWebKitAPI.xcodeproj/project.pbxproj:
        * TestWebKitAPI/Tests/ios/ScrollViewScrollabilityTests.mm: Added.
        (TestWebKitAPI::webViewWithAutofocusedInput):
        (TestWebKitAPI::TEST):

2019-07-10  Tim Horton  <timothy_horton@apple.com>

        Long pressing on attachments will crash the WebContent process
        https://bugs.webkit.org/show_bug.cgi?id=199696
        <rdar://problem/52920241>

        Reviewed by Dean Jackson.

        * TestWebKitAPI/Tests/WebKitCocoa/WKRequestActivatedElementInfo.mm:
        (TestWebKitAPI::TEST):
        Add a test that previously crashed.

2019-07-10  Dean Jackson  <dino@apple.com>

        Support MacCatalyst in run-webkit-app
        https://bugs.webkit.org/show_bug.cgi?id=199690

        Reviewed by Tim Horton.

        Add a --maccatalyst option to run-webkit-app that
        can launch MacCatalyst applications with a built WebKit.

        * Scripts/webkitdirs.pm:
        (argumentsForConfiguration):
        (determineXcodeSDK):
        (xcodeSDKPlatformName):
        (determineConfigurationProductDir):
        (determinePortName):
        (isCatalystWebKit):
        (isAppleCocoaWebKit):
        (willUseCatalystSDK):

2019-07-10  Ryan Haddad  <ryanhaddad@apple.com>

        [MacOS] Filter VPA info logged to stdout
        https://bugs.webkit.org/show_bug.cgi?id=199673

        Reviewed by Eric Carlson.

        * Scripts/webkitpy/port/mac.py:
        (MacPort.logging_patterns_to_strip):

2019-07-10  Ryan Haddad  <ryanhaddad@apple.com>

        Unreviewed, rolling out r247286.

        Caused TestWTF.WTF.StringOperators to fail on debug bots

        Reverted changeset:

        "Add StringBuilder member function which allows makeString()
        style variadic argument construction"
        https://bugs.webkit.org/show_bug.cgi?id=198997
        https://trac.webkit.org/changeset/247286

2019-07-10  Aakash Jain  <aakash_jain@apple.com>

        [ews-build] Explicitly use perl or python while invoking scripts
        https://bugs.webkit.org/show_bug.cgi?id=199669

        Reviewed by Jonathan Bedard.

        * BuildSlaveSupport/ews-build/steps.py: Explicitly added perl or python while invoking scripts.
        * BuildSlaveSupport/ews-build/steps_unittest.py: Updated unit-tests accordingly.

2019-07-10  Guillaume Emont  <guijemont@igalia.com>

        Run tests on mips EWS
        https://bugs.webkit.org/show_bug.cgi?id=196854

        Reviewed by Carlos Garcia Campos.

        * Scripts/webkitpy/common/config/ews.json:

2019-07-09  Michael Catanzaro  <mcatanzaro@igalia.com>

        [WPE][GTK] GUniqueOutPtr::release should return a raw pointer
        https://bugs.webkit.org/show_bug.cgi?id=199579

        Reviewed by Carlos Garcia Campos.

        * TestWebKitAPI/Tests/WTF/glib/GUniquePtr.cpp:
        (TestWebKitAPI::TEST):

2019-07-09  Chris Dumez  <cdumez@apple.com>

        Fix integer type encoding / decoding in WKRemoteObjectCoder
        https://bugs.webkit.org/show_bug.cgi?id=199643
        <rdar://problem/52732342>

        Reviewed by Anders Carlsson.

        Update API test coverage.

        * TestWebKitAPI/Tests/WebKitCocoa/RemoteObjectRegistry.h:
        * TestWebKitAPI/Tests/WebKitCocoa/RemoteObjectRegistry.mm:
        (TEST):
        * TestWebKitAPI/Tests/WebKitCocoa/RemoteObjectRegistryPlugIn.mm:
        (-[RemoteObjectRegistryPlugIn takeUnsignedLongLong:completionHandler:]):
        (-[RemoteObjectRegistryPlugIn takeLongLong:completionHandler:]):
        (-[RemoteObjectRegistryPlugIn takeUnsignedLong:completionHandler:]):
        (-[RemoteObjectRegistryPlugIn takeLong:completionHandler:]):

2019-07-09  Sam Weinig  <weinig@apple.com>

        Add StringBuilder member function which allows makeString() style variadic argument construction
        https://bugs.webkit.org/show_bug.cgi?id=198997

        Reviewed by Darin Adler.

        * TestWebKitAPI/Tests/WTF/StringBuilder.cpp:
        Add basic test showing that StringBuilder::flexibleAppend can be used to 
        append one or more string adaptable types. 

2019-07-09  Sihui Liu  <sihui_liu@apple.com>

        Only allow fetching and removing session credentials from WebsiteDataStore
        https://bugs.webkit.org/show_bug.cgi?id=199385
        <rdar://problem/52622080>

        Reviewed by Alex Christensen.

        removeDataOfTypes will no longer remove persistent credentials. We should clear persistent credentials using
        the new SPI after each test that creates persistent credentials, otherwise the later tests may use credentials
        left by previous tests and didReceiveAuthenticationChallenge will not be invoked.

        * TestWebKitAPI/Tests/WebKitCocoa/Challenge.mm:
        (TEST):
        * TestWebKitAPI/Tests/WebKitCocoa/WKWebsiteDatastore.mm:
        (TestWebKitAPI::TEST):

2019-07-09  Alex Christensen  <achristensen@webkit.org>

        When parsing an IPv4 address, wait until after deciding it is indeed an IPv4 address before reporting syntax violations
        https://bugs.webkit.org/show_bug.cgi?id=199628

        Reviewed by Brady Eidson.

        * TestWebKitAPI/Tests/WTF/URLParser.cpp:
        (TestWebKitAPI::TEST_F):

2019-07-09  Alex Christensen  <achristensen@webkit.org>

        Remove invalid assertion in URLParser::domainToASCII
        https://bugs.webkit.org/show_bug.cgi?id=199624

        Reviewed by Brady Eidson.

        * TestWebKitAPI/Tests/WTF/URLParser.cpp:
        (TestWebKitAPI::TEST_F):

2019-07-09  Alex Christensen  <achristensen@webkit.org>

        URLParser should reserialize IPv6 addresses that end with a colon
        https://bugs.webkit.org/show_bug.cgi?id=199627

        Reviewed by Brady Eidson.

        * TestWebKitAPI/Tests/WTF/URLParser.cpp:
        (TestWebKitAPI::TEST_F):

2019-07-08  Aakash Jain  <aakash_jain@apple.com>

        [ews-build] Do not run unix commands for windows in PrintConfiguration
        https://bugs.webkit.org/show_bug.cgi?id=199605

        Reviewed by Jonathan Bedard.

        * BuildSlaveSupport/ews-build/steps.py:

2019-07-08  Fujii Hironori  <Hironori.Fujii@sony.com>

        JSTestGlobalObject.cpp of bindings-generation-tests is failing for Windows Python
        https://bugs.webkit.org/show_bug.cgi?id=199487

        Reviewed by Ross Kirsling.

        In Windows Python, preprocessor.pm is using cl.exe. cl.exe was
        failing to open testglobalscope_constructors_file which was
        created by using tempfile.mkstemp() because it keeps the file
        open. Use tempfile.mkdtemp() to create temporary files in the
        temporary directory instead of tempfile.mkstemp().

        * Scripts/webkitpy/bindings/main.py:
        (BindingsTests.run_tests):
        (BindingsTests.main):
        (BindingsTests.close_and_remove): Deleted.

2019-07-08  Aakash Jain  <aakash_jain@apple.com>

        [ews-build] Add KillOldProcesses step before running API or Layout tests
        https://bugs.webkit.org/show_bug.cgi?id=199592

        Reviewed by Jonathan Bedard.

        * BuildSlaveSupport/ews-build/factories.py:

2019-07-08  Jonathan Bedard  <jbedard@apple.com>

        test-webkitpy: Explicitly use Python 2.7 lldb library
        https://bugs.webkit.org/show_bug.cgi?id=199578
        <rdar://problem/51853557>

        Reviewed by Aakash Jain.

        * Scripts/webkitpy/common/system/systemhost.py:
        (SystemHost.path_to_lldb_python_directory): Explicitly use Python 2.7 lldb libary.
        * Scripts/webkitpy/test/main.py:
        (_supports_building_and_running_lldb_tests): Run lldb tests on Catalina again.

2019-07-08  Ryan Haddad  <ryanhaddad@apple.com>

        Add test expectations and baselines for Catalina
        https://bugs.webkit.org/show_bug.cgi?id=199328

        Reviewed by Jonathan Bedard.

        * Scripts/webkitpy/port/mac.py:
        (MacPort): Increment current version to 10.15 so that baseline search paths are correctly constructed for High Sierra.

2019-07-08  Christopher Reid  <chris.reid@sony.com>

        Implement MappedFileData for Windows
        https://bugs.webkit.org/show_bug.cgi?id=198269

        Reviewed by Darin Adler.

        * TestWebKitAPI/PlatformWin.cmake:

2019-07-08  Charlie Turner  <cturner@igalia.com>

        REGRESSION(r243197): [GStreamer] Web process hangs when scrolling twitter timeline which contains HLS videos
        https://bugs.webkit.org/show_bug.cgi?id=197558

        Reviewed by Xabier Rodriguez-Calvar.

        On shutdown we can easily deadlock the web process if we don't
        ensure all network operations are completed before comitting state
        changes. In HLS, make sure the network operations are cancelled,
        and also prevent hlsdemux's retry logic from scuppering our
        efforts.

        * gstreamer/jhbuild.modules: Include the patch.
        * gstreamer/patches/gst-plugins-bad-do-not-retry-downloads-during-shutdown.patch: Added.

2019-07-08  Antoine Quint  <graouts@apple.com>

        [Pointer Events] Enable only on the most recent version of the supported iOS family
        https://bugs.webkit.org/show_bug.cgi?id=199562
        <rdar://problem/52766511>

        Reviewed by Dean Jackson.

        * TestWebKitAPI/Configurations/FeatureDefines.xcconfig:

2019-07-06  Simon Fraser  <simon.fraser@apple.com>

        Long hang when loading a cnn.com page on iOS
        https://bugs.webkit.org/show_bug.cgi?id=199556

        Reviewed by Zalan Bujtas.

        Add code to load a page by default in MobileMiniBrowser so it's easy to hack it
        to load a test page of your choice.

        * MobileMiniBrowser/MobileMiniBrowserFramework/WebViewController.m:
        (-[WebViewController viewDidLoad]):

2019-07-05  Ryosuke Niwa  <rniwa@webkit.org>

        [iOS] Crash in WebKit::WebPage::positionInformation via Range::startPosition
        https://bugs.webkit.org/show_bug.cgi?id=199503

        Reviewed by Wenson Hsieh.

        Added UIScriptController.ensurePositionInformationIsUpToDateAt using the existing WKWebView SPI:
        _requestActivatedElementAtPosition

        * DumpRenderTree/ios/UIScriptControllerIOS.mm:
        (WTR::UIScriptController::ensurePositionInformationIsUpToDateAt):
        * DumpRenderTree/mac/UIScriptControllerMac.mm:
        (WTR::UIScriptController::ensurePositionInformationIsUpToDateAt):
        * TestRunnerShared/UIScriptContext/Bindings/UIScriptController.idl:
        * TestRunnerShared/UIScriptContext/UIScriptController.cpp:
        (WTR::UIScriptController::ensurePositionInformationIsUpToDateAt):
        * TestRunnerShared/UIScriptContext/UIScriptController.h:
        * WebKitTestRunner/ios/UIScriptControllerIOS.mm:
        (WTR::UIScriptController::ensurePositionInformationIsUpToDateAt):
        * WebKitTestRunner/ios/UIScriptControllerMac.mm:
        (WTR::UIScriptController::ensurePositionInformationIsUpToDateAt):

2019-07-05  Ryan Haddad  <ryanhaddad@apple.com>

        Unreviewed, rolling out r247115.

        Breaks lldbWebKitTester (and by extension, test-webkitpy)

        Reverted changeset:

        "[WHLSL] Standard library is too big to directly include in
        WebCore"
        https://bugs.webkit.org/show_bug.cgi?id=198186
        https://trac.webkit.org/changeset/247115

2019-07-05  Ryan Haddad  <ryanhaddad@apple.com>

        Unreviewed, rolling out r247123.

        Caused TestWebKitAPI.Challenge.BasicProposedCredential to
        fail.

        Reverted changeset:

        "Only allow fetching and removing session credentials from
        WebsiteDataStore"
        https://bugs.webkit.org/show_bug.cgi?id=199385
        https://trac.webkit.org/changeset/247123

2019-07-05  Wenson Hsieh  <wenson_hsieh@apple.com>

        Touching media controls sometimes shows software keyboard
        https://bugs.webkit.org/show_bug.cgi?id=199490
        <rdar://problem/52076270>

        Reviewed by Eric Carlson.

        Adds plumbing for a new testing hook to check whether or not there is an active input session. See other
        ChangeLog entries for more detail.

        * DumpRenderTree/ios/UIScriptControllerIOS.mm:
        (WTR::UIScriptController::hasInputSession const):
        * TestRunnerShared/UIScriptContext/Bindings/UIScriptController.idl:
        * TestRunnerShared/UIScriptContext/UIScriptController.cpp:
        (WTR::UIScriptController::hasInputSession const):
        * TestRunnerShared/UIScriptContext/UIScriptController.h:
        * WebKitTestRunner/ios/UIScriptControllerIOS.mm:
        (WTR::UIScriptController::hasInputSession const):

2019-07-04  Aakash Jain  <aakash_jain@apple.com>

        [ews-build] Remove GTK and WPE queue from old EWS and dashboard
        https://bugs.webkit.org/show_bug.cgi?id=199458

        Reviewed by Michael Catanzaro.

        * BuildSlaveSupport/build.webkit.org-config/public_html/dashboard/Scripts/BubbleQueueServer.js:
        * QueueStatusServer/config/queues.py:

2019-07-04  Carlos Alberto Lopez Perez  <clopez@igalia.com>

        [GTK] Fix browserperfdash script after r239522
        https://bugs.webkit.org/show_bug.cgi?id=199496

        Reviewed by Michael Catanzaro.

        * Scripts/webkitpy/browserperfdash/browserperfdash_runner.py:
        (BrowserPerfDashRunner.run): Pass None for the new required BenchmarkRunner constructor.

2019-07-04  Carlos Alberto Lopez Perez  <clopez@igalia.com>

        [webkitpy] test-webkitpy is broken on Linux since r246662
        https://bugs.webkit.org/show_bug.cgi?id=199493

        Reviewed by Michael Catanzaro.

        * Scripts/webkitpy/test/main.py:
        (_supports_building_and_running_lldb_tests): Add a check for None before calling startswith().

2019-07-02  Carlos Alberto Lopez Perez  <clopez@igalia.com>

        [GTK][WPE] Not longer needed to build woff2 on the JHBuild
        https://bugs.webkit.org/show_bug.cgi?id=199406

        Reviewed by Michael Catanzaro.

        Install the Woff2 libraries and headers from the system package
        and stop building them on the JHBuild.

        * gtk/install-dependencies:
        * gtk/jhbuild.modules:
        * wpe/install-dependencies:
        * wpe/jhbuild.modules:

2019-07-04  Carlos Alberto Lopez Perez  <clopez@igalia.com>

        [GTK][WPE][CMake] The CMake cache should be clean when the JHBuild is rebuilt
        https://bugs.webkit.org/show_bug.cgi?id=199449

        Reviewed by Michael Catanzaro.

        * Scripts/webkitdirs.pm:
        (shouldRemoveCMakeCache): Clean the CMake cache if we detect that the JHBuild has been rebuilt.

2019-07-01  Philippe Normand  <pnormand@igalia.com>

        Unreviewed, GTK a11y tests fix after r247071

        * WebKitTestRunner/InjectedBundle/atk/AccessibilityUIElementAtk.cpp:
        (WTR::AccessibilityUIElement::popupValue const):

2019-07-03  Aakash Jain  <aakash_jain@apple.com>

        [ews-build] Enable WPE and GTK queues on new EWS
        https://bugs.webkit.org/show_bug.cgi?id=199234

        Reviewed by Jonathan Bedard.

        * BuildSlaveSupport/ews-build/config.json: Enabled the triggers for GTK and WPE builders.
        * BuildSlaveSupport/ews-build/factories.py: Added required build steps for GTKFactory and WPEFactory.
        * BuildSlaveSupport/ews-build/steps.py:
        (CompileWebKit.evaluateCommand): Added InstallGtkDependencies/InstallWpeDependencies step before Compiling WebKit without patch.
        * BuildSlaveSupport/ews-build/steps_unittest.py: Added unit-tests.
        * BuildSlaveSupport/ews-app/ews/views/statusbubble.py:
        (StatusBubble): Enable gtk and wpe status-bubbles.

2019-07-03  Sihui Liu  <sihui_liu@apple.com>

        Only allow fetching and removing session credentials from WebsiteDataStore
        https://bugs.webkit.org/show_bug.cgi?id=199385

        Reviewed by Alex Christensen.

        * TestWebKitAPI/Tests/WebKitCocoa/WKWebsiteDatastore.mm:
        (TestWebKitAPI::TEST):

2019-07-03  Tim Horton  <timothy_horton@apple.com>

        UI process exception when dragging an <attachment> with no content type
        https://bugs.webkit.org/show_bug.cgi?id=199480
        <rdar://problem/44351353>

        Reviewed by Wenson Hsieh.

        * TestWebKitAPI/Tests/WebKitCocoa/WKAttachmentTests.mm:
        (TestWebKitAPI::TEST):
        Add a test; before the change, it crashes.

2019-07-03  Jonathan Bedard  <jbedard@apple.com>

        [Catalina] Enable WebKit build
        https://bugs.webkit.org/show_bug.cgi?id=199209

        Reviewed by Darin Adler.

        * TestWebKitAPI/Configurations/TestWebKitAPI.xcconfig: Add Mac framework stubs.

2019-07-03  Sam Weinig  <weinig@apple.com>

        Adopt simple structured bindings in more places
        https://bugs.webkit.org/show_bug.cgi?id=199247

        Reviewed by Alex Christensen.

        Replaces simple uses of std::tie() with structured bindings. Does not touch
        uses of std::tie() that are not initial declarations, use std::ignore or in
        case where the binding is captured by a lambda, as structured bindings don't
        work for those cases yet.

        * TestWebKitAPI/ios/PreferredContentMode.mm:
        (TestWebKitAPI::TEST):

2019-07-03  Aakash Jain  <aakash_jain@apple.com>

        Unreviewed follow-up fix to r247049, default the platform to '*' when platform property is not set.

        * BuildSlaveSupport/ews-build/steps.py:
        (PrintConfiguration.run):

2019-07-02  Aakash Jain  <aakash_jain@apple.com>

        [ews-build] Add build steps to Install Wpe and Gtk dependencies
        https://bugs.webkit.org/show_bug.cgi?id=199408

        Reviewed by Michael Catanzaro.

        * BuildSlaveSupport/ews-build/steps.py:
        (InstallGtkDependencies): Build step to install dependencies for GTK. Set haltOnFailure=False so that in case of failure, build isn't
        marked as failed (which would indicated patch failed EWS), instead subsequent steps would be run and the build would be marked as RETRY.
        (InstallWpeDependencies): Ditto for WPE.
        * BuildSlaveSupport/ews-build/steps_unittest.py: Added unit-tests.

2019-07-02  Aakash Jain  <aakash_jain@apple.com>

        [ews-build] Allow skipping uploading built product for few builders
        https://bugs.webkit.org/show_bug.cgi?id=199422

        Reviewed by Michael Catanzaro.

        * BuildSlaveSupport/ews-build/steps.py:
        (CompileWebKit.__init__): Added optional skipUpload parameter.
        (CompileWebKit.evaluateCommand): Allow to skip upload if there are no triggers and skipUpload is True.

2019-07-02  Tim Horton  <timothy_horton@apple.com>

        REGRESSION (r243240): Unable to swipe back in Safari
        https://bugs.webkit.org/show_bug.cgi?id=199394
        <rdar://problem/51137447>

        Reviewed by Wenson Hsieh.

        * TestWebKitAPI/Tests/WebKitCocoa/ProcessSwapOnNavigation.mm:
        Make sure that we actually end up with swipe gesture recognizers installed
        after process swap and crash.

2019-07-02  Andres Gonzalez  <andresg_22@apple.com>

        Enhance support of aria-haspopup per ARIA 1.1 specification.
        https://bugs.webkit.org/show_bug.cgi?id=199216
        <rdar://problem/46221342>

        Reviewed by Chris Fleizach.

        * DumpRenderTree/AccessibilityUIElement.cpp:
        (getPopupValueCallback):
        (AccessibilityUIElement::getJSClass):
        * DumpRenderTree/AccessibilityUIElement.h:
        * DumpRenderTree/mac/AccessibilityUIElementMac.mm:
        (AccessibilityUIElement::popupValue const):
        * WebKitTestRunner/InjectedBundle/AccessibilityUIElement.h:
        * WebKitTestRunner/InjectedBundle/Bindings/AccessibilityUIElement.idl:
        * WebKitTestRunner/InjectedBundle/ios/AccessibilityUIElementIOS.mm:
        (WTR::AccessibilityUIElement::popupValue const):
        * WebKitTestRunner/InjectedBundle/mac/AccessibilityUIElementMac.mm:
        (WTR::AccessibilityUIElement::popupValue const):

2019-07-02  Aakash Jain  <aakash_jain@apple.com>

        [ews-build] Do not print worker environment variables in each build step [part 2]
        https://bugs.webkit.org/show_bug.cgi?id=199405

        Reviewed by Jonathan Bedard.

        * BuildSlaveSupport/ews-build/steps.py:
        (CheckOutSpecificRevision.__init__): Disabled logging of environment variables.
        (CleanWorkingDirectory.__init__): Ditto.
        (RunBindingsTests.__init__): Ditto.
        (RunWebKitPerlTests.__init__): Ditto.
        (RunWebKitPyTests.__init__): Ditto.
        (CompileWebKit.__init__): Ditto.
        (ArchiveTestResults.__init__): Ditto.
        * BuildSlaveSupport/ews-build/steps_unittest.py: Updated unit-tests.

2019-07-02  Jer Noble  <jer.noble@apple.com>

        Pipe suport for 'cenc' init data type into CDMFairPlayStreaming
        https://bugs.webkit.org/show_bug.cgi?id=199381
        <rdar://problem/52483103>

        Reviewed by Eric Carlson.

        * TestWebKitAPI/Tests/WebCore/ISOBox.cpp:

2019-07-02  Aakash Jain  <aakash_jain@apple.com>

        [ews-build] Update bot configuration for WPE and GTK
        https://bugs.webkit.org/show_bug.cgi?id=199238

        Reviewed by Michael Catanzaro.

        * BuildSlaveSupport/ews-build/config.json:

2019-07-02  Aakash Jain  <aakash_jain@apple.com>

        [ews-build] Make PrintConfiguration platform aware
        https://bugs.webkit.org/show_bug.cgi?id=196657

        Reviewed by Lucas Forschler.

        * BuildSlaveSupport/ews-build/steps.py:
        (PrintConfiguration): Specified platform-specific command lists.
        (PrintConfiguration.run): Override run method and specify platform specific commands.
        * BuildSlaveSupport/ews-build/steps_unittest.py: Added unit-tests.

2019-07-01  Justin Michaud  <justin_michaud@apple.com>

        [Wasm-References] Disable references by default
        https://bugs.webkit.org/show_bug.cgi?id=199390

        Reviewed by Saam Barati.

        * Scripts/run-jsc-stress-tests:

2019-07-01  Joonghun Park  <pjh0718@gmail.com>

        Unreviewed. Revert r246965 to fix build break
        since r247019 reverted its related changes.

        * WebKitTestRunner/InjectedBundle/atk/AccessibilityUIElementAtk.cpp:
        (WTR::AccessibilityUIElement::popupValue const): Deleted.

2019-07-01  Alex Christensen  <achristensen@webkit.org>

        Add new decidePolicyForNavigationAction SPI with preferences and userInfo
        https://bugs.webkit.org/show_bug.cgi?id=199371
        <rdar://problem/52352905>

        Reviewed by Tim Horton.

        * TestWebKitAPI/Tests/WebKitCocoa/Navigation.mm:
        (-[NavigationActionSPIDelegate webView:didFinishNavigation:]):
        (-[NavigationActionSPIDelegate _webView:decidePolicyForNavigationAction:preferences:userInfo:decisionHandler:]):
        (-[NavigationActionSPIDelegate spiCalled]):
        (TEST):

2019-07-01  Alex Christensen  <achristensen@webkit.org>

        Deprecate _webView:showCustomSheetForElement: after transition to UIContextMenuInteraction
        https://bugs.webkit.org/show_bug.cgi?id=199296
        <rdar://problem/51041960>

        Reviewed by Darin Adler.

        * TestWebKitAPI/ios/DragAndDropSimulatorIOS.mm:
        (-[DragAndDropSimulator _webView:showCustomSheetForElement:]):

2019-07-01  Truitt Savell  <tsavell@apple.com>

        Unreviewed, rolling out r246958.

        Broke inspector/dom/getAccessibilityPropertiesForNode.html

        Reverted changeset:

        "Enhance support of aria-haspopup per ARIA 1.1 specification."
        https://bugs.webkit.org/show_bug.cgi?id=199216
        https://trac.webkit.org/changeset/246958

2019-07-01  Philippe Normand  <pnormand@igalia.com>

        Unreviewed, GTK a11y tests fix after r246958

        * WebKitTestRunner/InjectedBundle/atk/AccessibilityUIElementAtk.cpp:
        (WTR::AccessibilityUIElement::popupValue const):

2019-06-30  Andres Gonzalez  <andresg_22@apple.com>

        Enhance support of aria-haspopup per ARIA 1.1 specification.
        https://bugs.webkit.org/show_bug.cgi?id=199216
        <rdar://problem/46221342>

        Reviewed by Chris Fleizach.

        * DumpRenderTree/AccessibilityUIElement.cpp:
        (getPopupValueCallback):
        (AccessibilityUIElement::getJSClass):
        * DumpRenderTree/AccessibilityUIElement.h:
        * DumpRenderTree/mac/AccessibilityUIElementMac.mm:
        (AccessibilityUIElement::popupValue const):
        * WebKitTestRunner/InjectedBundle/AccessibilityUIElement.h:
        * WebKitTestRunner/InjectedBundle/Bindings/AccessibilityUIElement.idl:
        * WebKitTestRunner/InjectedBundle/ios/AccessibilityUIElementIOS.mm:
        (WTR::AccessibilityUIElement::popupValue const):
        * WebKitTestRunner/InjectedBundle/mac/AccessibilityUIElementMac.mm:
        (WTR::AccessibilityUIElement::popupValue const):

2019-06-28  Robin Morisset  <rmorisset@apple.com>

        Adding myself as a reviewer to contributors.json.

        Unreviewed.

        * Scripts/webkitpy/common/config/contributors.json:

2019-06-28  Jer Noble  <jer.noble@apple.com>

        Add new -[WKWebView _closeAllMediaPresentations] SPI
        https://bugs.webkit.org/show_bug.cgi?id=199294
        <rdar://problem/51965958>

        Reviewed by Alex Christensen.

        * TestWebKitAPI/TestWebKitAPI.xcodeproj/project.pbxproj:
        * TestWebKitAPI/Tests/WebKitCocoa/WKWebViewCloseAllMediaPresentations.mm: Added.
        (TEST):

2019-06-28  Sihui Liu  <sihui_liu@apple.com>

        Add a regression test for change r246901
        https://bugs.webkit.org/show_bug.cgi?id=199290

        Reviewed by Geoffrey Garen.

        * TestWebKitAPI/TestWebKitAPI.xcodeproj/project.pbxproj:
        * TestWebKitAPI/Tests/WebKitCocoa/LocalStoragePersistence.mm:
        (-[LocalStorageNavigationDelegate webView:createWebViewWithConfiguration:forNavigationAction:windowFeatures:]):
        (TEST):
        * TestWebKitAPI/Tests/WebKitCocoa/localstorage-open-window-private.html: Added.

2019-06-28  Konstantin Tokarev  <annulen@yandex.ru>

        Remove traces of ENABLE_ICONDATABASE remaining after its removal in 219733
        https://bugs.webkit.org/show_bug.cgi?id=199317

        Reviewed by Michael Catanzaro.

        While IconDatabase and all code using it was removed,
        ENABLE_ICONDATABASE still exists as build option and C++ macro.

        * Scripts/webkitperl/FeatureList.pm:
        * TestWebKitAPI/Configurations/FeatureDefines.xcconfig:
        * gtk/manifest.txt.in: Remove reference to unused urlIcon.png file.
        * wpe/manifest.txt.in: Remove reference to unused urlIcon.png file.

2019-06-28  Wenson Hsieh  <wenson_hsieh@apple.com>

        -[WKContentView _selectionClipRects] returns a bogus value in -reloadInputViews when focusing an element
        https://bugs.webkit.org/show_bug.cgi?id=199310
        <rdar://problem/52292137>

        Reviewed by Megan Gardner.

        Add a new API test to verify that _selectionClipRects returns the correct value when invoked under the scope of
        _elementDidFocus.

        * TestWebKitAPI/Tests/ios/KeyboardInputTestsIOS.mm:
        (TestWebKitAPI::TEST):
        * TestWebKitAPI/Tests/ios/TestInputDelegate.h:
        * TestWebKitAPI/Tests/ios/TestInputDelegate.mm:
        (-[TestInputDelegate setDidStartInputSessionHandler:]):
        (-[TestInputDelegate didStartInputSessionHandler]):

        Add plumbing for a handler block in TestInputDelegate.

        (-[TestInputDelegate setWillStartInputSessionHandler:]):

        Drive-by style fixes to add a space between id and < for Objective-C protocols.

        (-[TestInputDelegate willStartInputSessionHandler]):
        (-[TestInputDelegate _webView:willStartInputSession:]):
        (-[TestInputDelegate _webView:didStartInputSession:]):
        * TestWebKitAPI/cocoa/TestWKWebView.h:
        * TestWebKitAPI/ios/UIKitSPI.h:

        Add a declaration for _selectionClipRects.

2019-06-27  Zalan Bujtas  <zalan@apple.com>

        REGRESSION(r244633): e-mail with "height: 100%" causes unstable layout.
        https://bugs.webkit.org/show_bug.cgi?id=199303
        <rdar://problem/51340927>

        Reviewed by Tim Horton.

        * TestWebKitAPI/Tests/WebKitCocoa/AutoLayoutIntegration.mm:
        (TEST):

2019-06-27  Beth Dakin  <bdakin@apple.com>

        Upstream use of MACCATALYST
        https://bugs.webkit.org/show_bug.cgi?id=199245
        rdar://problem/51687723

        Reviewed by Tim Horton.

        * ContentExtensionTester/Configurations/SDKVariant.xcconfig:
        * DumpRenderTree/mac/Configurations/SDKVariant.xcconfig:
        * ImageDiff/cg/Configurations/SDKVariant.xcconfig:
        * MiniBrowser/Configurations/SDKVariant.xcconfig:
        * MobileMiniBrowser/Configurations/SDKVariant.xcconfig:
        * Scripts/webkitpy/generate_xcfilelists_lib/generators.py:
        (JavaScriptCoreGenerator):
        (WebCoreGenerator):
        (WebKitGenerator):
        * TestWebKitAPI/Configurations/Base.xcconfig:
        * TestWebKitAPI/Configurations/FeatureDefines.xcconfig:
        * TestWebKitAPI/Configurations/SDKVariant.xcconfig:
        * TestWebKitAPI/Tests/WebKitCocoa/SafeBrowsing.mm:
        * WebEditingTester/Configurations/SDKVariant.xcconfig:
        * WebKitLauncher/Configurations/SDKVariant.xcconfig:
        * WebKitTestRunner/Configurations/SDKVariant.xcconfig:
        * lldb/lldbWebKitTester/Configurations/SDKVariant.xcconfig:

2019-06-27  Saam Barati  <sbarati@apple.com>

        Make WEBGPU enabled only on Mojave and later.

        Rubber-stamped by Myles C. Maxfield.

        * TestWebKitAPI/Configurations/FeatureDefines.xcconfig:

2019-06-27  Aakash Jain  <aakash_jain@apple.com>

        [ews-build] Do not print worker environment variables in each build step
        https://bugs.webkit.org/show_bug.cgi?id=197319

        Reviewed by Lucas Forschler.

        * BuildSlaveSupport/ews-build/steps.py:
        (CheckOutSource.__init__): Disabled logging of environment variables.
        (ApplyPatch.__init__): Ditto.
        (KillOldProcesses.__init__): Ditto.
        (ArchiveBuiltProduct.__init__): Ditto.
        (DownloadBuiltProduct.__init__): Ditto.
        (ExtractBuiltProduct.__init__): Ditto.
        (RunAPITests.__init__): Ditto.
        * BuildSlaveSupport/ews-build/steps_unittest.py: Updated unit-tests accordingly.

2019-06-26  Jiewen Tan  <jiewen_tan@apple.com>

        SubFrameSOAuthorizationSession should preserve the referrer header when fall back to web path
        https://bugs.webkit.org/show_bug.cgi?id=199232
        <rdar://problem/51718328>

        Reviewed by Youenn Fablet.

        * TestWebKitAPI/Tests/WebKitCocoa/TestSOAuthorization.mm:
        (TestWebKitAPI::TEST):
        Add a test that utilizes TCPServer as local files always omit referrer.

2019-06-26  Aakash Jain  <aakash_jain@apple.com>

        [ews-build] Add configuration and architecture for WPE and GTK builders
        https://bugs.webkit.org/show_bug.cgi?id=199249

        Reviewed by Jonathan Bedard.

        * BuildSlaveSupport/ews-build/config.json:

2019-06-26  Aakash Jain  <aakash_jain@apple.com>

        [ews-build] Add check for duplicate workers in config.json
        https://bugs.webkit.org/show_bug.cgi?id=199240

        Reviewed by Jonathan Bedard.

        * BuildSlaveSupport/ews-build/loadConfig.py:
        (checkWorkersAndBuildersForConsistency._find_worker_with_name): Check for duplicate worker entry.
        * BuildSlaveSupport/ews-build/loadConfig_unittest.py:
        (TestcheckWorkersAndBuildersForConsistency.test_duplicate_worker): Added unit-test.

2019-06-26  Ross Kirsling  <ross.kirsling@sony.com>

        [Win] MiniBrowser should make better font choices
        https://bugs.webkit.org/show_bug.cgi?id=199244

        Reviewed by Brent Fulgham.

        * MiniBrowser/win/MainWindow.cpp:
        (MainWindow::updateDeviceScaleFactor):
        * MiniBrowser/win/MiniBrowserLib.rc:

2019-06-26  Alex Christensen  <achristensen@webkit.org>

        testRunner.setAlwaysAcceptCookies should wait for cookie accept policy to be set
        https://bugs.webkit.org/show_bug.cgi?id=199230
        <rdar://51757107>

        Reviewed by Andy Estes.

        * TestWebKitAPI/Tests/WebKit/CookieManager.cpp:
        (TestWebKitAPI::didGetTestHTTPCookieAcceptPolicy):
        (TestWebKitAPI::didGetUserHTTPCookieAcceptPolicy):
        * WebKitTestRunner/TestController.cpp:
        (WTR::TestController::generatePageConfiguration):
        (WTR::TestController::createWebViewWithOptions):
        (WTR::TestController::didReceiveSynchronousMessageFromInjectedBundleWithListener):
        (WTR::TestController::didReceiveSynchronousPageMessageFromInjectedBundleWithListener):
        (WTR::TestController::didReceiveSynchronousMessageFromInjectedBundle):
        (WTR::TestController::didReceiveSynchronousPageMessageFromInjectedBundle): Deleted.
        * WebKitTestRunner/TestController.h:
        * WebKitTestRunner/TestInvocation.cpp:
        (WTR::TestInvocation::invoke):
        (WTR::TestInvocation::didReceiveSynchronousMessageFromInjectedBundle):

2019-06-26  Ross Kirsling  <ross.kirsling@sony.com>

        [Win][MiniBrowser] Remove obsolete code after r246814.
        https://bugs.webkit.org/show_bug.cgi?id=199233

        Reviewed by Fujii Hironori.

        * MiniBrowser/win/MiniBrowserWebHost.cpp:
        (MiniBrowserWebHost::didFinishLoadForFrame):
        (SimpleEventListener::SimpleEventListener): Deleted.
        (SimpleEventListener::handleEvent): Deleted.

2019-06-25  Jiewen Tan  <jiewen_tan@apple.com>

        Implement a new SPI to inform clients about AppSSO
        https://bugs.webkit.org/show_bug.cgi?id=199085
        <rdar://problem/50028246>

        Reviewed by Geoffrey Garen.

        * TestWebKitAPI/Tests/WebKitCocoa/TestSOAuthorization.mm:
        (-[TestSOAuthorizationBasicDelegate webView:didFinishNavigation:]):
        (-[TestSOAuthorizationNavigationDelegate init]):
        (-[TestSOAuthorizationNavigationDelegate _webView:decidePolicyForSOAuthorizationLoadWithCurrentPolicy:forExtension:completionHandler:]):
        (TestWebKitAPI::TEST):

2019-06-25  Aakash Jain  <aakash_jain@apple.com>

        [ews-build] Retry Layout test in case of failures
        https://bugs.webkit.org/show_bug.cgi?id=199194

        Reviewed by Jonathan Bedard.

        * BuildSlaveSupport/ews-build/steps.py:
        (RunWebKitTests.evaluateCommand): Check if tests failed and retry them if required.
        (ReRunWebKitTests): Build step to re-run layout tests.
        (ReRunWebKitTests.evaluateCommand): Check if tests failed and retry on clean build if required.
        (RunWebKitTestsWithoutPatch): Build step to run tests without patch.
        (RunWebKitTestsWithoutPatch.evaluateCommand):

2019-06-25  Aakash Jain  <aakash_jain@apple.com>

        [ews-build] Combine various patchFailed*Tests properties
        https://bugs.webkit.org/show_bug.cgi?id=199193

        Reviewed by Jonathan Bedard.

        * BuildSlaveSupport/ews-build/steps.py: Renamed patchFailedJSCTests and patchFailedAPITests to patchFailedTests. This property 
        can also be used for layout-tests later on.
        * BuildSlaveSupport/ews-build/steps_unittest.py: Updated unit-tests.

2019-06-25  Ross Kirsling  <ross.kirsling@sony.com>

        [Win] MiniBrowser should default to webkit.org
        https://bugs.webkit.org/show_bug.cgi?id=199201

        Reviewed by Don Olmstead.

        * MiniBrowser/win/BrowserWindow.h:
        * MiniBrowser/win/MiniBrowserReplace.h:
        * MiniBrowser/win/WebKitBrowserWindow.cpp:
        (WebKitBrowserWindow::loadHTMLString): Deleted.
        * MiniBrowser/win/WebKitBrowserWindow.h:
        * MiniBrowser/win/WebKitLegacyBrowserWindow.cpp:
        (WebKitLegacyBrowserWindow::loadHTMLString): Deleted.
        * MiniBrowser/win/WebKitLegacyBrowserWindow.h:
        * MiniBrowser/win/WinMain.cpp:
        (wWinMain):

2019-06-25  Wenson Hsieh  <wenson_hsieh@apple.com>

        [iOS] Occasional crash under -[UIPreviewTarget initWithContainer:center:transform:] when generating a drag preview
        https://bugs.webkit.org/show_bug.cgi?id=199192
        <rdar://problem/51554509>

        Reviewed by Tim Horton.

        Tweak the drag and drop simulator to ask for drag cancellation previews, and use this to write a couple tests to
        verify that we gracefully handle web process termination and web view unparenting mid-drag.

        * TestWebKitAPI/Tests/ios/DragAndDropTestsIOS.mm:
        (TestWebKitAPI::TEST):
        * TestWebKitAPI/cocoa/DragAndDropSimulator.h:
        * TestWebKitAPI/ios/DragAndDropSimulatorIOS.mm:
        (-[DragAndDropSimulator _resetSimulatedState]):
        (-[DragAndDropSimulator _concludeDropAndPerformOperationIfNecessary]):
        (-[DragAndDropSimulator _advanceProgress]):
        (-[DragAndDropSimulator liftPreviews]):
        (-[DragAndDropSimulator cancellationPreviews]):
        (-[DragAndDropSimulator setSessionWillBeginBlock:]):
        (-[DragAndDropSimulator sessionWillBeginBlock]):
        (-[DragAndDropSimulator _webView:dataInteraction:sessionWillBegin:]):

2019-06-25  Aakash Jain  <aakash_jain@apple.com>

        [ews-build] UploadTestResults and ExtractTestResults clobber results in case of multiple layout test runs in a build
        https://bugs.webkit.org/show_bug.cgi?id=199178

        Reviewed by Jonathan Bedard.

        * BuildSlaveSupport/ews-build/steps.py:
        (UploadTestResults.__init__): Add an optional identifier and append the identifier to the file name.
        (ExtractTestResults.__init__): Ditto.
        * BuildSlaveSupport/ews-build/steps_unittest.py: Added unit tests.

2019-06-25  Michael Catanzaro  <mcatanzaro@igalia.com>

        Add user agent quirk for bankofamerica.com
        https://bugs.webkit.org/show_bug.cgi?id=199154

        Reviewed by Carlos Garcia Campos.

        * TestWebKitAPI/Tests/WebCore/UserAgentQuirks.cpp:
        (TestWebKitAPI::TEST):

2019-06-25  Michael Catanzaro  <mcatanzaro@igalia.com>

        Fully rename WebKitGTK+ -> WebKitGTK everywhere
        https://bugs.webkit.org/show_bug.cgi?id=199159

        Reviewed by Carlos Garcia Campos.

        * BuildSlaveSupport/gtk/README:
        * MiniBrowser/gtk/BrowserWindow.c:
        * MiniBrowser/gtk/main.c:
        (aboutURISchemeRequestCallback):
        * Scripts/webkitpy/common/config/contributionareas.py:
        * Scripts/webkitpy/common/config/contributors.json:
        * Scripts/webkitpy/tool/commands/analyzechangelog_unittest.py:
        * TestWebKitAPI/Tests/WebKitGLib/TestCookieManager.cpp:
        * TestWebKitAPI/Tests/WebKitGLib/TestResources.cpp:
        (testWebViewResources):
        * TestWebKitAPI/Tests/WebKitGLib/TestUIClient.cpp:
        (testWebViewMouseTarget):
        * TestWebKitAPI/Tests/WebKitGLib/TestWebExtensions.cpp:
        (testWebExtensionGetTitle):
        (testDocumentLoadedSignal):
        (testWebExtensionFormControlsAssociated):
        * TestWebKitAPI/Tests/WebKitGLib/TestWebKitSettings.cpp:
        (testWebKitSettingsUserAgent):
        * TestWebKitAPI/Tests/WebKitGLib/TestWebKitWebView.cpp:
        (testWebViewRunJavaScript):
        * TestWebKitAPI/Tests/WebKitGtk/InspectorTestServer.cpp:
        (main):
        * TestWebKitAPI/Tests/WebKitGtk/TestContextMenu.cpp:
        (prepareContextMenuTestView):
        (testContextMenuPopulateMenu):
        (testContextMenuCustomMenu):
        (testContextMenuDisableMenu):
        (testContextMenuSubMenu):
        (testContextMenuDismissed):
        (testContextMenuWebExtensionMenu):
        (testContextMenuWebExtensionNode):
        * TestWebKitAPI/Tests/WebKitGtk/TestInspector.cpp:
        (testInspectorDefault):
        (testInspectorManualAttachDetach):
        (testInspectorCustomContainerDestroyed):
        * TestWebKitAPI/Tests/WebKitGtk/TestPrinting.cpp:
        (testWebViewPrint):
        (testPrintOperationPrint):
        (testPrintOperationErrors):
        * gtk/install-dependencies:
        * gtk/jhbuild.modules:
        * gtkdoc/generate-gtkdoc:
        * wpe/install-dependencies:

2019-06-24  Michael Catanzaro  <mcatanzaro@igalia.com>

        contributors.json not canonicalized since r243297
        https://bugs.webkit.org/show_bug.cgi?id=199161

        Reviewed by Alexey Proskuryakov.

        Canonicalize it using 'validate-committer-lists --canonicalize'

        * Scripts/webkitpy/common/config/contributors.json:

2019-06-24  Jonathan Bedard  <jbedard@apple.com>

        webkitpy: Build style should be lower-case
        https://bugs.webkit.org/show_bug.cgi?id=199158

        Reviewed by Aakash Jain.

        * Scripts/webkitpy/test/main.py:
        (Tester._run_tests): Make all styles lower-case.

2019-06-24  Aakash Jain  <aakash_jain@apple.com>

        [ews-build] Remove iOS queue from old EWS and dashboard
        https://bugs.webkit.org/show_bug.cgi?id=199150

        Reviewed by Jonathan Bedard.

        * BuildSlaveSupport/build.webkit.org-config/public_html/dashboard/Scripts/BubbleQueueServer.js:
        * QueueStatusServer/config/queues.py:

2019-06-21  Ryan Haddad  <ryanhaddad@apple.com>

        API Test [Mojave+ WK2 Debug ] TestWebKitAPI.WKAttachmentTestsMac.InsertDroppedFilePromisesAsAttachments is a flaky crash
        https://bugs.webkit.org/show_bug.cgi?id=198795

        Unreviewed test gardening.

        * TestWebKitAPI/Tests/WebKitCocoa/WKAttachmentTests.mm:
        (TestWebKitAPI::TEST): Disable flaky test.

2019-06-24  Aakash Jain  <aakash_jain@apple.com>

        [ews-build] Enable iOS-12-Build queue on new EWS
        https://bugs.webkit.org/show_bug.cgi?id=199149

        Reviewed by Jonathan Bedard.

        * BuildSlaveSupport/ews-build/config.json: Enable iOS-12-Build-EWS trigger. Also temporarily share ews152 and ews154 with
        this queue.
        * BuildSlaveSupport/ews-app/ews/views/statusbubble.py:
        (StatusBubble): Enable ios status-bubble. Also display the ios bubble first (left). Going forward
        will keep the builders to the left and testers to the right.

2019-06-24  Aakash Jain  <aakash_jain@apple.com>

        [ews-build] Upload test results after running layout-tests
        https://bugs.webkit.org/show_bug.cgi?id=199120

        Reviewed by Jonathan Bedard.

        * BuildSlaveSupport/ews-build/steps.py:
        (RunWebKitTests.evaluateCommand):
        * BuildSlaveSupport/ews-build/steps_unittest.py: Added unit-tests.

2019-06-24  Aakash Jain  <aakash_jain@apple.com>

        [ews-build] EWS should provide option to download layout test results zip file
        https://bugs.webkit.org/show_bug.cgi?id=199121

        Reviewed by Jonathan Bedard.

        * BuildSlaveSupport/ews-build/steps.py:
        (ExtractTestResults.resultsDownloadURL): Method to return layout test result zip file url. 
        (ExtractTestResults.addCustomURLs): Add url to download layout test results zip file.

2019-06-24  Michael Catanzaro  <mcatanzaro@igalia.com>

        Add user agent quirk for Google Drive
        https://bugs.webkit.org/show_bug.cgi?id=199153

        Reviewed by Carlos Garcia Campos.

        * TestWebKitAPI/Tests/WebCore/UserAgentQuirks.cpp:
        (TestWebKitAPI::TEST):

2019-06-22  Zalan Bujtas  <zalan@apple.com>

        [LFC] Expand tests coverage (328 new tests -> 2652).

        * LayoutReloaded/misc/LFC-passing-tests.txt:

2019-06-22  Andres Gonzalez  <andresg_22@apple.com>

        Accessibility objects contained in links should honor the aria-haspopup attribute in the ancestor link.
        https://bugs.webkit.org/show_bug.cgi?id=199107
        <rdar://problem/43663611>

        Reviewed by Chris Fleizach.

        iOS implementation for AccessibilityUIElement::hasPopup.
        * WebKitTestRunner/InjectedBundle/ios/AccessibilityUIElementIOS.mm:
        (WTR::AccessibilityUIElement::hasPopup const):

2019-06-22  Konstantin Tokarev  <annulen@yandex.ru>

        Unreviewed, add myself to CMake watchlist

        * Scripts/webkitpy/common/config/watchlist:

2019-06-21  Sihui Liu  <sihui_liu@apple.com>

        openDatabase should return an empty object when WebSQL is disabled
        https://bugs.webkit.org/show_bug.cgi?id=198805

        Reviewed by Geoffrey Garen.

        * TestWebKitAPI/TestWebKitAPI.xcodeproj/project.pbxproj:
        * TestWebKitAPI/Tests/WebKitCocoa/WebSQLBasics.mm: Added.
        (-[WebSQLBasicsMessageHandler userContentController:didReceiveScriptMessage:]):
        (TEST):
        * TestWebKitAPI/Tests/WebKitCocoa/opendatabase-always-exists.html: Added.

2019-06-21  Jiewen Tan  <jiewen_tan@apple.com>

        WebPageProxy::loadData should accept ShouldOpenExternalURLsPolicy
        https://bugs.webkit.org/show_bug.cgi?id=199114
        <rdar://problem/51671674>

        Reviewed by Youenn Fablet.

        * TestWebKitAPI/Tests/WebKitCocoa/TestSOAuthorization.mm:
        (-[TestSOAuthorizationNavigationDelegate init]):
        (-[TestSOAuthorizationNavigationDelegate webView:decidePolicyForNavigationAction:decisionHandler:]):
        (configureSOAuthorizationWebView):
        (TestWebKitAPI::TEST):

2019-06-21  Youenn Fablet  <youenn@apple.com>

        WebPageProxy should use the right path for sandbox extension
        https://bugs.webkit.org/show_bug.cgi?id=198902
        <rdar://problem/50772810>

        Reviewed by Geoffrey Garen.

        * TestWebKitAPI/Tests/WebKitCocoa/LoadFileURL.mm:
        (TEST):
        * TestWebKitAPI/Tests/WebKitCocoa/ProcessSwapOnNavigation.mm:

2019-06-21  Michael Catanzaro  <mcatanzaro@igalia.com>

        [WPE][GTK] Bump minimum versions of GLib, GTK, libsoup, ATK, GStreamer, and Cairo
        https://bugs.webkit.org/show_bug.cgi?id=199094

        Reviewed by Carlos Garcia Campos.

        * MiniBrowser/gtk/BrowserTab.c:
        (runColorChooserCallback):
        (browserTabConstructed):
        * TestWebKitAPI/Tests/WebKitGLib/TestResources.cpp:
        (testWebViewSyncRequestOnMaxConns):
        (beforeAll):
        * TestWebKitAPI/Tests/WebKitGLib/TestSSL.cpp:
        (testWebSocketTLSErrors):
        (beforeAll):
        * TestWebKitAPI/glib/WebKitGLib/WebKitTestServer.cpp:
        (WebKitTestServer::~WebKitTestServer):
        (WebKitTestServer::getWebSocketURIForPath const):
        * WebKitTestRunner/InjectedBundle/atk/AccessibilityUIElementAtk.cpp:
        (WTR::AccessibilityUIElement::rowHeaders const):
        (WTR::AccessibilityUIElement::columnHeaders const):
        (WTR::AccessibilityUIElement::isAttributeSettable):
        (WTR::AccessibilityUIElement::x):
        (WTR::AccessibilityUIElement::y):
        (WTR::AccessibilityUIElement::width):
        (WTR::AccessibilityUIElement::height):
        (WTR::AccessibilityUIElement::clickPointX):
        (WTR::AccessibilityUIElement::clickPointY):
        (WTR::AccessibilityUIElement::intValue const):
        (WTR::AccessibilityUIElement::minValue):
        (WTR::AccessibilityUIElement::maxValue):
        (WTR::stringAtOffset):

2019-06-20  Dean Johnson  <dean_johnson@apple.com>

        test-webkitpy is broken on macOS Catalina
        https://bugs.webkit.org/show_bug.cgi?id=199078

        Reviewed by Jonathan Bedard.

        * Scripts/webkitpy/test/main.py: Check if lldb tests are supported before adding them
        to the runner.
        (main): 
        (_supports_building_and_running_lldb_tests): Check if you are running macOS Catalina.

2019-06-20  Dean Johnson  <dean_johnson@apple.com>

        Change status to "committer" in contributors.json

        Unreviewed.

        * Scripts/webkitpy/common/config/contributors.json:

2019-06-20  Alex Christensen  <achristensen@webkit.org>

        Add unit test for UIContextMenuConfiguration API
        https://bugs.webkit.org/show_bug.cgi?id=199043

        Reviewed by Wenson Hsieh.

        * TestWebKitAPI/TestWebKitAPI.xcodeproj/project.pbxproj:
        * TestWebKitAPI/Tests/WebKitCocoa/ContextMenus.mm: Added.
        (-[TestContextMenuUIDelegate webView:contextMenuConfigurationForElement:completionHandler:]):
        (-[TestContextMenuUIDelegate webView:contextMenuWillPresentForElement:]):
        (-[TestContextMenuUIDelegate webView:contextMenuForElement:willCommitWithAnimator:]):
        (-[TestContextMenuUIDelegate webView:contextMenuDidEndForElement:]):
        (TEST):
        * TestWebKitAPI/cocoa/TestContextMenuDriver.h: Added.
        * TestWebKitAPI/cocoa/TestContextMenuDriver.mm: Added.
        (-[TestContextMenuDriver delegate]):
        (-[TestContextMenuDriver setDelegate:]):
        (-[TestContextMenuDriver view]):
        (-[TestContextMenuDriver setView:]):
        (-[TestContextMenuDriver allowableMovement]):
        (-[TestContextMenuDriver setAllowableMovement:]):
        (-[TestContextMenuDriver primaryGestureRecognizer]):
        (-[TestContextMenuDriver setPrimaryGestureRecognizer:]):
        (-[TestContextMenuDriver touchDuration]):
        (-[TestContextMenuDriver setTouchDuration:]):
        (-[TestContextMenuDriver locationInCoordinateSpace:]):
        (-[TestContextMenuDriver cancelInteraction]):
        (-[TestContextMenuDriver begin:]):
        (-[TestContextMenuDriver clickDown]):
        (-[TestContextMenuDriver clickUp]):
        (-[TestContextMenuDriver end]):
        * TestWebKitAPI/ios/UIKitSPI.h:

2019-06-20  Aakash Jain  <aakash_jain@apple.com>

        [ews-app] Status bubble should not turn orange when any build step is skipped
        https://bugs.webkit.org/show_bug.cgi?id=199079

        Reviewed by Jonathan Bedard.

        * BuildSlaveSupport/ews-app/ews/views/statusbubble.py:

2019-06-20  Alex Christensen  <achristensen@webkit.org>

        Fix an internal engineering build after r246605
       ​https://bugs.webkit.org/show_bug.cgi?id=197800

        * TestWebKitAPI/TCPServer.cpp:

2019-06-20  Aakash Jain  <aakash_jain@apple.com>

        [ews-build] Triggered builds should use same revision as parent build
        https://bugs.webkit.org/show_bug.cgi?id=198289

        Reviewed by Jonathan Bedard.

        * BuildSlaveSupport/ews-build/steps.py:
        (CheckOutSpecificRevision): Build step to checkout specific revision.
        (CheckOutSpecificRevision.doStepIf): Run this step only if ews_revision property is set.
        (CheckOutSpecificRevision.hideStepIf): Hide this step when it is skipped.
        (CheckOutSpecificRevision.start): Run appropriate git command.
        (Trigger.propertiesToPassToTriggers): Pass ews_revision property to triggered builds, so that triggered
        builds use same revision as parent build.
        * BuildSlaveSupport/ews-build/steps_unittest.py: Added unit-tests.
        * BuildSlaveSupport/ews-build/factories.py:
        (Factory.__init__): Added CheckOutSpecificRevision step.

2019-06-20  Aakash Jain  <aakash_jain@apple.com>

        [ews-build] Add unit tests for AnalyzeCompileWebKitResults
        https://bugs.webkit.org/show_bug.cgi?id=199073

        Reviewed by Jonathan Bedard.

        * BuildSlaveSupport/ews-build/steps_unittest.py: Added unit-tests for AnalyzeCompileWebKitResults.

2019-06-20  Alexander Mikhaylenko  <exalm7659@gmail.com>

        [GTK] Enable navigation swipe layout tests
        https://bugs.webkit.org/show_bug.cgi?id=198995

        Reviewed by Michael Catanzaro.

        Add a way for tests to enable and then control swipe gesture on GTK.

        * TestRunnerShared/UIScriptContext/UIScriptController.cpp: Hide
        empty implementations of beginBackSwipe() and completeBackSwipe() for GTK.
        * WebKitTestRunner/PlatformGTK.cmake:
        * WebKitTestRunner/gtk/PlatformWebViewGtk.cpp:
        (WTR::PlatformWebView::setNavigationGesturesEnabled): Implemented.
        * WebKitTestRunner/gtk/UIScriptControllerGtk.cpp: Added.
        (WTR::UIScriptController::beginBackSwipe):
        (WTR::UIScriptController::completeBackSwipe):

2019-06-20  Alexander Mikhaylenko  <exalm7659@gmail.com>

        [GTK] HTTP layout tests don't run in flatpak
        https://bugs.webkit.org/show_bug.cgi?id=199067

        Reviewed by Michael Catanzaro.

        Stop bind mounting /app/lib/perl to /etc/perl because Perl doesn't actually
        check that path. Instead, add /app/lib/perl to Apache config directly.

        /usr/manifest.json file is not guaranteed to exist in sandbox, check for
        /.flatpak-info instead.

        * Scripts/webkitpy/port/base.py:
        (Port._is_flatpak):
        (Port._in_flatpak_sandbox):
        * flatpak/flatpakutils.py:
        (WebkitFlatpak.run_in_sandbox):
        (is_sandboxed):

2019-06-18  Darin Adler  <darin@apple.com>

        Tidy up the remaining bits of the AtomicString to AtomString rename
        https://bugs.webkit.org/show_bug.cgi?id=198990

        Reviewed by Michael Catanzaro.

        * Scripts/do-webcore-rename: Removed already-done renames.
        * TestWebKitAPI/Tests/WTF/StringImpl.cpp: Rename one use of "atomic".

2019-06-20  Carlos Garcia Campos  <cgarcia@igalia.com>

        [GTK] Remove support for GTK2 plugins
        https://bugs.webkit.org/show_bug.cgi?id=199065

        Reviewed by Sergio Villar Senin.

        * EWSTools/ubuntu-ews-packages:
        * TestWebKitAPI/PlatformGTK.cmake:
        * WebKitTestRunner/PlatformGTK.cmake:
        * flatpak/org.webkit.GTK.yaml:
        * gtk/install-dependencies:

2019-06-19  Yusuke Suzuki  <ysuzuki@apple.com>

        [bmalloc] IsoHeap's initialization is racy with IsoHeap::isInitialized
        https://bugs.webkit.org/show_bug.cgi?id=199053

        Reviewed by Saam Barati.

        Added a test stressing IsoHeap with multiple threads.

        * TestWebKitAPI/Tests/WTF/bmalloc/IsoHeap.cpp:
        (assertHasObjects):
        (assertHasOnlyObjects):
        (assertClean):
        (TEST):

2019-06-19  Zalan Bujtas  <zalan@apple.com>

        [LFC] Expand tests coverage (1126 new tests -> 2324).

        * LayoutReloaded/misc/LFC-passing-tests.txt:

2019-06-19  Fujii Hironori  <Hironori.Fujii@sony.com>

        Add WTF::crossThreadCopy(T&&) to utilize String::isolatedCopy() &&
        https://bugs.webkit.org/show_bug.cgi?id=198957

        Reviewed by Alex Christensen.

        * TestWebKitAPI/CMakeLists.txt:
        * TestWebKitAPI/TestWebKitAPI.xcodeproj/project.pbxproj:
        * TestWebKitAPI/Tests/WTF/CrossThreadCopier.cpp: Added.

2019-06-19  Keith Rollin  <krollin@apple.com>

        Relocate some test tools in non-mac builds
        https://bugs.webkit.org/show_bug.cgi?id=198984
        <rdar://problem/51873261>

        Reviewed by Andy Estes.

        The tools DumpRenderTree, WebKitTestRunner, LayoutTestHelper, and
        TestNetscapePlugin get created in
        WebKit.framework/Versions/A/Resources on non-mac builds. This is
        incorrect, as those bundles are shallow bundles that don't use the
        Versions hierarchy. Instead, store these files directly in
        WebKit.framework.

        Note that getting rid of just the "Versions/A" path components and
        putting the files in WebKit.framework/Resources doesn't work as
        `codesign` treats the result as an invalid layout.

        The work in this patch involves changing the definition of the custom
        build variable WEBKIT_FRAMEWORK_RESOURCES_PATH. The standard build
        variable INSTALL_PATH is defined in terms of this variable. In order
        to increase visiblity into this relationship, move both of these
        variables into .xcconfig files if they weren't already. This
        refactoring was done in a way to be the least disruptive and most
        compatible with the previous definitions, even at the cost of being
        repetitive.

        * DumpRenderTree/DumpRenderTree.xcodeproj/project.pbxproj:
        * DumpRenderTree/mac/Configurations/Base.xcconfig:
        * DumpRenderTree/mac/Configurations/DumpRenderTree.xcconfig:
        * DumpRenderTree/mac/Configurations/LayoutTestHelper.xcconfig:
        * DumpRenderTree/mac/Configurations/TestNetscapePlugIn.xcconfig:
        * WebKitTestRunner/Configurations/BaseTarget.xcconfig:

2019-06-19  Aakash Jain  <aakash_jain@apple.com>

        [ews-build] Patch link should open the pretty patch
        https://bugs.webkit.org/show_bug.cgi?id=199031

        Reviewed by Jonathan Bedard.

        * BuildSlaveSupport/ews-build/steps.py:
        (ConfigureBuild.getPatchURL): Use the prettypatch url for patch.

2019-06-19  Aakash Jain  <aakash_jain@apple.com>

        [ews-build] Add step to analyze Compile WebKit failures
        https://bugs.webkit.org/show_bug.cgi?id=199025

        Reviewed by Jonathan Bedard.

        * BuildSlaveSupport/ews-build/steps.py:
        (CompileWebKit.evaluateCommand): Add AnalyzeCompileWebKitResults step.
        (CompileWebKitToT): set haltOnFailure to False since we need to run AnalyzeCompileWebKitResults step.
        (AnalyzeCompileWebKitResults): Class to analyze compile webkit steps results.
        (AnalyzeCompileWebKitResults.start): If ToT fails to build, retry the build, else marked the build as failed. Note that
        this step is run only when compile-webkit failed.

2019-06-19  Aakash Jain  <aakash_jain@apple.com>

        [ews-build] Send email notifications for failures
        https://bugs.webkit.org/show_bug.cgi?id=198919

        Reviewed by Jonathan Bedard.

        * BuildSlaveSupport/ews-build/master.cfg:

2019-06-19  Alex Christensen  <achristensen@webkit.org>

        Add a unit test for client certificate authentication
        https://bugs.webkit.org/show_bug.cgi?id=197800

        Reviewed by Youenn Fablet.

        Make better abstractions for reading and writing from/to TCPServer.
        Add a unit test that causes a client certificate authentication challenge to happen.

        * TestWebKitAPI/TCPServer.cpp:
        (TestWebKitAPI::TCPServer::TCPServer):
        (TestWebKitAPI::TCPServer::read):
        (TestWebKitAPI::TCPServer::write):
        (TestWebKitAPI::TCPServer::respondWithChallengeThenOK):
        (TestWebKitAPI::TCPServer::respondWithOK):
        * TestWebKitAPI/TCPServer.h:
        * TestWebKitAPI/Tests/WebKitCocoa/Challenge.mm:
        (credentialWithIdentity):
        (-[ChallengeDelegate webView:didReceiveAuthenticationChallenge:completionHandler:]):
        (TEST):
        (-[ClientCertificateDelegate webView:didFinishNavigation:]):
        (-[ClientCertificateDelegate webView:didReceiveAuthenticationChallenge:completionHandler:]):
        (-[ClientCertificateDelegate challengeCount]):
        (TestWebKitAPI::TEST):
        (respondWithChallengeThenOK): Deleted.
        (credentialWithIdentityAndKeychainPath): Deleted.
        * TestWebKitAPI/Tests/WebKitCocoa/PDFLinkReferrer.mm:
        (TEST):
        * TestWebKitAPI/Tests/WebKitCocoa/Proxy.mm:
        (TestWebKitAPI::TEST):
        * TestWebKitAPI/Tests/WebKitCocoa/WKNavigationResponse.mm:
        (TEST):
        (readRequest): Deleted.
        (writeResponse): Deleted.
        * TestWebKitAPI/Tests/WebKitCocoa/WKWebsiteDatastore.mm:
        (TestWebKitAPI::TEST):
        (TestWebKitAPI::respondWithChallengeThenOK): Deleted.

2019-06-19  Michael Catanzaro  <mcatanzaro@igalia.com>

        Unreviewed, fix build warnings in TestWebKitAPIInjectedBundle

        System headers are being included without SYSTEM again here.

        * TestWebKitAPI/PlatformGTK.cmake:

2019-06-18  Yusuke Suzuki  <ysuzuki@apple.com>

        [JSC] JSLock should be WebThread aware
        https://bugs.webkit.org/show_bug.cgi?id=198911

        Reviewed by Geoffrey Garen.

        * TestWebKitAPI/TestWebKitAPI.xcodeproj/project.pbxproj:
        * TestWebKitAPI/Tests/WebKitLegacy/ios/JSLockTakesWebThreadLock.mm: Added.
        (TestWebKitAPI::TEST):

2019-06-18  Keith Miller  <keith_miller@apple.com>

        webkit-patch should allow for a bugzilla url not just bugzilla id
        https://bugs.webkit.org/show_bug.cgi?id=198972

        Reviewed by Dewei Zhu.

        When prompting for a bugzilla id or a new title we should also
        allow for a bugzilla url.

        * Scripts/webkitpy/tool/steps/promptforbugortitle.py:
        (PromptForBugOrTitle.run):

2019-06-18  David Quesada  <david_quesada@apple.com>

        REGRESSION: _WKDownload.OriginatingWebView and _WKDownload.CrashAfterDownloadDidFinishWhenDownloadProxyHoldsTheLastRefOnWebProcessPool failing
        https://bugs.webkit.org/show_bug.cgi?id=198954
        rdar://problem/51711556

        Reviewed by Alex Christensen.

        For these tests, kill the web process after the download starts. This makes the deallocation
        of the download-originating web views, which these tests depend on, more reliable.

        * TestWebKitAPI/Tests/WebKitCocoa/Download.mm:
        (-[OriginatingWebViewDownloadDelegate _downloadDidStart:]):
        (-[WaitUntilDownloadCanceledDelegate _downloadDidStart:]):

2019-06-18  Dan Bernstein  <mitz@apple.com>

        Revert workaround for bug 198904 from run-webkit-archive
        https://bugs.webkit.org/show_bug.cgi?id=198931

        Reviewed by Alexey Proskuryakov.

        Reverted r245965, now that the load commands in the XPC service binaries make them correctly
        pick up the built frameworks.

        * WebKitArchiveSupport/run-webkit-archive:
        (set_dyld_framework_path):

2019-06-17  Sihui Liu  <sihui_liu@apple.com>

        -[WKWebsiteDataStore removeDataOfTypes:modifiedSince:completionHandler:] doesn't delete _WKWebsiteDataTypeCredentials
        https://bugs.webkit.org/show_bug.cgi?id=198854
        <rdar://problem/51386058>

        Reviewed by Geoffrey Garen.

        * TestWebKitAPI/Tests/WebKitCocoa/WKWebsiteDatastore.mm:
        (TestWebKitAPI::TEST):

2019-06-17  Adrian Perez de Castro  <aperez@igalia.com>

        [Flatpak][JHBuild] Update build environments to use WPEBackend-fdo 1.3.1
        https://bugs.webkit.org/show_bug.cgi?id=198831

        Reviewed by Žan Doberšek.

        * flatpak/org.webkit.WPEModules.yaml: Bump versions of libwpe and WPEBackend-fdo to 1.3.1
        * wpe/jhbuild.modules: Ditto.
        * wpe/patches/wpebackend-fdo-Handle-the-case-of-new-target-created-for-the-same-v.patch: Removed.
        * wpe/wpebackend-fdo-view-backend-exportable-private-don-t-double-free-ca.patch: Removed.

2019-06-17  Jiewen Tan  <jiewen_tan@apple.com>

        Move SOAuthorization from WebKitAdditions to WebKit
        https://bugs.webkit.org/show_bug.cgi?id=198874
        <rdar://problem/47573431>

        Reviewed by Brent Fulgham.

        This patch moves all SOAuthorization tests from WebKitAdditions to WebKit.

        * TestWebKitAPI/Configurations/TestWebKitAPI.xcconfig:
        * TestWebKitAPI/TestWebKitAPI.xcodeproj/project.pbxproj:
        * TestWebKitAPI/Tests/WebKitCocoa/TestSOAuthorization.mm: Added.
        (-[TestSOAuthorizationNavigationDelegate init]):
        (-[TestSOAuthorizationNavigationDelegate webView:didFinishNavigation:]):
        (-[TestSOAuthorizationNavigationDelegate webView:decidePolicyForNavigationAction:decisionHandler:]):
        (-[TestSOAuthorizationNavigationDelegate webView:createWebViewWithConfiguration:forNavigationAction:windowFeatures:]):
        (-[TestSOAuthorizationViewController viewDidAppear]):
        (-[TestSOAuthorizationViewController viewDidDisappear]):
        (overrideCanPerformAuthorizationWithURL):
        (overrideSetDelegate):
        (overrideBeginAuthorizationWithURL):
        (overrideCancelAuthorization):
        (overrideAddObserverForName):
        (overrideIsURLFromAppleOwnedDomain):
        (resetState):
        (configureSOAuthorizationWebView):
        (generateHtml):
        (checkAuthorizationOptions):
        (TestWebKitAPI::TEST):

2019-06-17  Brent Fulgham  <bfulgham@apple.com>

        Ensure ITP state is relayed to Network Process on restart
        https://bugs.webkit.org/show_bug.cgi?id=198797
        <rdar://problem/51646944>

        Reviewed by Youenn Fablet.

        * TestWebKitAPI/Tests/WebKitCocoa/ResourceLoadStatistics.mm:
        (cleanupITPDatabase): Added.
        (TEST:EnableDisableITP): Update to use cleanup method.
        (TEST:NetworkProcessRestart): Added.

2019-06-17  Aakash Jain  <aakash_jain@apple.com>

        New EWS can't process patches larger than 640kb
        https://bugs.webkit.org/show_bug.cgi?id=198851

        Reviewed by Jonathan Bedard.

        * BuildSlaveSupport/ews-build/master.cfg: Increase the patch size limit to 100 MB.

2019-06-17  Jonathan Bedard  <jbedard@apple.com>

        webkitpy: Add macOS Catalina, iOS 13
        https://bugs.webkit.org/show_bug.cgi?id=198492

        Reviewed by Alexey Proskuryakov.

        * BuildSlaveSupport/build.webkit.org-config/public_html/dashboard/Images/Catalina.png: Added.
        * BuildSlaveSupport/build.webkit.org-config/public_html/dashboard/Images/Catalina@2x.png: Added.
        * BuildSlaveSupport/build.webkit.org-config/public_html/dashboard/Images/IOS13.png: Added.
        * BuildSlaveSupport/build.webkit.org-config/public_html/dashboard/Images/IOS13@2x.png: Added.
        * BuildSlaveSupport/build.webkit.org-config/public_html/dashboard/Images/IOS13Simulator.png: Added.
        * BuildSlaveSupport/build.webkit.org-config/public_html/dashboard/Images/IOS13Simulator@2x.png: Added.
        * BuildSlaveSupport/build.webkit.org-config/public_html/dashboard/Scripts/Dashboard.js:
        * BuildSlaveSupport/build.webkit.org-config/public_html/dashboard/Styles/Main.css:
        * BuildSlaveSupport/ews-build/steps.py:
        * Scripts/webkitpy/common/version_name_map.py:
        * Scripts/webkitpy/common/version_name_map_unittest.py:
        * Scripts/webkitpy/layout_tests/models/test_expectations.py:
        * TestResultServer/static-dashboards/flakiness_dashboard.js:

2019-06-17  Carlos Garcia Campos  <cgarcia@igalia.com>

        Unreviewed. [GTK] Bump WPEBackend-fdo requirement to 1.3.1

        * gtk/jhbuild.modules:
        * gtk/patches/wpebackend-fdo-Handle-the-case-of-new-target-created-for-the-same-v.patch: Removed.
        * gtk/wpebackend-fdo-view-backend-exportable-private-don-t-double-free-ca.patch: Removed.

2019-06-16  Zalan Bujtas  <zalan@apple.com>

        [LFC] Expand tests coverage (325 new tests -> 1198).

        * LayoutReloaded/misc/LFC-passing-tests.txt:

2019-06-16  Darin Adler  <darin@apple.com>

        Rename AtomicString to AtomString
        https://bugs.webkit.org/show_bug.cgi?id=195276

        Reviewed by Michael Catanzaro.

        * many files: Let do-webcore-rename do the renaming.

        * Scripts/do-webcore-rename: Updated with a list of all the identifiers
        that mention "atomic string" and changed them to instead say "atom string".

2019-06-16  Zalan Bujtas  <zalan@apple.com>

        [LFC] Unreviewed test gardening.

        Unsupported alignments.

        fast/inline/absolute-positioned-inline-in-centred-block.html -align: center
        fast/borders/empty-outline-border-assert.html -vertical-align: super
        css2.1/20110323/vertical-align-boxes-001.htm - vertical-align: middle

        * LayoutReloaded/misc/LFC-passing-tests.txt:

2019-06-15  Youenn Fablet  <youenn@apple.com>

        WPT test importer WTR option reader should not throw if the file is not proper UTF-8
        https://bugs.webkit.org/show_bug.cgi?id=198780

        Reviewed by Jonathan Bedard.

        * Scripts/webkitpy/w3c/test_importer.py:
        (TestImporter._webkit_test_runner_options):
        In case the test file cannot be read as text, consider that there is no WTR option.

2019-06-14  Youenn Fablet  <youenn@apple.com>

        WebResourceLoadStatisticsStore should not use its network session if invalidated
        https://bugs.webkit.org/show_bug.cgi?id=198814

        Reviewed by Geoffrey Garen.

        * TestWebKitAPI/Tests/WebKitCocoa/ResourceLoadStatistics.mm:
        (TEST):

2019-06-14  Youenn Fablet  <youenn@apple.com>

        import-w3c-tests should respect WEBKIT_OUTPUTDIR
        https://bugs.webkit.org/show_bug.cgi?id=198682
        <rdar://problem/51536931>

        Reviewed by Jonathan Bedard.

        Check for WEBKIT_OUTPUTDIR environment variable to compute the w3c-tests folder.
        Made some refactoring to also teach WPTPaths users about WEBKIT_OUTPUTDIR.

        * Scripts/webkitpy/common/webkit_finder.py:
        (WebKitFinder.path_from_webkit_outputdir):
        * Scripts/webkitpy/w3c/common.py:
        (WPTPaths):
        (WPTPaths.checkout_directory):
        (WPTPaths.wpt_checkout_path):
        * Scripts/webkitpy/w3c/test_importer.py:
        (TestImporter.__init__):
        * Scripts/webkitpy/w3c/test_importer_unittest.py:
        (test_checkout_directory):

2019-06-13  Antoine Quint  <graouts@apple.com>

        REGRESSION (r246103) [ Mojave+ WK1 ] Layout Test scrollbars/scrollbar-iframe-click-does-not-blur-content.html is timing out
        https://bugs.webkit.org/show_bug.cgi?id=198800
        <rdar://problem/51679634>

        Reviewed by Tim Horton.

        We didn't detect an NSScroller in a sub-frame due to WebHTMLView's implementation of -[NSView hitTest:]. We now use a private method
        which lets us use the default implementation and correctly returns an NSScroller in a sub-frame.

        * DumpRenderTree/mac/EventSendingController.mm:
        (eventPressedMouseButtonsSwizzlerForViewAndEvent):
        (-[EventSendingController mouseDown:withModifiers:]):
        (-[EventSendingController mouseUp:withModifiers:]):
        (-[EventSendingController mouseMoveToX:Y:]):

2019-06-13  Fujii Hironori  <Hironori.Fujii@sony.com>

        [WinCairo][WebKitTestRunner] pixel image dump outputs blank images
        https://bugs.webkit.org/show_bug.cgi?id=198820

        Reviewed by Ross Kirsling.

        WebView window paints nothing because it is moved out of the
        screen. Send WM_PRINT with memory DC instead of WM_PAINT as well
        as DumpRenderTree does.

        * WebKitTestRunner/win/PlatformWebViewWin.cpp:
        (WTR::PlatformWebView::windowSnapshotImage): Send WM_PRINT instead of BitBlt.

2019-06-13  Tim Horton  <timothy_horton@apple.com>

        Make it possible for validate-committer-lists to dump a mailmap file
        https://bugs.webkit.org/show_bug.cgi?id=198517

        Reviewed by Simon Fraser.

        Mailmaps wildly improve the output of various Git tools, including
        `git shortlog -sne`, mapping committers to our canonical name/email pair.

        * Scripts/validate-committer-lists:
        (CommitterListFromGit):
        (CommitterListBugzillaChecker.print_committers_with_invalid_bugzilla_emails):
        Add some missing legacy username mappings.

        (dump_mailmap):
        (dump_mailmap.format_email):
        (dump_mailmap.format_email_with_gitsvn_uuid):
        (dump_mailmap.map_emails_to_legacy_username):
        (main):
        Add `validate-committer-lists --dump-mailmap`, which generates
        one given committers.json and the existing mapping of legacy username
        to email addresses that exists in validate-committer-lists.

2019-06-12  Aakash Jain  <aakash_jain@apple.com>

        Replace double-quotes with single quotes in loadConfig.py
        https://bugs.webkit.org/show_bug.cgi?id=198792

        Reviewed by Jonathan Bedard.

        * BuildSlaveSupport/ews-build/loadConfig.py:
        * BuildSlaveSupport/ews-build/steps_unittest.py:

22019-06-11  Brent Fulgham  <bfulgham@apple.com>

        Add mechanism and test case to check if ITP is active
        https://bugs.webkit.org/show_bug.cgi?id=198694
        <rdar://problem/51557704>

        Reviewed by Youenn Fablet.

        * TestWebKitAPI/Tests/WebKitCocoa/ResourceLoadStatistics.mm:
        (TEST):

2019-06-12  Michael Catanzaro  <mcatanzaro@igalia.com>

        [WPE][GTK] Deprecate WebSQL APIs
        https://bugs.webkit.org/show_bug.cgi?id=195011

        Reviewed by Carlos Garcia Campos.

        * MiniBrowser/gtk/main.c:
        (gotWebsiteDataCallback):
        * TestWebKitAPI/Tests/WebKitGLib/TestWebsiteData.cpp:
        (testWebsiteDataConfiguration):
        (testWebsiteDataEphemeral):
        (testWebsiteDataDatabases):

2019-06-12  Michael Catanzaro  <mcatanzaro@igalia.com>

        [WPE][GTK] Enable hyperlink auditing
        https://bugs.webkit.org/show_bug.cgi?id=197845

        Reviewed by Carlos Garcia Campos.

        * TestWebKitAPI/Tests/WebKitGLib/TestWebKitSettings.cpp:
        (testWebKitSettings):

2019-06-11  Keith Rollin  <krollin@apple.com>

        Open up xcfilelist processing to more platforms
        https://bugs.webkit.org/show_bug.cgi?id=198675
        <rdar://problem/51533238>

        Reviewed by Jonathan Bedard.

        Now that it's been tested, add AppleTV{OS,Simulator} to the set of
        platforms on which to perform xcfilelist generation/updating.

        * Scripts/webkitpy/generate_xcfilelists_lib/generators.py:
        (JavaScriptCoreGenerator):
        (WebCoreGenerator):
        (WebKitGenerator):

2019-06-11  Jonathan Bedard  <jbedard@apple.com>

        webkitpy: Fix device ASan reporting, add testing for report configurations
        https://bugs.webkit.org/show_bug.cgi?id=198756

        Reviewed by Aakash Jain.

        ASan results were reporting an incorrect style. This indicates we need to be testing this upload
        configuration thoroughly in webkitpy.

        * Scripts/webkitpy/port/config.py:
        (clear_cached_configuration): Clearing configurations should clear the ASan cache as well.
        * Scripts/webkitpy/port/device_port.py:
        (DevicePort.configuration_for_upload): Add ASan as style.
        * Scripts/webkitpy/port/ios_device_unittest.py:
        (IOSDeviceTest):
        (IOSDeviceTest.test_default_upload_configuration):
        * Scripts/webkitpy/port/ios_simulator_unittest.py:
        (IOSSimulatorTest.test_default_upload_configuration):
        * Scripts/webkitpy/port/mock_drt_unittest.py:
        (MockDRTPortTest.test_asan_upload_configuration):
        * Scripts/webkitpy/port/port_testcase.py:
        (test_default_upload_configuration):
        (test_debug_upload_configuration):
        (test_asan_upload_configuration):
        (test_guard_malloc_configuration):
        * Scripts/webkitpy/port/watch_simulator_unittest.py:
        (WatchSimulatorTest):
        (WatchSimulatorTest.test_default_upload_configuration):

2019-06-11  Michael Catanzaro  <mcatanzaro@igalia.com>

        tu-berlin university email web interface (Outlook Web App) goes directly to the light version instead of the normal web app
        https://bugs.webkit.org/show_bug.cgi?id=198749

        Reviewed by Carlos Garcia Campos.

        * TestWebKitAPI/Tests/WebCore/UserAgentQuirks.cpp:
        (TestWebKitAPI::TEST):

2019-06-11  Wenson Hsieh  <wenson_hsieh@apple.com>

        Quotes are always inserted as smart quotes on stackblitz.com, causing compilation errors
        https://bugs.webkit.org/show_bug.cgi?id=198735
        <rdar://problem/51557159>

        Reviewed by Megan Gardner.

        Add a test to verify that spellcheck="false" disables smart quotes and dashes, but any other value defers to the
        user's preferences by using UITextSmartQuotesTypeDefault and UITextSmartDashesTypeDefault.

        * TestWebKitAPI/Tests/ios/KeyboardInputTestsIOS.mm:
        (TestWebKitAPI::TEST):

2019-06-11  Tadeu Zagallo  <tzagallo@apple.com>

        Unreviewed, add myself to the JavaScriptCore watchlist.

        * Scripts/webkitpy/common/config/watchlist:

2019-06-11  Tadeu Zagallo  <tzagallo@apple.com>

        Unreviewed, change my status to be a WebKit reviewer

        * Scripts/webkitpy/common/config/contributors.json:

2019-06-11  Carlos Garcia Campos  <cgarcia@igalia.com>

        [WPE] Use new exported image API from fdo backend
        https://bugs.webkit.org/show_bug.cgi?id=198558

        Reviewed by Philippe Normand.

        * WebKitTestRunner/PlatformWPE.cmake: Do not find fdo backend and libxkb again here, since WKTR depends on
        WPEToolingBackends that already depends on fdo backend and libxkb
        * wpe/backends/CMakeLists.txt: Bump fdo requirements to 1.3.0 version.
        * wpe/backends/HeadlessViewBackend.cpp:
        (WPEToolingBackends::HeadlessViewBackend::HeadlessViewBackend):
        (WPEToolingBackends::HeadlessViewBackend::createSnapshot):
        (WPEToolingBackends::HeadlessViewBackend::performUpdate):
        (WPEToolingBackends::HeadlessViewBackend::displayBuffer):
        * wpe/backends/HeadlessViewBackend.h:
        * wpe/backends/ViewBackend.cpp:
        (WPEToolingBackends::ViewBackend::initialize):
        * wpe/backends/ViewBackend.h:
        * wpe/backends/WindowViewBackend.cpp:
        (WPEToolingBackends::WindowViewBackend::displayBuffer):
        * wpe/backends/WindowViewBackend.h:

2019-06-10  Dewei Zhu  <dewei_zhu@apple.com>

        Extend run-benchmark to allow diagnosing before closing browser on test failure.
        https://bugs.webkit.org/show_bug.cgi?id=198729

        Reviewed by Ryosuke Niwa.

        Add '--diagnose-directory' option to store diagnose information when test failed.

        * Scripts/webkitpy/benchmark_runner/benchmark_runner.py:
        (BenchmarkRunner.__init__):
        * Scripts/webkitpy/benchmark_runner/browser_driver/browser_driver.py:
        (BrowserDriver.diagnose_test_failure): Add default no-op function to base class.
        * Scripts/webkitpy/benchmark_runner/run_benchmark.py: Added '--diagnose-directory' option.
        (parse_args):
        (run_benchmark_plan):
        * Scripts/webkitpy/benchmark_runner/webdriver_benchmark_runner.py:
        (WebDriverBenchmarkRunner._run_one_test): Added 'diagnose_test_failure' invocation on test failure.
        * Scripts/webkitpy/benchmark_runner/webserver_benchmark_runner.py:
        (WebServerBenchmarkRunner.__init__):
        (WebServerBenchmarkRunner._run_one_test): Added 'diagnose_test_failure' invocation on test failure.

2019-06-10  Sam Weinig  <weinig@apple.com>

        Remove Dashboard support
        https://bugs.webkit.org/show_bug.cgi?id=198615

        Reviewed by Ryosuke Niwa.

        * DumpRenderTree/TestRunner.cpp:
        (TestRunner::staticFunctions):
        (setUseDashboardCompatibilityModeCallback): Deleted.
        * DumpRenderTree/TestRunner.h:
        * DumpRenderTree/mac/Configurations/Base.xcconfig:
        * DumpRenderTree/mac/DumpRenderTree.mm:
        (resetWebViewToConsistentStateBeforeTesting):
        * DumpRenderTree/mac/TestRunnerMac.mm:
        (TestRunner::setUseDashboardCompatibilityMode): Deleted.
        * ImageDiff/cg/Configurations/Base.xcconfig:
        * Scripts/webkitperl/FeatureList.pm:
        * TestWebKitAPI/Configurations/Base.xcconfig:
        * TestWebKitAPI/Configurations/FeatureDefines.xcconfig:
        * TestWebKitAPI/TestWebKitAPI.xcodeproj/project.pbxproj:
        * TestWebKitAPI/Tests/mac/DeviceScaleFactorInDashboardRegions.mm: Removed.
        * WebKitTestRunner/Configurations/Base.xcconfig:
        * WebKitTestRunner/InjectedBundle/Bindings/TestRunner.idl:
        * WebKitTestRunner/InjectedBundle/InjectedBundle.cpp:
        (WTR::InjectedBundle::beginTesting):
        * WebKitTestRunner/InjectedBundle/TestRunner.cpp:
        (WTR::TestRunner::setUseDashboardCompatibilityMode): Deleted.
        * WebKitTestRunner/InjectedBundle/TestRunner.h:

2019-06-10  Alexey Proskuryakov  <ap@apple.com>

        Tool binaries like WebKitTestRunner have too aggressive stripping, resulting in non-symbolicated crash logs
        https://bugs.webkit.org/show_bug.cgi?id=198616
        rdar://problem/36386573

        Reviewed by David Kilzer.

        Adding an explicit STRIP_STYLE to appropriate xcconfigs.

        * DumpRenderTree/mac/Configurations/DumpRenderTree.xcconfig:
        * DumpRenderTree/mac/Configurations/DumpRenderTreeApp.xcconfig:
        * DumpRenderTree/mac/Configurations/LayoutTestHelper.xcconfig:
        * ImageDiff/cg/Configurations/ImageDiff.xcconfig:
        * MiniBrowser/Configurations/MiniBrowser.xcconfig:
        * MobileMiniBrowser/Configurations/MobileMiniBrowser.xcconfig:
        * TestWebKitAPI/Configurations/TestWTF.xcconfig:
        * TestWebKitAPI/Configurations/TestWebKitAPI.xcconfig:
        * WebKitTestRunner/Configurations/WebKitTestRunner.xcconfig:
        * WebKitTestRunner/Configurations/WebKitTestRunnerApp.xcconfig:

2019-06-10  Wenson Hsieh  <wenson_hsieh@apple.com>

        [iOS] fast/xsl tests are flaky when run after certain viewport shrink-to-fit tests
        https://bugs.webkit.org/show_bug.cgi?id=198699
        <rdar://problem/50501718>

        Reviewed by Simon Fraser.

        Add logic to platformResetPreferencesToConsistentValues, to reset the "ShouldIgnoreMetaViewport" preference.
        While this is already being adjusted in platformConfigureViewForTest using the correct, TestOptions, this might
        happen too late, allowing the shrink-to-fit-content heuristic to unexpectedly kick in on tests where testing
        viewport parameters are used.

        * WebKitTestRunner/ios/TestControllerIOS.mm:
        (WTR::TestController::platformResetPreferencesToConsistentValues):
        (WTR::TestController::platformConfigureViewForTest):

2019-06-10  Yusuke Suzuki  <ysuzuki@apple.com>

        [JSC] UnlinkedCodeBlock should be eventually jettisoned in VM mini mode
        https://bugs.webkit.org/show_bug.cgi?id=198023

        Reviewed by Saam Barati.

        * Scripts/run-jsc-stress-tests:

2019-06-10  Timothy Hatcher  <timothy@apple.com>

        Integrate dark mode support for iOS.
        https://bugs.webkit.org/show_bug.cgi?id=198687
        rdar://problem/51545643

        Reviewed by Tim Horton.

        * TestWebKitAPI/Configurations/FeatureDefines.xcconfig:

2019-06-10  Jonathan Bedard  <jbedard@apple.com>

        webkitpy: xcrun simctl spawn *** launchctl print system output is not utf-8
        https://bugs.webkit.org/show_bug.cgi?id=198723

        Reviewed by Aakash Jain.

        * Scripts/webkitpy/xcode/simulated_device.py:
        (SimulatedDevice.is_usable): Do not decode 'print system' output, it's already ASCII.

2019-06-10  Sihui Liu  <sihui_liu@apple.com>

        [WKHTTPCookieStore getAllCookies:] may return duplicate cookies
        https://bugs.webkit.org/show_bug.cgi?id=198635
        <rdar://problem/46010232>

        Reviewed by Ryosuke Niwa.

        * TestWebKitAPI/Tests/WebKitCocoa/WKHTTPCookieStore.mm:
        (areCookiesEqual):
        (TEST):

2019-06-10  Adrian Perez de Castro  <aperez@igalia.com>

        [JHBuild] Bump shared-mime-info to version ≥ 1.6
        https://bugs.webkit.org/show_bug.cgi?id=198714

        Reviewed by Carlos Garcia Campos.

        * gtk/jhbuild.modules: Bump shared-mime-info version to 1.10.
        * gtk/patches/shared-mime-info-xht-glob.patch: Removed.
        * gtk/patches/shared-mime-info-xhtml-magic.patch: Removed.

2019-06-10  Philippe Normand  <pnormand@igalia.com>

        [WPE][Qt] Port to new wpe_fdo_egl_exported_image API
        https://bugs.webkit.org/show_bug.cgi?id=198713

        Reviewed by Carlos Garcia Campos.

        * flatpak/org.webkit.WPEModules.yaml: Include wpebackend-fdo
        patches currently used in JHBuild.

2019-06-10  Adrian Perez de Castro  <aperez@igalia.com>

        [GTK][Flatpak] webkit-build fails due to missing libwpe in Flatpak environment
        https://bugs.webkit.org/show_bug.cgi?id=198711

        Reviewed by Philippe Normand.

        * flatpak/org.webkit.GTK.yaml: Also include modules from
        org.webkit.WPEModules.yaml, which brings in libwpe and WPEBackend-fdo

2019-06-10  Zan Dobersek  <zdobersek@igalia.com>

        Unreviewed follow-up to r246148. Add another WPEBackend-fdo patch that
        avoids double-free condition that's causing bots to exit early.

        * gtk/jhbuild.modules:
        * gtk/wpebackend-fdo-view-backend-exportable-private-don-t-double-free-ca.patch: Added.
        * wpe/jhbuild.modules:
        * wpe/wpebackend-fdo-view-backend-exportable-private-don-t-double-free-ca.patch: Added.

2019-06-09  Fujii Hironori  <Hironori.Fujii@sony.com>

        [WinCairo][MiniBrowser] Disable MediaCapabilities until it's ready
        https://bugs.webkit.org/show_bug.cgi?id=198655

        Reviewed by Ross Kirsling.

        MediaCapabilities is enabled by default for WK2, but WinCairo
        doesn't implemented yet. Disable it in MiniBrowser.

        * MiniBrowser/win/WebKitBrowserWindow.cpp:
        (WebKitBrowserWindow::create):

2019-06-08  Wenson Hsieh  <wenson_hsieh@apple.com>

        [iOS] The default application name for user agent when requesting desktop content is still "Mobile/15E148"
        https://bugs.webkit.org/show_bug.cgi?id=198693
        <rdar://problem/51555371>

        Reviewed by Tim Horton.

        Augment an existing API test to exercise three additional scenarios:
            -   The web view configuration's application name is never set; the default should not include
                "Mobile/15E148" in desktop mode.
            -   The application name is explicitly set to nil; the default application name should still not include
                "Mobile/15E148".
            -   The application name is explicitly set to the default value, "Mobile/15E148". WKWebView should honor
                this when generating the user agent, even in desktop mode.

        * TestWebKitAPI/ios/PreferredContentMode.mm:
        (TestWebKitAPI::setUpWebViewForPreferredContentModeTestingWithoutNavigationDelegate):
        (TestWebKitAPI::setUpWebViewForPreferredContentModeTesting):
        (TestWebKitAPI::TEST):

2019-06-08  Zalan Bujtas  <zalan@apple.com>

        [LFC] Unreviewed test gardening.

        Remove rtl tests. They were mistakenly marked as pass.

        * LayoutReloaded/misc/LFC-passing-tests.txt:

2019-06-07  Said Abou-Hallawa  <sabouhallawa@apple.com>

        REGRESSION (r244182) [WK1]: Page updates should always scheduleCompositingLayerFlush() immediately
        https://bugs.webkit.org/show_bug.cgi?id=198664

        Reviewed by Simon Fraser.

        Delete repeated entries which were submitted by mistake.

        * Tracing/SystemTracePoints.plist:

2019-06-07  Wenson Hsieh  <wenson_hsieh@apple.com>

        Allow clients to vend custom -inputView and -inputAccessoryView by overriding WKWebView methods
        https://bugs.webkit.org/show_bug.cgi?id=198631
        <rdar://problem/51505431>

        Reviewed by Tim Horton.

        Add an API test that overrides -[WKWebView inputView] and -[WKWebView inputAccessoryView].

        * TestWebKitAPI/Tests/ios/KeyboardInputTestsIOS.mm:
        (-[CustomInputWebView initWithFrame:configuration:inputView:inputAccessoryView:]):
        (-[CustomInputWebView inputView]):
        (-[CustomInputWebView inputAccessoryView]):
        (TestWebKitAPI::TEST):

2019-06-07  Daniel Bates  <dabates@apple.com>

        [lldb-webkit] Pretty-print all kinds of Documents
        https://bugs.webkit.org/show_bug.cgi?id=198620

        Reviewed by Simon Fraser.

        Register formatters for all classes derived from WebCore::Document so we get nice summaries
        without having to drill down in Xcode- or casting- to the base class, Document.

        Older LLDB versions use to do this automatically, but this functionality was removed in newer
        versions:
            [[
                Warning: previous versions of LLDB defined cascading to mean not only going through typedef
                chains, but also through inheritance chains. This feature has been removed since it
                significantly degrades performance. You need to set up your formatters for every type in
                inheritance chains to which you want the formatter to apply.
            ]]
            <https://lldb.llvm.org/use/variable.html> (as of 06/06/2019)

        * lldb/lldb_webkit.py:
        (__lldb_init_module):

2019-06-07  Jonathan Bedard  <jbedard@apple.com>

        webkitpy: Support reporting results for uncommon test configurations
        https://bugs.webkit.org/show_bug.cgi?id=198662
        <rdar://problem/51524128>

        Reviewed by Aakash Jain.

        * Scripts/webkitpy/layout_tests/controllers/manager.py:
        (Manager.run): Override wk1 and wk2 flavors with specified flavor.
        * Scripts/webkitpy/port/base.py:
        (Port.configuration_for_upload): Set flavor based on options.
        * Scripts/webkitpy/results/options.py:
        (upload_options): Add result-report-flavor option.
        * Scripts/webkitpy/test/main.py:
        (Tester._run_tests): Set flavor based on options.

2019-06-07  Wenson Hsieh  <wenson_hsieh@apple.com>

        [iOS] At least 6 API tests are failing due to an exception when writing NSAttributedString to the pasteboard
        https://bugs.webkit.org/show_bug.cgi?id=198641
        <rdar://problem/51266310>

        Reviewed by Tim Horton.

        Work around a bug in a lower-level framework, which currently prevents NSAttributedStrings from being written to
        UIPasteboard by way of -[NSItemProvider registerObject:visibility:]. This is because, when saving a
        representation of "public.rtfd" to disk, the default suggested filename (determined using CoreServices APIs
        _UTTypeCreateSuggestedFilename and UTTypeCopyDescription) ends up being nil; UIKit then subsequently tries to
        append nil as a path component using -URLByAppendingPathComponent:, which throws an exception. This only
        reproduces on iOS simulator.

        To work around this for the time being, simply avoid writing a representation of "public.rtfd" to disk. This
        representation is actually ignored by most clients anyways (including WebKit), in favor of using
        "com.apple.flat-rtfd".

        * TestWebKitAPI/Tests/WebKitCocoa/WKAttachmentTests.mm:
        (TestWebKitAPI::TEST):
        * TestWebKitAPI/cocoa/TestWKWebView.mm:
        (applyWorkaroundToAllowWritingAttributedStringsToItemProviders):
        (-[TestWKWebView initWithFrame:configuration:addToWindow:]):

2019-06-06  Carlos Garcia Campos  <cgarcia@igalia.com>

        REGRESSION(r244857): [GTK][WPE] Many tests are no longer run in the bots after r244857
        https://bugs.webkit.org/show_bug.cgi?id=198607

        Reviewed by Michael Catanzaro.

        Since r244857 several test executables are compiled in the base tests directory instead of using their own sub
        directory. Our scripts to run the tests rely on the tests location to decide whether to run them or not, or
        determine the type of the tests.

        * Scripts/run-gtk-tests:
        (GtkTestRunner): Rename TEST_DIRS as TEST_TARGETS and use the executable names for tests not in a subdirectory.
        (GtkTestRunner._setup_testing_environment): Fix TestWebKitAccessibility directory name.
        (GtkTestRunner.is_glib_test): Use the test name for the ones not using a subdirectory.
        (GtkTestRunner.is_google_test): Ditto.
        * Scripts/run-wpe-tests:
        (WPETestRunner): Rename TEST_DIRS as TEST_TARGETS and use the executable names for tests not in a subdirectory.
        (WPETestRunner.is_glib_test): Use the test name for the ones not using a subdirectory.
        (WPETestRunner.is_google_test): Ditto.
        * glib/api_test_runner.py:
        (TestRunner): Rename TEST_DIRS as TEST_TARGETS.
        (TestRunner._get_tests): Handle test targets which can now contain directories and executables.

2019-06-06  Keith Rollin  <krollin@apple.com>

        Remove SSL-based tests from TestWebKitAPI on some configurations
        https://bugs.webkit.org/show_bug.cgi?id=198551
        <rdar://problem/51424996>

        Reviewed by Jonathan Bedard.

        Not all platforms have SSL handy, so don't include SSL-based tests on
        those platforms.

        * TestWebKitAPI/TCPServer.cpp:
        * TestWebKitAPI/TCPServer.h:
        * TestWebKitAPI/Tests/WebKitCocoa/Challenge.mm:
        * TestWebKitAPI/Tests/WebKitCocoa/Proxy.mm:
        * TestWebKitAPI/config.h:

2019-06-06  Daniel Bates  <dabates@apple.com>

        [lldb-webkit] TypeError: cannot concatenate 'str' and 'int' objects when prettify SecurityOrigin with
        non-default port number
        https://bugs.webkit.org/show_bug.cgi?id=198618

        Reviewed by Brent Fulgham.

        WebCoreSecurityOriginProvider.port() returns an int data type. We need to explicitly convert this to
        a string before we concatenate it with another string when building the string representation
        for the WebCore::SecurityOrigin object. Otherwise, Python complains that we are concatenating a str
        with an int and we don't get a pretty-printed representation for WebCore::SecurityOrigin.

        * lldb/lldb_webkit.py:
        (WebCoreSecurityOriginProvider.to_string): Call str() on the port before concatenting it.

2019-06-06  Jonathan Bedard  <jbedard@apple.com>

        Remove obsolete TOOLCHAINS overrides from as asan.xcconfig
        https://bugs.webkit.org/show_bug.cgi?id=198613

        Reviewed by Alexey Proskuryakov.

        * asan/asan.xcconfig: XCBuild doesn't support overriding toolchains.

2019-06-06  Jonathan Bedard  <jbedard@apple.com>

        webkitpluginhost: Support ASan as a style
        https://bugs.webkit.org/show_bug.cgi?id=198586
        <rdar://problem/51459088>

        Reviewed by Alexey Proskuryakov.

        * Scripts/webkitpy/port/base.py:
        (Port.configuration_for_upload): Add ASan as a style.
        * Scripts/webkitpy/port/config.py:
        (Config._read_configuration):
        (Config):
        (Config.asan): Add property to check if the ASan configuration is active.
        * Scripts/webkitpy/port/config_unittest.py:
        (ConfigTest.test_default_configuration__scripterror):
        (ConfigTest):
        (ConfigTest.test_asan):
        * Scripts/webkitpy/test/main.py:
        (Tester._run_tests): Add Asan as a style.

2019-06-06  Alexey Proskuryakov  <ap@apple.com>

        block-spammers tool doesn't block e-mail
        https://bugs.webkit.org/show_bug.cgi?id=198570

        Reviewed by Jonathan Bedard.

        * Scripts/block-spammers: (disable_user): Corrected the parameters, Bugzilla doesn't
        recognize "false" here. Also, request body is unnecessary.

2019-06-06  Carlos Garcia Campos  <cgarcia@igalia.com>

        [GTK][WPE] Enable PSON
        https://bugs.webkit.org/show_bug.cgi?id=194979

        Reviewed by Žan Doberšek.

        Add WPEBackend-fdo patch required for PSON to work. It can be removed once we have a new version to depend on.

        * gtk/jhbuild.modules:
        * gtk/patches/wpebackend-fdo-Handle-the-case-of-new-target-created-for-the-same-v.patch: Added.
        * wpe/jhbuild.modules:
        * wpe/patches/wpebackend-fdo-Handle-the-case-of-new-target-created-for-the-same-v.patch: Added.

2019-06-05  Andy Estes  <aestes@apple.com>

        [macOS] Stop calling -[NSDraggingItem setItem:]
        https://bugs.webkit.org/show_bug.cgi?id=198588
        <rdar://problem/48297453>

        On macOS Catalina, use -[NSDraggingItem _initWithItem:] instead.

        Reviewed by Wenson Hsieh.

        * DumpRenderTree/DumpRenderTree.xcodeproj/project.pbxproj: Fixed up file paths in the
        TestRunnerShared group.

        * DumpRenderTree/mac/DumpRenderTreeDraggingInfo.mm:
        (-[DumpRenderTreeDraggingInfo enumerateDraggingItemsWithOptions:forView:classes:searchOptions:usingBlock:]):
        Changed to call -[NSDraggingItem _initWithItem:] when available.

        * TestRunnerShared/spi/AppKitTestSPI.h: Renamed from
        Tools/DumpRenderTree/mac/AppKitTestSPI.h and moved NSDraggingItem internal interface
        declarations here from DumpRenderTree.

        * TestWebKitAPI/TestWebKitAPI.xcodeproj/project.pbxproj:
        Added TestRunnerShared/spi/AppKitTestSPI.h.

        * TestWebKitAPI/mac/TestDraggingInfo.mm:
        (-[TestDraggingInfo enumerateDraggingItemsWithOptions:forView:classes:searchOptions:usingBlock:]):
        Changed to call -[NSDraggingItem _initWithItem:] when available.

2019-06-05  Jer Noble  <jer.noble@apple.com>

        -[WKWebView _suspendAllMediaPlayback] does not persist across navigation.
        https://bugs.webkit.org/show_bug.cgi?id=198585

        Reviewed by Chris Dumez.

        * TestWebKitAPI/TestWebKitAPI.xcodeproj/project.pbxproj:
        * TestWebKitAPI/Tests/WebKitCocoa/ProcessSwapOnNavigation.mm:
        * TestWebKitAPI/Tests/WebKitCocoa/WKWebViewSuspendAllMediaPlayback.mm: Added.
        (TEST):
        * TestWebKitAPI/Tests/WebKitLegacy/ios/video-with-audio.html:

2019-06-05  Alex Christensen  <achristensen@webkit.org>

        Re-enable safe browsing in WKWebView
        https://bugs.webkit.org/show_bug.cgi?id=196161
        <rdar://problem/49171413>

        Reviewed by Ryosuke Niwa.

        * TestWebKitAPI/Tests/WebKitCocoa/ProcessSwapOnNavigation.mm:
        * TestWebKitAPI/Tests/WebKitCocoa/SafeBrowsing.mm:
        (TEST):
        (safeBrowsingView):

== Rolled over to ChangeLog-2019-06-05 ==
