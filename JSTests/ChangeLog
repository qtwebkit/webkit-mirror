2019-04-24  Alan Coon  <alancoon@apple.com>

        Revert r244122. rdar://problem/50132675

2019-04-09  Alan Coon  <alancoon@apple.com>

        Cherry-pick r243639. rdar://problem/49725710

    BackwardsGraph needs to consider back edges as the backward's root successor
    https://bugs.webkit.org/show_bug.cgi?id=195991
    
    Reviewed by Filip Pizlo.
    
    JSTests:
    
    * stress/map-b3-licm-infinite-loop.js: Added.
    
    Source/JavaScriptCore:
    
    * b3/testb3.cpp:
    (JSC::B3::testInfiniteLoopDoesntCauseBadHoisting):
    (JSC::B3::run):
    
    Source/WTF:
    
    Previously, our backwards graph analysis was slightly wrong. The idea of
    backwards graph is that the root of the graph has edges to terminals in
    the original graph. And then the original directed edges in the graph are flipped.
            
    However, we weren't considering loops as a form of terminality. For example,
    we wouldn't consider an infinite loop as a terminal. So there were no edges
    from the root to a node in the infinite loop. This lead us to make mistakes
    when we used backwards dominators to compute control flow equivalence.
            
    This is better understood in an example:
            
    ```
    preheader:
    while (1) {
        if (!isCell(v))
            continue;
        load structure ID
        if (cond)
           continue;
        return
    }
    ```
            
    In the previous version of this algorithm, the only edge from the backwards
    root would be to the block containing the return. This would lead us to
    believe that the loading of the structureID backwards dominates the preheader,
    leading us to believe it's control flow equivalent to preheader. This is
    obviously wrong, since we can loop forever if "v" isn't a cell.
            
    The solution here is to treat any backedge in the graph as a "terminal" node.
    Since a backedge implies the existence of a loop.
            
    In the above example, the backwards root now has an edge to both blocks with
    "continue". This prevents us from falsely claiming that the return is control
    flow equivalent with the preheader.
            
    This patch uses DFS spanning trees to compute back edges. An edge
    u->v is a back edge when u is a descendent of v in the DFS spanning
    tree of the Graph.
    
    * WTF.xcodeproj/project.pbxproj:
    * wtf/BackwardsGraph.h:
    (WTF::BackwardsGraph::BackwardsGraph):
    * wtf/SpanningTree.h: Added.
    (SpanningTree::SpanningTree):
    (SpanningTree::isDescendent):
    
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@243639 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-03-28  Saam Barati  <sbarati@apple.com>

            BackwardsGraph needs to consider back edges as the backward's root successor
            https://bugs.webkit.org/show_bug.cgi?id=195991

            Reviewed by Filip Pizlo.

            * stress/map-b3-licm-infinite-loop.js: Added.

2019-03-27  Alan Coon  <alancoon@apple.com>

        Cherry-pick r243280. rdar://problem/49308036

    Cap length of an array with spread to MIN_ARRAY_STORAGE_CONSTRUCTION_LENGTH.
    https://bugs.webkit.org/show_bug.cgi?id=196055
    <rdar://problem/49067448>
    
    Reviewed by Yusuke Suzuki.
    
    JSTests:
    
    * stress/new_array_with_spread-should-cap-array-size-to-MIN_ARRAY_STORAGE_CONSTRUCTION_LENGTH.js: Added.
    
    Source/JavaScriptCore:
    
    We are doing this because:
    1. We expect the array to be densely packed.
    2. SpeculativeJIT::compileAllocateNewArrayWithSize() (and the FTL equivalent)
       expects the array length to be less than MIN_ARRAY_STORAGE_CONSTRUCTION_LENGTH
       if we don't want to use an ArrayStorage shape.
    3. There's no reason why an array with spread needs to be that large anyway.
       MIN_ARRAY_STORAGE_CONSTRUCTION_LENGTH is plenty.
    
    In this patch, we also add a debug assert in compileAllocateNewArrayWithSize() and
    emitAllocateButterfly() to check for overflows.
    
    * assembler/AbortReason.h:
    * dfg/DFGOperations.cpp:
    * dfg/DFGSpeculativeJIT.cpp:
    (JSC::DFG::SpeculativeJIT::compileCreateRest):
    (JSC::DFG::SpeculativeJIT::compileNewArrayWithSpread):
    (JSC::DFG::SpeculativeJIT::emitAllocateButterfly):
    (JSC::DFG::SpeculativeJIT::compileAllocateNewArrayWithSize):
    * ftl/FTLLowerDFGToB3.cpp:
    (JSC::FTL::DFG::LowerDFGToB3::compileNewArrayWithSpread):
    * runtime/ArrayConventions.h:
    * runtime/CommonSlowPaths.cpp:
    (JSC::SLOW_PATH_DECL):
    
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@243280 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-03-21  Mark Lam  <mark.lam@apple.com>

            Cap length of an array with spread to MIN_ARRAY_STORAGE_CONSTRUCTION_LENGTH.
            https://bugs.webkit.org/show_bug.cgi?id=196055
            <rdar://problem/49067448>

            Reviewed by Yusuke Suzuki.

            * stress/new_array_with_spread-should-cap-array-size-to-MIN_ARRAY_STORAGE_CONSTRUCTION_LENGTH.js: Added.

2019-03-27  Alan Coon  <alancoon@apple.com>

        Cherry-pick r243069. rdar://problem/49308056

    Structure::flattenDictionary() should clear unused property slots.
    https://bugs.webkit.org/show_bug.cgi?id=195871
    <rdar://problem/48959497>
    
    Reviewed by Michael Saboff.
    
    JSTests:
    
    * stress/structure-flattenDictionary-should-clear-unused-property-slots.js: Added.
    
    Source/JavaScriptCore:
    
    It currently attempts to do this but fails because it's actually clearing up the
    preCapacity region instead.  The fix is simply to account for the preCapacity
    when computing the start address of the property slots.
    
    * runtime/Structure.cpp:
    (JSC::Structure::flattenDictionaryStructure):
    
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@243069 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-03-18  Mark Lam  <mark.lam@apple.com>

            Structure::flattenDictionary() should clear unused property slots.
            https://bugs.webkit.org/show_bug.cgi?id=195871
            <rdar://problem/48959497>

            Reviewed by Michael Saboff.

            * stress/structure-flattenDictionary-should-clear-unused-property-slots.js: Added.

2019-03-27  Alan Coon  <alancoon@apple.com>

        Cherry-pick r242838. rdar://problem/49307991

    REGRESSION (iOS 12.2): Webpage using CoffeeScript crashes
    https://bugs.webkit.org/show_bug.cgi?id=195613
    
    Reviewed by Mark Lam.
    
    JSTests:
    
    New regression test.
    
    * stress/regexp-backref-inbounds.js: Added.
    (testRegExp):
    
    Source/JavaScriptCore:
    
    The bug here is in Yarr JIT backreference matching code.  We are incorrectly
    using a checkedOffset / inputPosition correction when checking for the available
    length left in a string.  It is improper to do these corrections as a backreference's
    match length is based on what was matched in the referenced capture group and not
    part of the checkedOffset and inputPosition computed when we compiled the RegExp.
    In some cases, the resulting incorrect calculation would allow us to go past
    the subject string's length.  Removed these adjustments.
    
    After writing tests for the first bug, found another bug where the non-greedy
    backreference backtracking code didn't do an "are we at the end of the input?" check.
    This caused an infinite loop as we'd jump from the backtracking code back to
    try matching one more backreference, fail and then backtrack.
    
    * yarr/YarrJIT.cpp:
    (JSC::Yarr::YarrGenerator::generateBackReference):
    (JSC::Yarr::YarrGenerator::backtrackBackReference):
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@242838 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-03-12  Michael Saboff  <msaboff@apple.com>

            REGRESSION (iOS 12.2): Webpage using CoffeeScript crashes
            https://bugs.webkit.org/show_bug.cgi?id=195613

            Reviewed by Mark Lam.

            New regression test.

            * stress/regexp-backref-inbounds.js: Added.
            (testRegExp):

2019-03-13  Babak Shafiei  <bshafiei@apple.com>

        Cherry-pick r242810. rdar://problem/48839349

    The HasIndexedProperty node does GC.
    https://bugs.webkit.org/show_bug.cgi?id=195559
    <rdar://problem/48767923>
    
    Reviewed by Yusuke Suzuki.
    
    JSTests:
    
    * stress/HasIndexedProperty-does-gc.js: Added.
    
    Source/JavaScriptCore:
    
    HasIndexedProperty can call the slow path operationHasIndexedPropertyByInt(),
    which can eventually call JSString::getIndex(), which can resolve a rope.
    
    * dfg/DFGDoesGC.cpp:
    (JSC::DFG::doesGC):
    
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@242810 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-03-12  Mark Lam  <mark.lam@apple.com>

            The HasIndexedProperty node does GC.
            https://bugs.webkit.org/show_bug.cgi?id=195559
            <rdar://problem/48767923>

            Reviewed by Yusuke Suzuki.

            * stress/HasIndexedProperty-does-gc.js: Added.

2019-03-13  Babak Shafiei  <bshafiei@apple.com>

        Cherry-pick r242667. rdar://problem/48839311

    Stack overflow crash in JSC::JSObject::hasInstance.
    https://bugs.webkit.org/show_bug.cgi?id=195458
    <rdar://problem/48710195>
    
    Reviewed by Yusuke Suzuki.
    
    JSTests:
    
    * stress/stack-overflow-in-custom-hasInstance.js: Added.
    
    Source/JavaScriptCore:
    
    * runtime/JSObject.cpp:
    (JSC::JSObject::hasInstance):
    
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@242667 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-03-08  Mark Lam  <mark.lam@apple.com>

            Stack overflow crash in JSC::JSObject::hasInstance.
            https://bugs.webkit.org/show_bug.cgi?id=195458
            <rdar://problem/48710195>

            Reviewed by Yusuke Suzuki.

            * stress/stack-overflow-in-custom-hasInstance.js: Added.

2019-03-13  Babak Shafiei  <bshafiei@apple.com>

        Cherry-pick r242569. rdar://problem/48839273

    Air::reportUsedRegisters must padInterference
    https://bugs.webkit.org/show_bug.cgi?id=195303
    <rdar://problem/48270343>
    
    Reviewed by Keith Miller.
    
    JSTests:
    
    * stress/optional-def-arg-width-should-be-both-early-and-late-use.js: Added.
    
    Source/JavaScriptCore:
    
    reportUsedRegisters uses reg liveness to eliminate loads/moves into dead
    registers. However, liveness can report incorrect results in certain
    scenarios when considering liveness at instruction boundaries. For example,
    it can go wrong when an Inst has a LateUse of a register and the following
    Inst has an EarlyDef of that same register. Such a scenario could lead us
    to incorrectly say the register is not live-in to the first Inst. Pad
    interference inserts Nops between such instruction boundaries that cause
    this issue.
    
    The test with this patch fixes the issue in reportUsedRegisters. This patch
    also conservatively makes it so that lowerAfterRegAlloc calls padInterference
    since it also reasons about liveness.
    
    * b3/air/AirLowerAfterRegAlloc.cpp:
    (JSC::B3::Air::lowerAfterRegAlloc):
    * b3/air/AirPadInterference.h:
    * b3/air/AirReportUsedRegisters.cpp:
    (JSC::B3::Air::reportUsedRegisters):
    * b3/testb3.cpp:
    (JSC::B3::testReportUsedRegistersLateUseNotDead):
    (JSC::B3::run):
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@242569 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-03-06  Saam Barati  <sbarati@apple.com>

            Air::reportUsedRegisters must padInterference
            https://bugs.webkit.org/show_bug.cgi?id=195303
            <rdar://problem/48270343>

            Reviewed by Keith Miller.

            * stress/optional-def-arg-width-should-be-both-early-and-late-use.js: Added.

2019-03-13  Babak Shafiei  <bshafiei@apple.com>

        Cherry-pick r242276. rdar://problem/48839389

    DFG: Loop-invariant code motion (LICM) should not hoist dead code
    https://bugs.webkit.org/show_bug.cgi?id=194945
    <rdar://problem/48311657>
    
    Reviewed by Saam Barati.
    
    * dfg/DFGLICMPhase.cpp:
    (JSC::DFG::LICMPhase::run):
    
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@242276 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-03-13  Babak Shafiei  <bshafiei@apple.com>

            Cherry-pick r242114. rdar://problem/48839372

        wasmToJS() should purify incoming NaNs.
        https://bugs.webkit.org/show_bug.cgi?id=194807
        <rdar://problem/48189132>

        Reviewed by Saam Barati.

        JSTests:

        * wasm/regress/wasmToJS-should-purify-NaNs.js: Added.

        Source/JavaScriptCore:

        * runtime/JSCJSValue.h:
        (JSC::jsNumber):
        * runtime/TypedArrayAdaptors.h:
        (JSC::IntegralTypedArrayAdaptor::toJSValue):
        * wasm/js/WasmToJS.cpp:
        (JSC::Wasm::wasmToJS):



        git-svn-id: https://svn.webkit.org/repository/webkit/trunk@242114 268f45cc-cd09-0410-ab3c-d52691b4dbfc

        2019-02-26  Mark Lam  <mark.lam@apple.com>

                wasmToJS() should purify incoming NaNs.
                https://bugs.webkit.org/show_bug.cgi?id=194807
                <rdar://problem/48189132>

                Reviewed by Saam Barati.

                * wasm/regress/wasmToJS-should-purify-NaNs.js: Added.

2019-03-13  Babak Shafiei  <bshafiei@apple.com>

        Cherry-pick r241615. rdar://problem/48839366

    SamplingProfiler::stackTracesAsJSON() should escape strings.
    https://bugs.webkit.org/show_bug.cgi?id=194649
    <rdar://problem/48072386>
    
    Reviewed by Saam Barati.
    
    JSTests:
    
    * stress/sampling-profiler-stack-trace-with-double-quote-in-function-name.js: Added.
    * stress/type-profiler-with-double-quote-in-constructor-name.js: Added.
    * stress/type-profiler-with-double-quote-in-field-name.js: Added.
    * stress/type-profiler-with-double-quote-in-optional-field-name.js: Added.
    
    Source/JavaScriptCore:
    
    Ditto for TypeSet::toJSONString() and TypeSet::toJSONString().
    
2019-02-27  Robin Morisset  <rmorisset@apple.com>

        DFG: Loop-invariant code motion (LICM) should not hoist dead code
        https://bugs.webkit.org/show_bug.cgi?id=194945
        <rdar://problem/48311657>

        Reviewed by Mark Lam.

        * stress/licm-dead-code.js: Added.

    * runtime/SamplingProfiler.cpp:
    (JSC::SamplingProfiler::stackTracesAsJSON):
    * runtime/TypeSet.cpp:
    (JSC::TypeSet::toJSONString const):
    (JSC::StructureShape::toJSONString const):
    
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@241615 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-02-15  Mark Lam  <mark.lam@apple.com>

            SamplingProfiler::stackTracesAsJSON() should escape strings.
            https://bugs.webkit.org/show_bug.cgi?id=194649
            <rdar://problem/48072386>

            Reviewed by Saam Barati.

            * stress/sampling-profiler-stack-trace-with-double-quote-in-function-name.js: Added.
            * stress/type-profiler-with-double-quote-in-constructor-name.js: Added.
            * stress/type-profiler-with-double-quote-in-field-name.js: Added.
            * stress/type-profiler-with-double-quote-in-optional-field-name.js: Added.

2019-02-20  Alan Coon  <alancoon@apple.com>

        Cherry-pick r241634. rdar://problem/48243442

    RELEASE_ASSERT at com.apple.JavaScriptCore: JSC::jsSubstringOfResolved
    https://bugs.webkit.org/show_bug.cgi?id=194558
    
    Reviewed by Saam Barati.
    
    JSTests:
    
    New regression test.
    
    * stress/regexp-unicode-within-string.js: Added.
    
    Source/JavaScriptCore:
    
    Added an in bounds check before the read of the next character for Unicode regular expressions
    for pattern generation that didn't already have such checks.
    
    * yarr/YarrJIT.cpp:
    (JSC::Yarr::YarrGenerator::generatePatternCharacterOnce):
    (JSC::Yarr::YarrGenerator::generatePatternCharacterFixed):
    (JSC::Yarr::YarrGenerator::generateCharacterClassOnce):
    (JSC::Yarr::YarrGenerator::generateCharacterClassFixed):
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@241634 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-02-15  Michael Saboff  <msaboff@apple.com>

            RELEASE_ASSERT at com.apple.JavaScriptCore: JSC::jsSubstringOfResolved
            https://bugs.webkit.org/show_bug.cgi?id=194558

            Reviewed by Saam Barati.

            New regression test.

            * stress/regexp-unicode-within-string.js: Added.

2019-02-20  Alan Coon  <alancoon@apple.com>

        Cherry-pick r241613. rdar://problem/48243234

    [JSC] CodeBlock::jettison should clear related watchpoints
    https://bugs.webkit.org/show_bug.cgi?id=194544
    
    Reviewed by Mark Lam.
    
    * bytecode/CodeBlock.cpp:
    (JSC::CodeBlock::jettison):
    * dfg/DFGCommonData.h:
    (JSC::DFG::CommonData::clearWatchpoints): Added.
    * dfg/CommonData.cpp:
    (JSC::DFG::CommonData::clearWatchpoints): Added.
     
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@241613 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-02-15  Robin Morisset  <rmorisset@apple.com>
            CodeBlock::jettison should clear related watchpoints
            https://bugs.webkit.org/show_bug.cgi?id=194544

            Reviewed by Mark Lam.

            * stress/regexp-replace-double-watchpoint.js: Added.
            (foo):

2019-02-13  Alan Coon  <alancoon@apple.com>

        Cherry-pick r241228. rdar://problem/47971567

    Nodes that rely on being dominated by CheckInBounds should have a child edge to it
    https://bugs.webkit.org/show_bug.cgi?id=194334
    <rdar://problem/47844327>
    
    Reviewed by Mark Lam.
    
    JSTests:
    
    * stress/check-in-bounds-should-be-a-child-use.js: Added.
    (func):
    
    Source/JavaScriptCore:
    
    * dfg/DFGAbstractInterpreterInlines.h:
    (JSC::DFG::AbstractInterpreter<AbstractStateType>::executeEffects):
    * dfg/DFGArgumentsEliminationPhase.cpp:
    * dfg/DFGByteCodeParser.cpp:
    (JSC::DFG::ByteCodeParser::parseBlock):
    * dfg/DFGClobberize.h:
    (JSC::DFG::clobberize):
    * dfg/DFGConstantFoldingPhase.cpp:
    (JSC::DFG::ConstantFoldingPhase::foldConstants):
    * dfg/DFGFixupPhase.cpp:
    (JSC::DFG::FixupPhase::fixupNode):
    (JSC::DFG::FixupPhase::convertToHasIndexedProperty):
    * dfg/DFGIntegerCheckCombiningPhase.cpp:
    (JSC::DFG::IntegerCheckCombiningPhase::handleBlock):
    * dfg/DFGIntegerRangeOptimizationPhase.cpp:
    * dfg/DFGNodeType.h:
    * dfg/DFGSSALoweringPhase.cpp:
    (JSC::DFG::SSALoweringPhase::lowerBoundsCheck):
    * dfg/DFGSpeculativeJIT.cpp:
    (JSC::DFG::SpeculativeJIT::compileHasIndexedProperty):
    * ftl/FTLLowerDFGToB3.cpp:
    (JSC::FTL::DFG::LowerDFGToB3::compileCheckInBounds):
    (JSC::FTL::DFG::LowerDFGToB3::compileHasIndexedProperty):
    
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@241228 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-02-08  Saam barati  <sbarati@apple.com>

            Nodes that rely on being dominated by CheckInBounds should have a child edge to it
            https://bugs.webkit.org/show_bug.cgi?id=194334
            <rdar://problem/47844327>

            Reviewed by Mark Lam.

            * stress/check-in-bounds-should-be-a-child-use.js: Added.
            (func):

2019-02-05  Alan Coon  <alancoon@apple.com>

        Cherry-pick r240681. rdar://problem/47774514

    ValueRecovery::recover() should purify NaN values it recovers.
    https://bugs.webkit.org/show_bug.cgi?id=193978
    <rdar://problem/47625488>
    
    Reviewed by Saam Barati.
    
    JSTests:
    
    * stress/value-recovery-of-double-displaced-in-jsstack-should-be-purified.js: Added.
    
    Source/JavaScriptCore:
    
    According to DFG::OSRExit::executeOSRExit() and DFG::OSRExit::compileExit(),
    recovered DoubleDisplacedInJSStack values need to be purified.
    ValueRecovery::recover() should do the same.
    
    * bytecode/ValueRecovery.cpp:
    (JSC::ValueRecovery::recover const):
    
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@240681 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-01-29  Mark Lam  <mark.lam@apple.com>

            ValueRecovery::recover() should purify NaN values it recovers.
            https://bugs.webkit.org/show_bug.cgi?id=193978
            <rdar://problem/47625488>

            Reviewed by Saam Barati.

            * stress/value-recovery-of-double-displaced-in-jsstack-should-be-purified.js: Added.

2019-02-05  Alan Coon  <alancoon@apple.com>

        Cherry-pick r240616. rdar://problem/47774497

    ToString node actually does GC.
    https://bugs.webkit.org/show_bug.cgi?id=193920
    <rdar://problem/46695900>
    
    Reviewed by Yusuke Suzuki.
    
    JSTests:
    
    * stress/dfg-to-string-on-int-does-gc.js: Added.
    * stress/dfg-to-string-on-string-object-does-not-gc.js: Added.
    * stress/dfg-to-string-on-string-or-string-object-does-not-gc.js: Added.
    
    Source/JavaScriptCore:
    
    Other than for StringObjectUse and StringOrStringObjectUse, ToString and
    CallStringConstructor can allocate new JSStrings, and hence, can GC.
    
    * dfg/DFGDoesGC.cpp:
    (JSC::DFG::doesGC):
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@240616 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-01-28  Mark Lam  <mark.lam@apple.com>

            ToString node actually does GC.
            https://bugs.webkit.org/show_bug.cgi?id=193920
            <rdar://problem/46695900>

            Reviewed by Yusuke Suzuki.

            * stress/dfg-to-string-on-int-does-gc.js: Added.
            * stress/dfg-to-string-on-string-object-does-not-gc.js: Added.
            * stress/dfg-to-string-on-string-or-string-object-does-not-gc.js: Added.

2019-01-28  Mark Lam  <mark.lam@apple.com>

        Cherry-pick r240616. rdar://problem/47774497

    2019-01-28  Mark Lam  <mark.lam@apple.com>

            ToString node actually does GC.
            https://bugs.webkit.org/show_bug.cgi?id=193920
            <rdar://problem/46695900>

            Reviewed by Yusuke Suzuki.

            * stress/dfg-to-string-on-int-does-gc.js: Added.
            * stress/dfg-to-string-on-string-object-does-not-gc.js: Added.
            * stress/dfg-to-string-on-string-or-string-object-does-not-gc.js: Added.

2019-01-28  Babak Shafiei  <bshafiei@apple.com>

        Cherry-pick r240449. rdar://problem/47586886

    stress/const-semantics.js fails a dfg-eager / ftl-eager run with an ASAN release build.
    https://bugs.webkit.org/show_bug.cgi?id=190693
    
    Reviewed by Michael Saboff.
    
    JSTests:
    
    * stress/regress-190693.js: Added.
    (truth):
    (assert):
    (shouldThrowInvalidConstAssignment):
    (taz):
    
    Source/JavaScriptCore:
    
    JITStubRoutine's fields are marked only when JITStubRoutine::m_mayBeExecuting is true.
    This becomes true when we find the executable address in our conservative roots, which
    means that we could be executing it right now. This means that object liveness in
    JITStubRoutine depends on the information gathered in ConservativeRoots. However, our
    constraints are separated, "Conservative Scan" and "JIT Stub Routines". They can even
    be executed concurrently, so that "JIT Stub Routines" may miss to mark the actually
    executing JITStubRoutine because "Conservative Scan" finds it later.
    When finalizing the GC, we delete the dead JITStubRoutines. At that time, since
    "Conservative Scan" already finishes, we do not delete some JITStubRoutines which do not
    mark the depending objects. Then, in the next cycle, we find JITStubRoutines still live,
    attempt to mark the depending objects, and encounter the dead objects which are collected
    in the previous cycles.
    
    This patch removes "JIT Stub Routines" and merge it to "Conservative Scan". Since
    "Conservative Scan" and "JIT Stub Routines" need to be executed only when the execution
    happens (ensured by GreyedByExecution and CollectionPhase check), this change is OK for
    GC stop time.
    
    * heap/ConservativeRoots.h:
    (JSC::ConservativeRoots::roots const):
    (JSC::ConservativeRoots::roots): Deleted.
    * heap/Heap.cpp:
    (JSC::Heap::addCoreConstraints):
    * heap/SlotVisitor.cpp:
    (JSC::SlotVisitor::append):
    * heap/SlotVisitor.h:
    * jit/GCAwareJITStubRoutine.cpp:
    (JSC::GCAwareJITStubRoutine::GCAwareJITStubRoutine):
    * jit/GCAwareJITStubRoutine.h:
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@240449 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-01-24  Yusuke Suzuki  <ysuzuki@apple.com>

            stress/const-semantics.js fails a dfg-eager / ftl-eager run with an ASAN release build.
            https://bugs.webkit.org/show_bug.cgi?id=190693

            Reviewed by Michael Saboff.

            * stress/regress-190693.js: Added.
            (truth):
            (assert):
            (shouldThrowInvalidConstAssignment):
            (taz):

2019-01-28  Babak Shafiei  <bshafiei@apple.com>

        Cherry-pick r240447. rdar://problem/47586899

    Object Allocation Sinking phase can move a node that walks the stack into a place where the InlineCallFrame is no longer valid
    https://bugs.webkit.org/show_bug.cgi?id=193751
    <rdar://problem/47280215>
    
    Reviewed by Michael Saboff.
    
    JSTests:
    
    * stress/object-allocation-sinking-phase-must-only-move-allocations-if-stack-trace-is-still-valid.js: Added.
    (let.thing):
    (foo.let.hello):
    (foo):
    
    Source/JavaScriptCore:
    
    The Object Allocation Sinking phase may move allocations around inside
    of the program. However, it was not ensuring that it's still possible
    to walk the stack at the point in the program that it moved the allocation to.
    Certain InlineCallFrames rely on data in the stack when taking a stack trace.
    All allocation sites can do a stack walk (we do a stack walk when we GC).
    Conservatively, this patch says we're ok to move this allocation if we are
    moving within the same InlineCallFrame. We could be more precise and do an
    analysis of stack writes. However, this scenario is so rare that we just
    take the conservative-and-straight-forward approach of checking that the place
    we're moving to is the same InlineCallFrame as the allocation site.
    
    In general, this issue arises anytime we do any kind of code motion.
    Interestingly, LICM gets this right. It gets it right because the only
    InlineCallFrames we can't move out of are the InlineCallFrames that
    have metadata stored on the stack (callee for closure calls and argument
    count for varargs calls). LICM doesn't have this issue because it relies
    on Clobberize for doing its effects analysis. In clobberize, we model every
    node within an InlineCallFrame that meets the above criteria as reading
    from those stack fields. Consequently, LICM won't hoist any node in that
    InlineCallFrame past the beginning of the InlineCallFrame since the IR
    we generate to set up such an InlineCallFrame contains writes to that
    stack location.
    
    * dfg/DFGObjectAllocationSinkingPhase.cpp:
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@240447 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-01-24  Saam Barati  <sbarati@apple.com>

            Object Allocation Sinking phase can move a node that walks the stack into a place where the InlineCallFrame is no longer valid
            https://bugs.webkit.org/show_bug.cgi?id=193751
            <rdar://problem/47280215>

            Reviewed by Michael Saboff.

            * stress/object-allocation-sinking-phase-must-only-move-allocations-if-stack-trace-is-still-valid.js: Added.
            (let.thing):
            (foo.let.hello):
            (foo):

2019-01-28  Babak Shafiei  <bshafiei@apple.com>

        Cherry-pick r240364. rdar://problem/47586820

    [DFG] AvailabilityMap::pruneByLiveness should make non-live operands Availability::unavailable instead of Availability()
    https://bugs.webkit.org/show_bug.cgi?id=193711
    <rdar://problem/47250262>
    
    Reviewed by Saam Barati.
    
    JSTests:
    
    * stress/availability-was-cleared-when-locals-are-not-live.js: Added.
    (shouldBe):
    (foo):
    (bar):
    (baz):
    
    Source/JavaScriptCore:
    
    When pruning OSR Availability based on bytecode liveness, we accidentally clear the Availability (making it DeadFlush) instead of
    making it Availability::unavailable() (Making it ConflictingFlush). In OSRAvailabilityAnalysisPhase, we perform forward analysis.
    We first clear all the availability of basic blocks DeadFlush, which is an empty set. And then, we set operands in the root block
    ConflictingFlush. In this forward analysis, DeadFlush is BOTTOM, and ConflictingFlush is TOP. Then, we propagate information by
    merging availability until we reach to the fixed-point. As an optimization, we perform "pruning" of the availability in the head
    of the basic blocks. We remove availabilities of operands which are not live in the bytecode liveness at the head of the basic block.
    The problem is, when removing availabilities, we set DeadFlush for them instead of ConflictingFlush. Basically, it means that we set
    BOTTOM (an empty set) instead of TOP. Let's consider the following simple example. We have 6 basic blocks, and they are connected
    as follows.
    
        BB0 -> BB1 -> BB2 -> BB4
         |        \        ^
         v          > BB3 /
        BB5
    
    And consider about loc1 in FTL, which is required to be recovered in BB4's OSR exit.
    
        BB0 does nothing
            head: loc1 is dead
            tail: loc1 is dead
    
        BB1 has MovHint @1, loc1
            head: loc1 is dead
            tail: loc1 is live
    
        BB2 does nothing
            head: loc1 is live
            tail: loc1 is live
    
        BB3 has PutStack @1, loc1
            head: loc1 is live
            tail: loc1 is live
    
        BB4 has OSR exit using loc1
            head: loc1 is live
            tail: loc1 is live (in bytecode)
    
        BB5 does nothing
            head: loc1 is dead
            tail: loc1 is dead
    
    In our OSR Availability analysis, we always prune loc1 result in BB1's head since its head says "loc1 is dead".
    But at that time, we clear the availability for loc1, which makes it DeadFlush, instead of making it ConflictingFlush.
    
    So, the flush format of loc1 in each tail of BB is like this.
    
        BB0
            ConflictingFlush (because all the local operands are initialized with ConflictingFlush)
        BB1
            DeadFlush+@1 (pruning clears it)
        BB2
            DeadFlush+@1 (since it is propagated from BB1)
        BB3
            FlushedJSValue+@1 with loc1 (since it has PutStack)
        BB4
            FlushedJSValue+@1 with loc1 (since MERGE(DeadFlush, FlushedJSValue) = FlushedJSValue)
        BB5
            DeadFlush (pruning clears it)
    
    Then, if we go the path BB0->BB1->BB2->BB4, we read the value from the stack while it is not flushed.
    The correct fix is making availability "unavailable" when pruning based on bytecode liveness.
    
    * dfg/DFGAvailabilityMap.cpp:
    (JSC::DFG::AvailabilityMap::pruneByLiveness): When pruning availability, we first set all the operands Availability::unavailable(),
    and copy the calculated value from the current availability map.
    * dfg/DFGOSRAvailabilityAnalysisPhase.cpp:
    (JSC::DFG::OSRAvailabilityAnalysisPhase::run): Add logging things for debugging.
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@240364 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-01-23  Yusuke Suzuki  <ysuzuki@apple.com>

            [DFG] AvailabilityMap::pruneByLiveness should make non-live operands Availability::unavailable instead of Availability()
            https://bugs.webkit.org/show_bug.cgi?id=193711
            <rdar://problem/47250262>

            Reviewed by Saam Barati.

            * stress/availability-was-cleared-when-locals-are-not-live.js: Added.
            (shouldBe):
            (foo):
            (bar):
            (baz):

2019-01-25  Mark Lam  <mark.lam@apple.com>

        Cherry-pick r240329. rdar://problem/47458354

        This is for a follow up fix that was missed in the cherry-pick for rdar://problem/47458354.

    2019-01-22  Yusuke Suzuki  <ysuzuki@apple.com>

            Unreviewed, fix initial global lexical binding epoch
            https://bugs.webkit.org/show_bug.cgi?id=193603
            <rdar://problem/47380869>

            * stress/global-lexical-binding-epoch-should-be-correct-one.js: Added.
            (f1.f2.f3.f4):
            (f1.f2.f3):
            (f1.f2):
            (f1):

2019-01-25  Mark Lam  <mark.lam@apple.com>

        Cherry-pick r239940. rdar://problem/47295340

    2019-01-14  Mark Lam  <mark.lam@apple.com>

            Fix all CLoop JSC test failures (including some LLInt bugs due to recent bytecode format change).
            https://bugs.webkit.org/show_bug.cgi?id=193402
            <rdar://problem/46012309>

            Reviewed by Keith Miller.

            * stress/regexp-compile-oom.js:
            - Skip this test for !$jitTests because it is tuned for stack usage when the JIT
              is enabled.  As a result, it will fail on cloop builds though there is no bug.

2019-01-23  Alan Coon  <alancoon@apple.com>

        Cherry-pick r240327. rdar://problem/47494707

    REGRESSION(r239612) Crash at runtime due to broken DFG assumption
    https://bugs.webkit.org/show_bug.cgi?id=193709
    <rdar://problem/47363838>
    
    Unreviewed, rollout to watch the tests.
    
    JSTests:
    
    * stress/object-tostring-changed-proto.js: Removed.
    * stress/object-tostring-changed.js: Removed.
    * stress/object-tostring-misc.js: Removed.
    * stress/object-tostring-other.js: Removed.
    * stress/object-tostring-untyped.js: Removed.
    
    Source/JavaScriptCore:
    
    * JavaScriptCore.xcodeproj/project.pbxproj:
    * dfg/DFGAbstractInterpreterInlines.h:
    (JSC::DFG::AbstractInterpreter<AbstractStateType>::executeEffects):
    * dfg/DFGByteCodeParser.cpp:
    (JSC::DFG::ByteCodeParser::handleIntrinsicCall):
    * dfg/DFGClobberize.h:
    (JSC::DFG::clobberize):
    * dfg/DFGDoesGC.cpp:
    (JSC::DFG::doesGC):
    * dfg/DFGFixupPhase.cpp:
    (JSC::DFG::FixupPhase::fixupNode):
    (JSC::DFG::FixupPhase::fixupObjectToString): Deleted.
    * dfg/DFGNodeType.h:
    * dfg/DFGOperations.cpp:
    * dfg/DFGOperations.h:
    * dfg/DFGPredictionPropagationPhase.cpp:
    * dfg/DFGSafeToExecute.h:
    (JSC::DFG::safeToExecute):
    * dfg/DFGSpeculativeJIT.cpp:
    (JSC::DFG::SpeculativeJIT::compileObjectToString): Deleted.
    * dfg/DFGSpeculativeJIT.h:
    * dfg/DFGSpeculativeJIT32_64.cpp:
    (JSC::DFG::SpeculativeJIT::compile):
    * dfg/DFGSpeculativeJIT64.cpp:
    (JSC::DFG::SpeculativeJIT::compile):
    * ftl/FTLAbstractHeapRepository.h:
    * ftl/FTLCapabilities.cpp:
    (JSC::FTL::canCompile):
    * ftl/FTLLowerDFGToB3.cpp:
    (JSC::FTL::DFG::LowerDFGToB3::compileNode):
    (JSC::FTL::DFG::LowerDFGToB3::compileToStringOrCallStringConstructorOrStringValueOf):
    (JSC::FTL::DFG::LowerDFGToB3::compileObjectToString): Deleted.
    * runtime/Intrinsic.cpp:
    (JSC::intrinsicName):
    * runtime/Intrinsic.h:
    * runtime/ObjectPrototype.cpp:
    (JSC::ObjectPrototype::finishCreation):
    (JSC::objectProtoFuncToString):
    * runtime/ObjectPrototype.h:
    * runtime/ObjectPrototypeInlines.h: Removed.
    * runtime/StructureRareData.h:
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@240327 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-01-22  Yusuke Suzuki  <ysuzuki@apple.com>

            REGRESSION(r239612) Crash at runtime due to broken DFG assumption
            https://bugs.webkit.org/show_bug.cgi?id=193709
            <rdar://problem/47363838>

            Unreviewed, rollout to watch the tests.

            * stress/object-tostring-changed-proto.js: Removed.
            * stress/object-tostring-changed.js: Removed.
            * stress/object-tostring-misc.js: Removed.
            * stress/object-tostring-other.js: Removed.
            * stress/object-tostring-untyped.js: Removed.

2019-01-23  Alan Coon  <alancoon@apple.com>

        Cherry-pick r239951. rdar://problem/47295353

    [JSC] Do not use asArrayModes() with Structures because it discards TypedArray information
    https://bugs.webkit.org/show_bug.cgi?id=193372
    
    Reviewed by Saam Barati.
    
    JSTests:
    
    * stress/typed-array-array-modes-profile.js: Added.
    (foo):
    
    Source/JavaScriptCore:
    
    When RegisteredStructureSet is filtered with AbstractValue, we use structure, SpeculationType, and ArrayModes.
    However, we use asArrayModes() function with IndexingMode to compute the ArrayModes in AbstractValue. This is
    wrong since this discards TypedArray ArrayModes. As a result, if RegisteredStructureSet with TypedArrays is
    filtered with ArrayModes of AbstractValue populated from TypedArrays, we filter all the structures out since
    AbstractValue's ArrayModes become NonArray, which is wrong with the TypedArrays' ArrayModes. This leads to
    incorrect FTL code generation with MultiGetByOffset etc. nodes because,
    
    1. AI think that this MultiGetByOffset never succeeds since all the values of RegisteredStructureSet are filtered out by the AbstractValue.
    2. AI says the state of MultiGetByOffset is invalid since AI think it never succeeds.
    3. So subsequent code becomes FTL crash code since AI think the execution should do OSR exit.
    4. Then, FTL emits the code for MultiGetByOffset, and emits crash after that.
    5. But in reality, the incoming value can match to the one of the RegisteredStructureSet value since (1)'s structures are incorrectly filtered by the incorrect ArrayModes.
    6. Then, the execution goes on, and falls into the FTL crash.
    
    This patch fixes the incorrect ArrayModes calculation by the following changes
    
    1. Rename asArrayModes to asArrayModesIgnoringTypedArrays.
    2. Fix incorrect asArrayModesIgnoringTypedArrays use in our code. Use arrayModesFromStructure instead.
    3. Fix OSR exit code which stores incorrect ArrayModes to the profiles.
    
    * bytecode/ArrayProfile.cpp:
    (JSC::dumpArrayModes):
    (JSC::ArrayProfile::computeUpdatedPrediction):
    * bytecode/ArrayProfile.h:
    (JSC::asArrayModesIgnoringTypedArrays):
    (JSC::arrayModesFromStructure):
    (JSC::arrayModesIncludeIgnoringTypedArrays):
    (JSC::shouldUseSlowPutArrayStorage):
    (JSC::shouldUseFastArrayStorage):
    (JSC::shouldUseContiguous):
    (JSC::shouldUseDouble):
    (JSC::shouldUseInt32):
    (JSC::asArrayModes): Deleted.
    (JSC::arrayModeFromStructure): Deleted.
    (JSC::arrayModesInclude): Deleted.
    * dfg/DFGAbstractValue.cpp:
    (JSC::DFG::AbstractValue::observeTransitions):
    (JSC::DFG::AbstractValue::set):
    (JSC::DFG::AbstractValue::mergeOSREntryValue):
    (JSC::DFG::AbstractValue::contains const):
    * dfg/DFGAbstractValue.h:
    (JSC::DFG::AbstractValue::observeTransition):
    (JSC::DFG::AbstractValue::validate const):
    (JSC::DFG::AbstractValue::observeIndexingTypeTransition):
    * dfg/DFGArrayMode.cpp:
    (JSC::DFG::ArrayMode::fromObserved):
    (JSC::DFG::ArrayMode::alreadyChecked const):
    * dfg/DFGArrayMode.h:
    (JSC::DFG::ArrayMode::structureWouldPassArrayModeFiltering):
    (JSC::DFG::ArrayMode::arrayModesThatPassFiltering const):
    (JSC::DFG::ArrayMode::arrayModesWithIndexingShape const):
    * dfg/DFGOSRExit.cpp:
    (JSC::DFG::OSRExit::executeOSRExit):
    (JSC::DFG::OSRExit::compileExit):
    * dfg/DFGRegisteredStructureSet.cpp:
    (JSC::DFG::RegisteredStructureSet::filterArrayModes):
    (JSC::DFG::RegisteredStructureSet::arrayModesFromStructures const):
    * ftl/FTLOSRExitCompiler.cpp:
    (JSC::FTL::compileStub):
    * jit/JITInlines.h:
    (JSC::JIT::chooseArrayMode):
    (JSC::arrayProfileSaw): Deleted.
    * runtime/JSType.h:
    (JSC::isTypedArrayType):
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@239951 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-01-14  Yusuke Suzuki  <yusukesuzuki@slowstart.org>

            [JSC] Do not use asArrayModes() with Structures because it discards TypedArray information
            https://bugs.webkit.org/show_bug.cgi?id=193372

            Reviewed by Saam Barati.

            * stress/typed-array-array-modes-profile.js: Added.
            (foo):

2019-01-23  Alan Coon  <alancoon@apple.com>

        Cherry-pick r240254. rdar://problem/47458354

    [JSC] Invalidate old scope operations using global lexical binding epoch
    https://bugs.webkit.org/show_bug.cgi?id=193603
    <rdar://problem/47380869>
    
    Patch by Yusuke Suzuki <ysuzuki@apple.com> on 2019-01-22
    Reviewed by Saam Barati.
    
    JSTests:
    
    * stress/let-lexical-binding-shadow-existing-global-property-ftl.js:
    * stress/scope-operation-cache-global-property-before-deleting.js: Added.
    (shouldThrow):
    (bar):
    * stress/scope-operation-cache-global-property-bump-counter.js: Added.
    (shouldBe):
    (get1):
    (get2):
    (get1If):
    (get2If):
    * stress/scope-operation-cache-global-property-even-if-it-fails.js: Added.
    (shouldThrow):
    (foo):
    
    Source/JavaScriptCore:
    
    Even if the global lexical binding does not shadow the global property at that time, we need to clear the cached information in
    scope related operations since we may have a global property previously. Consider the following example,
    
        foo = 0;
        function get() { return foo; }
        print(get()); // 0
        print(get()); // 0
        delete globalThis.foo;
        $.evalScript(`const foo = 42;`);
        print(get()); // Should be 42, but it returns 0 if the cached information in get() is not cleared.
    
    To invalidate the cache easily, we introduce global lexical binding epoch. It is bumped every time we introduce a new lexical binding
    into JSGlobalLexicalEnvironment, since that name could shadow the global property name previously. In op_resolve_scope, we first check
    the epoch stored in the metadata, and go to slow path if it is not equal to the current epoch. Our slow path code convert the scope
    operation to the appropriate one even if the resolve type is not UnresolvedProperty type. After updating the resolve type of the bytecode,
    we update the cached epoch to the current one, so that we can use the cached information as long as we stay in the same epoch.
    
    In op_get_from_scope and op_put_to_scope, we do not use this epoch since Structure check can do the same thing instead. If op_resolve_type
    is updated by the epoch, and if it starts returning JSGlobalLexicalEnvironment instead JSGlobalObject, obviously the structure check fails.
    And in the slow path, we update op_get_from_scope and op_put_to_scope appropriately.
    
    So, the metadata for scope related bytecodes are eventually updated to the appropriate one. In DFG and FTL, we use the watchpoint based approach.
    In DFG and FTL, we concurrently attempt to get the watchpoint for the lexical binding and look into it by using `isStillValid()` to avoid
    infinite compile-and-fail loop.
    
    When the global lexical binding epoch overflows we iterate all the live CodeBlock and update the op_resolve_scope's epoch. Even if the shadowing
    happens, it is OK if we bump the epoch, since op_resolve_scope will return JSGlobalLexicalEnvironment instead of JSGlobalObject, and following
    structure check in op_put_to_scope and op_get_from_scope fail. We do not need to update op_get_from_scope and op_put_to_scope because of the same
    reason.
    
    * bytecode/BytecodeList.rb:
    * bytecode/CodeBlock.cpp:
    (JSC::CodeBlock::finishCreation):
    (JSC::CodeBlock::notifyLexicalBindingUpdate):
    (JSC::CodeBlock::notifyLexicalBindingShadowing): Deleted.
    * bytecode/CodeBlock.h:
    * dfg/DFGByteCodeParser.cpp:
    (JSC::DFG::ByteCodeParser::parseBlock):
    * dfg/DFGDesiredGlobalProperties.cpp:
    (JSC::DFG::DesiredGlobalProperties::isStillValidOnMainThread):
    * dfg/DFGDesiredGlobalProperties.h:
    * dfg/DFGGraph.cpp:
    (JSC::DFG::Graph::watchGlobalProperty):
    * dfg/DFGGraph.h:
    * dfg/DFGPlan.cpp:
    (JSC::DFG::Plan::isStillValidOnMainThread):
    * jit/JITPropertyAccess.cpp:
    (JSC::JIT::emit_op_resolve_scope):
    * jit/JITPropertyAccess32_64.cpp:
    (JSC::JIT::emit_op_resolve_scope):
    * llint/LowLevelInterpreter32_64.asm:
    * llint/LowLevelInterpreter64.asm:
    * runtime/CommonSlowPaths.cpp:
    (JSC::SLOW_PATH_DECL):
    * runtime/CommonSlowPaths.h:
    (JSC::CommonSlowPaths::tryCachePutToScopeGlobal):
    (JSC::CommonSlowPaths::tryCacheGetFromScopeGlobal):
    * runtime/JSGlobalObject.cpp:
    (JSC::JSGlobalObject::bumpGlobalLexicalBindingEpoch):
    (JSC::JSGlobalObject::getReferencedPropertyWatchpointSet):
    (JSC::JSGlobalObject::ensureReferencedPropertyWatchpointSet):
    (JSC::JSGlobalObject::notifyLexicalBindingShadowing): Deleted.
    * runtime/JSGlobalObject.h:
    (JSC::JSGlobalObject::globalLexicalBindingEpoch const):
    (JSC::JSGlobalObject::globalLexicalBindingEpochOffset):
    (JSC::JSGlobalObject::addressOfGlobalLexicalBindingEpoch):
    * runtime/Options.cpp:
    (JSC::correctOptions):
    (JSC::Options::initialize):
    (JSC::Options::setOptions):
    (JSC::Options::setOptionWithoutAlias):
    * runtime/Options.h:
    * runtime/ProgramExecutable.cpp:
    (JSC::ProgramExecutable::initializeGlobalProperties):
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@240254 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-01-22  Yusuke Suzuki  <ysuzuki@apple.com>

            [JSC] Invalidate old scope operations using global lexical binding epoch
            https://bugs.webkit.org/show_bug.cgi?id=193603
            <rdar://problem/47380869>

            Reviewed by Saam Barati.

            * stress/let-lexical-binding-shadow-existing-global-property-ftl.js:
            * stress/scope-operation-cache-global-property-before-deleting.js: Added.
            (shouldThrow):
            (bar):
            * stress/scope-operation-cache-global-property-bump-counter.js: Added.
            (shouldBe):
            (get1):
            (get2):
            (get1If):
            (get2If):
            * stress/scope-operation-cache-global-property-even-if-it-fails.js: Added.
            (shouldThrow):
            (foo):

2019-01-23  Alan Coon  <alancoon@apple.com>

        Cherry-pick r240106. rdar://problem/47458403

    [JSC] ToThis omission in DFGByteCodeParser is wrong
    https://bugs.webkit.org/show_bug.cgi?id=193513
    <rdar://problem/45842236>
    
    Reviewed by Saam Barati.
    
    JSTests:
    
    * stress/to-this-omission-with-different-strict-modes.js: Added.
    (thisA):
    (thisAStrictWrapper):
    
    Source/JavaScriptCore:
    
    DFGByteCodeParser omitted ToThis node when we have `ToThis(ToThis(value))`. This semantics is wrong if ToThis has different semantics
    in the sloppy mode and the strict mode. If we convert `ToThisInSloppyMode(ToThisInStrictMode(boolean))` to `ToThisInStrictMode(boolean)`,
    we get boolean instead of BooleanObject.
    
    This optimization is introduced more than 7 years ago, and from that, we have several optimizations that can remove such ToThis nodes
    in BytecodeParser, AI, and Fixup. Furthermore, this optimization is simply wrong since `toThis()` function of JSCell can be defined
    as they want. Before ensuring all the toThis function is safe, we should not fold `ToThis(ToThis(value))` => `ToThis(value)`.
    This patch just removes the problematic optimization. The performance numbers look neutral.
    
    * dfg/DFGAbstractInterpreterInlines.h:
    (JSC::DFG::AbstractInterpreter<AbstractStateType>::executeEffects):
    * dfg/DFGByteCodeParser.cpp:
    (JSC::DFG::ByteCodeParser::parseBlock):
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@240106 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-01-17  Yusuke Suzuki  <yusukesuzuki@slowstart.org>

            [JSC] ToThis omission in DFGByteCodeParser is wrong
            https://bugs.webkit.org/show_bug.cgi?id=193513
            <rdar://problem/45842236>

            Reviewed by Saam Barati.

            * stress/to-this-omission-with-different-strict-modes.js: Added.
            (thisA):
            (thisAStrictWrapper):

2019-01-23  Alan Coon  <alancoon@apple.com>

        Cherry-pick r240229. rdar://problem/47458326

    DFG: When inlining DataView set* intrinsics we need to set undefined as our result
    https://bugs.webkit.org/show_bug.cgi?id=193644
    <rdar://problem/46209745>
    
    Reviewed by Yusuke Suzuki.
    
    JSTests:
    
    * stress/data-view-set-intrinsic-undefined-result-2.js: Added.
    (foo):
    * stress/data-view-set-intrinsic-undefined-result.js: Added.
    (foo):
    (bar):
    
    Source/JavaScriptCore:
    
    This patch also makes it so we fail fast when we make this mistake.
    I've made this mistake more than once.
    
    * dfg/DFGByteCodeParser.cpp:
    (JSC::DFG::ByteCodeParser::handleIntrinsicCall):
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@240229 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-01-20  Saam Barati  <sbarati@apple.com>

            DFG: When inlining DataView set* intrinsics we need to set undefined as our result
            https://bugs.webkit.org/show_bug.cgi?id=193644
            <rdar://problem/46209745>

            Reviewed by Yusuke Suzuki.

            * stress/data-view-set-intrinsic-undefined-result-2.js: Added.
            (foo):
            * stress/data-view-set-intrinsic-undefined-result.js: Added.
            (foo):
            (bar):

2019-01-23  Alan Coon  <alancoon@apple.com>

        Cherry-pick r240114. rdar://problem/47458257

    StringObjectUse should not be a structure check for the original string object structure
    https://bugs.webkit.org/show_bug.cgi?id=193483
    <rdar://problem/47280522>
    
    Reviewed by Yusuke Suzuki.
    
    JSTests:
    
    * stress/cant-eliminate-string-object-structure-check-when-string-object-is-proven.js: Added.
    (foo):
    (a.valueOf.0):
    
    Source/JavaScriptCore:
    
    Prior to this patch, the use kind for StringObjectUse implied that we
    do a StructureCheck on the input operand for the *original* StringObject
    structure. This is generally not how we use UseKinds, so it's no surprise
    that this is buggy. A UseKind should map to a set of SpeculatedTypes, not an
    actual set of structures. This patch changes the meaning of StringObjectUse
    to mean an object where jsDynamicCast<StringObject*> would succeed.
    
    This patch also fixes a bug that was caused by the old and weird usage of the
    UseKind to mean StructureCheck. Consider a program like this:
    ```
    S1 = Original StringObject structure
    S2 = Original StringObject structure with the field "f" added
    
    a: GetLocal()
    b: CheckStructure(@a, {S2})
    c: ToString(StringObject:@a)
    ```
    
    According to AI, in the above program, we would exit at @c, since
    StringObject:@a implies a structure check of {S1}, and the intersection
    of {S1} and {S2} is {}. So, we'd convert the program to be:
    ```
    a: GetLocal()
    b: CheckStructure(@a, {S2})
    c: Check(StringObject:@a)
    d: Unreachable
    ```
    
    However, AI would set the proof status of the StringObject:@a edge
    to be proven, since the SpeculatedType for @a is SpecStringObject.
    This was incorrect of AI to do because the SpeculatedType itself
    didn't capture the full power of StringObjectUse. However, having
    a UseKind mean CheckStructure is weird precisely because what AI was
    doing is a natural fit to how we typically we think about UseKinds.
    
    So the above program would then incorrectly be converted to this, and
    we'd crash when reaching the Unreachable node:
    ```
    a: GetLocal()
    b: CheckStructure(@a, {S2})
    d: Unreachable
    ```
    
    This patch makes it so that StringObjectUse just means that the object that
    filters through a StringObjectUse check must !!jsDynamicCast<StringObject*>.
    This is now in line with all other UseKinds. It also lets us simplify a bunch
    of other code that had weird checks for the StringObjectUse UseKind.
    
    This patch also makes it so that anywhere where we used to rely on
    StringObjectUse implying a structure check we actually emit an explicit
    CheckStructure node.
    
    * JavaScriptCore.xcodeproj/project.pbxproj:
    * bytecode/ExitKind.cpp:
    (JSC::exitKindToString):
    * bytecode/ExitKind.h:
    * dfg/DFGAbstractInterpreterInlines.h:
    (JSC::DFG::AbstractInterpreter<AbstractStateType>::executeEffects):
    * dfg/DFGCSEPhase.cpp:
    * dfg/DFGClobberize.h:
    (JSC::DFG::clobberize):
    * dfg/DFGEdgeUsesStructure.h: Removed.
    * dfg/DFGFixupPhase.cpp:
    (JSC::DFG::FixupPhase::attemptToForceStringArrayModeByToStringConversion):
    (JSC::DFG::FixupPhase::addCheckStructureForOriginalStringObjectUse):
    (JSC::DFG::FixupPhase::fixupToPrimitive):
    (JSC::DFG::FixupPhase::fixupToStringOrCallStringConstructor):
    (JSC::DFG::FixupPhase::attemptToMakeFastStringAdd):
    (JSC::DFG::FixupPhase::isStringObjectUse): Deleted.
    * dfg/DFGGraph.cpp:
    (JSC::DFG::Graph::canOptimizeStringObjectAccess):
    * dfg/DFGMayExit.cpp:
    * dfg/DFGSpeculativeJIT.cpp:
    (JSC::DFG::SpeculativeJIT::compileToStringOrCallStringConstructorOrStringValueOf):
    (JSC::DFG::SpeculativeJIT::speculateStringObject):
    (JSC::DFG::SpeculativeJIT::speculateStringOrStringObject):
    * dfg/DFGSpeculativeJIT.h:
    (JSC::DFG::SpeculativeJIT::speculateStringObjectForStructure): Deleted.
    * dfg/DFGUseKind.h:
    (JSC::DFG::alreadyChecked):
    (JSC::DFG::usesStructure): Deleted.
    * ftl/FTLLowerDFGToB3.cpp:
    (JSC::FTL::DFG::LowerDFGToB3::compileToStringOrCallStringConstructorOrStringValueOf):
    (JSC::FTL::DFG::LowerDFGToB3::speculateStringObject):
    (JSC::FTL::DFG::LowerDFGToB3::speculateStringOrStringObject):
    (JSC::FTL::DFG::LowerDFGToB3::speculateStringObjectForCell):
    (JSC::FTL::DFG::LowerDFGToB3::speculateStringObjectForStructureID): Deleted.
    * runtime/JSType.cpp:
    (WTF::printInternal):
    * runtime/JSType.h:
    * runtime/StringObject.h:
    (JSC::StringObject::createStructure):
    * runtime/StringPrototype.h:
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@240114 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-01-17  Saam barati  <sbarati@apple.com>

            StringObjectUse should not be a structure check for the original string object structure
            https://bugs.webkit.org/show_bug.cgi?id=193483
            <rdar://problem/47280522>

            Reviewed by Yusuke Suzuki.

            * stress/cant-eliminate-string-object-structure-check-when-string-object-is-proven.js: Added.
            (foo):
            (a.valueOf.0):

2019-01-23  Alan Coon  <alancoon@apple.com>

        Cherry-pick r240040. rdar://problem/47458365

    JSFunction::canUseAllocationProfile() should account for builtin functions with no own prototypes.
    https://bugs.webkit.org/show_bug.cgi?id=193423
    <rdar://problem/46209355>
    
    Reviewed by Saam Barati.
    
    JSTests:
    
    * microbenchmarks/sinkable-new-object-with-builtin-constructor.js: Added.
    * stress/constructing-builtin-functions-with-getter-prototype-should-only-call-getter-once-per-new-1.js: Added.
    * stress/constructing-builtin-functions-with-getter-prototype-should-only-call-getter-once-per-new-2.js: Added.
    * stress/jsfunction-cannot-use-allocation-profile-with-builtin-functions-with-no-prototype.js: Added.
    
    Source/JavaScriptCore:
    
    JSFunction::canUseAllocationProfile() should return false for most builtins
    because the majority of them have no prototype property.  The only exception to
    this is the few builtin functions that are explicitly used as constructors.
    
    For these builtin constructors, JSFunction::canUseAllocationProfile() should also
    return false if the prototype property is a getter or custom getter because
    getting the prototype would then be effectful.
    
    * dfg/DFGOperations.cpp:
    * runtime/CommonSlowPaths.cpp:
    (JSC::SLOW_PATH_DECL):
    * runtime/JSFunctionInlines.h:
    (JSC::JSFunction::canUseAllocationProfile):
    * runtime/PropertySlot.h:
    
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@240040 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-01-15  Mark Lam  <mark.lam@apple.com>

            JSFunction::canUseAllocationProfile() should account for builtin functions with no own prototypes.
            https://bugs.webkit.org/show_bug.cgi?id=193423
            <rdar://problem/46209355>

            Reviewed by Saam Barati.

            * microbenchmarks/sinkable-new-object-with-builtin-constructor.js: Added.
            * stress/constructing-builtin-functions-with-getter-prototype-should-only-call-getter-once-per-new-1.js: Added.
            * stress/constructing-builtin-functions-with-getter-prototype-should-only-call-getter-once-per-new-2.js: Added.
            * stress/jsfunction-cannot-use-allocation-profile-with-builtin-functions-with-no-prototype.js: Added.

2019-01-23  Alan Coon  <alancoon@apple.com>

        Cherry-pick r240024. rdar://problem/47458299

    [JSC] Use KnownStringUse for GetByVal(Array::String) since AI would offer wider type information and offer non-string type after removing Check(String)
    https://bugs.webkit.org/show_bug.cgi?id=193438
    <rdar://problem/45581249>
    
    Reviewed by Saam Barati and Keith Miller.
    
    JSTests:
    
    Under the heavy load (like, compiling WebKit), AI in this code can broaden type information after the 1st run.
    Then, GetByVal(String) crashed.
    
    * stress/string-get-by-val-lowering.js: Added.
    (shouldBe):
    (test):
    * stress/type-for-get-by-val-can-be-widen-after-ai.js: Added.
    (Hello):
    (foo):
    
    Source/JavaScriptCore:
    
    GetByVal(Array::String) emits Check(String) before that. But AI can broaden type constraint in the second run.
    After the first run removes Check(String), it would happen that AI starts saying the type of 1st child is not String.
    To claim that it *is* a String type, we should use KnownStringUse here.
    
    * dfg/DFGFixupPhase.cpp:
    (JSC::DFG::FixupPhase::fixupNode): StringCharAt and GetByVal(Array::String) share the underlying compiler code. We should
    change StringUse => KnownStringUse for StringCharAt too. And StringCharAt and StringCharCodeAt potentially have the same
    problem. This patch fixes it too.
    * dfg/DFGSSALoweringPhase.cpp:
    (JSC::DFG::SSALoweringPhase::lowerBoundsCheck):
    * ftl/FTLLowerDFGToB3.cpp:
    (JSC::FTL::DFG::LowerDFGToB3::compileStringCharAt):
    (JSC::FTL::DFG::LowerDFGToB3::compileStringCharCodeAt):
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@240024 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-01-15  Yusuke Suzuki  <yusukesuzuki@slowstart.org>

            [JSC] Use KnownStringUse for GetByVal(Array::String) since AI would offer wider type information and offer non-string type after removing Check(String)
            https://bugs.webkit.org/show_bug.cgi?id=193438
            <rdar://problem/45581249>

            Reviewed by Saam Barati and Keith Miller.

            Under the heavy load (like, compiling WebKit), AI in this code can broaden type information after the 1st run.
            Then, GetByVal(String) crashed.

            * stress/string-get-by-val-lowering.js: Added.
            (shouldBe):
            (test):
            * stress/type-for-get-by-val-can-be-widen-after-ai.js: Added.
            (Hello):
            (foo):

2019-01-23  Alan Coon  <alancoon@apple.com>

        Cherry-pick r239961. rdar://problem/47458424

    [BigInt] Literal parsing is crashing when used inside a Object Literal
    https://bugs.webkit.org/show_bug.cgi?id=193404
    
    Reviewed by Yusuke Suzuki.
    
    JSTests:
    
    * stress/big-int-literal-inside-literal-object.js: Added.
    
    Source/JavaScriptCore:
    
    Former implementation was relying into token.m_data.radix after the
    call of `next()` into Parser.cpp. This is not safe because next
    clobbers token.m_data.radix in some cases (e.g is CLOSEBRACE).
    Now we get radix value before calling `next()` into parser and store
    in a local variable.
    
    * parser/Parser.cpp:
    (JSC::Parser<LexerType>::parsePrimaryExpression):
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@239961 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-01-14  Caio Lima  <ticaiolima@gmail.com>

            [BigInt] Literal parsing is crashing when used inside a Object Literal
            https://bugs.webkit.org/show_bug.cgi?id=193404

            Reviewed by Yusuke Suzuki.

            * stress/big-int-literal-inside-literal-object.js: Added.

2019-01-15  Alan Coon  <alancoon@apple.com>

        Cherry-pick r239882. rdar://problem/47260361

    DFG combined liveness can be wrong for terminal basic blocks
    https://bugs.webkit.org/show_bug.cgi?id=193304
    <rdar://problem/45268632>
    
    Reviewed by Yusuke Suzuki.
    
    JSTests:
    
    * stress/dfg-combined-liveness-consider-terminal-blocks-bytecode-liveness.js: Added.
    
    Source/JavaScriptCore:
    
    If a block doesn't have any successors, it can't rely on the typical
    backwards liveness propagation that CombinedLiveness was doing. The phase
    first got what was live in bytecode and IR at the heads of each block. Then
    for each block, it made the live at tail the union of the live at head for
    each successor. For a terminal block though, this could be wrong. We could
    end up saying nothing is live even though many things may be live in bytecode.
    We must account for what's bytecode live at the end of the block. Consider a
    block that ends with:
    ```
    ForceOSRExit
    Unreachable
    ```
    
    Things may definitely be live in bytecode at the tail. However, we'll
    report nothing as being alive. This probably subtly breaks many analyses,
    but we have a test case of it breaking the interference analysis that
    the ArgumentsEliminationPhase performs.
    
    * dfg/DFGBasicBlock.h:
    (JSC::DFG::BasicBlock::last const):
    * dfg/DFGCombinedLiveness.cpp:
    (JSC::DFG::addBytecodeLiveness):
    (JSC::DFG::liveNodesAtHead):
    (JSC::DFG::CombinedLiveness::CombinedLiveness):
    * dfg/DFGCombinedLiveness.h:
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@239882 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-01-11  Saam barati  <sbarati@apple.com>

            DFG combined liveness can be wrong for terminal basic blocks
            https://bugs.webkit.org/show_bug.cgi?id=193304
            <rdar://problem/45268632>

            Reviewed by Yusuke Suzuki.

            * stress/dfg-combined-liveness-consider-terminal-blocks-bytecode-liveness.js: Added.

2019-01-15  Alan Coon  <alancoon@apple.com>

        Cherry-pick r239879. rdar://problem/47260206

    [JSC] Global lexical bindings can shadow global variables if it is `configurable = true`
    https://bugs.webkit.org/show_bug.cgi?id=193308
    <rdar://problem/45546542>
    
    Reviewed by Saam Barati.
    
    JSTests:
    
    * stress/const-lexical-binding-shadow-existing-global-property-ftl.js: Added.
    (shouldThrow):
    (shouldBe):
    (foo):
    (get shouldThrow):
    * stress/const-lexical-binding-shadow-existing-global-property-tdz-ftl.js: Added.
    (shouldThrow):
    (shouldBe):
    (foo):
    (get shouldBe):
    (get shouldThrow):
    (get return):
    * stress/const-lexical-binding-shadow-existing-global-property-tdz.js: Added.
    (shouldThrow):
    (shouldBe):
    (foo):
    (get shouldBe):
    (get shouldThrow):
    * stress/const-lexical-binding-shadow-existing-global-property.js: Added.
    (shouldThrow):
    (shouldBe):
    (foo):
    * stress/const-lexical-binding-shadowing-global-properties-and-eval-injection.js: Added.
    (shouldThrow):
    (shouldBe):
    (foo):
    * stress/global-add-function-should-not-be-shadowed-by-lexical-bindings.js: Added.
    (shouldThrow):
    * stress/global-static-variables-should-not-be-shadowed-by-lexical-bindings.js: Added.
    (shouldThrow):
    * stress/let-lexical-binding-shadow-existing-global-property-ftl.js: Added.
    (shouldThrow):
    (shouldBe):
    (foo):
    * stress/let-lexical-binding-shadow-existing-global-property-tdz-ftl.js: Added.
    (shouldThrow):
    (shouldBe):
    (foo):
    (get shouldBe):
    (get shouldThrow):
    (get return):
    * stress/let-lexical-binding-shadow-existing-global-property-tdz.js: Added.
    (shouldThrow):
    (shouldBe):
    (foo):
    (get shouldBe):
    (get shouldThrow):
    * stress/let-lexical-binding-shadow-existing-global-property.js: Added.
    (shouldThrow):
    (shouldBe):
    (foo):
    * stress/let-lexical-binding-shadowing-global-properties-and-eval-injection.js: Added.
    (shouldThrow):
    (shouldBe):
    (foo):
    
    Source/JavaScriptCore:
    
    Previously, we assumed that lexical bindings in JSGlobalLexicalEnvironment cannot shadow existing global properties.
    However, it is wrong. According to the spec, we can shadow global properties if a property's attribute is configurable = true.
    For example, we execute two scripts.
    
    script1.js
    
        bar = 42;
        function load() { return bar; }
        print(bar); // 42
        print(load()); // 42
    
    script2.js
    
        let bar = 0; // This lexical binding can shadow the global.bar defined in script1.js
        print(bar); // 0
        print(load()); // 0
    
    In JSC, we cache GlobalProperty resolve type and its associated information in op_resolve_type, op_get_from_scope, and op_put_to_scope.
    They attempt to load a property from JSGlobalObject directly. However, once the newly added lexical binding starts shadowing this, our existing instructions
    become invalid since they do not respect JSGlobalLexicalEnvironment.
    
    In this patch, we fix this issue by introducing the following mechanisms.
    
    1. We have a HashMap<property name, watchpoint set> in JSGlobalObject. DFG and FTL create a watchpoint set with the property name if the generated code
    depends on GlobalProperty condition of op_resolve_scope etc. These watchpoint will be fired when the shadowing happens, so that our generated DFG and FTL
    code will be invalidated if it depends on the condition which is no longer valid.
    
    2. When we detect shadowing, we iterate all the live CodeBlocks which globalObject is the target one. And we rewrite instructions in them from GlobalProperty
    to GlobalLexicalVar (or Dynamic precisely). So, the subsequent LLInt code just works well. "Dynamic" conversion happens when your op_put_to_scope attempts to
    put a value onto a const lexical binding. This fails and it should throw a type error.
    
    3. GlobalProperty scope operations in Baseline JIT start checking ResolveType in metadata, and emit code for GlobalProperty and GlobalLexicalVar. Once the rewrite
    happens, baseline JIT continues working because it checks the rewritten metadata's ResolveType.
    
    We use this mechanism (which is similar to haveABadTime() thing) because,
    
    1. Shadowing should be super rare. Before r214145, we made these cases as SytaxError. Thus, before r214145, this type of code cannot be executed in WebKit.
    And the number of the live CodeBlocks for the given JSGlobalObject should be small. This supports introducing rather simple (but not so efficient) mechanism
    instead of the complicated one.
    
    2. Rewriting instructions immediately forces GlobalProperty => GlobalLexicalVar / Dynamic conversion in all the possible CodeBlock. This allows us to avoid
    compilation failure loop in DFG and FTL: DFG and FTL codes are invalidated by the watchpoint, but we may attempt to compile the code with the invalidated watchpoint
    and GlobalProperty status if we do not rewrite it. One possible other implementation is having and checking a counter in instruction, and every time we introduce
    a new shadow binding, bump the counter. And eventually executed instruction will go to the slow path and rewrite itself. However, this way leaves the not-executed-again-yet
    instructions as is, and DFG and FTL repeatedly fail to compile if we just watch the invalidated watchpoint for that. Rewriting all the existing GlobalProperty immediately
    avoids this situation easily.
    
    * JavaScriptCore.xcodeproj/project.pbxproj:
    * Sources.txt:
    * bytecode/CodeBlock.cpp:
    (JSC::CodeBlock::notifyLexicalBindingShadowing):
    * bytecode/CodeBlock.h:
    (JSC::CodeBlock::scriptMode const):
    * bytecode/Watchpoint.h:
    (JSC::WatchpointSet::create):
    * dfg/DFGByteCodeParser.cpp:
    (JSC::DFG::ByteCodeParser::parseBlock):
    * dfg/DFGDesiredGlobalProperties.cpp: Added.
    (JSC::DFG::DesiredGlobalProperties::isStillValidOnMainThread):
    (JSC::DFG::DesiredGlobalProperties::reallyAdd):
    * dfg/DFGDesiredGlobalProperties.h: Added.
    (JSC::DFG::DesiredGlobalProperties::addLazily):
    We need this DesiredGlobalProperties mechanism since we do not want to ref() the UniquedStringImpl in DFG and FTL thread.
    We keep JSGlobalObject* and identifierNumber, and materialize WatchpointSets for each JSGlobalObject's property referenced
    from DFG and FTL and inject CodeBlock jettison watchpoints in the main thread.
    * dfg/DFGDesiredGlobalProperty.h: Added.
    (JSC::DFG::DesiredGlobalProperty::DesiredGlobalProperty):
    (JSC::DFG::DesiredGlobalProperty::globalObject const):
    (JSC::DFG::DesiredGlobalProperty::identifierNumber const):
    (JSC::DFG::DesiredGlobalProperty::operator== const):
    (JSC::DFG::DesiredGlobalProperty::operator!= const):
    (JSC::DFG::DesiredGlobalProperty::isHashTableDeletedValue const):
    (JSC::DFG::DesiredGlobalProperty::hash const):
    (JSC::DFG::DesiredGlobalProperty::dumpInContext const):
    (JSC::DFG::DesiredGlobalProperty::dump const):
    (JSC::DFG::DesiredGlobalPropertyHash::hash):
    (JSC::DFG::DesiredGlobalPropertyHash::equal):
    * dfg/DFGGraph.h:
    (JSC::DFG::Graph::globalProperties):
    * dfg/DFGPlan.cpp:
    (JSC::DFG::Plan::reallyAdd):
    (JSC::DFG::Plan::isStillValidOnMainThread):
    (JSC::DFG::Plan::finalizeWithoutNotifyingCallback):
    (JSC::DFG::Plan::cancel):
    * dfg/DFGPlan.h:
    (JSC::DFG::Plan::globalProperties):
    * jit/JITPropertyAccess.cpp:
    (JSC::JIT::emit_op_resolve_scope):
    (JSC::JIT::emit_op_get_from_scope):
    (JSC::JIT::emit_op_put_to_scope):
    * jit/JITPropertyAccess32_64.cpp:
    (JSC::JIT::emit_op_resolve_scope):
    (JSC::JIT::emit_op_get_from_scope):
    (JSC::JIT::emit_op_put_to_scope):
    * runtime/JSGlobalObject.cpp:
    (JSC::JSGlobalObject::addStaticGlobals):
    (JSC::JSGlobalObject::notifyLexicalBindingShadowing):
    (JSC::JSGlobalObject::getReferencedPropertyWatchpointSet):
    (JSC::JSGlobalObject::ensureReferencedPropertyWatchpointSet):
    * runtime/JSGlobalObject.h:
    * runtime/ProgramExecutable.cpp:
    (JSC::hasRestrictedGlobalProperty):
    (JSC::ProgramExecutable::initializeGlobalProperties):
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@239879 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-01-11  Yusuke Suzuki  <yusukesuzuki@slowstart.org>

            [JSC] Global lexical bindings can shadow global variables if it is `configurable = true`
            https://bugs.webkit.org/show_bug.cgi?id=193308
            <rdar://problem/45546542>

            Reviewed by Saam Barati.

            * stress/const-lexical-binding-shadow-existing-global-property-ftl.js: Added.
            (shouldThrow):
            (shouldBe):
            (foo):
            (get shouldThrow):
            * stress/const-lexical-binding-shadow-existing-global-property-tdz-ftl.js: Added.
            (shouldThrow):
            (shouldBe):
            (foo):
            (get shouldBe):
            (get shouldThrow):
            (get return):
            * stress/const-lexical-binding-shadow-existing-global-property-tdz.js: Added.
            (shouldThrow):
            (shouldBe):
            (foo):
            (get shouldBe):
            (get shouldThrow):
            * stress/const-lexical-binding-shadow-existing-global-property.js: Added.
            (shouldThrow):
            (shouldBe):
            (foo):
            * stress/const-lexical-binding-shadowing-global-properties-and-eval-injection.js: Added.
            (shouldThrow):
            (shouldBe):
            (foo):
            * stress/global-add-function-should-not-be-shadowed-by-lexical-bindings.js: Added.
            (shouldThrow):
            * stress/global-static-variables-should-not-be-shadowed-by-lexical-bindings.js: Added.
            (shouldThrow):
            * stress/let-lexical-binding-shadow-existing-global-property-ftl.js: Added.
            (shouldThrow):
            (shouldBe):
            (foo):
            * stress/let-lexical-binding-shadow-existing-global-property-tdz-ftl.js: Added.
            (shouldThrow):
            (shouldBe):
            (foo):
            (get shouldBe):
            (get shouldThrow):
            (get return):
            * stress/let-lexical-binding-shadow-existing-global-property-tdz.js: Added.
            (shouldThrow):
            (shouldBe):
            (foo):
            (get shouldBe):
            (get shouldThrow):
            * stress/let-lexical-binding-shadow-existing-global-property.js: Added.
            (shouldThrow):
            (shouldBe):
            (foo):
            * stress/let-lexical-binding-shadowing-global-properties-and-eval-injection.js: Added.
            (shouldThrow):
            (shouldBe):
            (foo):

2019-01-09  Kocsen Chung  <kocsen_chung@apple.com>

        Cherry-pick r239731. rdar://problem/47158715

    LLInt put_by_id uses the wrong load instruction for loading flags from the metadata
    https://bugs.webkit.org/show_bug.cgi?id=193221
    
    Reviewed by Mark Lam.
    
    JSTests:
    
    * stress/put-by-id-flags.js: Added.
    (f):
    (g):
    (numberOfDFGCompiles):
    
    Source/JavaScriptCore:
    
    The flags are only 4 bytes, but were loaded with loadp. It used to work,
    since the flags were followed by a 4-byte padding, but it broke after the
    struct was compacted in r239626.
    
    * llint/LowLevelInterpreter64.asm:
    
    
    git-svn-id: https://svn.webkit.org/repository/webkit/trunk@239731 268f45cc-cd09-0410-ab3c-d52691b4dbfc

    2019-01-08  Tadeu Zagallo  <tzagallo@apple.com>

            LLInt put_by_id uses the wrong load instruction for loading flags from the metadata
            https://bugs.webkit.org/show_bug.cgi?id=193221

            Reviewed by Mark Lam.

            * stress/put-by-id-flags.js: Added.
            (f):
            (g):
            (numberOfDFGCompiles):

2019-01-04  Tadeu Zagallo  <tzagallo@apple.com>

        Baseline version of get_by_id may corrupt metadata
        https://bugs.webkit.org/show_bug.cgi?id=193085
        <rdar://problem/23453006>

        Reviewed by Saam Barati.

        * stress/get-by-id-change-mode.js: Added.
        (forEach):

2019-01-02  Yusuke Suzuki  <yusukesuzuki@slowstart.org>

        [JSC] Optimize Object.prototype.toString
        https://bugs.webkit.org/show_bug.cgi?id=193031

        Reviewed by Saam Barati.

        * stress/object-tostring-changed-proto.js: Added.
        (shouldBe):
        (test):
        * stress/object-tostring-changed.js: Added.
        (shouldBe):
        (test):
        * stress/object-tostring-misc.js: Added.
        (shouldBe):
        (test):
        (i.switch):
        * stress/object-tostring-other.js: Added.
        (shouldBe):
        (test):
        * stress/object-tostring-untyped.js: Added.
        (shouldBe):
        (test):
        (i.switch):

2019-01-03  Ross Kirsling  <ross.kirsling@sony.com>

        test262-runner misbehaves when test file YAML has a trailing space
        https://bugs.webkit.org/show_bug.cgi?id=193053

        Reviewed by Yusuke Suzuki.

        * test262/expectations.yaml:
        Mark two dozen tests as passing (and correct the output of another).

2018-12-30  Yusuke Suzuki  <yusukesuzuki@slowstart.org>

        Unreviewed, JSTests gardening with memoryLimited

        * stress/string-overflow-createError.js:

2018-12-30  Ross Kirsling  <ross.kirsling@sony.com>

        [JSC] Identifier validity should be based on ID_Start / ID_Continue properties
        https://bugs.webkit.org/show_bug.cgi?id=193050

        Reviewed by Yusuke Suzuki.

        * test262.yaml:
        * test262/expectations.yaml:
        Mark 16 tests as passing.

2018-12-13  Yusuke Suzuki  <yusukesuzuki@slowstart.org>

        [BigInt] Support BigInt in JSON.stringify
        https://bugs.webkit.org/show_bug.cgi?id=192624

        Reviewed by Saam Barati.

        * stress/big-int-json-stringify-to-json.js: Added.
        (shouldBe):
        (shouldThrow):
        (BigInt.prototype.toJSON):
        (shouldBe.JSON.stringify):
        * stress/big-int-json-stringify.js: Added.
        (shouldBe):
        (shouldThrow):

2018-12-20  Yusuke Suzuki  <yusukesuzuki@slowstart.org>

        [JSC] Implement "well-formed JSON.stringify" proposal
        https://bugs.webkit.org/show_bug.cgi?id=191677

        Reviewed by Darin Adler.

        * stress/json-surrogate-pair.js: Added.
        (shouldBe):
        * test262/expectations.yaml:

2018-12-20  Keith Miller  <keith_miller@apple.com>

        Add support for globalThis
        https://bugs.webkit.org/show_bug.cgi?id=165171

        Reviewed by Mark Lam.

        * test262/config.yaml:

2018-12-19  Keith Miller  <keith_miller@apple.com>

        Update test262 configuration to not run tests dependent on ICU version.
        https://bugs.webkit.org/show_bug.cgi?id=192920

        Reviewed by Saam Barati.

        * test262/expectations.yaml:

2018-12-20  Mark Lam  <mark.lam@apple.com>

        Fix a typo in slow_path_construct_arityCheck and operationConstructArityCheck.
        https://bugs.webkit.org/show_bug.cgi?id=192939
        <rdar://problem/46869516>

        Reviewed by Keith Miller.

        * stress/stack-overflow-frame-for-construct-arityCheck-should-use-construct-codeBlock.js: Added.

2018-12-20  Tadeu Zagallo  <tzagallo@apple.com>

        WTF::String and StringImpl overflow MaxLength
        https://bugs.webkit.org/show_bug.cgi?id=192853
        <rdar://problem/45726906>

        Reviewed by Mark Lam.

        * stress/string-16bit-repeat-overflow.js: Added.
        (catch):

2018-12-19  Ross Kirsling  <ross.kirsling@sony.com>

        Unreviewed follow-up to r192914.

        * test262/expectations.yaml:
        Add the last 20 missing expectations.

2018-12-19  Keith Miller  <keith_miller@apple.com>

        Fix test262 expectations
        https://bugs.webkit.org/show_bug.cgi?id=192914

        Unreviewed, when I imported the latest round of test262 tests I must have failed to update the test expectations.

        * test262/expectations.yaml:

2018-12-19  Keith Miller  <keith_miller@apple.com>

        Update test262 tests.
        https://bugs.webkit.org/show_bug.cgi?id=192907

        Rubber stamped by Mark Lam.

        * test262/*: Omitted because prepare-changelog crashes.

2018-12-19  Mark Lam  <mark.lam@apple.com>

        JSPropertyNameEnumerator should cache the iterated object's structure only after getting its property names.
        https://bugs.webkit.org/show_bug.cgi?id=192464
        <rdar://problem/46519455>

        Reviewed by Saam Barati.

        This patch is about a 10% speed up on the new for-in-on-object-with-lazily-materialized-properties.js
        microbenchmark.

        * microbenchmarks/for-in-on-object-with-lazily-materialized-properties.js: Added.
        * stress/property-name-enumerator-should-cache-structure-after-getting-property-names.js: Added.

2018-12-19  Tadeu Zagallo  <tzagallo@apple.com>

        String overflow in JSC::createError results in ASSERT in WTF::makeString
        https://bugs.webkit.org/show_bug.cgi?id=192833
        <rdar://problem/45706868>

        Reviewed by Mark Lam.

        * stress/string-overflow-createError.js: Added.

2018-12-18  Ross Kirsling  <ross.kirsling@sony.com>

        Error message for `-x ** y` contains a typo.
        https://bugs.webkit.org/show_bug.cgi?id=192832

        Reviewed by Saam Barati.

        * ChakraCore/test/UnitTestFramework/UnitTestFramework.js:
        (assert.assert.return.throws):
        * stress/pow-expects-update-expression-on-lhs.js:
        (throw.new.Error):
        Update test expectations which match against the exact error message.

2018-12-18  Mark Lam  <mark.lam@apple.com>

        Gardening: test options fix.
        https://bugs.webkit.org/show_bug.cgi?id=192822

        Unreviewed.

        * stress/json-stringify-string-builder-overflow.js:

2018-12-18  Mark Lam  <mark.lam@apple.com>

        JSON.stringify() should throw OOM on StringBuilder overflows.
        https://bugs.webkit.org/show_bug.cgi?id=192822
        <rdar://problem/46670577>

        Reviewed by Saam Barati.

        * stress/json-stringify-string-builder-overflow.js: Added.

2018-12-18  Ross Kirsling  <ross.kirsling@sony.com>

        Redeclaration of var over let/const/class should be a syntax error.
        https://bugs.webkit.org/show_bug.cgi?id=192298

        Reviewed by Keith Miller.

        * test262.yaml:
        * test262/expectations.yaml:
        Mark 46 tests as passing.

        * stress/block-scope-redeclarations.js:
        Add some new tests.

        * stress/for-in-invalidate-context-weird-assignments.js:
        * stress/for-in-tests.js:
        Replace tests for outdated behavior with tests for SyntaxError.

        * ChakraCore/test/LetConst/defer3.baseline-jsc:
        * ChakraCore/test/LetConst/letvar.baseline-jsc:
        Update expectations.

2018-12-18  Mark Lam  <mark.lam@apple.com>

        Skip the stress/elidable-new-object-roflcopter-then-exit.js test on 32-bit.
        https://bugs.webkit.org/show_bug.cgi?id=191374
        <rdar://problem/46525447>

        Reviewed by Yusuke Suzuki.

        This test runs too slow on 32-bit, and is not relevant for non-JIT builds.

        * stress/elidable-new-object-roflcopter-then-exit.js:

2018-12-17  Mark Lam  <mark.lam@apple.com>

        Skip the stress/materialized-regexp-has-correct-last-index-set-by-match.js test on 32-bit.
        https://bugs.webkit.org/show_bug.cgi?id=192019
        <rdar://problem/46525456>

        Reviewed by Yusuke Suzuki.

        The test runs too slow on 32-bit.

        * stress/materialized-regexp-has-correct-last-index-set-by-match.js:

2018-12-17  Mark Lam  <mark.lam@apple.com>

        Skip the stress/materialize-regexp-cyclic-regexp.js test on 32-bit.
        https://bugs.webkit.org/show_bug.cgi?id=191373
        <rdar://problem/46525458>

        Reviewed by Yusuke Suzuki.

        The test is already slow running with a JIT on 64-bit.  It will always timeout
        on 32-bit without a JIT.

        * stress/materialize-regexp-cyclic-regexp.js:

2018-12-17  Mark Lam  <mark.lam@apple.com>

        Array unshift/shift should not race against the AI in the compiler thread.
        https://bugs.webkit.org/show_bug.cgi?id=192795
        <rdar://problem/46724263>

        Reviewed by Saam Barati.

        * stress/array-unshift-should-not-race-against-compiler-thread.js: Added.

2018-12-16  Yusuke Suzuki  <yusukesuzuki@slowstart.org>

        [JSC] Optimize Object.keys by caching own keys results in StructureRareData
        https://bugs.webkit.org/show_bug.cgi?id=190047

        Reviewed by Saam Barati.

        * stress/object-keys-cached-zero.js: Added.
        (shouldBe):
        (test):
        * stress/object-keys-changed-attribute.js: Added.
        (shouldBe):
        (test):
        * stress/object-keys-changed-index.js: Added.
        (shouldBe):
        (test):
        * stress/object-keys-changed.js: Added.
        (shouldBe):
        (test):
        * stress/object-keys-indexed-non-cache.js: Added.
        (shouldBe):
        (test):
        * stress/object-keys-overrides-get-property-names.js: Added.
        (shouldBe):
        (test):
        (noInline):

2018-12-17  Mark Lam  <mark.lam@apple.com>

        SamplingProfiler's isValidFramePointer() should reject address at stack origin.
        https://bugs.webkit.org/show_bug.cgi?id=192779
        <rdar://problem/46775869>

        Reviewed by Saam Barati.

        * stress/sampling-profiler-should-not-sample-beyond-stack-bounds.js: Added.

2018-12-17  Ryan Haddad  <ryanhaddad@apple.com>

        Unreviewed test gardening, address a syntax error in a new test.

        * stress/out-of-frame-stack-accesses-due-to-probe-based-osr-exits.js:

2018-12-17  Mark Lam  <mark.lam@apple.com>

        Suppress ASAN on valid stack accesses in Probe-based OSRExit::executeOSRExit().
        https://bugs.webkit.org/show_bug.cgi?id=192776
        <rdar://problem/46772368>

        Reviewed by Keith Miller.

        * stress/out-of-frame-stack-accesses-due-to-probe-based-osr-exits.js: Added.

2018-12-17  Mark Lam  <mark.lam@apple.com>

        Fix stale assertion in attemptToForceStringArrayModeByToStringConversion().
        https://bugs.webkit.org/show_bug.cgi?id=192770
        <rdar://problem/46449037>

        Reviewed by Keith Miller.

        * stress/force-string-arrayMode-on-originalNonArray-array-class.js: Added.

2018-12-14  Mark Lam  <mark.lam@apple.com>

        CallFrame::convertToStackOverflowFrame() needs to keep the top CodeBlock alive.
        https://bugs.webkit.org/show_bug.cgi?id=192717
        <rdar://problem/46660677>

        Reviewed by Saam Barati.

        * stress/regress-192717.js: Added.

2018-12-14  Commit Queue  <commit-queue@webkit.org>

        Unreviewed, rolling out r239153, r239154, and r239155.
        https://bugs.webkit.org/show_bug.cgi?id=192715

        Caused flaky GC-related crashes seen with layout tests
        (Requested by ryanhaddad on #webkit).

        Reverted changesets:

        "[JSC] Optimize Object.keys by caching own keys results in
        StructureRareData"
        https://bugs.webkit.org/show_bug.cgi?id=190047
        https://trac.webkit.org/changeset/239153

        "Unreviewed, build fix after r239153"
        https://bugs.webkit.org/show_bug.cgi?id=190047
        https://trac.webkit.org/changeset/239154

        "Unreviewed, build fix after r239153, part 2"
        https://bugs.webkit.org/show_bug.cgi?id=190047
        https://trac.webkit.org/changeset/239155

2018-12-14  Keith Miller  <keith_miller@apple.com>

        Callers of JSString::getIndex should check for OOM exceptions
        https://bugs.webkit.org/show_bug.cgi?id=192709

        Reviewed by Mark Lam.

        * stress/StringObject-define-length-getter-rope-string-oom.js: Added.

2018-12-13  Mark Lam  <mark.lam@apple.com>

        Add a missing exception check.
        https://bugs.webkit.org/show_bug.cgi?id=192626
        <rdar://problem/46662163>

        Reviewed by Keith Miller.

        * stress/regress-192626.js: Added.

2018-12-13  Caio Lima  <ticaiolima@gmail.com>

        [BigInt] Add ValueDiv into DFG
        https://bugs.webkit.org/show_bug.cgi?id=186178

        Reviewed by Yusuke Suzuki.

        * stress/big-int-div-jit-osr.js: Added.
        * stress/big-int-div-jit-untyped.js: Added.
        * stress/value-div-fixup-int32-big-int.js: Added.

2018-12-10  Yusuke Suzuki  <yusukesuzuki@slowstart.org>

        [JSC] Optimize Object.keys by caching own keys results in StructureRareData
        https://bugs.webkit.org/show_bug.cgi?id=190047

        Reviewed by Keith Miller.

        * stress/object-keys-cached-zero.js: Added.
        (shouldBe):
        (test):
        * stress/object-keys-changed-attribute.js: Added.
        (shouldBe):
        (test):
        * stress/object-keys-changed-index.js: Added.
        (shouldBe):
        (test):
        * stress/object-keys-changed.js: Added.
        (shouldBe):
        (test):
        * stress/object-keys-indexed-non-cache.js: Added.
        (shouldBe):
        (test):
        * stress/object-keys-overrides-get-property-names.js: Added.
        (shouldBe):
        (test):
        (noInline):

2018-12-12  Yusuke Suzuki  <yusukesuzuki@slowstart.org>

        [DFG][FTL] Add NewSymbol
        https://bugs.webkit.org/show_bug.cgi?id=192620

        Reviewed by Saam Barati.

        * microbenchmarks/symbol-creation.js: Added.
        (test):
        * stress/symbol-description-identity.js: Added.
        (shouldBe):
        (test):
        * stress/symbol-identity.js: Added.
        (shouldBe):
        (test):
        * stress/symbol-with-description-throw-error.js: Added.
        (shouldBe):
        (shouldThrow):
        (test):
        (object.toString):

2018-12-12  Yusuke Suzuki  <yusukesuzuki@slowstart.org>

        [BigInt] Implement DFG/FTL typeof for BigInt
        https://bugs.webkit.org/show_bug.cgi?id=192619

        Reviewed by Keith Miller.

        * stress/big-int-boolean-proven-type.js: Added.
        (assert):
        (bool):
        * stress/big-int-type-of-proven-type-non-constant-including-symbol.js: Added.
        (assert):
        (typeOf):
        (i.switch):
        * stress/big-int-type-of-proven-type-non-constant.js: Added.
        (assert):
        (typeOf):
        * stress/big-int-type-of.js:
        (typeOf):
        (func):

2018-12-10  Mark Lam  <mark.lam@apple.com>

        PropertyAttribute needs a CustomValue bit.
        https://bugs.webkit.org/show_bug.cgi?id=191993
        <rdar://problem/46264467>

        Reviewed by Saam Barati.

        * stress/regress-191993.js: Added.

2018-12-10  Caio Lima  <ticaiolima@gmail.com>

        [BigInt] Add ValueMul into DFG
        https://bugs.webkit.org/show_bug.cgi?id=186175

        Reviewed by Yusuke Suzuki.

        * stress/big-int-mul-jit-osr.js: Added.
        * stress/big-int-mul-jit-untyped.js: Added.
        * stress/value-mul-fixup-int32-big-int.js: Added.

2018-12-06  Keith Miller  <keith_miller@apple.com>

        stress/big-wasm-memory tests failing on 32-bit JSC bot
        https://bugs.webkit.org/show_bug.cgi?id=192020

        Reviewed by Saam Barati.

        Not every platform has WebAssembly, e.g. 32-bit, so we should exit
        the wasm stress tests if the WebAssembly object does not exist.

        * stress/big-wasm-memory-grow-no-max.js:
        (test.foo):
        (test):
        (foo): Deleted.
        (catch): Deleted.
        * stress/big-wasm-memory-grow.js:
        (test.foo):
        (test):
        (foo): Deleted.
        (catch): Deleted.
        * stress/big-wasm-memory.js:
        (test.foo):
        (test):
        (foo): Deleted.
        (catch): Deleted.

2018-12-05  Mark Lam  <mark.lam@apple.com>

        speculationFromCell() should speculate non-Identifier strings as SpecString instead of SpecStringVar.
        https://bugs.webkit.org/show_bug.cgi?id=192441
        <rdar://problem/46480355>

        Reviewed by Saam Barati.

        * stress/regress-192441.js: Added.

2018-12-04  Mark Lam  <mark.lam@apple.com>

        DFG's StrengthReduction phase should not reduce Construct into DirectContruct when the executable does not have constructAbility.
        https://bugs.webkit.org/show_bug.cgi?id=192386
        <rdar://problem/46445516>

        Reviewed by Saam Barati.

        * stress/regress-192386.js: Added.

2018-12-04  Caio Lima  <ticaiolima@gmail.com>

        [ESNext][BigInt] Support logic operations
        https://bugs.webkit.org/show_bug.cgi?id=179903

        Reviewed by Yusuke Suzuki.

        * stress/big-int-branch-usage.js: Added.
        * stress/big-int-logical-and.js: Added.
        * stress/big-int-logical-not.js: Added.
        * stress/big-int-logical-or.js: Added.

2018-12-03  Ryan Haddad  <ryanhaddad@apple.com>

        Unreviewed, rolling out r238833.

        Breaks macOS and iOS debug builds.

        Reverted changeset:

        "[ESNext][BigInt] Support logic operations"
        https://bugs.webkit.org/show_bug.cgi?id=179903
        https://trac.webkit.org/changeset/238833

2018-12-03  Caio Lima  <ticaiolima@gmail.com>

        [ESNext][BigInt] Support logic operations
        https://bugs.webkit.org/show_bug.cgi?id=179903

        Reviewed by Yusuke Suzuki.

        * stress/big-int-branch-usage.js: Added.
        * stress/big-int-logical-and.js: Added.
        * stress/big-int-logical-not.js: Added.
        * stress/big-int-logical-or.js: Added.

2018-12-02  Caio Lima  <ticaiolima@gmail.com>

        [ESNext][BigInt] Implement support for "<<" and ">>"
        https://bugs.webkit.org/show_bug.cgi?id=186233

        Reviewed by Yusuke Suzuki.

        * stress/big-int-left-shift-general.js: Added.
        * stress/big-int-left-shift-range-error.js: Added.
        * stress/big-int-left-shift-type-error.js: Added.
        * stress/big-int-left-shift-wrapped-value.js: Added.
        * stress/big-int-right-shift-general.js: Added.
        * stress/big-int-right-shift-type-error.js: Added.
        * stress/big-int-right-shift-wrapped-value.js: Added.
        * stress/left-shift-to-primitive-precedence.js: Added.
        * stress/right-shift-to-primitive-precedence.js: Added.

2018-11-30  Dean Jackson  <dino@apple.com>

        Add first-class support for .mjs files in jsc binary
        https://bugs.webkit.org/show_bug.cgi?id=192190
        <rdar://problem/46375715>

        Reviewed by Keith Miller.

        * stress/simple-module.mjs: Added.
        * stress/simple-script.js: Added.

2018-11-30  Caio Lima  <ticaiolima@gmail.com>

        [BigInt] Implement ValueBitXor into DFG
        https://bugs.webkit.org/show_bug.cgi?id=190264

        Reviewed by Yusuke Suzuki.

        * stress/big-int-bitwise-xor-jit.js: Added.
        * stress/big-int-bitwise-xor-memory-stress.js: Added.
        * stress/big-int-bitwise-xor-untyped.js: Added.

2018-11-27  Saam barati  <sbarati@apple.com>

        r238510 broke scopes of size zero
        https://bugs.webkit.org/show_bug.cgi?id=192033
        <rdar://problem/46281734>

        Reviewed by Keith Miller.

        * stress/r238510-bad-loop.js: Added.
        (foo):

2018-11-27  Mark Lam  <mark.lam@apple.com>

        [Re-landing] NaNs read from Wasm code needs to be be purified.
        https://bugs.webkit.org/show_bug.cgi?id=191056
        <rdar://problem/45660341>

        Reviewed by Filip Pizlo.

        * wasm/regress/regress-191056.js: Added.

2018-11-27  Ryan Haddad  <ryanhaddad@apple.com>

        Unreviewed, rolling out r238509.

        Causes JSC tests to fail on iOS.

        Reverted changeset:

        "NaNs read from Wasm code needs to be be purified."
        https://bugs.webkit.org/show_bug.cgi?id=191056
        https://trac.webkit.org/changeset/238509

2018-11-26  Caio Lima  <ticaiolima@gmail.com>

        Re-introduce op_bitnot
        https://bugs.webkit.org/show_bug.cgi?id=190923

        Reviewed by Yusuke Suzuki.

        * stress/bit-not-must-generate.js: Added.
        * stress/bitwise-not-no-int32.js: Added.

2018-11-26  Saam barati  <sbarati@apple.com>

        InPlaceAbstractState::endBasicBlock rule for SetLocal should filter the value based on the flush format
        https://bugs.webkit.org/show_bug.cgi?id=191956
        <rdar://problem/45665806>

        Reviewed by Yusuke Suzuki.

        * stress/end-basic-block-set-local-should-filter-type.js: Added.
        (bar):
        (foo):

2018-11-26  Saam barati  <sbarati@apple.com>

        Object allocation sinking phase needs to iterate each scope offset instead of just iterating the symbol table's hashmap when handling an activation
        https://bugs.webkit.org/show_bug.cgi?id=191958
        <rdar://problem/46221877>

        Reviewed by Yusuke Suzuki.

        * stress/object-allocation-sinking-phase-needs-to-write-to-each-scope-offset.js: Added.
        (x):
        (foo):

2018-11-26  Mark Lam  <mark.lam@apple.com>

        NaNs read from Wasm code needs to be be purified.
        https://bugs.webkit.org/show_bug.cgi?id=191056
        <rdar://problem/45660341>

        Reviewed by Filip Pizlo.

        * wasm/regress/regress-191056.js: Added.

2018-11-26  Michael Saboff  <msaboff@apple.com>

        32-bit JSC test failure: stress/regexp-compile-oom.js
        https://bugs.webkit.org/show_bug.cgi?id=191375

        Reviewed by Mark Lam.

        Disabled the test for 32 bit platforms.

        * stress/regexp-compile-oom.js:

2018-11-26  Tadeu Zagallo  <tzagallo@apple.com>

        ASSERTION FAILED: m_outOfLineJumpTargets.contains(bytecodeOffset)
        https://bugs.webkit.org/show_bug.cgi?id=191716
        <rdar://problem/45723878>

        Reviewed by Saam Barati.

        * stress/regress-187373.js: Added.
        (async.fn):

2018-11-21  Saam barati  <sbarati@apple.com>

        DFGSpeculativeJIT should not &= exitOK with mayExit(node)
        https://bugs.webkit.org/show_bug.cgi?id=191897
        <rdar://problem/45871998>

        Reviewed by Mark Lam.

        * stress/exitok-is-not-the-same-as-mayExit.js: Added.
        (bar):
        (foo):

2018-11-21  Saam barati  <sbarati@apple.com>

        Fix assertion in KnownCellUse inside SpeculativeJIT::speculate
        https://bugs.webkit.org/show_bug.cgi?id=191895
        <rdar://problem/46167406>

        Reviewed by Mark Lam.

        * stress/known-cell-use-needs-type-check-assertion.js: Added.
        (foo):
        (bar):

2018-11-21  Mark Lam  <mark.lam@apple.com>

        Creating a wasm memory that is bigger than the ArrayBuffer limit but smaller than the spec limit should throw OOME not RangeError.
        https://bugs.webkit.org/show_bug.cgi?id=191776
        <rdar://problem/46152851>

        Reviewed by Saam Barati.

        * stress/big-wasm-memory-grow-no-max.js:
        * stress/big-wasm-memory-grow.js:
        * stress/big-wasm-memory.js:
        - updated these to expect an OutOfMemoryError.

        * wasm/regress/wasm-memory-requested-more-than-MAX_ARRAY_BUFFER_SIZE-2.js: Added.
        (Binary.prototype.emit_u8):
        (Binary.prototype.emit_u32v):
        (Binary.prototype.emit_header):
        (Binary.prototype.emit_section):
        (Binary):
        (WasmModuleBuilder):
        (WasmModuleBuilder.prototype.addMemory):
        (WasmModuleBuilder.prototype.toArray):
        (WasmModuleBuilder.prototype.toBuffer):
        (WasmModuleBuilder.prototype.instantiate):
        (catch):
        * wasm/regress/wasm-memory-requested-more-than-MAX_ARRAY_BUFFER_SIZE.js: Added.
        (catch):

2018-11-21  Caio Lima  <ticaiolima@gmail.com>

        [BigInt] JSBigInt::createWithLength should throw when length is greater than JSBigInt::maxLength
        https://bugs.webkit.org/show_bug.cgi?id=190836

        Reviewed by Saam Barati and Yusuke Suzuki.

        * stress/big-int-out-of-memory-tests.js: Added.

2018-11-20  Mark Lam  <mark.lam@apple.com>

        Remove invalid assertion in VMTraps::SignalSender's SignalAction.
        https://bugs.webkit.org/show_bug.cgi?id=191856
        <rdar://problem/46089992>

        Reviewed by Yusuke Suzuki.

        * stress/regress-191856.js: Added.
        - this test is skipped for now until we have a fix for webkit.org/b/191855.

2018-11-21  Dominik Infuehr  <dinfuehr@igalia.com>

        Enable JIT on ARM/Linux
        https://bugs.webkit.org/show_bug.cgi?id=191548

        Reviewed by Yusuke Suzuki.

        Disable test on system with limited memory. Program was killed by
        the OS before the exception was thrown.

        * slowMicrobenchmarks/function-constructor-with-huge-strings.js:

2018-11-20  Saam barati  <sbarati@apple.com>

        Merging an IC variant may lead to the IC status containing overlapping structure sets
        https://bugs.webkit.org/show_bug.cgi?id=191869
        <rdar://problem/45403453>

        Reviewed by Mark Lam.

        * stress/merging-ic-variants-should-bail-if-structures-overlap.js: Added.

2018-11-19  Mark Lam  <mark.lam@apple.com>

        globalFuncImportModule() should return a promise when it clears exceptions.
        https://bugs.webkit.org/show_bug.cgi?id=191792
        <rdar://problem/46090763>

        Reviewed by Michael Saboff.

        * stress/global-import-function-should-return-a-promise-when-clearing-exceptions.js: Added.

2018-11-19  Guillaume Emont  <guijemont@igalia.com>

        Skip new memory-hungry tests on memory limited devices

        Unreviewed gardening.

        * stress/big-wasm-memory-grow-no-max.js:
        * stress/big-wasm-memory-grow.js:
        * stress/big-wasm-memory.js:

2018-11-18  Yusuke Suzuki  <yusukesuzuki@slowstart.org>

        Unreviewed, rolling in the rest of r237254
        https://bugs.webkit.org/show_bug.cgi?id=190340

        * ChakraCore/test/Function/FuncBodyES5.baseline-jsc:
        * stress/function-cache-with-parameters-end-position.js: Added.
        (shouldBe):
        (shouldThrow):
        (i.anonymous):
        * stress/function-constructor-name.js: Added.
        (shouldBe):
        (GeneratorFunction):
        (AsyncFunction.async):
        (AsyncGeneratorFunction.async):
        (anonymous):
        (async.anonymous):
        * test262/expectations.yaml:

2018-11-16  Filip Pizlo  <fpizlo@apple.com>

        All users of ArrayBuffer should agree on the same max size
        https://bugs.webkit.org/show_bug.cgi?id=191771

        Reviewed by Mark Lam.

        * stress/big-wasm-memory-grow-no-max.js: Added.
        (foo):
        (catch):
        * stress/big-wasm-memory-grow.js: Added.
        (foo):
        (catch):
        * stress/big-wasm-memory.js: Added.
        (foo):
        (catch):

2018-11-16  Filip Pizlo  <fpizlo@apple.com>

        Unreviewed, make some more tests not crash my computer by only running on instance of it. These tests do not need to
        run for each JSC config since they're regression tests for runtime bugs.

        * stress/json-stringified-overflow-2.js:
        * stress/json-stringified-overflow.js:

2018-11-16  Filip Pizlo  <fpizlo@apple.com>

        Unreviewed, make some tests not crash my computer by only running on instance of it. These tests do not need to run for each JSC
        config since they're regression tests for runtime bugs.

        * stress/large-unshift-splice.js:
        * stress/regress-185888.js:

2018-11-16  Saam Barati  <sbarati@apple.com>

        KnownCellUse should also have SpecCellCheck as its type filter
        https://bugs.webkit.org/show_bug.cgi?id=191729
        <rdar://problem/45872852>

        Reviewed by Filip Pizlo.

        * stress/known-cell-type-check-should-allow-empty-value-to-flow-through.js: Added.
        (C):

2018-11-16  Tadeu Zagallo  <tzagallo@apple.com>

        Fix assertion failure on BytecodeGenerator::recordOpcode
        https://bugs.webkit.org/show_bug.cgi?id=191724
        <rdar://problem/45724395>

        Reviewed by Saam Barati.

        * stress/regress-187373-2.js: Added.
        (foo):

2018-11-15  Mark Lam  <mark.lam@apple.com>

        RegExpObject's collectMatches should not be using JSArray::push to fill in its match results.
        https://bugs.webkit.org/show_bug.cgi?id=191730
        <rdar://problem/46048517>

        Reviewed by Saam Barati.

        * stress/regress-187006.js: Removed.
          - this test is invalid because its sole purpose is to test for the non-spec
            compliant behavior that we just fixed.

        * stress/regress-191730.js: Added.

2018-11-15  Mark Lam  <mark.lam@apple.com>

        RegExp operations should not take fast patch if lastIndex is not numeric.
        https://bugs.webkit.org/show_bug.cgi?id=191731
        <rdar://problem/46017305>

        Reviewed by Saam Barati.

        * stress/regress-191731.js: Added.

2018-11-13  Saam Barati  <sbarati@apple.com>

        TypeProfileLog::processLogEntries should stash away any pending exceptions and re-apply them to the VM
        https://bugs.webkit.org/show_bug.cgi?id=191600

        Reviewed by Mark Lam.

        * stress/type-profiler-log-should-defer-pending-exceptions.js: Added.
        (foo):
        (test):
        (bar):

2018-11-13  Ryan Haddad  <ryanhaddad@apple.com>

        Unreviewed, rolling out r238132.

        The test added with this change is timing out on Debug JSC
        bots.

        Reverted changeset:

        "[BigInt] JSBigInt::createWithLength should throw when length
        is greater than JSBigInt::maxLength"
        https://bugs.webkit.org/show_bug.cgi?id=190836
        https://trac.webkit.org/changeset/238132

2018-11-13  Mark Lam  <mark.lam@apple.com>

        Add OOM detection to StringPrototype's substituteBackreferences().
        https://bugs.webkit.org/show_bug.cgi?id=191563
        <rdar://problem/45720428>

        Reviewed by Saam Barati.

        * stress/regress-191563.js: Added.

2018-11-13  Mark Lam  <mark.lam@apple.com>

        LLIntSlowPath's llint_loop_osr and llint_replace should set the topCallFrame.
        https://bugs.webkit.org/show_bug.cgi?id=191579
        <rdar://problem/45942472>

        Reviewed by Saam Barati.

        * stress/regress-191579.js: Added.

2018-11-13  Caio Lima  <ticaiolima@gmail.com>

        [BigInt] JSBigInt::createWithLength should throw when length is greater than JSBigInt::maxLength
        https://bugs.webkit.org/show_bug.cgi?id=190836

        Reviewed by Saam Barati.

        * stress/big-int-out-of-memory-tests.js: Added.

2018-11-08  Ross Kirsling  <ross.kirsling@sony.com>

        U+180E is no longer a whitespace character
        https://bugs.webkit.org/show_bug.cgi?id=191415

        Reviewed by Saam Barati.

        * ChakraCore/test/es5/regexSpace.baseline:
        * ChakraCore/test/es6/unicode_whitespace.js:
        Update tests to latest version.
        (See https://github.com/Microsoft/ChakraCore/commit/7c097b698de1e400286f9b957597b2a81fc6f80b.)

        * test262.yaml:
        * test262/config.yaml:
        * test262/expectations.yaml:
        Update expectations.

2018-11-07  Caio Lima  <ticaiolima@gmail.com>

        [BigInt] Add support to BigInt into ValueAdd
        https://bugs.webkit.org/show_bug.cgi?id=186177

        Reviewed by Keith Miller.

        * stress/big-int-negate-jit.js:
        * stress/value-add-big-int-and-string.js: Added.
        * stress/value-add-big-int-prediction-propagation.js: Added.
        * stress/value-add-big-int-untyped.js: Added.

2018-11-07  Tadeu Zagallo  <tzagallo@apple.com>

        REGRESSION(r237547): Test failures on 32-bit JSC since the JIT was disabled
        https://bugs.webkit.org/show_bug.cgi?id=191184

        Reviewed by Saam Barati.

        Most tests were failing due to timeouts, since they are too slow to
        run on CLoop. The exceptions are:

        proxy-get-set-correct-receiver.js: Had to reduce the recursion depth not to overflow on CLoop
        dont-crash-on-stack-overflow-when-parsing-builtin.js and
        dont-crash-on-stack-overflow-when-parsing-default-constructor.js: had
        to change the stack size since CLoop requires it to be page aligned.

        * microbenchmarks/array-push-1.js:
        * microbenchmarks/array-push-2.js:
        * microbenchmarks/elidable-new-object-dag.js:
        * microbenchmarks/elidable-new-object-roflcopter.js:
        * microbenchmarks/elidable-new-object-tree.js:
        * microbenchmarks/getter-richards.js:
        * microbenchmarks/sinkable-new-object-dag.js:
        * microbenchmarks/string-concat-long-convert.js:
        * microbenchmarks/typed-array-get-set-by-val-profiling.js:
        * slowMicrobenchmarks/array-push-3.js:
        * slowMicrobenchmarks/large-map-iteration-with-additions.js:
        * slowMicrobenchmarks/spread-small-array.js:
        * slowMicrobenchmarks/undefined-property-access.js:
        * stress/activation-sink-default-value-tdz-error.js:
        * stress/activation-sink-default-value.js:
        * stress/activation-sink-osrexit-default-value-tdz-error.js:
        * stress/activation-sink-osrexit-default-value.js:
        * stress/activation-sink-osrexit.js:
        * stress/activation-sink.js:
        * stress/allow-math-ic-b3-code-duplication.js:
        * stress/array-push-multiple-int32.js:
        * stress/arrowfunction-activation-sink-osrexit-default-value-tdz-error.js:
        * stress/arrowfunction-lexical-this-activation-sink-osrexit.js:
        * stress/arrowfunction-lexical-this-activation-sink.js:
        * stress/dont-crash-on-stack-overflow-when-parsing-builtin.js:
        * stress/dont-crash-on-stack-overflow-when-parsing-default-constructor.js:
        * stress/elide-new-object-dag-then-exit.js:
        * stress/materialize-regexp-cyclic.js:
        * stress/new-regex-inline.js:
        * stress/op_add.js:
        * stress/op_bitand.js:
        * stress/op_bitor.js:
        * stress/op_bitxor.js:
        * stress/op_div-ConstVar.js:
        * stress/op_div-VarConst.js:
        * stress/op_div-VarVar.js:
        * stress/op_lshift-ConstVar.js:
        * stress/op_lshift-VarConst.js:
        * stress/op_lshift-VarVar.js:
        * stress/op_mod-ConstVar.js:
        * stress/op_mod-VarConst.js:
        * stress/op_mod-VarVar.js:
        * stress/op_mul-ConstVar.js:
        * stress/op_mul-VarConst.js:
        * stress/op_mul-VarVar.js:
        * stress/op_rshift-ConstVar.js:
        * stress/op_rshift-VarConst.js:
        * stress/op_rshift-VarVar.js:
        * stress/op_sub-ConstVar.js:
        * stress/op_sub-VarConst.js:
        * stress/op_sub-VarVar.js:
        * stress/op_urshift-ConstVar.js:
        * stress/op_urshift-VarConst.js:
        * stress/op_urshift-VarVar.js:
        * stress/proxy-get-set-correct-receiver.js:
        * stress/regress-179562.js:
        * stress/rest-parameter-many-arguments.js:
        * stress/sampling-profiler-richards.js:
        * stress/splay-flash-access-1ms.js:
        * stress/tailCallForwardArguments.js:
        * stress/typed-array-get-by-val-profiling.js:
        * typeProfiler/getter-richards.js:

2018-11-06  Michael Saboff  <msaboff@apple.com>

        Multiple stress/regexp-compile-oom.js tests are failing on High Sierra Debug and Release JSC testers.
        https://bugs.webkit.org/show_bug.cgi?id=191271

        Reviewed by Saam Barati.

        Added more test cases and made all test cases run with the same deeply recursive stack
        instead of finding that same point for each test case.

        * stress/regexp-compile-oom.js:
        (prototype.runTest):
        (recurseAndTest):
        (testList.push.new.TestAndExpectedException):

2018-11-05  Michael Saboff  <msaboff@apple.com>

        Unreviewed build fix for linux.

        * stress/regexp-compile-oom.js: Disabled for non-darwin OSes.

2018-11-02  Michael Saboff  <msaboff@apple.com>

        Rolling in r237753 with unreviewed build fix.

        Fixed issues with DECLARE_THROW_SCOPE placement.

2018-11-02  Ryan Haddad  <ryanhaddad@apple.com>

        Unreviewed, rolling out r237753.

        Introduced JSC test failures

        Reverted changeset:

        "Running out of stack space not properly handled in
        RegExp::compile() and its callers"
        https://bugs.webkit.org/show_bug.cgi?id=191206
        https://trac.webkit.org/changeset/237753

2018-11-02  Michael Saboff  <msaboff@apple.com>

        Running out of stack space not properly handled in RegExp::compile() and its callers
        https://bugs.webkit.org/show_bug.cgi?id=191206

        Reviewed by Filip Pizlo.

        New regression test.

        * stress/regexp-compile-oom.js: Added.
        (recurseAndTest):

2018-11-01  Guillaume Emont  <guijemont@igalia.com>

        Skip tests on arm/mips that time out now we're running on CLoop

        Unreviewed gardening.

        Since the JIT is temporarily disabled on 32-bit platforms, these tests
        time out on the bots and need to be disabled. There's more tests
        disabled on arm because the timeout is longer on the mips bot (as the
        device is slower to start with), so many of the tests don't time out
        there.

        * microbenchmarks/getter-richards.js: disable on arm and mips.
        * stress/op_add.js: disable on arm.
        * stress/op_bitand.js: disable on arm.
        * stress/op_bitor.js: disable on arm.
        * stress/op_bitxor.js: disable on arm.
        * stress/op_lshift-ConstVar.js: disable on arm.
        * stress/op_lshift-VarConst.js: disable on arm.
        * stress/op_lshift-VarVar.js: disable on arm.
        * stress/op_mod-ConstVar.js: disable on arm.
        * stress/op_mod-VarConst.js: disable on arm.
        * stress/op_mod-VarVar.js: disable on arm.
        * stress/op_mul-ConstVar.js: disable on arm.
        * stress/op_mul-VarConst.js: disable on arm.
        * stress/op_mul-VarVar.js: disable on arm.
        * stress/op_rshift-ConstVar.js: disable on arm.
        * stress/op_rshift-VarConst.js: disable on arm.
        * stress/op_rshift-VarVar.js: disable on arm.
        * stress/op_sub-ConstVar.js: disable on arm.
        * stress/op_sub-VarConst.js: disable on arm.
        * stress/op_sub-VarVar.js: disable on arm.
        * stress/op_urshift-ConstVar.js: disable on arm.
        * stress/op_urshift-VarConst.js: disable on arm.
        * stress/op_urshift-VarVar.js: disable on arm.
        * stress/spread-forward-call-varargs-stack-overflow.js: disable on arm.
        * stress/value-to-boolean.js: disable on arm and mips.

2018-10-31  Tadeu Zagallo  <tzagallo@apple.com>

        REGRESSION(r237547): Exception handlers should be aware of wide opcodes
        https://bugs.webkit.org/show_bug.cgi?id=191108
        <rdar://problem/45690700>

        Reviewed by Saam Barati.

        * stress/wide-op_catch.js: Added.
        (catch):

2018-10-29  Mark Lam  <mark.lam@apple.com>

        Correctly detect string overflow when using the 'Function' constructor.
        https://bugs.webkit.org/show_bug.cgi?id=184883
        <rdar://problem/36320331>

        Reviewed by Saam Barati.

        I've verified that this passes on 32-bit as well.

        * slowMicrobenchmarks/function-constructor-with-huge-strings.js: Added.

2018-10-29  Tadeu Zagallo  <tzagallo@apple.com>

        Add support for GetStack FlushedDouble
        https://bugs.webkit.org/show_bug.cgi?id=191012
        <rdar://problem/45265141>

        Reviewed by Saam Barati.

        * stress/get-stack-double.js: Added.
        (bar):
        (noInline):

2018-10-29  Tadeu Zagallo  <tzagallo@apple.com>

        New bytecode format for JSC
        https://bugs.webkit.org/show_bug.cgi?id=187373
        <rdar://problem/44186758>

        Reviewed by Filip Pizlo.

        Add tests to ensure that the inferred inline capacity for a narrow op_new_object will be capped at 255.

        * stress/maximum-inline-capacity.js: Added.
        (test1):
        (test3.Foo):
        (test3):

2018-10-26  Commit Queue  <commit-queue@webkit.org>

        Unreviewed, rolling out r237479 and r237484.
        https://bugs.webkit.org/show_bug.cgi?id=190978

        broke JSC on iOS (Requested by tadeuzagallo on #webkit).

        Reverted changesets:

        "New bytecode format for JSC"
        https://bugs.webkit.org/show_bug.cgi?id=187373
        https://trac.webkit.org/changeset/237479

        "Gardening: Build fix after r237479."
        https://bugs.webkit.org/show_bug.cgi?id=187373
        https://trac.webkit.org/changeset/237484

2018-10-26  Tadeu Zagallo  <tzagallo@apple.com>

        New bytecode format for JSC
        https://bugs.webkit.org/show_bug.cgi?id=187373
        <rdar://problem/44186758>

        Reviewed by Filip Pizlo.

        Add tests to ensure that the inferred inline capacity for a narrow op_new_object will be capped at 255.

        * stress/maximum-inline-capacity.js: Added.
        (test1):
        (test3.Foo):
        (test3):

2018-10-26  Mark Lam  <mark.lam@apple.com>

        Fix missing edge cases with JSGlobalObjects having a bad time.
        https://bugs.webkit.org/show_bug.cgi?id=189028
        <rdar://problem/45204939>

        Reviewed by Saam Barati.

        * stress/regress-189028.js: Added.

2018-10-22  Mark Lam  <mark.lam@apple.com>

        DFGAbstractValue::m_arrayModes expects IndexingMode values, not IndexingType.
        https://bugs.webkit.org/show_bug.cgi?id=190515
        <rdar://problem/45222379>

        Rubber-stamped by Saam Barati.

        Adding another test.

        * stress/regress-190515-2.js: Added.

2018-10-22  Mark Lam  <mark.lam@apple.com>

        DFGAbstractValue::m_arrayModes expects IndexingMode values, not IndexingType.
        https://bugs.webkit.org/show_bug.cgi?id=190515
        <rdar://problem/45222379>

        Reviewed by Saam Barati.

        * stress/regress-190515.js: Added.

2018-10-19  Commit Queue  <commit-queue@webkit.org>

        Unreviewed, rolling out r237254.
        https://bugs.webkit.org/show_bug.cgi?id=190760

        "It regresses JetStream 2 by 5% on some iOS devices"
        (Requested by saamyjoon on #webkit).

        Reverted changeset:

        "[JSC] JSC should have "parseFunction" to optimize Function
        constructor"
        https://bugs.webkit.org/show_bug.cgi?id=190340
        https://trac.webkit.org/changeset/237254

2018-10-19  Saam Barati  <sbarati@apple.com>

        vmCall should check if we exit before emitting an OSR exit due to exceptions
        https://bugs.webkit.org/show_bug.cgi?id=190740
        <rdar://problem/45220139>

        Reviewed by Mark Lam.

        * stress/dont-emit-osr-exits-for-every-call-ftl.js: Added.
        (foo):

2018-10-19  Caio Lima  <ticaiolima@gmail.com>

        [ESNext][BigInt] Implement support for "^"
        https://bugs.webkit.org/show_bug.cgi?id=186235

        Reviewed by Yusuke Suzuki.

        * stress/big-int-bitwise-xor-general.js: Added.
        * stress/big-int-bitwise-xor-to-primitive-precedence.js: Added.
        * stress/big-int-bitwise-xor-type-error.js: Added.
        * stress/big-int-bitwise-xor-wrapped-value.js: Added.

2018-10-19  Caio Lima  <ticaiolima@gmail.com>

        [BigInt] Add ValueSub into DFG
        https://bugs.webkit.org/show_bug.cgi?id=186176

        Reviewed by Yusuke Suzuki.

        * stress/big-int-subtraction-jit.js:
        * stress/value-sub-big-int-prediction-propagation.js: Added.
        * stress/value-sub-big-int-untyped.js: Added.
        * stress/value-sub-spec-none-case.js: Added.

2018-10-18  Yusuke Suzuki  <yusukesuzuki@slowstart.org>

        [JSC] JSC should have "parseFunction" to optimize Function constructor
        https://bugs.webkit.org/show_bug.cgi?id=190340

        Reviewed by Mark Lam.

        This patch fixes the line number of syntax errors raised by the Function constructor,
        since we now parse the final code only once. And we no longer use block statement
        for Function constructor's parsing.

        * ChakraCore/test/Function/FuncBodyES5.baseline-jsc:
        * stress/function-cache-with-parameters-end-position.js: Added.
        (shouldBe):
        (shouldThrow):
        (i.anonymous):
        * stress/function-constructor-name.js: Added.
        (shouldBe):
        (GeneratorFunction):
        (AsyncFunction.async):
        (AsyncGeneratorFunction.async):
        (anonymous):
        (async.anonymous):
        * test262/expectations.yaml:

2018-10-18  Commit Queue  <commit-queue@webkit.org>

        Unreviewed, rolling out r237242.
        https://bugs.webkit.org/show_bug.cgi?id=190701

        it breaks "stress/sampling-profiler-basic.js" (Requested by
        caiolima on #webkit).

        Reverted changeset:

        "[BigInt] Add ValueSub into DFG"
        https://bugs.webkit.org/show_bug.cgi?id=186176
        https://trac.webkit.org/changeset/237242

2018-10-17  Keith Miller  <keith_miller@apple.com>

        AI does not clear Phantom allocation nodes.
        https://bugs.webkit.org/show_bug.cgi?id=190694

        Reviewed by Saam Barati.

        * stress/ftl-ai-filter-phantoms-should-clear-clear-value.js: Added.
        (Day):
        (DaysInYear):
        (TimeInYear):
        (TimeFromYear):
        (DayFromYear):
        (InLeapYear):
        (YearFromTime):
        (WeekDay):
        (DaylightSavingTA):
        (GetSecondSundayInMarch):
        (TimeInMonth):

2018-10-17  Caio Lima  <ticaiolima@gmail.com>

        [BigInt] Add ValueSub into DFG
        https://bugs.webkit.org/show_bug.cgi?id=186176

        Reviewed by Yusuke Suzuki.

        * stress/big-int-subtraction-jit.js:
        * stress/value-sub-big-int-prediction-propagation.js: Added.
        * stress/value-sub-big-int-untyped.js: Added.

2018-10-16  Dominik Infuehr  <dinfuehr@igalia.com>

        [JSC] stress/array-prototype-concat-of-long-spliced-arrays2.js times out on arm and mips
        https://bugs.webkit.org/show_bug.cgi?id=190611

        Reviewed by Saam Barati.

        Reduce array length just like in array-prototype-concat-of-long-spliced-arrays.js
        to improve test runtime. On ARM/MIPS this test even timed out when running all
        tests.

        * stress/array-prototype-concat-of-long-spliced-arrays2.js:
        (test):

2018-10-15  Guillaume Emont  <guijemont@igalia.com>

        Skip stress/array-prototype-concat-of-long-spliced-arrays2.js on arm and mips/linux

        Unreviewed gardening.

        * stress/array-prototype-concat-of-long-spliced-arrays2.js:

2018-10-15  Saam barati  <sbarati@apple.com>

        Emit fjcvtzs on ARM64E on Darwin
        https://bugs.webkit.org/show_bug.cgi?id=184023

        Reviewed by Yusuke Suzuki and Filip Pizlo.

        * stress/double-to-int32-NaN.js: Added.
        (assert):
        (foo):

2018-10-15  Saam Barati  <sbarati@apple.com>

        JSArray::shiftCountWithArrayStorage is wrong when an array has holes
        https://bugs.webkit.org/show_bug.cgi?id=190262
        <rdar://problem/44986241>

        Reviewed by Mark Lam.

        * stress/array-prototype-concat-of-long-spliced-arrays.js:
        (test):
        * stress/slice-array-storage-with-holes.js: Added.
        (main):

2018-10-15  Commit Queue  <commit-queue@webkit.org>

        Unreviewed, rolling out r237054.
        https://bugs.webkit.org/show_bug.cgi?id=190593

        "this regressed JetStream 2 by 6% on iOS" (Requested by
        saamyjoon on #webkit).

        Reverted changeset:

        "[JSC] JSC should have "parseFunction" to optimize Function
        constructor"
        https://bugs.webkit.org/show_bug.cgi?id=190340
        https://trac.webkit.org/changeset/237054

2018-10-13  Yusuke Suzuki  <yusukesuzuki@slowstart.org>

        [JSC] JSON.stringify can accept call-with-no-arguments
        https://bugs.webkit.org/show_bug.cgi?id=190343

        Reviewed by Mark Lam.

        * stress/json-stringify-no-arguments.js: Added.
        (shouldBe):

2018-10-08  Yusuke Suzuki  <yusukesuzuki@slowstart.org>

        [JSC] JSC should have "parseFunction" to optimize Function constructor
        https://bugs.webkit.org/show_bug.cgi?id=190340

        Reviewed by Mark Lam.

        This patch fixes the line number of syntax errors raised by the Function constructor,
        since we now parse the final code only once. And we no longer use block statement
        for Function constructor's parsing.

        * ChakraCore/test/Function/FuncBodyES5.baseline-jsc:
        * stress/function-cache-with-parameters-end-position.js: Added.
        (shouldBe):
        (shouldThrow):
        (i.anonymous):
        * stress/function-constructor-name.js: Added.
        (shouldBe):
        (GeneratorFunction):
        (AsyncFunction.async):
        (AsyncGeneratorFunction.async):
        (anonymous):
        (async.anonymous):
        * test262/expectations.yaml:

2018-10-10  Guillaume Emont  <guijemont@igalia.com>

        Skip JSC test stress/sampling-profiler-richards.js on armv7/linux
        https://bugs.webkit.org/show_bug.cgi?id=190426

        Unreviewed gardening.

        * stress/sampling-profiler-richards.js:

2018-10-06  Caio Lima  <ticaiolima@gmail.com>

        [ESNext][BigInt] Implement support for "|"
        https://bugs.webkit.org/show_bug.cgi?id=186229

        Reviewed by Yusuke Suzuki.

        * stress/big-int-bitwise-and-jit.js:
        * stress/big-int-bitwise-or-general.js: Added.
        * stress/big-int-bitwise-or-jit-untyped.js: Added.
        * stress/big-int-bitwise-or-jit.js: Added.
        * stress/big-int-bitwise-or-memory-stress.js: Added.
        * stress/big-int-bitwise-or-to-primitive-precedence.js: Added.
        * stress/big-int-bitwise-or-type-error.js: Added.
        * stress/big-int-bitwise-or-wrapped-value.js: Added.

2018-10-05  Dominik Infuehr  <dominik.infuehr@gmail.com>

        Skip test on systems with limited memory
        https://bugs.webkit.org/show_bug.cgi?id=190310

        Invoking runDefault adds test to runlist, skipping the test in the next
        line does not prevent the test from executing. Change order of lines such
        that runDefault is only executed if test is not executed.

        Reviewed by Mark Lam.

        * stress/regress-190187.js:

2018-10-03  Saam barati  <sbarati@apple.com>

        lowXYZ in FTLLower should always filter the type of the incoming edge
        https://bugs.webkit.org/show_bug.cgi?id=189939
        <rdar://problem/44407030>

        Reviewed by Michael Saboff.

        * stress/ftl-should-always-filter-for-low-type-check-functions.js: Added.
        (foo):
        (test):

2018-10-03  Mark Lam  <mark.lam@apple.com>

        Make string MaxLength for all WTF and JS strings consistently equal to INT_MAX.
        https://bugs.webkit.org/show_bug.cgi?id=190187
        <rdar://problem/42512909>

        Reviewed by Michael Saboff.

        * stress/regress-190187.js: Added.

2018-10-02  Caio Lima  <ticaiolima@gmail.com>

        [BigInt] BigInt.proptotype.toString is broken when radix is power of 2
        https://bugs.webkit.org/show_bug.cgi?id=190033

        Reviewed by Yusuke Suzuki.

        * stress/big-int-to-string.js:

2018-10-01  Mark Lam  <mark.lam@apple.com>

        Function.toString() should also copy the source code Functions that are class definitions.
        https://bugs.webkit.org/show_bug.cgi?id=190186
        <rdar://problem/44733360>

        Reviewed by Saam Barati.

        * stress/regress-190186.js: Added.

2018-10-01  Dominik Infuehr  <dinfuehr@igalia.com>

        Split NaN-check into separate test
        https://bugs.webkit.org/show_bug.cgi?id=190010

        Reviewed by Saam Barati.

        DataView exposes NaN-representation, which is not necessarily the same on each
        architecture. Therefore move the check of the NaN-representation into its own
        file such that we can disable this test on MIPS where NaN-representation can be
        different on older CPUs.

        * stress/dataview-jit-set-nan.js: Added.
        (assert):
        (test.storeLittleEndian):
        (test.storeBigEndian):
        (test.store):
        (test):
        * stress/dataview-jit-set.js:
        (test5):

2018-10-01  Commit Queue  <commit-queue@webkit.org>

        Unreviewed, rolling out r236647.
        https://bugs.webkit.org/show_bug.cgi?id=190124

        Breaking test stress/big-int-to-string.js (Requested by
        caiolima_ on #webkit).

        Reverted changeset:

        "[BigInt] BigInt.proptotype.toString is broken when radix is
        power of 2"
        https://bugs.webkit.org/show_bug.cgi?id=190033
        https://trac.webkit.org/changeset/236647

2018-09-30  Caio Lima  <ticaiolima@gmail.com>

        [BigInt] BigInt.proptotype.toString is broken when radix is power of 2
        https://bugs.webkit.org/show_bug.cgi?id=190033

        Reviewed by Yusuke Suzuki.

        * stress/big-int-to-string.js:

2018-09-28  Caio Lima  <ticaiolima@gmail.com>

        [ESNext][BigInt] Implement support for "&"
        https://bugs.webkit.org/show_bug.cgi?id=186228

        Reviewed by Yusuke Suzuki.

        * stress/big-int-bitwise-and-general.js: Added.
        (assert):
        (assert.sameValue):
        * stress/big-int-bitwise-and-jit.js: Added.
        (let.assert.sameValue):
        (bigIntBitAnd):
        * stress/big-int-bitwise-and-memory-stress.js: Added.
        (assert):
        * stress/big-int-bitwise-and-to-primitive-precedence.js: Added.
        (assert.sameValue):
        (let.o.Symbol.toPrimitive):
        (catch):
        * stress/big-int-bitwise-and-type-error.js: Added.
        (assert):
        (assertThrowTypeError):
        (let.o.valueOf):
        (o.valueOf):
        (o.toString):
        (o.Symbol.toPrimitive):
        * stress/big-int-bitwise-and-wrapped-value.js: Added.
        (assert.sameValue):
        (testBitAnd):
        (let.o.Symbol.toPrimitive):
        (o.valueOf):
        (o.toString):

2018-09-28  Ross Kirsling  <ross.kirsling@sony.com>

        JSC test stress/jsc-read.js doesn't support CRLF
        https://bugs.webkit.org/show_bug.cgi?id=190063

        Reviewed by Yusuke Suzuki.

        In order to run this test via Windows command prompt, we can't assume that the final newline will be LF.

        * stress/jsc-read.js:
        (test):

2018-09-27  Saam barati  <sbarati@apple.com>

        Verify the contents of AssemblerBuffer on arm64e
        https://bugs.webkit.org/show_bug.cgi?id=190057
        <rdar://problem/38916630>

        Reviewed by Mark Lam.

        * stress/regress-189132.js:

2018-09-27  Dominik Infuehr  <dinfuehr@igalia.com>

        Disable test without LLInt on ARMv7
        https://bugs.webkit.org/show_bug.cgi?id=190037

        Reviewed by Mark Lam.

        Test runs out of executable memory on ARMv7, do not run
        this test without LLInt enabled.

        * stress/regress-169445.js:

2018-09-26  Keith Miller  <keith_miller@apple.com>

        We should zero unused property storage when rebalancing array storage.
        https://bugs.webkit.org/show_bug.cgi?id=188151

        Reviewed by Michael Saboff.

        * stress/splice-should-zero-property-storage-when-rebalancing.js: Added.

2018-09-20  Yusuke Suzuki  <yusukesuzuki@slowstart.org>

        [JSC] Optimize Array#lastIndexOf
        https://bugs.webkit.org/show_bug.cgi?id=189780

        Reviewed by Saam Barati.

        * stress/array-lastindexof-array-prototype-trap.js: Added.
        (shouldBe):
        (AncestorArray.prototype.get 2):
        (AncestorArray):
        * stress/array-lastindexof-have-a-bad-time-c-runtime.js: Added.
        (shouldBe):
        * stress/array-lastindexof-hole-nan.js: Added.
        (shouldBe):
        (throw.new.Error):
        * stress/array-lastindexof-infinity.js: Added.
        (shouldBe):
        (throw.new.Error):
        * stress/array-lastindexof-negative-zero.js: Added.
        (shouldBe):
        (throw.new.Error):
        * stress/array-lastindexof-own-getter.js: Added.
        (shouldBe):
        (throw.new.Error.get array):
        (get array):
        * stress/array-lastindexof-prototype-trap.js: Added.
        (shouldBe):
        (DerivedArray.prototype.get 2):
        (DerivedArray):

2018-09-25  Saam Barati  <sbarati@apple.com>

        Calls to baselineCodeBlockForOriginAndBaselineCodeBlock in operationMaterializeObjectInOSR should actually pass in the baseline CodeBlock
        https://bugs.webkit.org/show_bug.cgi?id=189940
        <rdar://problem/43640987>

        Reviewed by Mark Lam.

        * stress/use-baseline-codeblock-materialize-osr-exit.js: Added.

2018-09-24  Saam Barati  <sbarati@apple.com>

        Array.prototype.indexOf fast path needs to ensure the length is still valid after performing effects
        https://bugs.webkit.org/show_bug.cgi?id=189922
        <rdar://problem/44651275>

        Reviewed by Mark Lam.

        * stress/array-indexof-fast-path-effects.js: Added.
        * stress/array-indexof-cached-length.js: Added.

2018-09-24  Saam barati  <sbarati@apple.com>

        ArgumentsEliminationPhase should snip basic blocks after proven OSR exits
        https://bugs.webkit.org/show_bug.cgi?id=189682
        <rdar://problem/43557315>

        Reviewed by Mark Lam.

        * stress/arguments-elimination-will-generate-edge-without-result.js: Added.
        (foo):

2018-09-22  Saam barati  <sbarati@apple.com>

        The sampling should not use Strong<CodeBlock> in its machineLocation field
        https://bugs.webkit.org/show_bug.cgi?id=189319

        Reviewed by Filip Pizlo.

        * stress/sampling-profiler-richards.js: Added.

2018-09-19  Yusuke Suzuki  <yusukesuzuki@slowstart.org>

        [JSC] Optimize Array#indexOf in C++ runtime
        https://bugs.webkit.org/show_bug.cgi?id=189507

        Reviewed by Saam Barati.

        * stress/array-indexof-array-prototype-trap.js: Added.
        (shouldBe):
        (AncestorArray.prototype.get 2):
        (AncestorArray):
        * stress/array-indexof-have-a-bad-time-c-runtime.js: Added.
        (shouldBe):
        * stress/array-indexof-hole-nan.js: Added.
        (shouldBe):
        (throw.new.Error):
        * stress/array-indexof-infinity.js: Added.
        (shouldBe):
        (throw.new.Error):
        * stress/array-indexof-negative-zero.js: Added.
        (shouldBe):
        (throw.new.Error):
        * stress/array-indexof-own-getter.js: Added.
        (shouldBe):
        (throw.new.Error.get array):
        (get array):
        * stress/array-indexof-prototype-trap.js: Added.
        (shouldBe):
        (DerivedArray.prototype.get 2):
        (DerivedArray):

2018-09-19  Saam barati  <sbarati@apple.com>

        AI rule for MultiPutByOffset executes its effects in the wrong order
        https://bugs.webkit.org/show_bug.cgi?id=189757
        <rdar://problem/43535257>

        Reviewed by Michael Saboff.

        * stress/multi-put-by-offset-must-filter-value-before-filtering-base.js: Added.
        (foo):
        (Foo):
        (g):

2018-09-17  Mark Lam  <mark.lam@apple.com>

        Ensure that ForInContexts are invalidated if their loop local is over-written.
        https://bugs.webkit.org/show_bug.cgi?id=189571
        <rdar://problem/44402277>

        Reviewed by Saam Barati.

        * stress/regress-189571.js: Added.

2018-09-17  Saam barati  <sbarati@apple.com>

        We must convert ProfileType to CheckStructureOrEmpty instead of CheckStructure
        https://bugs.webkit.org/show_bug.cgi?id=189676
        <rdar://problem/39682897>

        Reviewed by Michael Saboff.

        * typeProfiler/check-structure-or-empty-in-fixup.js: Added.
        (A):
        (K):
        (i.catch):

2018-09-14  Saam barati  <sbarati@apple.com>

        Don't dump OSRAvailabilityData in Graph::dump because a stale Availability may point to a Node that is already freed
        https://bugs.webkit.org/show_bug.cgi?id=189628
        <rdar://problem/39481690>

        Reviewed by Mark Lam.

        * stress/verbose-failure-dont-graph-dump-availability-already-freed.js: Added.
        (foo):

2018-09-11  Mark Lam  <mark.lam@apple.com>

        Test for array initialization in arrayProtoFuncSplice.
        https://bugs.webkit.org/show_bug.cgi?id=170253
        <rdar://problem/31328773>

        Rubber-stamped by Saam Barati.

        * stress/regress-170253.js: Added.

2018-09-11  Mark Lam  <mark.lam@apple.com>

        Test for IntlObject initialization.
        https://bugs.webkit.org/show_bug.cgi?id=170251
        <rdar://problem/31328419>

        Rubber-stamped by Saam Barati.

        * stress/regress-170251.js: Added.

2018-09-11  Mark Lam  <mark.lam@apple.com>

        Test for array memcpy'ing when JSGlobalObject::haveABadTime.
        https://bugs.webkit.org/show_bug.cgi?id=169889
        <rdar://problem/31155607>

        Reviewed by Saam Barati.

        * stress/regress-169889-array-concat.js: Added.
        * stress/regress-169889-array-concat1.js: Added.
        * stress/regress-169889-array-slice.js: Added.

2018-09-11  Mark Lam  <mark.lam@apple.com>

        Test for incorrect check in emitPutDerivedConstructorToArrowFunctionContextScope.
        https://bugs.webkit.org/show_bug.cgi?id=169445
        <rdar://problem/30957435>

        Reviewed by Saam Barati.

        * stress/regress-169445.js: Added.
        (let.gun.eval.A):
        (let.gun.eval.B.C):
        (let.gun.eval.B.C.prototype.trigger):
        (let.gun.eval.B.C.prototype.triggerWithRestParameters):
        (let.gun.eval.B):
        (let.gun.eval):

== Rolled over to ChangeLog-2018-09-11 ==
