/* Lovingly generated by gen-spec-js.py based on the wonderful content of *
 * https://github.com/WebAssembly/spec/blob/master/interpreter/host/js.ml */
'use strict';

let soft_validate = true;

let spectest = {
  print: print || ((...xs) => console.log(...xs)),
  global: 666,
  table: new WebAssembly.Table({initial: 10, maximum: 20, element: 'anyfunc'}),
  memory: new WebAssembly.Memory({initial: 1, maximum: 2}),};

let registry = {spectest};
let $$;

function register(name, instance) {
  registry[name] = instance.exports;
}

function module(bytes) {
  let buffer = new ArrayBuffer(bytes.length);
  let view = new Uint8Array(buffer);
  for (let i = 0; i < bytes.length; ++i) {
    view[i] = bytes.charCodeAt(i);
  }
  return new WebAssembly.Module(buffer);
}

function instance(bytes, imports = registry) {
  return new WebAssembly.Instance(module(bytes), imports);
}

function assert_malformed(bytes) {
  try { module(bytes) } catch (e) {
    if (e instanceof WebAssembly.CompileError) return;
  }
  throw new Error("Wasm decoding failure expected");
}

function assert_invalid(bytes) {
  try { module(bytes) } catch (e) {
    if (e instanceof WebAssembly.CompileError) return;
  }
  throw new Error("Wasm validation failure expected");
}

function assert_soft_invalid(bytes) {
  try { module(bytes) } catch (e) {
    if (e instanceof WebAssembly.CompileError) return;
    throw new Error("Wasm validation failure expected");
  }
  if (soft_validate)
    throw new Error("Wasm validation failure expected");
}

function assert_unlinkable(bytes) {
  let mod = module(bytes);
  try { new WebAssembly.Instance(mod, registry) } catch (e) {
    if (e instanceof TypeError) return;
  }
  throw new Error("Wasm linking failure expected");
}

function assert_uninstantiable(bytes) {
  let mod = module(bytes);
  try { new WebAssembly.Instance(mod, registry) } catch (e) {
    if (e instanceof WebAssembly.RuntimeError) return;
  }
  throw new Error("Wasm trap expected");
}

function assert_trap(action) {
  try { action() } catch (e) {
    if (e instanceof WebAssembly.RuntimeError) return;
  }
  throw new Error("Wasm trap expected");
}

function assert_return(action, expected) {
  let actual = action();
  if (!Object.is(actual, expected)) {
    throw new Error("Wasm return value " + expected + " expected, got " + actual);
  };
}

function assert_return_nan(action) {
  let actual = action();
  if (!Number.isNaN(actual)) {
    throw new Error("Wasm return value NaN expected, got " + actual);
  };
}

let f32 = Math.fround;

$$ = instance("\x00\x61\x73\x6d\x0d\x00\x00\x00\x01\x25\x06\x60\x03\x7f\x7f\x7f\x01\x7f\x60\x03\x7e\x7e\x7f\x01\x7e\x60\x03\x7d\x7d\x7f\x01\x7d\x60\x03\x7c\x7c\x7f\x01\x7c\x60\x01\x7f\x01\x7f\x60\x00\x00\x03\x1a\x19\x00\x01\x02\x03\x04\x04\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x07\xaf\x02\x19\x0a\x73\x65\x6c\x65\x63\x74\x5f\x69\x33\x32\x00\x00\x0a\x73\x65\x6c\x65\x63\x74\x5f\x69\x36\x34\x00\x01\x0a\x73\x65\x6c\x65\x63\x74\x5f\x66\x33\x32\x00\x02\x0a\x73\x65\x6c\x65\x63\x74\x5f\x66\x36\x34\x00\x03\x0d\x73\x65\x6c\x65\x63\x74\x5f\x74\x72\x61\x70\x5f\x6c\x00\x04\x0d\x73\x65\x6c\x65\x63\x74\x5f\x74\x72\x61\x70\x5f\x72\x00\x05\x08\x61\x73\x73\x65\x72\x74\x5f\x30\x00\x06\x08\x61\x73\x73\x65\x72\x74\x5f\x31\x00\x07\x08\x61\x73\x73\x65\x72\x74\x5f\x32\x00\x08\x08\x61\x73\x73\x65\x72\x74\x5f\x33\x00\x09\x08\x61\x73\x73\x65\x72\x74\x5f\x34\x00\x0a\x08\x61\x73\x73\x65\x72\x74\x5f\x35\x00\x0b\x08\x61\x73\x73\x65\x72\x74\x5f\x36\x00\x0c\x08\x61\x73\x73\x65\x72\x74\x5f\x37\x00\x0d\x08\x61\x73\x73\x65\x72\x74\x5f\x38\x00\x0e\x08\x61\x73\x73\x65\x72\x74\x5f\x39\x00\x0f\x09\x61\x73\x73\x65\x72\x74\x5f\x31\x30\x00\x10\x09\x61\x73\x73\x65\x72\x74\x5f\x31\x31\x00\x11\x09\x61\x73\x73\x65\x72\x74\x5f\x31\x32\x00\x12\x09\x61\x73\x73\x65\x72\x74\x5f\x31\x33\x00\x13\x09\x61\x73\x73\x65\x72\x74\x5f\x31\x34\x00\x14\x09\x61\x73\x73\x65\x72\x74\x5f\x31\x35\x00\x15\x09\x61\x73\x73\x65\x72\x74\x5f\x31\x36\x00\x16\x09\x61\x73\x73\x65\x72\x74\x5f\x31\x37\x00\x17\x09\x61\x73\x73\x65\x72\x74\x5f\x31\x38\x00\x18\x0a\xf1\x05\x19\x09\x00\x20\x00\x20\x01\x20\x02\x1b\x0b\x09\x00\x20\x00\x20\x01\x20\x02\x1b\x0b\x09\x00\x20\x00\x20\x01\x20\x02\x1b\x0b\x09\x00\x20\x00\x20\x01\x20\x02\x1b\x0b\x08\x00\x00\x41\x00\x20\x00\x1b\x0b\x08\x00\x41\x00\x00\x20\x00\x1b\x0b\x15\x00\x02\x40\x42\x02\x42\x01\x41\x01\x10\x01\x42\x02\x51\x45\x0d\x00\x0f\x0b\x00\x0b\x15\x00\x02\x40\x42\x02\x42\x01\x41\x7f\x10\x01\x42\x02\x51\x45\x0d\x00\x0f\x0b\x00\x0b\x19\x00\x02\x40\x42\x02\x42\x01\x41\xf0\xe1\xc3\x87\x7f\x10\x01\x42\x02\x51\x45\x0d\x00\x0f\x0b\x00\x0b\x20\x00\x02\x40\x43\x00\x00\xc0\x7f\x43\x00\x00\x80\x3f\x41\x01\x10\x02\xbc\x43\x00\x00\xc0\x7f\xbc\x46\x45\x0d\x00\x0f\x0b\x00\x0b\x20\x00\x02\x40\x43\x04\x03\x82\x7f\x43\x00\x00\x80\x3f\x41\x01\x10\x02\xbc\x43\x04\x03\x82\x7f\xbc\x46\x45\x0d\x00\x0f\x0b\x00\x0b\x20\x00\x02\x40\x43\x00\x00\xc0\x7f\x43\x00\x00\x80\x3f\x41\x00\x10\x02\xbc\x43\x00\x00\x80\x3f\xbc\x46\x45\x0d\x00\x0f\x0b\x00\x0b\x20\x00\x02\x40\x43\x04\x03\x82\x7f\x43\x00\x00\x80\x3f\x41\x00\x10\x02\xbc\x43\x00\x00\x80\x3f\xbc\x46\x45\x0d\x00\x0f\x0b\x00\x0b\x20\x00\x02\x40\x43\x00\x00\x00\x40\x43\x00\x00\xc0\x7f\x41\x01\x10\x02\xbc\x43\x00\x00\x00\x40\xbc\x46\x45\x0d\x00\x0f\x0b\x00\x0b\x20\x00\x02\x40\x43\x00\x00\x00\x40\x43\x04\x03\x82\x7f\x41\x01\x10\x02\xbc\x43\x00\x00\x00\x40\xbc\x46\x45\x0d\x00\x0f\x0b\x00\x0b\x20\x00\x02\x40\x43\x00\x00\x00\x40\x43\x00\x00\xc0\x7f\x41\x00\x10\x02\xbc\x43\x00\x00\xc0\x7f\xbc\x46\x45\x0d\x00\x0f\x0b\x00\x0b\x20\x00\x02\x40\x43\x00\x00\x00\x40\x43\x04\x03\x82\x7f\x41\x00\x10\x02\xbc\x43\x04\x03\x82\x7f\xbc\x46\x45\x0d\x00\x0f\x0b\x00\x0b\x2c\x00\x02\x40\x44\x00\x00\x00\x00\x00\x00\xf8\x7f\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\x41\x01\x10\x03\xbd\x44\x00\x00\x00\x00\x00\x00\xf8\x7f\xbd\x51\x45\x0d\x00\x0f\x0b\x00\x0b\x2c\x00\x02\x40\x44\x04\x03\x02\x00\x00\x00\xf0\x7f\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\x41\x01\x10\x03\xbd\x44\x04\x03\x02\x00\x00\x00\xf0\x7f\xbd\x51\x45\x0d\x00\x0f\x0b\x00\x0b\x2c\x00\x02\x40\x44\x00\x00\x00\x00\x00\x00\xf8\x7f\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\x41\x00\x10\x03\xbd\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\xbd\x51\x45\x0d\x00\x0f\x0b\x00\x0b\x2c\x00\x02\x40\x44\x04\x03\x02\x00\x00\x00\xf0\x7f\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\x41\x00\x10\x03\xbd\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\xbd\x51\x45\x0d\x00\x0f\x0b\x00\x0b\x2c\x00\x02\x40\x44\x00\x00\x00\x00\x00\x00\x00\x40\x44\x00\x00\x00\x00\x00\x00\xf8\x7f\x41\x01\x10\x03\xbd\x44\x00\x00\x00\x00\x00\x00\x00\x40\xbd\x51\x45\x0d\x00\x0f\x0b\x00\x0b\x2c\x00\x02\x40\x44\x00\x00\x00\x00\x00\x00\x00\x40\x44\x04\x03\x02\x00\x00\x00\xf0\x7f\x41\x01\x10\x03\xbd\x44\x00\x00\x00\x00\x00\x00\x00\x40\xbd\x51\x45\x0d\x00\x0f\x0b\x00\x0b\x2c\x00\x02\x40\x44\x00\x00\x00\x00\x00\x00\x00\x40\x44\x00\x00\x00\x00\x00\x00\xf8\x7f\x41\x00\x10\x03\xbd\x44\x00\x00\x00\x00\x00\x00\xf8\x7f\xbd\x51\x45\x0d\x00\x0f\x0b\x00\x0b\x2c\x00\x02\x40\x44\x00\x00\x00\x00\x00\x00\x00\x40\x44\x04\x03\x02\x00\x00\x00\xf0\x7f\x41\x00\x10\x03\xbd\x44\x04\x03\x02\x00\x00\x00\xf0\x7f\xbd\x51\x45\x0d\x00\x0f\x0b\x00\x0b");
assert_return(() => $$.exports["select_i32"](1, 2, 1), 1);
assert_return(() => $$.exports["assert_0"]());
assert_return(() => $$.exports["select_f32"](f32(1.0), f32(2.0), 1), f32(1.0));
assert_return(() => $$.exports["select_f64"](1.0, 2.0, 1), 1.0);
assert_return(() => $$.exports["select_i32"](1, 2, 0), 2);
assert_return(() => $$.exports["select_i32"](2, 1, 0), 1);
assert_return(() => $$.exports["assert_1"]());
assert_return(() => $$.exports["assert_2"]());
assert_return(() => $$.exports["assert_3"]());
assert_return(() => $$.exports["assert_4"]());
assert_return(() => $$.exports["assert_5"]());
assert_return(() => $$.exports["assert_6"]());
assert_return(() => $$.exports["assert_7"]());
assert_return(() => $$.exports["assert_8"]());
assert_return(() => $$.exports["assert_9"]());
assert_return(() => $$.exports["assert_10"]());
assert_return(() => $$.exports["assert_11"]());
assert_return(() => $$.exports["assert_12"]());
assert_return(() => $$.exports["assert_13"]());
assert_return(() => $$.exports["assert_14"]());
assert_return(() => $$.exports["assert_15"]());
assert_return(() => $$.exports["assert_16"]());
assert_return(() => $$.exports["assert_17"]());
assert_return(() => $$.exports["assert_18"]());
assert_trap(() => $$.exports["select_trap_l"](1));
assert_trap(() => $$.exports["select_trap_l"](0));
assert_trap(() => $$.exports["select_trap_r"](1));
assert_trap(() => $$.exports["select_trap_r"](0));
assert_invalid("\x00\x61\x73\x6d\x0d\x00\x00\x00\x01\x04\x01\x60\x00\x00\x03\x02\x01\x00\x0a\x09\x01\x07\x00\x01\x01\x41\x01\x1b\x0b");
