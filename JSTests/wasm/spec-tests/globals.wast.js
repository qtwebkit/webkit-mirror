/* Lovingly generated by gen-spec-js.py based on the wonderful content of *
 * https://github.com/WebAssembly/spec/blob/master/interpreter/host/js.ml */
'use strict';

let soft_validate = true;

let spectest = {
  print: print || ((...xs) => console.log(...xs)),
  global: 666,
  table: new WebAssembly.Table({initial: 10, maximum: 20, element: 'anyfunc'}),
  memory: new WebAssembly.Memory({initial: 1, maximum: 2}),};

let registry = {spectest};
let $$;

function register(name, instance) {
  registry[name] = instance.exports;
}

function module(bytes) {
  let buffer = new ArrayBuffer(bytes.length);
  let view = new Uint8Array(buffer);
  for (let i = 0; i < bytes.length; ++i) {
    view[i] = bytes.charCodeAt(i);
  }
  return new WebAssembly.Module(buffer);
}

function instance(bytes, imports = registry) {
  return new WebAssembly.Instance(module(bytes), imports);
}

function assert_malformed(bytes) {
  try { module(bytes) } catch (e) {
    if (e instanceof WebAssembly.CompileError) return;
  }
  throw new Error("Wasm decoding failure expected");
}

function assert_invalid(bytes) {
  try { module(bytes) } catch (e) {
    if (e instanceof WebAssembly.CompileError) return;
  }
  throw new Error("Wasm validation failure expected");
}

function assert_soft_invalid(bytes) {
  try { module(bytes) } catch (e) {
    if (e instanceof WebAssembly.CompileError) return;
    throw new Error("Wasm validation failure expected");
  }
  if (soft_validate)
    throw new Error("Wasm validation failure expected");
}

function assert_unlinkable(bytes) {
  let mod = module(bytes);
  try { new WebAssembly.Instance(mod, registry) } catch (e) {
    if (e instanceof TypeError) return;
  }
  throw new Error("Wasm linking failure expected");
}

function assert_uninstantiable(bytes) {
  let mod = module(bytes);
  try { new WebAssembly.Instance(mod, registry) } catch (e) {
    if (e instanceof WebAssembly.RuntimeError) return;
  }
  throw new Error("Wasm trap expected");
}

function assert_trap(action) {
  try { action() } catch (e) {
    if (e instanceof WebAssembly.RuntimeError) return;
  }
  throw new Error("Wasm trap expected");
}

function assert_return(action, expected) {
  let actual = action();
  if (!Object.is(actual, expected)) {
    throw new Error("Wasm return value " + expected + " expected, got " + actual);
  };
}

function assert_return_nan(action) {
  let actual = action();
  if (!Number.isNaN(actual)) {
    throw new Error("Wasm return value NaN expected, got " + actual);
  };
}

let f32 = Math.fround;

$$ = instance("\x00\x61\x73\x6d\x0d\x00\x00\x00\x01\x24\x09\x60\x00\x01\x7f\x60\x00\x01\x7e\x60\x01\x7f\x00\x60\x01\x7e\x00\x60\x00\x01\x7d\x60\x00\x01\x7c\x60\x01\x7d\x00\x60\x01\x7c\x00\x60\x00\x00\x03\x11\x10\x00\x01\x00\x01\x02\x03\x04\x05\x04\x05\x06\x07\x08\x08\x08\x08\x06\x3d\x08\x7f\x00\x41\x7e\x0b\x7d\x00\x43\x00\x00\x40\xc0\x0b\x7c\x00\x44\x00\x00\x00\x00\x00\x00\x10\xc0\x0b\x7e\x00\x42\x7b\x0b\x7f\x01\x41\x74\x0b\x7d\x01\x43\x00\x00\x50\xc1\x0b\x7c\x01\x44\x00\x00\x00\x00\x00\x00\x2c\xc0\x0b\x7e\x01\x42\x71\x0b\x07\x8d\x01\x10\x05\x67\x65\x74\x2d\x61\x00\x00\x05\x67\x65\x74\x2d\x62\x00\x01\x05\x67\x65\x74\x2d\x78\x00\x02\x05\x67\x65\x74\x2d\x79\x00\x03\x05\x73\x65\x74\x2d\x78\x00\x04\x05\x73\x65\x74\x2d\x79\x00\x05\x05\x67\x65\x74\x2d\x31\x00\x06\x05\x67\x65\x74\x2d\x32\x00\x07\x05\x67\x65\x74\x2d\x35\x00\x08\x05\x67\x65\x74\x2d\x36\x00\x09\x05\x73\x65\x74\x2d\x35\x00\x0a\x05\x73\x65\x74\x2d\x36\x00\x0b\x08\x61\x73\x73\x65\x72\x74\x5f\x30\x00\x0c\x08\x61\x73\x73\x65\x72\x74\x5f\x31\x00\x0d\x08\x61\x73\x73\x65\x72\x74\x5f\x32\x00\x0e\x08\x61\x73\x73\x65\x72\x74\x5f\x33\x00\x0f\x0a\x81\x01\x10\x04\x00\x23\x00\x0b\x04\x00\x23\x03\x0b\x04\x00\x23\x04\x0b\x04\x00\x23\x07\x0b\x06\x00\x20\x00\x24\x04\x0b\x06\x00\x20\x00\x24\x07\x0b\x04\x00\x23\x01\x0b\x04\x00\x23\x02\x0b\x04\x00\x23\x05\x0b\x04\x00\x23\x06\x0b\x06\x00\x20\x00\x24\x05\x0b\x06\x00\x20\x00\x24\x06\x0b\x0f\x00\x02\x40\x10\x01\x42\x7b\x51\x45\x0d\x00\x0f\x0b\x00\x0b\x0f\x00\x02\x40\x10\x03\x42\x71\x51\x45\x0d\x00\x0f\x0b\x00\x0b\x0b\x00\x02\x40\x42\x07\x10\x05\x0f\x0b\x00\x0b\x0f\x00\x02\x40\x10\x03\x42\x07\x51\x45\x0d\x00\x0f\x0b\x00\x0b");
assert_return(() => $$.exports["get-a"](), -2);
assert_return(() => $$.exports["assert_0"]());
assert_return(() => $$.exports["get-x"](), -12);
assert_return(() => $$.exports["assert_1"]());
assert_return(() => $$.exports["get-1"](), f32(-3.0));
assert_return(() => $$.exports["get-2"](), -4.0);
assert_return(() => $$.exports["get-5"](), f32(-13.0));
assert_return(() => $$.exports["get-6"](), -14.0);
assert_return(() => $$.exports["set-x"](6));
assert_return(() => $$.exports["assert_2"]());
assert_return(() => $$.exports["set-5"](f32(8.0)));
assert_return(() => $$.exports["set-6"](9.0));
assert_return(() => $$.exports["get-x"](), 6);
assert_return(() => $$.exports["assert_3"]());
assert_return(() => $$.exports["get-5"](), f32(8.0));
assert_return(() => $$.exports["get-6"](), 9.0);
assert_invalid("\x00\x61\x73\x6d\x0d\x00\x00\x00\x01\x04\x01\x60\x00\x00\x03\x02\x01\x00\x06\x09\x01\x7d\x00\x43\x00\x00\x00\x00\x0b\x0a\x08\x01\x06\x00\x41\x01\x24\x00\x0b");
assert_invalid("\x00\x61\x73\x6d\x0d\x00\x00\x00\x02\x08\x01\x01\x6d\x01\x61\x03\x7f\x01");
assert_invalid("\x00\x61\x73\x6d\x0d\x00\x00\x00\x02\x08\x01\x01\x6d\x01\x61\x03\x7f\x01");
assert_invalid("\x00\x61\x73\x6d\x0d\x00\x00\x00\x06\x09\x01\x7d\x01\x43\x00\x00\x00\x00\x0b\x07\x05\x01\x01\x61\x03\x00");
assert_invalid("\x00\x61\x73\x6d\x0d\x00\x00\x00\x06\x09\x01\x7d\x01\x43\x00\x00\x00\x00\x0b\x07\x05\x01\x01\x61\x03\x00");
assert_invalid("\x00\x61\x73\x6d\x0d\x00\x00\x00\x06\x0a\x01\x7d\x00\x43\x00\x00\x00\x00\x8c\x0b");
assert_invalid("\x00\x61\x73\x6d\x0d\x00\x00\x00\x06\x06\x01\x7d\x00\x20\x00\x0b");
assert_invalid("\x00\x61\x73\x6d\x0d\x00\x00\x00\x06\x09\x01\x7f\x00\x43\x00\x00\x00\x00\x0b");
assert_invalid("\x00\x61\x73\x6d\x0d\x00\x00\x00\x06\x06\x01\x7f\x00\x23\x00\x0b");
assert_invalid("\x00\x61\x73\x6d\x0d\x00\x00\x00\x06\x0b\x02\x7f\x00\x23\x01\x0b\x7f\x00\x41\x00\x0b");
$$ = instance("\x00\x61\x73\x6d\x0d\x00\x00\x00\x02\x14\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x67\x6c\x6f\x62\x61\x6c\x03\x7f\x00");
assert_malformed("\x00\x61\x73\x6d\x0d\x00\x00\x00\x02\x94\x80\x80\x80\x00\x01\x08\x73\x70\x65\x63\x74\x65\x73\x74\x06\x67\x6c\x6f\x62\x61\x6c\x03\x7f\x02");
$$ = instance("\x00\x61\x73\x6d\x0d\x00\x00\x00\x06\x06\x01\x7f\x00\x41\x00\x0b");
assert_malformed("\x00\x61\x73\x6d\x0d\x00\x00\x00\x06\x86\x80\x80\x80\x00\x01\x7f\xff\x41\x00\x0b");
assert_malformed("\x00\x61\x73\x6d\x0d\x00\x00\x00\x06\x86\x80\x80\x80\x00\x01\x7f\xd4\x41\x00\x0b");
assert_malformed("\x00\x61\x73\x6d\x0d\x00\x00\x00\x06\x86\x80\x80\x80\x00\x01\x7f\x02\x41\x00\x0b");
