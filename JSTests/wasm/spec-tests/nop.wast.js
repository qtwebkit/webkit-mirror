/* Lovingly generated by gen-spec-js.py based on the wonderful content of *
 * https://github.com/WebAssembly/spec/blob/master/interpreter/host/js.ml */
'use strict';

let soft_validate = true;

let spectest = {
  print: print || ((...xs) => console.log(...xs)),
  global: 666,
  table: new WebAssembly.Table({initial: 10, maximum: 20, element: 'anyfunc'}),
  memory: new WebAssembly.Memory({initial: 1, maximum: 2}),};

let registry = {spectest};
let $$;

function register(name, instance) {
  registry[name] = instance.exports;
}

function module(bytes) {
  let buffer = new ArrayBuffer(bytes.length);
  let view = new Uint8Array(buffer);
  for (let i = 0; i < bytes.length; ++i) {
    view[i] = bytes.charCodeAt(i);
  }
  return new WebAssembly.Module(buffer);
}

function instance(bytes, imports = registry) {
  return new WebAssembly.Instance(module(bytes), imports);
}

function assert_malformed(bytes) {
  try { module(bytes) } catch (e) {
    if (e instanceof WebAssembly.CompileError) return;
  }
  throw new Error("Wasm decoding failure expected");
}

function assert_invalid(bytes) {
  try { module(bytes) } catch (e) {
    if (e instanceof WebAssembly.CompileError) return;
  }
  throw new Error("Wasm validation failure expected");
}

function assert_soft_invalid(bytes) {
  try { module(bytes) } catch (e) {
    if (e instanceof WebAssembly.CompileError) return;
    throw new Error("Wasm validation failure expected");
  }
  if (soft_validate)
    throw new Error("Wasm validation failure expected");
}

function assert_unlinkable(bytes) {
  let mod = module(bytes);
  try { new WebAssembly.Instance(mod, registry) } catch (e) {
    if (e instanceof TypeError) return;
  }
  throw new Error("Wasm linking failure expected");
}

function assert_uninstantiable(bytes) {
  let mod = module(bytes);
  try { new WebAssembly.Instance(mod, registry) } catch (e) {
    if (e instanceof WebAssembly.RuntimeError) return;
  }
  throw new Error("Wasm trap expected");
}

function assert_trap(action) {
  try { action() } catch (e) {
    if (e instanceof WebAssembly.RuntimeError) return;
  }
  throw new Error("Wasm trap expected");
}

function assert_return(action, expected) {
  let actual = action();
  if (!Object.is(actual, expected)) {
    throw new Error("Wasm return value " + expected + " expected, got " + actual);
  };
}

function assert_return_nan(action) {
  let actual = action();
  if (!Number.isNaN(actual)) {
    throw new Error("Wasm return value NaN expected, got " + actual);
  };
}

let f32 = Math.fround;

$$ = instance("\x00\x61\x73\x6d\x0d\x00\x00\x00\x01\x18\x05\x60\x00\x00\x60\x03\x7f\x7f\x7f\x01\x7f\x60\x00\x01\x7f\x60\x01\x7f\x00\x60\x01\x7f\x01\x7f\x03\x32\x31\x00\x01\x02\x02\x02\x02\x03\x03\x04\x04\x04\x04\x02\x02\x02\x02\x02\x02\x02\x02\x03\x03\x03\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04\x01\x01\x01\x01\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04\x04\x05\x03\x01\x00\x01\x07\xd1\x06\x2f\x0d\x61\x73\x2d\x66\x75\x6e\x63\x2d\x66\x69\x72\x73\x74\x00\x02\x0b\x61\x73\x2d\x66\x75\x6e\x63\x2d\x6d\x69\x64\x00\x03\x0c\x61\x73\x2d\x66\x75\x6e\x63\x2d\x6c\x61\x73\x74\x00\x04\x12\x61\x73\x2d\x66\x75\x6e\x63\x2d\x65\x76\x65\x72\x79\x77\x68\x65\x72\x65\x00\x05\x0c\x61\x73\x2d\x64\x72\x6f\x70\x2d\x6c\x61\x73\x74\x00\x06\x12\x61\x73\x2d\x64\x72\x6f\x70\x2d\x65\x76\x65\x72\x79\x77\x68\x65\x72\x65\x00\x07\x0e\x61\x73\x2d\x73\x65\x6c\x65\x63\x74\x2d\x6d\x69\x64\x31\x00\x08\x0e\x61\x73\x2d\x73\x65\x6c\x65\x63\x74\x2d\x6d\x69\x64\x32\x00\x09\x0e\x61\x73\x2d\x73\x65\x6c\x65\x63\x74\x2d\x6c\x61\x73\x74\x00\x0a\x14\x61\x73\x2d\x73\x65\x6c\x65\x63\x74\x2d\x65\x76\x65\x72\x79\x77\x68\x65\x72\x65\x00\x0b\x0e\x61\x73\x2d\x62\x6c\x6f\x63\x6b\x2d\x66\x69\x72\x73\x74\x00\x0c\x0c\x61\x73\x2d\x62\x6c\x6f\x63\x6b\x2d\x6d\x69\x64\x00\x0d\x0d\x61\x73\x2d\x62\x6c\x6f\x63\x6b\x2d\x6c\x61\x73\x74\x00\x0e\x13\x61\x73\x2d\x62\x6c\x6f\x63\x6b\x2d\x65\x76\x65\x72\x79\x77\x68\x65\x72\x65\x00\x0f\x0d\x61\x73\x2d\x6c\x6f\x6f\x70\x2d\x66\x69\x72\x73\x74\x00\x10\x0b\x61\x73\x2d\x6c\x6f\x6f\x70\x2d\x6d\x69\x64\x00\x11\x0c\x61\x73\x2d\x6c\x6f\x6f\x70\x2d\x6c\x61\x73\x74\x00\x12\x12\x61\x73\x2d\x6c\x6f\x6f\x70\x2d\x65\x76\x65\x72\x79\x77\x68\x65\x72\x65\x00\x13\x0f\x61\x73\x2d\x69\x66\x2d\x63\x6f\x6e\x64\x69\x74\x69\x6f\x6e\x00\x14\x0a\x61\x73\x2d\x69\x66\x2d\x74\x68\x65\x6e\x00\x15\x0a\x61\x73\x2d\x69\x66\x2d\x65\x6c\x73\x65\x00\x16\x0a\x61\x73\x2d\x62\x72\x2d\x6c\x61\x73\x74\x00\x17\x10\x61\x73\x2d\x62\x72\x2d\x65\x76\x65\x72\x79\x77\x68\x65\x72\x65\x00\x18\x0c\x61\x73\x2d\x62\x72\x5f\x69\x66\x2d\x6d\x69\x64\x00\x19\x0d\x61\x73\x2d\x62\x72\x5f\x69\x66\x2d\x6c\x61\x73\x74\x00\x1a\x13\x61\x73\x2d\x62\x72\x5f\x69\x66\x2d\x65\x76\x65\x72\x79\x77\x68\x65\x72\x65\x00\x1b\x0f\x61\x73\x2d\x62\x72\x5f\x74\x61\x62\x6c\x65\x2d\x6d\x69\x64\x00\x1c\x10\x61\x73\x2d\x62\x72\x5f\x74\x61\x62\x6c\x65\x2d\x6c\x61\x73\x74\x00\x1d\x16\x61\x73\x2d\x62\x72\x5f\x74\x61\x62\x6c\x65\x2d\x65\x76\x65\x72\x79\x77\x68\x65\x72\x65\x00\x1e\x0e\x61\x73\x2d\x72\x65\x74\x75\x72\x6e\x2d\x6c\x61\x73\x74\x00\x1f\x14\x61\x73\x2d\x72\x65\x74\x75\x72\x6e\x2d\x65\x76\x65\x72\x79\x77\x68\x65\x72\x65\x00\x20\x0c\x61\x73\x2d\x63\x61\x6c\x6c\x2d\x6d\x69\x64\x31\x00\x21\x0c\x61\x73\x2d\x63\x61\x6c\x6c\x2d\x6d\x69\x64\x32\x00\x22\x0c\x61\x73\x2d\x63\x61\x6c\x6c\x2d\x6c\x61\x73\x74\x00\x23\x12\x61\x73\x2d\x63\x61\x6c\x6c\x2d\x65\x76\x65\x72\x79\x77\x68\x65\x72\x65\x00\x24\x0d\x61\x73\x2d\x75\x6e\x61\x72\x79\x2d\x6c\x61\x73\x74\x00\x25\x13\x61\x73\x2d\x75\x6e\x61\x72\x79\x2d\x65\x76\x65\x72\x79\x77\x68\x65\x72\x65\x00\x26\x0d\x61\x73\x2d\x62\x69\x6e\x61\x72\x79\x2d\x6d\x69\x64\x00\x27\x0e\x61\x73\x2d\x62\x69\x6e\x61\x72\x79\x2d\x6c\x61\x73\x74\x00\x28\x14\x61\x73\x2d\x62\x69\x6e\x61\x72\x79\x2d\x65\x76\x65\x72\x79\x77\x68\x65\x72\x65\x00\x29\x0c\x61\x73\x2d\x74\x65\x73\x74\x2d\x6c\x61\x73\x74\x00\x2a\x12\x61\x73\x2d\x74\x65\x73\x74\x2d\x65\x76\x65\x72\x79\x77\x68\x65\x72\x65\x00\x2b\x0e\x61\x73\x2d\x63\x6f\x6d\x70\x61\x72\x65\x2d\x6d\x69\x64\x00\x2c\x0f\x61\x73\x2d\x63\x6f\x6d\x70\x61\x72\x65\x2d\x6c\x61\x73\x74\x00\x2d\x15\x61\x73\x2d\x63\x6f\x6d\x70\x61\x72\x65\x2d\x65\x76\x65\x72\x79\x77\x68\x65\x72\x65\x00\x2e\x13\x61\x73\x2d\x67\x72\x6f\x77\x5f\x6d\x65\x6d\x6f\x72\x79\x2d\x6c\x61\x73\x74\x00\x2f\x19\x61\x73\x2d\x67\x72\x6f\x77\x5f\x6d\x65\x6d\x6f\x72\x79\x2d\x65\x76\x65\x72\x79\x77\x68\x65\x72\x65\x00\x30\x0a\xa6\x04\x31\x02\x00\x0b\x0a\x00\x20\x00\x20\x01\x20\x02\x6b\x6a\x0b\x05\x00\x01\x41\x01\x0b\x07\x00\x10\x00\x01\x41\x02\x0b\x07\x00\x10\x00\x41\x03\x01\x0b\x0b\x00\x01\x01\x10\x00\x01\x41\x04\x01\x01\x0b\x06\x00\x20\x00\x01\x1a\x0b\x09\x00\x01\x01\x20\x00\x01\x01\x1a\x0b\x0a\x00\x20\x00\x01\x20\x00\x20\x00\x1b\x0b\x0a\x00\x20\x00\x20\x00\x01\x20\x00\x1b\x0b\x0a\x00\x20\x00\x20\x00\x20\x00\x01\x1b\x0b\x10\x00\x01\x20\x00\x01\x01\x20\x00\x01\x01\x20\x00\x01\x01\x1b\x0b\x08\x00\x02\x7f\x01\x41\x02\x0b\x0b\x0a\x00\x02\x7f\x10\x00\x01\x41\x02\x0b\x0b\x0b\x00\x02\x7f\x01\x10\x00\x41\x03\x01\x0b\x0b\x0e\x00\x02\x7f\x01\x01\x10\x00\x01\x41\x04\x01\x01\x0b\x0b\x08\x00\x03\x7f\x01\x41\x02\x0b\x0b\x0a\x00\x03\x7f\x10\x00\x01\x41\x02\x0b\x0b\x0a\x00\x03\x7f\x10\x00\x41\x03\x01\x0b\x0b\x0e\x00\x03\x7f\x01\x01\x10\x00\x01\x41\x04\x01\x01\x0b\x0b\x0a\x00\x20\x00\x01\x04\x40\x10\x00\x0b\x0b\x0b\x00\x20\x00\x04\x40\x01\x05\x10\x00\x0b\x0b\x0b\x00\x20\x00\x04\x40\x10\x00\x05\x01\x0b\x0b\x0a\x00\x02\x7f\x20\x00\x01\x0c\x00\x0b\x0b\x0d\x00\x02\x7f\x01\x01\x20\x00\x01\x01\x0c\x00\x0b\x0b\x0c\x00\x02\x7f\x20\x00\x01\x20\x00\x0d\x00\x0b\x0b\x0c\x00\x02\x7f\x20\x00\x20\x00\x01\x0d\x00\x0b\x0b\x11\x00\x02\x7f\x01\x01\x20\x00\x01\x01\x20\x00\x01\x01\x0d\x00\x0b\x0b\x0e\x00\x02\x7f\x20\x00\x01\x20\x00\x0e\x01\x00\x00\x0b\x0b\x0e\x00\x02\x7f\x20\x00\x20\x00\x01\x0e\x01\x00\x00\x0b\x0b\x13\x00\x02\x7f\x01\x01\x20\x00\x01\x01\x20\x00\x01\x01\x0e\x01\x00\x00\x0b\x0b\x06\x00\x20\x00\x01\x0f\x0b\x09\x00\x01\x01\x20\x00\x01\x01\x0f\x0b\x0b\x00\x20\x00\x01\x20\x01\x20\x02\x10\x01\x0b\x0b\x00\x20\x00\x20\x01\x01\x20\x02\x10\x01\x0b\x0b\x00\x20\x00\x20\x01\x20\x02\x01\x10\x01\x0b\x12\x00\x01\x01\x20\x00\x01\x01\x20\x01\x01\x01\x20\x02\x01\x01\x10\x01\x0b\x06\x00\x20\x00\x01\x68\x0b\x09\x00\x01\x01\x20\x00\x01\x01\x68\x0b\x08\x00\x20\x00\x01\x20\x00\x6a\x0b\x08\x00\x20\x00\x20\x00\x01\x6a\x0b\x0c\x00\x01\x20\x00\x01\x01\x20\x00\x01\x01\x6a\x0b\x06\x00\x20\x00\x01\x45\x0b\x09\x00\x01\x01\x20\x00\x01\x01\x45\x0b\x08\x00\x20\x00\x01\x20\x00\x47\x0b\x08\x00\x20\x00\x20\x00\x01\x49\x0b\x0c\x00\x01\x20\x00\x01\x01\x20\x00\x01\x01\x4c\x0b\x07\x00\x20\x00\x01\x40\x00\x0b\x0a\x00\x01\x01\x20\x00\x01\x01\x40\x00\x0b");
assert_return(() => $$.exports["as-func-first"](), 1);
assert_return(() => $$.exports["as-func-mid"](), 2);
assert_return(() => $$.exports["as-func-last"](), 3);
assert_return(() => $$.exports["as-func-everywhere"](), 4);
assert_return(() => $$.exports["as-drop-last"](0));
assert_return(() => $$.exports["as-drop-everywhere"](0));
assert_return(() => $$.exports["as-select-mid1"](3), 3);
assert_return(() => $$.exports["as-select-mid2"](3), 3);
assert_return(() => $$.exports["as-select-last"](3), 3);
assert_return(() => $$.exports["as-select-everywhere"](3), 3);
assert_return(() => $$.exports["as-block-first"](), 2);
assert_return(() => $$.exports["as-block-mid"](), 2);
assert_return(() => $$.exports["as-block-last"](), 3);
assert_return(() => $$.exports["as-block-everywhere"](), 4);
assert_return(() => $$.exports["as-loop-first"](), 2);
assert_return(() => $$.exports["as-loop-mid"](), 2);
assert_return(() => $$.exports["as-loop-last"](), 3);
assert_return(() => $$.exports["as-loop-everywhere"](), 4);
assert_return(() => $$.exports["as-if-condition"](0));
assert_return(() => $$.exports["as-if-condition"](-1));
assert_return(() => $$.exports["as-if-then"](0));
assert_return(() => $$.exports["as-if-then"](4));
assert_return(() => $$.exports["as-if-else"](0));
assert_return(() => $$.exports["as-if-else"](3));
assert_return(() => $$.exports["as-br-last"](6), 6);
assert_return(() => $$.exports["as-br-everywhere"](7), 7);
assert_return(() => $$.exports["as-br_if-mid"](5), 5);
assert_return(() => $$.exports["as-br_if-last"](6), 6);
assert_return(() => $$.exports["as-br_if-everywhere"](7), 7);
assert_return(() => $$.exports["as-br_table-mid"](5), 5);
assert_return(() => $$.exports["as-br_table-last"](6), 6);
assert_return(() => $$.exports["as-br_table-everywhere"](7), 7);
assert_return(() => $$.exports["as-return-last"](6), 6);
assert_return(() => $$.exports["as-return-everywhere"](7), 7);
assert_return(() => $$.exports["as-call-mid1"](3, 1, 2), 2);
assert_return(() => $$.exports["as-call-mid2"](0, 3, 1), 2);
assert_return(() => $$.exports["as-call-last"](10, 9, -1), 20);
assert_return(() => $$.exports["as-call-everywhere"](2, 1, 5), -2);
assert_return(() => $$.exports["as-unary-last"](30), 1);
assert_return(() => $$.exports["as-unary-everywhere"](12), 2);
assert_return(() => $$.exports["as-binary-mid"](3), 6);
assert_return(() => $$.exports["as-binary-last"](3), 6);
assert_return(() => $$.exports["as-binary-everywhere"](3), 6);
assert_return(() => $$.exports["as-test-last"](0), 1);
assert_return(() => $$.exports["as-test-everywhere"](0), 1);
assert_return(() => $$.exports["as-compare-mid"](3), 0);
assert_return(() => $$.exports["as-compare-last"](3), 0);
assert_return(() => $$.exports["as-compare-everywhere"](3), 1);
assert_return(() => $$.exports["as-grow_memory-last"](2), 1);
assert_return(() => $$.exports["as-grow_memory-everywhere"](12), 3);
assert_invalid("\x00\x61\x73\x6d\x0d\x00\x00\x00\x01\x05\x01\x60\x00\x01\x7f\x03\x02\x01\x00\x0a\x05\x01\x03\x00\x01\x0b");
assert_invalid("\x00\x61\x73\x6d\x0d\x00\x00\x00\x01\x05\x01\x60\x00\x01\x7e\x03\x02\x01\x00\x0a\x05\x01\x03\x00\x01\x0b");
assert_invalid("\x00\x61\x73\x6d\x0d\x00\x00\x00\x01\x05\x01\x60\x00\x01\x7d\x03\x02\x01\x00\x0a\x05\x01\x03\x00\x01\x0b");
assert_invalid("\x00\x61\x73\x6d\x0d\x00\x00\x00\x01\x05\x01\x60\x00\x01\x7c\x03\x02\x01\x00\x0a\x05\x01\x03\x00\x01\x0b");
