/* Lovingly generated by gen-spec-js.py based on the wonderful content of *
 * https://github.com/WebAssembly/spec/blob/master/interpreter/host/js.ml */
'use strict';

let soft_validate = true;

let spectest = {
  print: print || ((...xs) => console.log(...xs)),
  global: 666,
  table: new WebAssembly.Table({initial: 10, maximum: 20, element: 'anyfunc'}),
  memory: new WebAssembly.Memory({initial: 1, maximum: 2}),};

let registry = {spectest};
let $$;

function register(name, instance) {
  registry[name] = instance.exports;
}

function module(bytes) {
  let buffer = new ArrayBuffer(bytes.length);
  let view = new Uint8Array(buffer);
  for (let i = 0; i < bytes.length; ++i) {
    view[i] = bytes.charCodeAt(i);
  }
  return new WebAssembly.Module(buffer);
}

function instance(bytes, imports = registry) {
  return new WebAssembly.Instance(module(bytes), imports);
}

function assert_malformed(bytes) {
  try { module(bytes) } catch (e) {
    if (e instanceof WebAssembly.CompileError) return;
  }
  throw new Error("Wasm decoding failure expected");
}

function assert_invalid(bytes) {
  try { module(bytes) } catch (e) {
    if (e instanceof WebAssembly.CompileError) return;
  }
  throw new Error("Wasm validation failure expected");
}

function assert_soft_invalid(bytes) {
  try { module(bytes) } catch (e) {
    if (e instanceof WebAssembly.CompileError) return;
    throw new Error("Wasm validation failure expected");
  }
  if (soft_validate)
    throw new Error("Wasm validation failure expected");
}

function assert_unlinkable(bytes) {
  let mod = module(bytes);
  try { new WebAssembly.Instance(mod, registry) } catch (e) {
    if (e instanceof TypeError) return;
  }
  throw new Error("Wasm linking failure expected");
}

function assert_uninstantiable(bytes) {
  let mod = module(bytes);
  try { new WebAssembly.Instance(mod, registry) } catch (e) {
    if (e instanceof WebAssembly.RuntimeError) return;
  }
  throw new Error("Wasm trap expected");
}

function assert_trap(action) {
  try { action() } catch (e) {
    if (e instanceof WebAssembly.RuntimeError) return;
  }
  throw new Error("Wasm trap expected");
}

function assert_return(action, expected) {
  let actual = action();
  if (!Object.is(actual, expected)) {
    throw new Error("Wasm return value " + expected + " expected, got " + actual);
  };
}

function assert_return_nan(action) {
  let actual = action();
  if (!Number.isNaN(actual)) {
    throw new Error("Wasm return value NaN expected, got " + actual);
  };
}

let f32 = Math.fround;

$$ = instance("\x00\x61\x73\x6d\x0d\x00\x00\x00\x01\x42\x0c\x60\x00\x01\x7f\x60\x00\x01\x7e\x60\x00\x01\x7d\x60\x00\x01\x7c\x60\x01\x7f\x01\x7f\x60\x01\x7e\x01\x7e\x60\x01\x7d\x01\x7d\x60\x01\x7c\x01\x7c\x60\x05\x7e\x7d\x7c\x7f\x7f\x00\x60\x05\x7e\x7d\x7c\x7f\x7f\x01\x7e\x60\x05\x7e\x7d\x7c\x7f\x7f\x01\x7c\x60\x00\x00\x03\x11\x10\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0b\x0b\x0b\x0b\x07\xde\x01\x10\x0e\x74\x79\x70\x65\x2d\x6c\x6f\x63\x61\x6c\x2d\x69\x33\x32\x00\x00\x0e\x74\x79\x70\x65\x2d\x6c\x6f\x63\x61\x6c\x2d\x69\x36\x34\x00\x01\x0e\x74\x79\x70\x65\x2d\x6c\x6f\x63\x61\x6c\x2d\x66\x33\x32\x00\x02\x0e\x74\x79\x70\x65\x2d\x6c\x6f\x63\x61\x6c\x2d\x66\x36\x34\x00\x03\x0e\x74\x79\x70\x65\x2d\x70\x61\x72\x61\x6d\x2d\x69\x33\x32\x00\x04\x0e\x74\x79\x70\x65\x2d\x70\x61\x72\x61\x6d\x2d\x69\x36\x34\x00\x05\x0e\x74\x79\x70\x65\x2d\x70\x61\x72\x61\x6d\x2d\x66\x33\x32\x00\x06\x0e\x74\x79\x70\x65\x2d\x70\x61\x72\x61\x6d\x2d\x66\x36\x34\x00\x07\x0a\x74\x79\x70\x65\x2d\x6d\x69\x78\x65\x64\x00\x08\x05\x77\x72\x69\x74\x65\x00\x09\x06\x72\x65\x73\x75\x6c\x74\x00\x0a\x08\x61\x73\x73\x65\x72\x74\x5f\x30\x00\x0b\x08\x61\x73\x73\x65\x72\x74\x5f\x31\x00\x0c\x08\x61\x73\x73\x65\x72\x74\x5f\x32\x00\x0d\x08\x61\x73\x73\x65\x72\x74\x5f\x33\x00\x0e\x08\x61\x73\x73\x65\x72\x74\x5f\x34\x00\x0f\x0a\xdf\x03\x10\x08\x01\x01\x7f\x41\x00\x22\x00\x0b\x08\x01\x01\x7e\x42\x00\x22\x00\x0b\x0b\x01\x01\x7d\x43\x00\x00\x00\x00\x22\x00\x0b\x0f\x01\x01\x7c\x44\x00\x00\x00\x00\x00\x00\x00\x00\x22\x00\x0b\x06\x00\x41\x0a\x22\x00\x0b\x06\x00\x42\x0b\x22\x00\x0b\x09\x00\x43\x9a\x99\x31\x41\x22\x00\x0b\x0d\x00\x44\x66\x66\x66\x66\x66\x66\x28\x40\x22\x00\x0b\x52\x03\x01\x7d\x02\x7e\x01\x7c\x42\x00\x22\x00\x50\x1a\x43\x00\x00\x00\x00\x22\x01\x8c\x1a\x44\x00\x00\x00\x00\x00\x00\x00\x00\x22\x02\x9a\x1a\x41\x00\x22\x03\x45\x1a\x41\x00\x22\x04\x45\x1a\x43\x00\x00\x00\x00\x22\x05\x8c\x1a\x42\x00\x22\x06\x50\x1a\x42\x00\x22\x07\x50\x1a\x44\x00\x00\x00\x00\x00\x00\x00\x00\x22\x08\x9a\x1a\x0b\x55\x03\x01\x7d\x02\x7e\x01\x7c\x43\x9a\x99\x99\xbe\x22\x01\x1a\x41\x28\x22\x03\x1a\x41\x79\x22\x04\x1a\x43\x00\x00\xb0\x40\x22\x05\x1a\x42\x06\x22\x06\x1a\x44\x00\x00\x00\x00\x00\x00\x20\x40\x22\x08\x1a\x20\x00\xba\x20\x01\xbb\x20\x02\x20\x03\xb8\x20\x04\xb7\x20\x05\xbb\x20\x06\xba\x20\x07\xba\x20\x08\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xb0\x0b\x4f\x03\x01\x7d\x02\x7e\x01\x7c\x42\x01\x22\x00\xba\x43\x00\x00\x00\x40\x22\x01\xbb\x44\x66\x66\x66\x66\x66\x66\x0a\x40\x22\x02\x41\x04\x22\x03\xb8\x41\x05\x22\x04\xb7\x43\x00\x00\xb0\x40\x22\x05\xbb\x42\x06\x22\x06\xba\x42\x00\x22\x07\xba\x44\x00\x00\x00\x00\x00\x00\x20\x40\x22\x08\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\x0b\x0f\x00\x02\x40\x10\x01\x42\x00\x51\x45\x0d\x00\x0f\x0b\x00\x0b\x11\x00\x02\x40\x42\x03\x10\x05\x42\x0b\x51\x45\x0d\x00\x0f\x0b\x00\x0b\x1d\x00\x02\x40\x42\x01\x43\xcd\xcc\x0c\x40\x44\x66\x66\x66\x66\x66\x66\x0a\x40\x41\x04\x41\x05\x10\x08\x0f\x0b\x00\x0b\x23\x00\x02\x40\x42\x01\x43\x00\x00\x00\x40\x44\x66\x66\x66\x66\x66\x66\x0a\x40\x41\x04\x41\x05\x10\x09\x42\x38\x51\x45\x0d\x00\x0f\x0b\x00\x0b\x2c\x00\x02\x40\x42\x7f\x43\x00\x00\x00\xc0\x44\x66\x66\x66\x66\x66\x66\x0a\xc0\x41\x7c\x41\x7b\x10\x0a\xbd\x44\x66\x66\x66\x66\x66\x66\x41\x40\xbd\x51\x45\x0d\x00\x0f\x0b\x00\x0b");
assert_return(() => $$.exports["type-local-i32"](), 0);
assert_return(() => $$.exports["assert_0"]());
assert_return(() => $$.exports["type-local-f32"](), f32(0.0));
assert_return(() => $$.exports["type-local-f64"](), 0.0);
assert_return(() => $$.exports["type-param-i32"](2), 10);
assert_return(() => $$.exports["assert_1"]());
assert_return(() => $$.exports["type-param-f32"](f32(4.40000009537)), f32(11.1000003815));
assert_return(() => $$.exports["type-param-f64"](5.5), 12.2);
assert_return(() => $$.exports["assert_2"]());
assert_return(() => $$.exports["assert_3"]());
assert_return(() => $$.exports["assert_4"]());
assert_invalid("\x00\x61\x73\x6d\x0d\x00\x00\x00\x01\x05\x01\x60\x00\x01\x7e\x03\x02\x01\x00\x0a\x0a\x01\x08\x01\x01\x7f\x41\x00\x22\x00\x0b");
assert_invalid("\x00\x61\x73\x6d\x0d\x00\x00\x00\x01\x04\x01\x60\x00\x00\x03\x02\x01\x00\x0a\x0e\x01\x0c\x01\x01\x7d\x43\x00\x00\x00\x00\x22\x00\x45\x0b");
assert_invalid("\x00\x61\x73\x6d\x0d\x00\x00\x00\x01\x04\x01\x60\x00\x00\x03\x02\x01\x00\x0a\x0d\x01\x0b\x02\x01\x7c\x01\x7e\x42\x00\x22\x01\x9a\x0b");
assert_invalid("\x00\x61\x73\x6d\x0d\x00\x00\x00\x01\x04\x01\x60\x00\x00\x03\x02\x01\x00\x0a\x09\x01\x07\x01\x01\x7f\x01\x22\x00\x0b");
assert_invalid("\x00\x61\x73\x6d\x0d\x00\x00\x00\x01\x04\x01\x60\x00\x00\x03\x02\x01\x00\x0a\x0d\x01\x0b\x01\x01\x7f\x43\x00\x00\x00\x00\x22\x00\x0b");
assert_invalid("\x00\x61\x73\x6d\x0d\x00\x00\x00\x01\x04\x01\x60\x00\x00\x03\x02\x01\x00\x0a\x11\x01\x0f\x01\x01\x7d\x44\x00\x00\x00\x00\x00\x00\x00\x00\x22\x00\x0b");
assert_invalid("\x00\x61\x73\x6d\x0d\x00\x00\x00\x01\x04\x01\x60\x00\x00\x03\x02\x01\x00\x0a\x13\x01\x11\x02\x01\x7c\x01\x7e\x44\x00\x00\x00\x00\x00\x00\x00\x00\x22\x01\x0b");
assert_invalid("\x00\x61\x73\x6d\x0d\x00\x00\x00\x01\x06\x01\x60\x01\x7f\x01\x7e\x03\x02\x01\x00\x0a\x06\x01\x04\x00\x20\x00\x0b");
assert_invalid("\x00\x61\x73\x6d\x0d\x00\x00\x00\x01\x05\x01\x60\x01\x7d\x00\x03\x02\x01\x00\x0a\x07\x01\x05\x00\x20\x00\x45\x0b");
assert_invalid("\x00\x61\x73\x6d\x0d\x00\x00\x00\x01\x06\x01\x60\x02\x7c\x7e\x00\x03\x02\x01\x00\x0a\x07\x01\x05\x00\x20\x01\x9a\x0b");
assert_invalid("\x00\x61\x73\x6d\x0d\x00\x00\x00\x01\x05\x01\x60\x01\x7f\x00\x03\x02\x01\x00\x0a\x07\x01\x05\x00\x01\x22\x00\x0b");
assert_invalid("\x00\x61\x73\x6d\x0d\x00\x00\x00\x01\x05\x01\x60\x01\x7f\x00\x03\x02\x01\x00\x0a\x0b\x01\x09\x00\x43\x00\x00\x00\x00\x22\x00\x0b");
assert_invalid("\x00\x61\x73\x6d\x0d\x00\x00\x00\x01\x05\x01\x60\x01\x7d\x00\x03\x02\x01\x00\x0a\x0f\x01\x0d\x00\x44\x00\x00\x00\x00\x00\x00\x00\x00\x22\x00\x0b");
assert_invalid("\x00\x61\x73\x6d\x0d\x00\x00\x00\x01\x06\x01\x60\x02\x7c\x7e\x00\x03\x02\x01\x00\x0a\x0f\x01\x0d\x00\x44\x00\x00\x00\x00\x00\x00\x00\x00\x22\x01\x0b");
assert_invalid("\x00\x61\x73\x6d\x0d\x00\x00\x00\x01\x04\x01\x60\x00\x00\x03\x02\x01\x00\x0a\x0a\x01\x08\x02\x01\x7f\x01\x7e\x20\x03\x0b");
assert_invalid("\x00\x61\x73\x6d\x0d\x00\x00\x00\x01\x04\x01\x60\x00\x00\x03\x02\x01\x00\x0a\x0d\x01\x0b\x02\x01\x7f\x01\x7e\x20\xf7\xa4\xea\x06\x0b");
assert_invalid("\x00\x61\x73\x6d\x0d\x00\x00\x00\x01\x06\x01\x60\x02\x7f\x7e\x00\x03\x02\x01\x00\x0a\x06\x01\x04\x00\x20\x02\x0b");
assert_invalid("\x00\x61\x73\x6d\x0d\x00\x00\x00\x01\x04\x01\x60\x00\x00\x03\x02\x01\x00\x0a\x0e\x01\x0c\x02\x01\x7f\x01\x7e\x20\xf7\xf2\xce\xd4\x02\x0b");
assert_invalid("\x00\x61\x73\x6d\x0d\x00\x00\x00\x01\x05\x01\x60\x01\x7f\x00\x03\x02\x01\x00\x0a\x0a\x01\x08\x02\x01\x7f\x01\x7e\x20\x03\x0b");
assert_invalid("\x00\x61\x73\x6d\x0d\x00\x00\x00\x01\x05\x01\x60\x01\x7e\x00\x03\x02\x01\x00\x0a\x0d\x01\x0b\x02\x01\x7f\x01\x7e\x20\xf7\xa8\x99\x66\x0b");
assert_invalid("\x00\x61\x73\x6d\x0d\x00\x00\x00\x01\x05\x01\x60\x01\x7d\x00\x03\x02\x01\x00\x0a\x0d\x01\x0b\x01\x01\x7f\x43\x00\x00\x00\x00\x22\x01\x0b");
assert_invalid("\x00\x61\x73\x6d\x0d\x00\x00\x00\x01\x06\x01\x60\x02\x7e\x7f\x00\x03\x02\x01\x00\x0a\x0d\x01\x0b\x01\x01\x7d\x43\x00\x00\x00\x00\x22\x01\x0b");
assert_invalid("\x00\x61\x73\x6d\x0d\x00\x00\x00\x01\x05\x01\x60\x01\x7e\x00\x03\x02\x01\x00\x0a\x0c\x01\x0a\x02\x01\x7c\x01\x7e\x42\x00\x22\x01\x0b");
