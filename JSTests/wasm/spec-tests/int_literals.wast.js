/* Lovingly generated by gen-spec-js.py based on the wonderful content of *
 * https://github.com/WebAssembly/spec/blob/master/interpreter/host/js.ml */
'use strict';

let soft_validate = true;

let spectest = {
  print: print || ((...xs) => console.log(...xs)),
  global: 666,
  table: new WebAssembly.Table({initial: 10, maximum: 20, element: 'anyfunc'}),
  memory: new WebAssembly.Memory({initial: 1, maximum: 2}),};

let registry = {spectest};
let $$;

function register(name, instance) {
  registry[name] = instance.exports;
}

function module(bytes) {
  let buffer = new ArrayBuffer(bytes.length);
  let view = new Uint8Array(buffer);
  for (let i = 0; i < bytes.length; ++i) {
    view[i] = bytes.charCodeAt(i);
  }
  return new WebAssembly.Module(buffer);
}

function instance(bytes, imports = registry) {
  return new WebAssembly.Instance(module(bytes), imports);
}

function assert_malformed(bytes) {
  try { module(bytes) } catch (e) {
    if (e instanceof WebAssembly.CompileError) return;
  }
  throw new Error("Wasm decoding failure expected");
}

function assert_invalid(bytes) {
  try { module(bytes) } catch (e) {
    if (e instanceof WebAssembly.CompileError) return;
  }
  throw new Error("Wasm validation failure expected");
}

function assert_soft_invalid(bytes) {
  try { module(bytes) } catch (e) {
    if (e instanceof WebAssembly.CompileError) return;
    throw new Error("Wasm validation failure expected");
  }
  if (soft_validate)
    throw new Error("Wasm validation failure expected");
}

function assert_unlinkable(bytes) {
  let mod = module(bytes);
  try { new WebAssembly.Instance(mod, registry) } catch (e) {
    if (e instanceof TypeError) return;
  }
  throw new Error("Wasm linking failure expected");
}

function assert_uninstantiable(bytes) {
  let mod = module(bytes);
  try { new WebAssembly.Instance(mod, registry) } catch (e) {
    if (e instanceof WebAssembly.RuntimeError) return;
  }
  throw new Error("Wasm trap expected");
}

function assert_trap(action) {
  try { action() } catch (e) {
    if (e instanceof WebAssembly.RuntimeError) return;
  }
  throw new Error("Wasm trap expected");
}

function assert_return(action, expected) {
  let actual = action();
  if (!Object.is(actual, expected)) {
    throw new Error("Wasm return value " + expected + " expected, got " + actual);
  };
}

function assert_return_nan(action) {
  let actual = action();
  if (!Number.isNaN(actual)) {
    throw new Error("Wasm return value NaN expected, got " + actual);
  };
}

let f32 = Math.fround;

$$ = instance("\x00\x61\x73\x6d\x0d\x00\x00\x00\x01\x0c\x03\x60\x00\x01\x7f\x60\x00\x01\x7e\x60\x00\x00\x03\x22\x21\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x07\xb9\x03\x21\x08\x69\x33\x32\x2e\x74\x65\x73\x74\x00\x00\x08\x69\x33\x32\x2e\x75\x6d\x61\x78\x00\x01\x08\x69\x33\x32\x2e\x73\x6d\x61\x78\x00\x02\x0c\x69\x33\x32\x2e\x6e\x65\x67\x5f\x73\x6d\x61\x78\x00\x03\x08\x69\x33\x32\x2e\x73\x6d\x69\x6e\x00\x04\x0c\x69\x33\x32\x2e\x61\x6c\x74\x5f\x73\x6d\x69\x6e\x00\x05\x0c\x69\x33\x32\x2e\x69\x6e\x63\x5f\x73\x6d\x69\x6e\x00\x06\x0c\x69\x33\x32\x2e\x6e\x65\x67\x5f\x7a\x65\x72\x6f\x00\x07\x0d\x69\x33\x32\x2e\x6e\x6f\x74\x5f\x6f\x63\x74\x61\x6c\x00\x08\x14\x69\x33\x32\x2e\x75\x6e\x73\x69\x67\x6e\x65\x64\x5f\x64\x65\x63\x69\x6d\x61\x6c\x00\x09\x0d\x69\x33\x32\x2e\x70\x6c\x75\x73\x5f\x73\x69\x67\x6e\x00\x0a\x08\x69\x36\x34\x2e\x74\x65\x73\x74\x00\x0b\x08\x69\x36\x34\x2e\x75\x6d\x61\x78\x00\x0c\x08\x69\x36\x34\x2e\x73\x6d\x61\x78\x00\x0d\x0c\x69\x36\x34\x2e\x6e\x65\x67\x5f\x73\x6d\x61\x78\x00\x0e\x08\x69\x36\x34\x2e\x73\x6d\x69\x6e\x00\x0f\x0c\x69\x36\x34\x2e\x61\x6c\x74\x5f\x73\x6d\x69\x6e\x00\x10\x0c\x69\x36\x34\x2e\x69\x6e\x63\x5f\x73\x6d\x69\x6e\x00\x11\x0c\x69\x36\x34\x2e\x6e\x65\x67\x5f\x7a\x65\x72\x6f\x00\x12\x0d\x69\x36\x34\x2e\x6e\x6f\x74\x5f\x6f\x63\x74\x61\x6c\x00\x13\x14\x69\x36\x34\x2e\x75\x6e\x73\x69\x67\x6e\x65\x64\x5f\x64\x65\x63\x69\x6d\x61\x6c\x00\x14\x0d\x69\x36\x34\x2e\x70\x6c\x75\x73\x5f\x73\x69\x67\x6e\x00\x15\x08\x61\x73\x73\x65\x72\x74\x5f\x30\x00\x16\x08\x61\x73\x73\x65\x72\x74\x5f\x31\x00\x17\x08\x61\x73\x73\x65\x72\x74\x5f\x32\x00\x18\x08\x61\x73\x73\x65\x72\x74\x5f\x33\x00\x19\x08\x61\x73\x73\x65\x72\x74\x5f\x34\x00\x1a\x08\x61\x73\x73\x65\x72\x74\x5f\x35\x00\x1b\x08\x61\x73\x73\x65\x72\x74\x5f\x36\x00\x1c\x08\x61\x73\x73\x65\x72\x74\x5f\x37\x00\x1d\x08\x61\x73\x73\x65\x72\x74\x5f\x38\x00\x1e\x08\x61\x73\x73\x65\x72\x74\x5f\x39\x00\x1f\x09\x61\x73\x73\x65\x72\x74\x5f\x31\x30\x00\x20\x0a\xbd\x03\x21\x09\x00\x41\x8d\xa0\xb7\xdd\x00\x0f\x0b\x05\x00\x41\x7f\x0f\x0b\x09\x00\x41\xff\xff\xff\xff\x07\x0f\x0b\x09\x00\x41\x81\x80\x80\x80\x78\x0f\x0b\x09\x00\x41\x80\x80\x80\x80\x78\x0f\x0b\x09\x00\x41\x80\x80\x80\x80\x78\x0f\x0b\x0c\x00\x41\x80\x80\x80\x80\x78\x41\x01\x6a\x0f\x0b\x05\x00\x41\x00\x0f\x0b\x05\x00\x41\x0a\x0f\x0b\x05\x00\x41\x7f\x0f\x0b\x05\x00\x41\x2a\x0f\x0b\x0d\x00\x42\xee\xd4\x99\xdd\xe0\xcd\xee\xd5\x0c\x0f\x0b\x05\x00\x42\x7f\x0f\x0b\x0e\x00\x42\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x0f\x0b\x0e\x00\x42\x81\x80\x80\x80\x80\x80\x80\x80\x80\x7f\x0f\x0b\x0e\x00\x42\x80\x80\x80\x80\x80\x80\x80\x80\x80\x7f\x0f\x0b\x0e\x00\x42\x80\x80\x80\x80\x80\x80\x80\x80\x80\x7f\x0f\x0b\x11\x00\x42\x80\x80\x80\x80\x80\x80\x80\x80\x80\x7f\x42\x01\x7c\x0f\x0b\x05\x00\x42\x00\x0f\x0b\x05\x00\x42\x0a\x0f\x0b\x05\x00\x42\x7f\x0f\x0b\x05\x00\x42\x2a\x0f\x0b\x17\x00\x02\x40\x10\x0b\x42\xee\xd4\x99\xdd\xe0\xcd\xee\xd5\x0c\x51\x45\x0d\x00\x0f\x0b\x00\x0b\x0f\x00\x02\x40\x10\x0c\x42\x7f\x51\x45\x0d\x00\x0f\x0b\x00\x0b\x18\x00\x02\x40\x10\x0d\x42\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x51\x45\x0d\x00\x0f\x0b\x00\x0b\x18\x00\x02\x40\x10\x0e\x42\x81\x80\x80\x80\x80\x80\x80\x80\x80\x7f\x51\x45\x0d\x00\x0f\x0b\x00\x0b\x18\x00\x02\x40\x10\x0f\x42\x80\x80\x80\x80\x80\x80\x80\x80\x80\x7f\x51\x45\x0d\x00\x0f\x0b\x00\x0b\x18\x00\x02\x40\x10\x10\x42\x80\x80\x80\x80\x80\x80\x80\x80\x80\x7f\x51\x45\x0d\x00\x0f\x0b\x00\x0b\x18\x00\x02\x40\x10\x11\x42\x81\x80\x80\x80\x80\x80\x80\x80\x80\x7f\x51\x45\x0d\x00\x0f\x0b\x00\x0b\x0f\x00\x02\x40\x10\x12\x42\x00\x51\x45\x0d\x00\x0f\x0b\x00\x0b\x0f\x00\x02\x40\x10\x13\x42\x0a\x51\x45\x0d\x00\x0f\x0b\x00\x0b\x0f\x00\x02\x40\x10\x14\x42\x7f\x51\x45\x0d\x00\x0f\x0b\x00\x0b\x0f\x00\x02\x40\x10\x15\x42\x2a\x51\x45\x0d\x00\x0f\x0b\x00\x0b");
assert_return(() => $$.exports["i32.test"](), 195940365);
assert_return(() => $$.exports["i32.umax"](), -1);
assert_return(() => $$.exports["i32.smax"](), 2147483647);
assert_return(() => $$.exports["i32.neg_smax"](), -2147483647);
assert_return(() => $$.exports["i32.smin"](), -2147483648);
assert_return(() => $$.exports["i32.alt_smin"](), -2147483648);
assert_return(() => $$.exports["i32.inc_smin"](), -2147483647);
assert_return(() => $$.exports["i32.neg_zero"](), 0);
assert_return(() => $$.exports["i32.not_octal"](), 10);
assert_return(() => $$.exports["i32.unsigned_decimal"](), -1);
assert_return(() => $$.exports["i32.plus_sign"](), 42);
assert_return(() => $$.exports["assert_0"]());
assert_return(() => $$.exports["assert_1"]());
assert_return(() => $$.exports["assert_2"]());
assert_return(() => $$.exports["assert_3"]());
assert_return(() => $$.exports["assert_4"]());
assert_return(() => $$.exports["assert_5"]());
assert_return(() => $$.exports["assert_6"]());
assert_return(() => $$.exports["assert_7"]());
assert_return(() => $$.exports["assert_8"]());
assert_return(() => $$.exports["assert_9"]());
assert_return(() => $$.exports["assert_10"]());
