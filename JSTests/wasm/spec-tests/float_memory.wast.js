/* Lovingly generated by gen-spec-js.py based on the wonderful content of *
 * https://github.com/WebAssembly/spec/blob/master/interpreter/host/js.ml */
'use strict';

let soft_validate = true;

let spectest = {
  print: print || ((...xs) => console.log(...xs)),
  global: 666,
  table: new WebAssembly.Table({initial: 10, maximum: 20, element: 'anyfunc'}),
  memory: new WebAssembly.Memory({initial: 1, maximum: 2}),};

let registry = {spectest};
let $$;

function register(name, instance) {
  registry[name] = instance.exports;
}

function module(bytes) {
  let buffer = new ArrayBuffer(bytes.length);
  let view = new Uint8Array(buffer);
  for (let i = 0; i < bytes.length; ++i) {
    view[i] = bytes.charCodeAt(i);
  }
  return new WebAssembly.Module(buffer);
}

function instance(bytes, imports = registry) {
  return new WebAssembly.Instance(module(bytes), imports);
}

function assert_malformed(bytes) {
  try { module(bytes) } catch (e) {
    if (e instanceof WebAssembly.CompileError) return;
  }
  throw new Error("Wasm decoding failure expected");
}

function assert_invalid(bytes) {
  try { module(bytes) } catch (e) {
    if (e instanceof WebAssembly.CompileError) return;
  }
  throw new Error("Wasm validation failure expected");
}

function assert_soft_invalid(bytes) {
  try { module(bytes) } catch (e) {
    if (e instanceof WebAssembly.CompileError) return;
    throw new Error("Wasm validation failure expected");
  }
  if (soft_validate)
    throw new Error("Wasm validation failure expected");
}

function assert_unlinkable(bytes) {
  let mod = module(bytes);
  try { new WebAssembly.Instance(mod, registry) } catch (e) {
    if (e instanceof TypeError) return;
  }
  throw new Error("Wasm linking failure expected");
}

function assert_uninstantiable(bytes) {
  let mod = module(bytes);
  try { new WebAssembly.Instance(mod, registry) } catch (e) {
    if (e instanceof WebAssembly.RuntimeError) return;
  }
  throw new Error("Wasm trap expected");
}

function assert_trap(action) {
  try { action() } catch (e) {
    if (e instanceof WebAssembly.RuntimeError) return;
  }
  throw new Error("Wasm trap expected");
}

function assert_return(action, expected) {
  let actual = action();
  if (!Object.is(actual, expected)) {
    throw new Error("Wasm return value " + expected + " expected, got " + actual);
  };
}

function assert_return_nan(action) {
  let actual = action();
  if (!Number.isNaN(actual)) {
    throw new Error("Wasm return value NaN expected, got " + actual);
  };
}

let f32 = Math.fround;

$$ = instance("\x00\x61\x73\x6d\x0d\x00\x00\x00\x01\x0c\x03\x60\x00\x01\x7d\x60\x00\x01\x7f\x60\x00\x00\x03\x09\x08\x00\x01\x02\x02\x02\x02\x02\x02\x05\x04\x01\x01\x01\x01\x07\x58\x08\x08\x66\x33\x32\x2e\x6c\x6f\x61\x64\x00\x00\x08\x69\x33\x32\x2e\x6c\x6f\x61\x64\x00\x01\x09\x66\x33\x32\x2e\x73\x74\x6f\x72\x65\x00\x02\x09\x69\x33\x32\x2e\x73\x74\x6f\x72\x65\x00\x03\x05\x72\x65\x73\x65\x74\x00\x04\x08\x61\x73\x73\x65\x72\x74\x5f\x30\x00\x05\x08\x61\x73\x73\x65\x72\x74\x5f\x31\x00\x06\x08\x61\x73\x73\x65\x72\x74\x5f\x32\x00\x07\x0a\x75\x08\x07\x00\x41\x00\x2a\x02\x00\x0b\x07\x00\x41\x00\x28\x02\x00\x0b\x0c\x00\x41\x00\x43\x00\x00\xa0\x7f\x38\x02\x00\x0b\x0d\x00\x41\x00\x41\x80\x80\x80\xfd\x07\x36\x02\x00\x0b\x09\x00\x41\x00\x41\x00\x36\x02\x00\x0b\x14\x00\x02\x40\x10\x00\xbc\x43\x00\x00\xa0\x7f\xbc\x46\x45\x0d\x00\x0f\x0b\x00\x0b\x14\x00\x02\x40\x10\x00\xbc\x43\x00\x00\xa0\x7f\xbc\x46\x45\x0d\x00\x0f\x0b\x00\x0b\x14\x00\x02\x40\x10\x00\xbc\x43\x00\x00\xa0\x7f\xbc\x46\x45\x0d\x00\x0f\x0b\x00\x0b\x0b\x0a\x01\x00\x41\x00\x0b\x04\x00\x00\xa0\x7f");
assert_return(() => $$.exports["i32.load"](), 2141192192);
assert_return(() => $$.exports["assert_0"]());
$$.exports["reset"]();
assert_return(() => $$.exports["i32.load"](), 0);
assert_return(() => $$.exports["f32.load"](), f32(0.0));
$$.exports["f32.store"]();
assert_return(() => $$.exports["i32.load"](), 2141192192);
assert_return(() => $$.exports["assert_1"]());
$$.exports["reset"]();
assert_return(() => $$.exports["i32.load"](), 0);
assert_return(() => $$.exports["f32.load"](), f32(0.0));
$$.exports["i32.store"]();
assert_return(() => $$.exports["i32.load"](), 2141192192);
assert_return(() => $$.exports["assert_2"]());
$$ = instance("\x00\x61\x73\x6d\x0d\x00\x00\x00\x01\x0c\x03\x60\x00\x01\x7c\x60\x00\x01\x7e\x60\x00\x00\x03\x0e\x0d\x00\x01\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x05\x04\x01\x01\x01\x01\x07\x8f\x01\x0d\x08\x66\x36\x34\x2e\x6c\x6f\x61\x64\x00\x00\x08\x69\x36\x34\x2e\x6c\x6f\x61\x64\x00\x01\x09\x66\x36\x34\x2e\x73\x74\x6f\x72\x65\x00\x02\x09\x69\x36\x34\x2e\x73\x74\x6f\x72\x65\x00\x03\x05\x72\x65\x73\x65\x74\x00\x04\x08\x61\x73\x73\x65\x72\x74\x5f\x30\x00\x05\x08\x61\x73\x73\x65\x72\x74\x5f\x31\x00\x06\x08\x61\x73\x73\x65\x72\x74\x5f\x32\x00\x07\x08\x61\x73\x73\x65\x72\x74\x5f\x33\x00\x08\x08\x61\x73\x73\x65\x72\x74\x5f\x34\x00\x09\x08\x61\x73\x73\x65\x72\x74\x5f\x35\x00\x0a\x08\x61\x73\x73\x65\x72\x74\x5f\x36\x00\x0b\x08\x61\x73\x73\x65\x72\x74\x5f\x37\x00\x0c\x0a\xf5\x01\x0d\x07\x00\x41\x00\x2b\x03\x00\x0b\x07\x00\x41\x00\x29\x03\x00\x0b\x10\x00\x41\x00\x44\x00\x00\x00\x00\x00\x00\xf4\x7f\x39\x03\x00\x0b\x12\x00\x41\x00\x42\x80\x80\x80\x80\x80\x80\x80\xfa\xff\x00\x37\x03\x00\x0b\x09\x00\x41\x00\x42\x00\x37\x03\x00\x0b\x18\x00\x02\x40\x10\x01\x42\x80\x80\x80\x80\x80\x80\x80\xfa\xff\x00\x51\x45\x0d\x00\x0f\x0b\x00\x0b\x18\x00\x02\x40\x10\x00\xbd\x44\x00\x00\x00\x00\x00\x00\xf4\x7f\xbd\x51\x45\x0d\x00\x0f\x0b\x00\x0b\x0f\x00\x02\x40\x10\x01\x42\x00\x51\x45\x0d\x00\x0f\x0b\x00\x0b\x18\x00\x02\x40\x10\x01\x42\x80\x80\x80\x80\x80\x80\x80\xfa\xff\x00\x51\x45\x0d\x00\x0f\x0b\x00\x0b\x18\x00\x02\x40\x10\x00\xbd\x44\x00\x00\x00\x00\x00\x00\xf4\x7f\xbd\x51\x45\x0d\x00\x0f\x0b\x00\x0b\x0f\x00\x02\x40\x10\x01\x42\x00\x51\x45\x0d\x00\x0f\x0b\x00\x0b\x18\x00\x02\x40\x10\x01\x42\x80\x80\x80\x80\x80\x80\x80\xfa\xff\x00\x51\x45\x0d\x00\x0f\x0b\x00\x0b\x18\x00\x02\x40\x10\x00\xbd\x44\x00\x00\x00\x00\x00\x00\xf4\x7f\xbd\x51\x45\x0d\x00\x0f\x0b\x00\x0b\x0b\x0e\x01\x00\x41\x00\x0b\x08\x00\x00\x00\x00\x00\x00\xf4\x7f");
assert_return(() => $$.exports["assert_0"]());
assert_return(() => $$.exports["assert_1"]());
$$.exports["reset"]();
assert_return(() => $$.exports["assert_2"]());
assert_return(() => $$.exports["f64.load"](), 0.0);
$$.exports["f64.store"]();
assert_return(() => $$.exports["assert_3"]());
assert_return(() => $$.exports["assert_4"]());
$$.exports["reset"]();
assert_return(() => $$.exports["assert_5"]());
assert_return(() => $$.exports["f64.load"](), 0.0);
$$.exports["i64.store"]();
assert_return(() => $$.exports["assert_6"]());
assert_return(() => $$.exports["assert_7"]());
$$ = instance("\x00\x61\x73\x6d\x0d\x00\x00\x00\x01\x0c\x03\x60\x00\x01\x7d\x60\x00\x01\x7f\x60\x00\x00\x03\x09\x08\x00\x01\x02\x02\x02\x02\x02\x02\x05\x04\x01\x01\x01\x01\x07\x58\x08\x08\x66\x33\x32\x2e\x6c\x6f\x61\x64\x00\x00\x08\x69\x33\x32\x2e\x6c\x6f\x61\x64\x00\x01\x09\x66\x33\x32\x2e\x73\x74\x6f\x72\x65\x00\x02\x09\x69\x33\x32\x2e\x73\x74\x6f\x72\x65\x00\x03\x05\x72\x65\x73\x65\x74\x00\x04\x08\x61\x73\x73\x65\x72\x74\x5f\x30\x00\x05\x08\x61\x73\x73\x65\x72\x74\x5f\x31\x00\x06\x08\x61\x73\x73\x65\x72\x74\x5f\x32\x00\x07\x0a\x75\x08\x07\x00\x41\x01\x2a\x02\x00\x0b\x07\x00\x41\x01\x28\x02\x00\x0b\x0c\x00\x41\x01\x43\x00\x00\xa0\x7f\x38\x02\x00\x0b\x0d\x00\x41\x01\x41\x80\x80\x80\xfd\x07\x36\x02\x00\x0b\x09\x00\x41\x01\x41\x00\x36\x02\x00\x0b\x14\x00\x02\x40\x10\x00\xbc\x43\x00\x00\xa0\x7f\xbc\x46\x45\x0d\x00\x0f\x0b\x00\x0b\x14\x00\x02\x40\x10\x00\xbc\x43\x00\x00\xa0\x7f\xbc\x46\x45\x0d\x00\x0f\x0b\x00\x0b\x14\x00\x02\x40\x10\x00\xbc\x43\x00\x00\xa0\x7f\xbc\x46\x45\x0d\x00\x0f\x0b\x00\x0b\x0b\x0b\x01\x00\x41\x00\x0b\x05\x00\x00\x00\xa0\x7f");
assert_return(() => $$.exports["i32.load"](), 2141192192);
assert_return(() => $$.exports["assert_0"]());
$$.exports["reset"]();
assert_return(() => $$.exports["i32.load"](), 0);
assert_return(() => $$.exports["f32.load"](), f32(0.0));
$$.exports["f32.store"]();
assert_return(() => $$.exports["i32.load"](), 2141192192);
assert_return(() => $$.exports["assert_1"]());
$$.exports["reset"]();
assert_return(() => $$.exports["i32.load"](), 0);
assert_return(() => $$.exports["f32.load"](), f32(0.0));
$$.exports["i32.store"]();
assert_return(() => $$.exports["i32.load"](), 2141192192);
assert_return(() => $$.exports["assert_2"]());
$$ = instance("\x00\x61\x73\x6d\x0d\x00\x00\x00\x01\x0c\x03\x60\x00\x01\x7c\x60\x00\x01\x7e\x60\x00\x00\x03\x0e\x0d\x00\x01\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x05\x04\x01\x01\x01\x01\x07\x8f\x01\x0d\x08\x66\x36\x34\x2e\x6c\x6f\x61\x64\x00\x00\x08\x69\x36\x34\x2e\x6c\x6f\x61\x64\x00\x01\x09\x66\x36\x34\x2e\x73\x74\x6f\x72\x65\x00\x02\x09\x69\x36\x34\x2e\x73\x74\x6f\x72\x65\x00\x03\x05\x72\x65\x73\x65\x74\x00\x04\x08\x61\x73\x73\x65\x72\x74\x5f\x30\x00\x05\x08\x61\x73\x73\x65\x72\x74\x5f\x31\x00\x06\x08\x61\x73\x73\x65\x72\x74\x5f\x32\x00\x07\x08\x61\x73\x73\x65\x72\x74\x5f\x33\x00\x08\x08\x61\x73\x73\x65\x72\x74\x5f\x34\x00\x09\x08\x61\x73\x73\x65\x72\x74\x5f\x35\x00\x0a\x08\x61\x73\x73\x65\x72\x74\x5f\x36\x00\x0b\x08\x61\x73\x73\x65\x72\x74\x5f\x37\x00\x0c\x0a\xf5\x01\x0d\x07\x00\x41\x01\x2b\x03\x00\x0b\x07\x00\x41\x01\x29\x03\x00\x0b\x10\x00\x41\x01\x44\x00\x00\x00\x00\x00\x00\xf4\x7f\x39\x03\x00\x0b\x12\x00\x41\x01\x42\x80\x80\x80\x80\x80\x80\x80\xfa\xff\x00\x37\x03\x00\x0b\x09\x00\x41\x01\x42\x00\x37\x03\x00\x0b\x18\x00\x02\x40\x10\x01\x42\x80\x80\x80\x80\x80\x80\x80\xfa\xff\x00\x51\x45\x0d\x00\x0f\x0b\x00\x0b\x18\x00\x02\x40\x10\x00\xbd\x44\x00\x00\x00\x00\x00\x00\xf4\x7f\xbd\x51\x45\x0d\x00\x0f\x0b\x00\x0b\x0f\x00\x02\x40\x10\x01\x42\x00\x51\x45\x0d\x00\x0f\x0b\x00\x0b\x18\x00\x02\x40\x10\x01\x42\x80\x80\x80\x80\x80\x80\x80\xfa\xff\x00\x51\x45\x0d\x00\x0f\x0b\x00\x0b\x18\x00\x02\x40\x10\x00\xbd\x44\x00\x00\x00\x00\x00\x00\xf4\x7f\xbd\x51\x45\x0d\x00\x0f\x0b\x00\x0b\x0f\x00\x02\x40\x10\x01\x42\x00\x51\x45\x0d\x00\x0f\x0b\x00\x0b\x18\x00\x02\x40\x10\x01\x42\x80\x80\x80\x80\x80\x80\x80\xfa\xff\x00\x51\x45\x0d\x00\x0f\x0b\x00\x0b\x18\x00\x02\x40\x10\x00\xbd\x44\x00\x00\x00\x00\x00\x00\xf4\x7f\xbd\x51\x45\x0d\x00\x0f\x0b\x00\x0b\x0b\x0f\x01\x00\x41\x00\x0b\x09\x00\x00\x00\x00\x00\x00\x00\xf4\x7f");
assert_return(() => $$.exports["assert_0"]());
assert_return(() => $$.exports["assert_1"]());
$$.exports["reset"]();
assert_return(() => $$.exports["assert_2"]());
assert_return(() => $$.exports["f64.load"](), 0.0);
$$.exports["f64.store"]();
assert_return(() => $$.exports["assert_3"]());
assert_return(() => $$.exports["assert_4"]());
$$.exports["reset"]();
assert_return(() => $$.exports["assert_5"]());
assert_return(() => $$.exports["f64.load"](), 0.0);
$$.exports["i64.store"]();
assert_return(() => $$.exports["assert_6"]());
assert_return(() => $$.exports["assert_7"]());
$$ = instance("\x00\x61\x73\x6d\x0d\x00\x00\x00\x01\x0c\x03\x60\x00\x01\x7d\x60\x00\x01\x7f\x60\x00\x00\x03\x09\x08\x00\x01\x02\x02\x02\x02\x02\x02\x05\x04\x01\x01\x01\x01\x07\x58\x08\x08\x66\x33\x32\x2e\x6c\x6f\x61\x64\x00\x00\x08\x69\x33\x32\x2e\x6c\x6f\x61\x64\x00\x01\x09\x66\x33\x32\x2e\x73\x74\x6f\x72\x65\x00\x02\x09\x69\x33\x32\x2e\x73\x74\x6f\x72\x65\x00\x03\x05\x72\x65\x73\x65\x74\x00\x04\x08\x61\x73\x73\x65\x72\x74\x5f\x30\x00\x05\x08\x61\x73\x73\x65\x72\x74\x5f\x31\x00\x06\x08\x61\x73\x73\x65\x72\x74\x5f\x32\x00\x07\x0a\x75\x08\x07\x00\x41\x00\x2a\x02\x00\x0b\x07\x00\x41\x00\x28\x02\x00\x0b\x0c\x00\x41\x00\x43\x01\x00\xd0\x7f\x38\x02\x00\x0b\x0d\x00\x41\x00\x41\x81\x80\xc0\xfe\x07\x36\x02\x00\x0b\x09\x00\x41\x00\x41\x00\x36\x02\x00\x0b\x14\x00\x02\x40\x10\x00\xbc\x43\x01\x00\xd0\x7f\xbc\x46\x45\x0d\x00\x0f\x0b\x00\x0b\x14\x00\x02\x40\x10\x00\xbc\x43\x01\x00\xd0\x7f\xbc\x46\x45\x0d\x00\x0f\x0b\x00\x0b\x14\x00\x02\x40\x10\x00\xbc\x43\x01\x00\xd0\x7f\xbc\x46\x45\x0d\x00\x0f\x0b\x00\x0b\x0b\x0a\x01\x00\x41\x00\x0b\x04\x01\x00\xd0\x7f");
assert_return(() => $$.exports["i32.load"](), 2144337921);
assert_return(() => $$.exports["assert_0"]());
$$.exports["reset"]();
assert_return(() => $$.exports["i32.load"](), 0);
assert_return(() => $$.exports["f32.load"](), f32(0.0));
$$.exports["f32.store"]();
assert_return(() => $$.exports["i32.load"](), 2144337921);
assert_return(() => $$.exports["assert_1"]());
$$.exports["reset"]();
assert_return(() => $$.exports["i32.load"](), 0);
assert_return(() => $$.exports["f32.load"](), f32(0.0));
$$.exports["i32.store"]();
assert_return(() => $$.exports["i32.load"](), 2144337921);
assert_return(() => $$.exports["assert_2"]());
$$ = instance("\x00\x61\x73\x6d\x0d\x00\x00\x00\x01\x0c\x03\x60\x00\x01\x7c\x60\x00\x01\x7e\x60\x00\x00\x03\x0e\x0d\x00\x01\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x05\x04\x01\x01\x01\x01\x07\x8f\x01\x0d\x08\x66\x36\x34\x2e\x6c\x6f\x61\x64\x00\x00\x08\x69\x36\x34\x2e\x6c\x6f\x61\x64\x00\x01\x09\x66\x36\x34\x2e\x73\x74\x6f\x72\x65\x00\x02\x09\x69\x36\x34\x2e\x73\x74\x6f\x72\x65\x00\x03\x05\x72\x65\x73\x65\x74\x00\x04\x08\x61\x73\x73\x65\x72\x74\x5f\x30\x00\x05\x08\x61\x73\x73\x65\x72\x74\x5f\x31\x00\x06\x08\x61\x73\x73\x65\x72\x74\x5f\x32\x00\x07\x08\x61\x73\x73\x65\x72\x74\x5f\x33\x00\x08\x08\x61\x73\x73\x65\x72\x74\x5f\x34\x00\x09\x08\x61\x73\x73\x65\x72\x74\x5f\x35\x00\x0a\x08\x61\x73\x73\x65\x72\x74\x5f\x36\x00\x0b\x08\x61\x73\x73\x65\x72\x74\x5f\x37\x00\x0c\x0a\xf5\x01\x0d\x07\x00\x41\x00\x2b\x03\x00\x0b\x07\x00\x41\x00\x29\x03\x00\x0b\x10\x00\x41\x00\x44\x01\x00\x00\x00\x00\x00\xfc\x7f\x39\x03\x00\x0b\x12\x00\x41\x00\x42\x81\x80\x80\x80\x80\x80\x80\xfe\xff\x00\x37\x03\x00\x0b\x09\x00\x41\x00\x42\x00\x37\x03\x00\x0b\x18\x00\x02\x40\x10\x01\x42\x81\x80\x80\x80\x80\x80\x80\xfe\xff\x00\x51\x45\x0d\x00\x0f\x0b\x00\x0b\x18\x00\x02\x40\x10\x00\xbd\x44\x01\x00\x00\x00\x00\x00\xfc\x7f\xbd\x51\x45\x0d\x00\x0f\x0b\x00\x0b\x0f\x00\x02\x40\x10\x01\x42\x00\x51\x45\x0d\x00\x0f\x0b\x00\x0b\x18\x00\x02\x40\x10\x01\x42\x81\x80\x80\x80\x80\x80\x80\xfe\xff\x00\x51\x45\x0d\x00\x0f\x0b\x00\x0b\x18\x00\x02\x40\x10\x00\xbd\x44\x01\x00\x00\x00\x00\x00\xfc\x7f\xbd\x51\x45\x0d\x00\x0f\x0b\x00\x0b\x0f\x00\x02\x40\x10\x01\x42\x00\x51\x45\x0d\x00\x0f\x0b\x00\x0b\x18\x00\x02\x40\x10\x01\x42\x81\x80\x80\x80\x80\x80\x80\xfe\xff\x00\x51\x45\x0d\x00\x0f\x0b\x00\x0b\x18\x00\x02\x40\x10\x00\xbd\x44\x01\x00\x00\x00\x00\x00\xfc\x7f\xbd\x51\x45\x0d\x00\x0f\x0b\x00\x0b\x0b\x0e\x01\x00\x41\x00\x0b\x08\x01\x00\x00\x00\x00\x00\xfc\x7f");
assert_return(() => $$.exports["assert_0"]());
assert_return(() => $$.exports["assert_1"]());
$$.exports["reset"]();
assert_return(() => $$.exports["assert_2"]());
assert_return(() => $$.exports["f64.load"](), 0.0);
$$.exports["f64.store"]();
assert_return(() => $$.exports["assert_3"]());
assert_return(() => $$.exports["assert_4"]());
$$.exports["reset"]();
assert_return(() => $$.exports["assert_5"]());
assert_return(() => $$.exports["f64.load"](), 0.0);
$$.exports["i64.store"]();
assert_return(() => $$.exports["assert_6"]());
assert_return(() => $$.exports["assert_7"]());
